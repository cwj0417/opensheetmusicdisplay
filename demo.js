/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/fflate/esm/browser.js":
/*!********************************************!*\
  !*** ./node_modules/fflate/esm/browser.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AsyncCompress: () => (/* binding */ AsyncGzip),
/* harmony export */   AsyncDecompress: () => (/* binding */ AsyncDecompress),
/* harmony export */   AsyncDeflate: () => (/* binding */ AsyncDeflate),
/* harmony export */   AsyncGunzip: () => (/* binding */ AsyncGunzip),
/* harmony export */   AsyncGzip: () => (/* binding */ AsyncGzip),
/* harmony export */   AsyncInflate: () => (/* binding */ AsyncInflate),
/* harmony export */   AsyncUnzlib: () => (/* binding */ AsyncUnzlib),
/* harmony export */   AsyncZlib: () => (/* binding */ AsyncZlib),
/* harmony export */   Compress: () => (/* binding */ Gzip),
/* harmony export */   Decompress: () => (/* binding */ Decompress),
/* harmony export */   Deflate: () => (/* binding */ Deflate),
/* harmony export */   Gunzip: () => (/* binding */ Gunzip),
/* harmony export */   Gzip: () => (/* binding */ Gzip),
/* harmony export */   Inflate: () => (/* binding */ Inflate),
/* harmony export */   Unzlib: () => (/* binding */ Unzlib),
/* harmony export */   Zlib: () => (/* binding */ Zlib),
/* harmony export */   compress: () => (/* binding */ gzip),
/* harmony export */   compressSync: () => (/* binding */ gzipSync),
/* harmony export */   decompress: () => (/* binding */ decompress),
/* harmony export */   decompressSync: () => (/* binding */ decompressSync),
/* harmony export */   deflate: () => (/* binding */ deflate),
/* harmony export */   deflateSync: () => (/* binding */ deflateSync),
/* harmony export */   gunzip: () => (/* binding */ gunzip),
/* harmony export */   gunzipSync: () => (/* binding */ gunzipSync),
/* harmony export */   gzip: () => (/* binding */ gzip),
/* harmony export */   gzipSync: () => (/* binding */ gzipSync),
/* harmony export */   inflate: () => (/* binding */ inflate),
/* harmony export */   inflateSync: () => (/* binding */ inflateSync),
/* harmony export */   strFromU8: () => (/* binding */ strFromU8),
/* harmony export */   strToU8: () => (/* binding */ strToU8),
/* harmony export */   unzip: () => (/* binding */ unzip),
/* harmony export */   unzipSync: () => (/* binding */ unzipSync),
/* harmony export */   unzlib: () => (/* binding */ unzlib),
/* harmony export */   unzlibSync: () => (/* binding */ unzlibSync),
/* harmony export */   zip: () => (/* binding */ zip),
/* harmony export */   zipSync: () => (/* binding */ zipSync),
/* harmony export */   zlib: () => (/* binding */ zlib),
/* harmony export */   zlibSync: () => (/* binding */ zlibSync)
/* harmony export */ });
// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
// Much of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// Many optimizations have been made, so the bundle size is ultimately smaller but performance is similar.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var ch2 = {};
var wk = (function (c, id, msg, transfer, cb) {
    var u = ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], { type: 'text/javascript' })));
    var w = new Worker(u);
    w.onerror = function (e) { return cb(e.error, null); };
    w.onmessage = function (e) { return cb(null, e.data); };
    w.postMessage(msg, transfer);
    return w;
});

// aliases for shorter compressed code (most minifers don't do this)
var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
// fixed length extra bits
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);
// fixed distance extra bits
// see fleb note
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);
// code length index map
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
// get base, reverse index map from extra bits
var freb = function (eb, start) {
    var b = new u16(31);
    for (var i = 0; i < 31; ++i) {
        b[i] = start += 1 << eb[i - 1];
    }
    // numbers here are at max 18 bits
    var r = new u32(b[30]);
    for (var i = 1; i < 30; ++i) {
        for (var j = b[i]; j < b[i + 1]; ++j) {
            r[j] = ((j - b[i]) << 5) | i;
        }
    }
    return [b, r];
};
var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
// we can ignore the fact that the other numbers are wrong; they never happen anyway
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0), fd = _b[0], revfd = _b[1];
// map of value to reverse (assuming 16 bits)
var rev = new u16(32768);
for (var i = 0; i < 32768; ++i) {
    // reverse table algorithm from SO
    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);
    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);
    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);
    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;
}
// create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?
var hMap = (function (cd, mb, r) {
    var s = cd.length;
    // index
    var i = 0;
    // u16 "map": index -> # of codes with bit length = index
    var l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for (; i < s; ++i)
        ++l[cd[i] - 1];
    // u16 "map": index -> minimum code for bit length = index
    var le = new u16(mb);
    for (i = 0; i < mb; ++i) {
        le[i] = (le[i - 1] + l[i - 1]) << 1;
    }
    var co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        var rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
            // ignore 0 lengths
            if (cd[i]) {
                // num encoding both symbol and bits read
                var sv = (i << 4) | cd[i];
                // free bits
                var r_1 = mb - cd[i];
                // start value
                var v = le[cd[i] - 1]++ << r_1;
                // m is end value
                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {
                    // every 16 bit value starting with the code yields the same result
                    co[rev[v] >>> rvb] = sv;
                }
            }
        }
    }
    else {
        co = new u16(s);
        for (i = 0; i < s; ++i)
            co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);
    }
    return co;
});
// fixed length tree
var flt = new u8(288);
for (var i = 0; i < 144; ++i)
    flt[i] = 8;
for (var i = 144; i < 256; ++i)
    flt[i] = 9;
for (var i = 256; i < 280; ++i)
    flt[i] = 7;
for (var i = 280; i < 288; ++i)
    flt[i] = 8;
// fixed distance tree
var fdt = new u8(32);
for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
// fixed length map
var flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);
// fixed distance map
var fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);
// find max of array
var max = function (a) {
    var m = a[0];
    for (var i = 1; i < a.length; ++i) {
        if (a[i] > m)
            m = a[i];
    }
    return m;
};
// read d, starting at bit p and mask with m
var bits = function (d, p, m) {
    var o = (p / 8) >> 0;
    return ((d[o] | (d[o + 1] << 8)) >>> (p & 7)) & m;
};
// read d, starting at bit p continuing for at least 16 bits
var bits16 = function (d, p) {
    var o = (p / 8) >> 0;
    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >>> (p & 7));
};
// get end of byte
var shft = function (p) { return ((p / 8) >> 0) + (p & 7 && 1); };
// typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice
var slc = function (v, s, e) {
    if (s == null || s < 0)
        s = 0;
    if (e == null || e > v.length)
        e = v.length;
    // can't use .constructor in case user-supplied
    var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
// expands raw DEFLATE data
var inflt = function (dat, buf, st) {
    // source length
    var sl = dat.length;
    // have to estimate size
    var noBuf = !buf || st;
    // no state
    var noSt = !st || st.i;
    if (!st)
        st = {};
    // Assumes roughly 33% compression ratio average
    if (!buf)
        buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    var cbuf = function (l) {
        var bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            var nbuf = new u8(Math.max(bl * 2, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    // total bits
    var tbts = sl * 8;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            st.f = final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;
                if (t > sl) {
                    if (noSt)
                        throw 'unexpected EOF';
                    break;
                }
                // ensure size
                if (noBuf)
                    cbuf(bt + l);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l, st.p = pos = t * 8;
                continue;
            }
            else if (type == 1)
                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                var tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                var ldt = new u8(tl);
                // code length tree
                var clt = new u8(19);
                for (var i = 0; i < hcLen; ++i) {
                    // use index map to get real code
                    clt[clim[i]] = bits(dat, pos + i * 3, 7);
                }
                pos += hcLen * 3;
                // code lengths bits
                var clb = max(clt), clbmsk = (1 << clb) - 1;
                if (!noSt && pos + tl * (clb + 7) > tbts)
                    break;
                // code lengths map
                var clm = hMap(clt, clb, 1);
                for (var i = 0; i < tl;) {
                    var r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    var s = r >>> 4;
                    // code length to copy
                    if (s < 16) {
                        ldt[i++] = s;
                    }
                    else {
                        //  copy   count
                        var c = 0, n = 0;
                        if (s == 16)
                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                        else if (s == 17)
                            n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18)
                            n = 11 + bits(dat, pos, 127), pos += 7;
                        while (n--)
                            ldt[i++] = c;
                    }
                }
                //    length tree                 distance tree
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            }
            else
                throw 'invalid block type';
            if (pos > tbts)
                throw 'unexpected EOF';
        }
        // Make sure the buffer can hold this + the largest possible addition
        // Maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf)
            cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var mxa = lbt + dbt + 18;
        while (noSt || pos + mxa < tbts) {
            // bits read, code
            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts)
                throw 'unexpected EOF';
            if (!c)
                throw 'invalid length/literal';
            if (sym < 256)
                buf[bt++] = sym;
            else if (sym == 256) {
                lm = null;
                break;
            }
            else {
                var add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    var i = sym - 257, b = fleb[i];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i];
                    pos += b;
                }
                // dist
                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d)
                    throw 'invalid distance';
                pos += d & 15;
                var dt = fd[dsym];
                if (dsym > 3) {
                    var b = fdeb[dsym];
                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;
                }
                if (pos > tbts)
                    throw 'unexpected EOF';
                if (noBuf)
                    cbuf(bt + 131072);
                var end = bt + add;
                for (; bt < end; bt += 4) {
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = pos, st.b = bt;
        if (lm)
            final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
// starting at p, write the minimum number of bits that can hold v to d
var wbits = function (d, p, v) {
    v <<= p & 7;
    var o = (p / 8) >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
};
// starting at p, write the minimum number of bits (>8) that can hold v to d
var wbits16 = function (d, p, v) {
    v <<= p & 7;
    var o = (p / 8) >> 0;
    d[o] |= v;
    d[o + 1] |= v >>> 8;
    d[o + 2] |= v >>> 16;
};
// creates code lengths from a frequency table
var hTree = function (d, mb) {
    // Need extra info to make a tree
    var t = [];
    for (var i = 0; i < d.length; ++i) {
        if (d[i])
            t.push({ s: i, f: d[i] });
    }
    var s = t.length;
    var t2 = t.slice();
    if (!s)
        return [new u8(0), 0];
    if (s == 1) {
        var v = new u8(t[0].s + 1);
        v[t[0].s] = 1;
        return [v, 1];
    }
    t.sort(function (a, b) { return a.f - b.f; });
    // after i2 reaches last ind, will be stopped
    // freq must be greater than largest possible number of symbols
    t.push({ s: -1, f: 25001 });
    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;
    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };
    // efficient algorithm from UZIP.js
    // i0 is lookbehind, i2 is lookahead - after processing two low-freq
    // symbols that combined have high freq, will start processing i2 (high-freq,
    // non-composite) symbols instead
    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/
    while (i1 != s - 1) {
        l = t[t[i0].f < t[i2].f ? i0++ : i2++];
        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };
    }
    var maxSym = t2[0].s;
    for (var i = 1; i < s; ++i) {
        if (t2[i].s > maxSym)
            maxSym = t2[i].s;
    }
    // code lengths
    var tr = new u16(maxSym + 1);
    // max bits in tree
    var mbt = ln(t[i1 - 1], tr, 0);
    if (mbt > mb) {
        // more algorithms from UZIP.js
        // TODO: find out how this code works (debt)
        //  ind    debt
        var i = 0, dt = 0;
        //    left            cost
        var lft = mbt - mb, cst = 1 << lft;
        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });
        for (; i < s; ++i) {
            var i2_1 = t2[i].s;
            if (tr[i2_1] > mb) {
                dt += cst - (1 << (mbt - tr[i2_1]));
                tr[i2_1] = mb;
            }
            else
                break;
        }
        dt >>>= lft;
        while (dt > 0) {
            var i2_2 = t2[i].s;
            if (tr[i2_2] < mb)
                dt -= 1 << (mb - tr[i2_2]++ - 1);
            else
                ++i;
        }
        for (; i >= 0 && dt; --i) {
            var i2_3 = t2[i].s;
            if (tr[i2_3] == mb) {
                --tr[i2_3];
                ++dt;
            }
        }
        mbt = mb;
    }
    return [new u8(tr), mbt];
};
// get the max length and assign length codes
var ln = function (n, l, d) {
    return n.s == -1
        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))
        : (l[n.s] = d);
};
// length codes generation
var lc = function (c) {
    var s = c.length;
    // Note that the semicolon was intentional
    while (s && !c[--s])
        ;
    var cl = new u16(++s);
    //  ind      num         streak
    var cli = 0, cln = c[0], cls = 1;
    var w = function (v) { cl[cli++] = v; };
    for (var i = 1; i <= s; ++i) {
        if (c[i] == cln && i != s)
            ++cls;
        else {
            if (!cln && cls > 2) {
                for (; cls > 138; cls -= 138)
                    w(32754);
                if (cls > 2) {
                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);
                    cls = 0;
                }
            }
            else if (cls > 3) {
                w(cln), --cls;
                for (; cls > 6; cls -= 6)
                    w(8304);
                if (cls > 2)
                    w(((cls - 3) << 5) | 8208), cls = 0;
            }
            while (cls--)
                w(cln);
            cls = 1;
            cln = c[i];
        }
    }
    return [cl.subarray(0, cli), s];
};
// calculate the length of output from tree, code lengths
var clen = function (cf, cl) {
    var l = 0;
    for (var i = 0; i < cl.length; ++i)
        l += cf[i] * cl[i];
    return l;
};
// writes a fixed block
// returns the new bit pos
var wfblk = function (out, pos, dat) {
    // no need to write 00 as type: TypedArray defaults to 0
    var s = dat.length;
    var o = shft(pos + 2);
    out[o] = s & 255;
    out[o + 1] = s >>> 8;
    out[o + 2] = out[o] ^ 255;
    out[o + 3] = out[o + 1] ^ 255;
    for (var i = 0; i < s; ++i)
        out[o + i + 4] = dat[i];
    return (o + 4 + s) * 8;
};
// writes a block
var wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
    wbits(out, p++, final);
    ++lf[256];
    var _a = hTree(lf, 15), dlt = _a[0], mlb = _a[1];
    var _b = hTree(df, 15), ddt = _b[0], mdb = _b[1];
    var _c = lc(dlt), lclt = _c[0], nlc = _c[1];
    var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];
    var lcfreq = new u16(19);
    for (var i = 0; i < lclt.length; ++i)
        lcfreq[lclt[i] & 31]++;
    for (var i = 0; i < lcdt.length; ++i)
        lcfreq[lcdt[i] & 31]++;
    var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];
    var nlcc = 19;
    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)
        ;
    var flen = (bl + 5) << 3;
    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
    if (flen <= ftlen && flen <= dtlen)
        return wfblk(out, p, dat.subarray(bs, bs + bl));
    var lm, ll, dm, dl;
    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
    if (dtlen < ftlen) {
        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
        var llm = hMap(lct, mlcb, 0);
        wbits(out, p, nlc - 257);
        wbits(out, p + 5, ndc - 1);
        wbits(out, p + 10, nlcc - 4);
        p += 14;
        for (var i = 0; i < nlcc; ++i)
            wbits(out, p + 3 * i, lct[clim[i]]);
        p += 3 * nlcc;
        var lcts = [lclt, lcdt];
        for (var it = 0; it < 2; ++it) {
            var clct = lcts[it];
            for (var i = 0; i < clct.length; ++i) {
                var len = clct[i] & 31;
                wbits(out, p, llm[len]), p += lct[len];
                if (len > 15)
                    wbits(out, p, (clct[i] >>> 5) & 127), p += clct[i] >>> 12;
            }
        }
    }
    else {
        lm = flm, ll = flt, dm = fdm, dl = fdt;
    }
    for (var i = 0; i < li; ++i) {
        if (syms[i] > 255) {
            var len = (syms[i] >>> 18) & 31;
            wbits16(out, p, lm[len + 257]), p += ll[len + 257];
            if (len > 7)
                wbits(out, p, (syms[i] >>> 23) & 31), p += fleb[len];
            var dst = syms[i] & 31;
            wbits16(out, p, dm[dst]), p += dl[dst];
            if (dst > 3)
                wbits16(out, p, (syms[i] >>> 5) & 8191), p += fdeb[dst];
        }
        else {
            wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
        }
    }
    wbits16(out, p, lm[256]);
    return p + ll[256];
};
// deflate options (nice << 13) | chain
var deo = /*#__PURE__*/ new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
// empty
var et = /*#__PURE__*/ new u8(0);
// compresses data into a raw DEFLATE buffer
var dflt = function (dat, lvl, plvl, pre, post, lst) {
    var s = dat.length;
    var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);
    // writing to this writes to the output buffer
    var w = o.subarray(pre, o.length - post);
    var pos = 0;
    if (!lvl || s < 8) {
        for (var i = 0; i <= s; i += 65535) {
            // end
            var e = i + 65535;
            if (e < s) {
                // write full block
                pos = wfblk(w, pos, dat.subarray(i, e));
            }
            else {
                // write final block
                w[i] = lst;
                pos = wfblk(w, pos, dat.subarray(i, s));
            }
        }
    }
    else {
        var opt = deo[lvl - 1];
        var n = opt >>> 13, c = opt & 8191;
        var msk_1 = (1 << plvl) - 1;
        //    prev 2-byte val map    curr 2-byte val map
        var prev = new u16(32768), head = new u16(msk_1 + 1);
        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;
        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };
        // 24576 is an arbitrary number of maximum symbols per block
        // 424 buffer for last block
        var syms = new u32(25000);
        // length/literal freq   distance freq
        var lf = new u16(288), df = new u16(32);
        //  l/lcnt  exbits  index  l/lind  waitdx  bitpos
        var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;
        for (; i < s; ++i) {
            // hash value
            var hv = hsh(i);
            // index mod 32768
            var imod = i & 32767;
            // previous index with this value
            var pimod = head[hv];
            prev[imod] = pimod;
            head[hv] = imod;
            // We always should modify head and prev, but only add symbols if
            // this data is not yet processed ("wait" for wait index)
            if (wi <= i) {
                // bytes remaining
                var rem = s - i;
                if ((lc_1 > 7000 || li > 24576) && rem > 423) {
                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
                    li = lc_1 = eb = 0, bs = i;
                    for (var j = 0; j < 286; ++j)
                        lf[j] = 0;
                    for (var j = 0; j < 30; ++j)
                        df[j] = 0;
                }
                //  len    dist   chain
                var l = 2, d = 0, ch_1 = c, dif = (imod - pimod) & 32767;
                if (rem > 2 && hv == hsh(i - dif)) {
                    var maxn = Math.min(n, rem) - 1;
                    var maxd = Math.min(32767, i);
                    // max possible length
                    // not capped at dif because decompressors implement "rolling" index population
                    var ml = Math.min(258, rem);
                    while (dif <= maxd && --ch_1 && imod != pimod) {
                        if (dat[i + l] == dat[i + l - dif]) {
                            var nl = 0;
                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)
                                ;
                            if (nl > l) {
                                l = nl, d = dif;
                                // break out early when we reach "nice" (we are satisfied enough)
                                if (nl > maxn)
                                    break;
                                // now, find the rarest 2-byte sequence within this
                                // length of literals and search for that instead.
                                // Much faster than just using the start
                                var mmd = Math.min(dif, nl - 2);
                                var md = 0;
                                for (var j = 0; j < mmd; ++j) {
                                    var ti = (i - dif + j + 32768) & 32767;
                                    var pti = prev[ti];
                                    var cd = (ti - pti + 32768) & 32767;
                                    if (cd > md)
                                        md = cd, pimod = ti;
                                }
                            }
                        }
                        // check the previous match
                        imod = pimod, pimod = prev[imod];
                        dif += (imod - pimod + 32768) & 32767;
                    }
                }
                // d will be nonzero only when a match was found
                if (d) {
                    // store both dist and len data in one Uint32
                    // Make sure this is recognized as a len/dist with 28th bit (2^28)
                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];
                    var lin = revfl[l] & 31, din = revfd[d] & 31;
                    eb += fleb[lin] + fdeb[din];
                    ++lf[257 + lin];
                    ++df[din];
                    wi = i + l;
                    ++lc_1;
                }
                else {
                    syms[li++] = dat[i];
                    ++lf[dat[i]];
                }
            }
        }
        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
        // this is the easiest way to avoid needing to maintain state
        if (!lst)
            pos = wfblk(w, pos, et);
    }
    return slc(o, 0, pre + shft(pos) + post);
};
// CRC32 table
var crct = /*#__PURE__*/ (function () {
    var t = new u32(256);
    for (var i = 0; i < 256; ++i) {
        var c = i, k = 9;
        while (--k)
            c = ((c & 1) && 0xEDB88320) ^ (c >>> 1);
        t[i] = c;
    }
    return t;
})();
// CRC32
var crc = function () {
    var c = 0xFFFFFFFF;
    return {
        p: function (d) {
            // closures have awful performance
            var cr = c;
            for (var i = 0; i < d.length; ++i)
                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);
            c = cr;
        },
        d: function () { return c ^ 0xFFFFFFFF; }
    };
};
// Alder32
var adler = function () {
    var a = 1, b = 0;
    return {
        p: function (d) {
            // closures have awful performance
            var n = a, m = b;
            var l = d.length;
            for (var i = 0; i != l;) {
                var e = Math.min(i + 5552, l);
                for (; i < e; ++i)
                    n += d[i], m += n;
                n %= 65521, m %= 65521;
            }
            a = n, b = m;
        },
        d: function () { return ((a >>> 8) << 16 | (b & 255) << 8 | (b >>> 8)) + ((a & 255) << 23) * 2; }
    };
};
;
// deflate with opts
var dopt = function (dat, opt, pre, post, st) {
    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : (12 + opt.mem), pre, post, !st);
};
// Walmart object spread
var mrg = function (a, b) {
    var o = {};
    for (var k in a)
        o[k] = a[k];
    for (var k in b)
        o[k] = b[k];
    return o;
};
// worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.
var wcln = function (fn, fnStr, td) {
    var dt = fn();
    var st = fn.toString();
    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');
    for (var i = 0; i < dt.length; ++i) {
        var v = dt[i], k = ks[i];
        if (typeof v == 'function') {
            fnStr += ';' + k + '=';
            var st_1 = v.toString();
            if (v.prototype) {
                // for global objects
                if (st_1.indexOf('[native code]') != -1) {
                    var spInd = st_1.indexOf(' ', 8) + 1;
                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));
                }
                else {
                    fnStr += st_1;
                    for (var t in v.prototype)
                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();
                }
            }
            else
                fnStr += st_1;
        }
        else
            td[k] = v;
    }
    return [fnStr, td];
};
var ch = [];
// clone bufs
var cbfs = function (v) {
    var tl = [];
    for (var k in v) {
        if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32)
            tl.push((v[k] = new v[k].constructor(v[k])).buffer);
    }
    return tl;
};
// use a worker to execute code
var wrkr = function (fns, init, id, cb) {
    var _a;
    if (!ch[id]) {
        var fnStr = '', td_1 = {}, m = fns.length - 1;
        for (var i = 0; i < m; ++i)
            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];
        ch[id] = wcln(fns[m], fnStr, td_1);
    }
    var td = mrg({}, ch[id][1]);
    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);
};
// base async inflate fn
var bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8]; };
var bDflt = function () { return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };
// gzip extra
var gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };
// gunzip extra
var guze = function () { return [gzs, gzl]; };
// zlib extra
var zle = function () { return [zlh, wbytes, adler]; };
// unzlib extra
var zule = function () { return [zlv]; };
// post buf
var pbf = function (msg) { return postMessage(msg, [msg.buffer]); };
// get u8
var gu8 = function (o) { return o && o.size && new u8(o.size); };
// async helper
var cbify = function (dat, opts, fns, init, id, cb) {
    var w = wrkr(fns, init, id, function (err, dat) {
        w.terminate();
        cb(err, dat);
    });
    if (!opts.consume)
        dat = new u8(dat);
    w.postMessage([dat, opts], [dat.buffer]);
    return function () { w.terminate(); };
};
// auto stream
var astrm = function (strm) {
    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };
    return function (ev) { return strm.push(ev.data[0], ev.data[1]); };
};
// async stream attach
var astrmify = function (fns, strm, opts, init, id) {
    var t;
    var w = wrkr(fns, init, id, function (err, dat) {
        if (err)
            w.terminate(), strm.ondata.call(strm, err);
        else {
            if (dat[1])
                w.terminate();
            strm.ondata.call(strm, err, dat[0], dat[1]);
        }
    });
    w.postMessage(opts);
    strm.push = function (d, f) {
        if (t)
            throw 'stream finished';
        if (!strm.ondata)
            throw 'no stream handler';
        w.postMessage([d, t = f], [d.buffer]);
    };
    strm.terminate = function () { w.terminate(); };
};
// read 2 bytes
var b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };
// read 4 bytes
var b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16)) + (d[b + 3] << 23) * 2; };
// write bytes
var wbytes = function (d, b, v) {
    for (; v; ++b)
        d[b] = v, v >>>= 8;
};
// gzip header
var gzh = function (c, o) {
    var fn = o.filename;
    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix
    if (o.mtime != 0)
        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));
    if (fn) {
        c[3] = 8;
        for (var i = 0; i <= fn.length; ++i)
            c[i + 10] = fn.charCodeAt(i);
    }
};
// gzip footer: -8 to -4 = CRC, -4 to -0 is length
// gzip start
var gzs = function (d) {
    if (d[0] != 31 || d[1] != 139 || d[2] != 8)
        throw 'invalid gzip data';
    var flg = d[3];
    var st = 10;
    if (flg & 4)
        st += d[10] | (d[11] << 8) + 2;
    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])
        ;
    return st + (flg & 2);
};
// gzip length
var gzl = function (d) {
    var l = d.length;
    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) + (2 * (d[l - 1] << 23));
};
// gzip header length
var gzhl = function (o) { return 10 + ((o.filename && (o.filename.length + 1)) || 0); };
// zlib header
var zlh = function (c, o) {
    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
    c[0] = 120, c[1] = (fl << 6) | (fl ? (32 - 2 * fl) : 1);
};
// zlib valid
var zlv = function (d) {
    if ((d[0] & 15) != 8 || (d[0] >>> 4) > 7 || ((d[0] << 8 | d[1]) % 31))
        throw 'invalid zlib data';
    if (d[1] & 32)
        throw 'invalid zlib data: preset dictionaries not supported';
};
function AsyncCmpStrm(opts, cb) {
    if (!cb && typeof opts == 'function')
        cb = opts, opts = {};
    this.ondata = cb;
    return opts;
}
// zlib footer: -4 to -0 is Adler32
/**
 * Streaming DEFLATE compression
 */
var Deflate = /*#__PURE__*/ (function () {
    function Deflate(opts, cb) {
        if (!cb && typeof opts == 'function')
            cb = opts, opts = {};
        this.ondata = cb;
        this.o = opts || {};
    }
    Deflate.prototype.p = function (c, f) {
        this.ondata(dopt(c, this.o, 0, 0, !f), f);
    };
    /**
     * Pushes a chunk to be deflated
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Deflate.prototype.push = function (chunk, final) {
        if (this.d)
            throw 'stream finished';
        if (!this.ondata)
            throw 'no stream handler';
        this.d = final;
        this.p(chunk, final || false);
    };
    return Deflate;
}());

/**
 * Asynchronous streaming DEFLATE compression
 */
var AsyncDeflate = /*#__PURE__*/ (function () {
    function AsyncDeflate(opts, cb) {
        astrmify([
            bDflt,
            function () { return [astrm, Deflate]; }
        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
            var strm = new Deflate(ev.data);
            onmessage = astrm(strm);
        }, 6);
    }
    return AsyncDeflate;
}());

function deflate(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bDflt,
    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);
}
/**
 * Compresses data with DEFLATE without any wrapper
 * @param data The data to compress
 * @param opts The compression options
 * @returns The deflated version of the data
 */
function deflateSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    return dopt(data, opts, 0, 0);
}
/**
 * Streaming DEFLATE decompression
 */
var Inflate = /*#__PURE__*/ (function () {
    /**
     * Creates an inflation stream
     * @param cb The callback to call whenever data is inflated
     */
    function Inflate(cb) {
        this.s = {};
        this.p = new u8(0);
        this.ondata = cb;
    }
    Inflate.prototype.e = function (c) {
        if (this.d)
            throw 'stream finished';
        if (!this.ondata)
            throw 'no stream handler';
        var l = this.p.length;
        var n = new u8(l + c.length);
        n.set(this.p), n.set(c, l), this.p = n;
    };
    Inflate.prototype.c = function (final) {
        this.d = this.s.i = final || false;
        var bts = this.s.b;
        var dt = inflt(this.p, this.o, this.s);
        this.ondata(slc(dt, bts, this.s.b), this.d);
        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
        this.p = slc(this.p, (this.s.p / 8) >> 0), this.s.p &= 7;
    };
    /**
     * Pushes a chunk to be inflated
     * @param chunk The chunk to push
     * @param final Whether this is the final chunk
     */
    Inflate.prototype.push = function (chunk, final) {
        this.e(chunk), this.c(final);
    };
    return Inflate;
}());

/**
 * Asynchronous streaming DEFLATE decompression
 */
var AsyncInflate = /*#__PURE__*/ (function () {
    /**
     * Creates an asynchronous inflation stream
     * @param cb The callback to call whenever data is deflated
     */
    function AsyncInflate(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            function () { return [astrm, Inflate]; }
        ], this, 0, function () {
            var strm = new Inflate();
            onmessage = astrm(strm);
        }, 7);
    }
    return AsyncInflate;
}());

function inflate(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bInflt
    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);
}
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function inflateSync(data, out) {
    return inflt(data, out);
}
// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.
/**
 * Streaming GZIP compression
 */
var Gzip = /*#__PURE__*/ (function () {
    function Gzip(opts, cb) {
        this.c = crc();
        this.l = 0;
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be GZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Gzip.prototype.push = function (chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Gzip.prototype.p = function (c, f) {
        this.c.p(c);
        this.l += c.length;
        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
        if (this.v)
            gzh(raw, this.o), this.v = 0;
        if (f)
            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
        this.ondata(raw, f);
    };
    return Gzip;
}());

/**
 * Asynchronous streaming GZIP compression
 */
var AsyncGzip = /*#__PURE__*/ (function () {
    function AsyncGzip(opts, cb) {
        astrmify([
            bDflt,
            gze,
            function () { return [astrm, Deflate, Gzip]; }
        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
            var strm = new Gzip(ev.data);
            onmessage = astrm(strm);
        }, 8);
    }
    return AsyncGzip;
}());

function gzip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bDflt,
        gze,
        function () { return [gzipSync]; }
    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);
}
/**
 * Compresses data with GZIP
 * @param data The data to compress
 * @param opts The compression options
 * @returns The gzipped version of the data
 */
function gzipSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    var c = crc(), l = data.length;
    c.p(data);
    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;
    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
/**
 * Streaming GZIP decompression
 */
var Gunzip = /*#__PURE__*/ (function () {
    /**
     * Creates a GUNZIP stream
     * @param cb The callback to call whenever data is inflated
     */
    function Gunzip(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be GUNZIPped
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Gunzip.prototype.push = function (chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            var s = gzs(this.p);
            if (s >= this.p.length && !final)
                return;
            this.p = this.p.subarray(s), this.v = 0;
        }
        if (final) {
            if (this.p.length < 8)
                throw 'invalid gzip stream';
            this.p = this.p.subarray(0, -8);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Gunzip;
}());

/**
 * Asynchronous streaming GZIP decompression
 */
var AsyncGunzip = /*#__PURE__*/ (function () {
    /**
     * Creates an asynchronous GUNZIP stream
     * @param cb The callback to call whenever data is deflated
     */
    function AsyncGunzip(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            guze,
            function () { return [astrm, Inflate, Gunzip]; }
        ], this, 0, function () {
            var strm = new Gunzip();
            onmessage = astrm(strm);
        }, 9);
    }
    return AsyncGunzip;
}());

function gunzip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bInflt,
        guze,
        function () { return [gunzipSync]; }
    ], function (ev) { return pbf(gunzipSync(ev.data[0])); }, 3, cb);
}
/**
 * Expands GZIP data
 * @param data The data to decompress
 * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.
 * @returns The decompressed version of the data
 */
function gunzipSync(data, out) {
    return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));
}
/**
 * Streaming Zlib compression
 */
var Zlib = /*#__PURE__*/ (function () {
    function Zlib(opts, cb) {
        this.c = adler();
        this.v = 1;
        Deflate.call(this, opts, cb);
    }
    /**
     * Pushes a chunk to be zlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Zlib.prototype.push = function (chunk, final) {
        Deflate.prototype.push.call(this, chunk, final);
    };
    Zlib.prototype.p = function (c, f) {
        this.c.p(c);
        var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
        if (this.v)
            zlh(raw, this.o), this.v = 0;
        if (f)
            wbytes(raw, raw.length - 4, this.c.d());
        this.ondata(raw, f);
    };
    return Zlib;
}());

/**
 * Asynchronous streaming Zlib compression
 */
var AsyncZlib = /*#__PURE__*/ (function () {
    function AsyncZlib(opts, cb) {
        astrmify([
            bDflt,
            zle,
            function () { return [astrm, Deflate, Zlib]; }
        ], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
            var strm = new Zlib(ev.data);
            onmessage = astrm(strm);
        }, 10);
    }
    return AsyncZlib;
}());

function zlib(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bDflt,
        zle,
        function () { return [zlibSync]; }
    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);
}
/**
 * Compress data with Zlib
 * @param data The data to compress
 * @param opts The compression options
 * @returns The zlib-compressed version of the data
 */
function zlibSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    var a = adler();
    a.p(data);
    var d = dopt(data, opts, 2, 4);
    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
}
/**
 * Streaming Zlib decompression
 */
var Unzlib = /*#__PURE__*/ (function () {
    /**
     * Creates a Zlib decompression stream
     * @param cb The callback to call whenever data is inflated
     */
    function Unzlib(cb) {
        this.v = 1;
        Inflate.call(this, cb);
    }
    /**
     * Pushes a chunk to be unzlibbed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Unzlib.prototype.push = function (chunk, final) {
        Inflate.prototype.e.call(this, chunk);
        if (this.v) {
            if (this.p.length < 2 && !final)
                return;
            this.p = this.p.subarray(2), this.v = 0;
        }
        if (final) {
            if (this.p.length < 4)
                throw 'invalid zlib stream';
            this.p = this.p.subarray(0, -4);
        }
        // necessary to prevent TS from using the closure value
        // This allows for workerization to function correctly
        Inflate.prototype.c.call(this, final);
    };
    return Unzlib;
}());

/**
 * Asynchronous streaming Zlib decompression
 */
var AsyncUnzlib = /*#__PURE__*/ (function () {
    /**
     * Creates an asynchronous Zlib decompression stream
     * @param cb The callback to call whenever data is deflated
     */
    function AsyncUnzlib(cb) {
        this.ondata = cb;
        astrmify([
            bInflt,
            zule,
            function () { return [astrm, Inflate, Unzlib]; }
        ], this, 0, function () {
            var strm = new Unzlib();
            onmessage = astrm(strm);
        }, 11);
    }
    return AsyncUnzlib;
}());

function unzlib(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return cbify(data, opts, [
        bInflt,
        zule,
        function () { return [unzlibSync]; }
    ], function (ev) { return pbf(unzlibSync(ev.data[0], gu8(ev.data[1]))); }, 5, cb);
}
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
}
// Default algorithm for compression (used because having a known output size allows faster decompression)

// Default algorithm for compression (used because having a known output size allows faster decompression)

/**
 * Streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var Decompress = /*#__PURE__*/ (function () {
    /**
     * Creates a decompression stream
     * @param cb The callback to call whenever data is decompressed
     */
    function Decompress(cb) {
        this.G = Gunzip;
        this.I = Inflate;
        this.Z = Unzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    Decompress.prototype.push = function (chunk, final) {
        if (!this.ondata)
            throw 'no stream handler';
        if (!this.s) {
            if (this.p && this.p.length) {
                var n = new u8(this.p.length + chunk.length);
                n.set(this.p), n.set(chunk, this.p.length);
            }
            else
                this.p = chunk;
            if (this.p.length > 2) {
                var _this_1 = this;
                var cb = function () { _this_1.ondata.apply(_this_1, arguments); };
                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)
                    ? new this.G(cb)
                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))
                        ? new this.I(cb)
                        : new this.Z(cb);
                this.s.push(this.p, final);
                this.p = null;
            }
        }
        else
            this.s.push(chunk, final);
    };
    return Decompress;
}());

/**
 * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var AsyncDecompress = /*#__PURE__*/ (function () {
    /**
   * Creates an asynchronous decompression stream
   * @param cb The callback to call whenever data is decompressed
   */
    function AsyncDecompress(cb) {
        this.G = AsyncGunzip;
        this.I = AsyncInflate;
        this.Z = AsyncUnzlib;
        this.ondata = cb;
    }
    /**
     * Pushes a chunk to be decompressed
     * @param chunk The chunk to push
     * @param final Whether this is the last chunk
     */
    AsyncDecompress.prototype.push = function (chunk, final) {
        Decompress.prototype.push.call(this, chunk, final);
    };
    return AsyncDecompress;
}());

function decompress(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    return (data[0] == 31 && data[1] == 139 && data[2] == 8)
        ? gunzip(data, opts, cb)
        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))
            ? inflate(data, opts, cb)
            : unzlib(data, opts, cb);
}
/**
 * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function decompressSync(data, out) {
    return (data[0] == 31 && data[1] == 139 && data[2] == 8)
        ? gunzipSync(data, out)
        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))
            ? inflateSync(data, out)
            : unzlibSync(data, out);
}
// flatten a directory structure
var fltn = function (d, p, t, o) {
    for (var k in d) {
        var val = d[k], n = p + k;
        if (val instanceof u8)
            t[n] = [val, o];
        else if (Array.isArray(val))
            t[n] = [val[0], mrg(o, val[1])];
        else
            fltn(val, n + '/', t, o);
    }
};
/**
 * Converts a string into a Uint8Array for use with compression/decompression methods
 * @param str The string to encode
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless decoding a binary string.
 * @returns The string encoded in UTF-8/Latin-1 binary
 */
function strToU8(str, latin1) {
    var l = str.length;
    if (!latin1 && typeof TextEncoder != 'undefined')
        return new TextEncoder().encode(str);
    var ar = new u8(str.length + (str.length >>> 1));
    var ai = 0;
    var w = function (v) { ar[ai++] = v; };
    for (var i = 0; i < l; ++i) {
        if (ai + 5 > ar.length) {
            var n = new u8(ai + 8 + ((l - i) << 1));
            n.set(ar);
            ar = n;
        }
        var c = str.charCodeAt(i);
        if (c < 128 || latin1)
            w(c);
        else if (c < 2048)
            w(192 | (c >>> 6)), w(128 | (c & 63));
        else if (c > 55295 && c < 57344)
            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),
                w(240 | (c >>> 18)), w(128 | ((c >>> 12) & 63)), w(128 | ((c >>> 6) & 63)), w(128 | (c & 63));
        else
            w(224 | (c >>> 12)), w(128 | ((c >>> 6) & 63)), w(128 | (c & 63));
    }
    return slc(ar, 0, ai);
}
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */
function strFromU8(dat, latin1) {
    var r = '';
    if (!latin1 && typeof TextDecoder != 'undefined')
        return new TextDecoder().decode(dat);
    for (var i = 0; i < dat.length;) {
        var c = dat[i++];
        if (c < 128 || latin1)
            r += String.fromCharCode(c);
        else if (c < 224)
            r += String.fromCharCode((c & 31) << 6 | (dat[i++] & 63));
        else if (c < 240)
            r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | (dat[i++] & 63));
        else
            c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | (dat[i++] & 63)) - 65536,
                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));
    }
    return r;
}
;
// skip local zip header
var slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };
// read zip header
var zh = function (d, b, z) {
    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl;
    var _a = z ? z64e(d, es) : [b4(d, b + 20), b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];
    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
};
// read zip64 extra field
var z64e = function (d, b) {
    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
        ;
    return [b4(d, b + 12), b4(d, b + 4), b4(d, b + 20)];
};
// write zip header
var wzh = function (d, b, c, cmp, su, fn, u, o, ce, t) {
    var fl = fn.length, l = cmp.length;
    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
    if (ce != null)
        d[b] = 20, b += 2;
    d[b] = 20, b += 2; // spec compliance? what's that?
    d[b++] = (t == 8 && (o.level == 1 ? 6 : o.level < 6 ? 4 : o.level == 9 ? 2 : 0)), d[b++] = u && 8;
    d[b] = t, b += 2;
    var dt = new Date(o.mtime || Date.now()), y = dt.getFullYear() - 1980;
    if (y < 0 || y > 119)
        throw 'date not in range 1980-2099';
    wbytes(d, b, ((y << 24) * 2) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >>> 1));
    b += 4;
    wbytes(d, b, c);
    wbytes(d, b + 4, l);
    wbytes(d, b + 8, su);
    wbytes(d, b + 12, fl), b += 16; // skip extra field, comment
    if (ce != null)
        wbytes(d, b += 10, ce), b += 4;
    d.set(fn, b);
    b += fl;
    if (ce == null)
        d.set(cmp, b);
};
// write zip footer (end of central directory)
var wzf = function (o, b, c, d, e) {
    wbytes(o, b, 0x6054B50); // skip disk
    wbytes(o, b + 8, c);
    wbytes(o, b + 10, c);
    wbytes(o, b + 12, d);
    wbytes(o, b + 16, e);
};
function zip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        throw 'no callback';
    var r = {};
    fltn(data, '', r, opts);
    var k = Object.keys(r);
    var lft = k.length, o = 0, tot = 0;
    var slft = lft, files = new Array(lft);
    var term = [];
    var tAll = function () {
        for (var i = 0; i < term.length; ++i)
            term[i]();
    };
    var cbf = function () {
        var out = new u8(tot + 22), oe = o, cdl = tot - o;
        tot = 0;
        for (var i = 0; i < slft; ++i) {
            var f = files[i];
            try {
                wzh(out, tot, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
                wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, tot, f.t), o += 46 + f.n.length, tot += 30 + f.n.length + f.d.length;
            }
            catch (e) {
                return cb(e, null);
            }
        }
        wzf(out, o, files.length, cdl, oe);
        cb(null, out);
    };
    if (!lft)
        cbf();
    var _loop_1 = function (i) {
        var fn = k[i];
        var _a = r[fn], file = _a[0], p = _a[1];
        var c = crc(), m = file.length;
        c.p(file);
        var n = strToU8(fn), s = n.length;
        var t = p.level == 0 ? 0 : 8;
        var cbl = function (e, d) {
            if (e) {
                tAll();
                cb(e, null);
            }
            else {
                var l = d.length;
                files[i] = {
                    t: t,
                    d: d,
                    m: m,
                    c: c.d(),
                    u: fn.length != l,
                    n: n,
                    p: p
                };
                o += 30 + s + l;
                tot += 76 + 2 * s + l;
                if (!--lft)
                    cbf();
            }
        };
        if (n.length > 65535)
            cbl('filename too long', null);
        if (!t)
            cbl(null, file);
        else if (m < 160000) {
            try {
                cbl(null, deflateSync(file, p));
            }
            catch (e) {
                cbl(e, null);
            }
        }
        else
            term.push(deflate(file, p, cbl));
    };
    // Cannot use lft because it can decrease
    for (var i = 0; i < slft; ++i) {
        _loop_1(i);
    }
    return tAll;
}
/**
 * Synchronously creates a ZIP file. Prefer using `zip` for better performance
 * with more than one file.
 * @param data The directory structure for the ZIP archive
 * @param opts The main options, merged with per-file options
 * @returns The generated ZIP archive
 */
function zipSync(data, opts) {
    if (opts === void 0) { opts = {}; }
    var r = {};
    var files = [];
    fltn(data, '', r, opts);
    var o = 0;
    var tot = 0;
    for (var fn in r) {
        var _a = r[fn], file = _a[0], p = _a[1];
        var t = p.level == 0 ? 0 : 8;
        var n = strToU8(fn), s = n.length;
        if (n.length > 65535)
            throw 'filename too long';
        var d = t ? deflateSync(file, p) : file, l = d.length;
        var c = crc();
        c.p(file);
        files.push({
            t: t,
            d: d,
            m: file.length,
            c: c.d(),
            u: fn.length != s,
            n: n,
            o: o,
            p: p
        });
        o += 30 + s + l;
        tot += 76 + 2 * s + l;
    }
    var out = new u8(tot + 22), oe = o, cdl = tot - o;
    for (var i = 0; i < files.length; ++i) {
        var f = files[i];
        wzh(out, f.o, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
        wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, f.o, f.t), o += 46 + f.n.length;
    }
    wzf(out, o, files.length, cdl, oe);
    return out;
}
/**
 * Asynchronously decompresses a ZIP archive
 * @param data The raw compressed ZIP file
 * @param cb The callback to call with the decompressed files
 * @returns A function that can be used to immediately terminate the unzipping
 */
function unzip(data, cb) {
    if (typeof cb != 'function')
        throw 'no callback';
    var term = [];
    var tAll = function () {
        for (var i = 0; i < term.length; ++i)
            term[i]();
    };
    var files = {};
    var e = data.length - 22;
    for (; b4(data, e) != 0x6054B50; --e) {
        if (!e || data.length - e > 65558) {
            cb('invalid zip file', null);
            return;
        }
    }
    ;
    var lft = b2(data, e + 8);
    if (!lft)
        cb(null, {});
    var c = lft;
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50)
            throw 'invalid zip file';
        c = lft = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    var _loop_2 = function (i) {
        var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
        o = no;
        var cbl = function (e, d) {
            if (e) {
                tAll();
                cb(e, null);
            }
            else {
                files[fn] = d;
                if (!--lft)
                    cb(null, files);
            }
        };
        if (!c_1)
            cbl(null, slc(data, b, b + sc));
        else if (c_1 == 8) {
            var infl = data.subarray(b, b + sc);
            if (sc < 320000) {
                try {
                    cbl(null, inflateSync(infl, new u8(su)));
                }
                catch (e) {
                    cbl(e, null);
                }
            }
            else
                term.push(inflate(infl, { size: su }, cbl));
        }
        else
            cbl('unknown compression type ' + c_1, null);
    };
    for (var i = 0; i < c; ++i) {
        _loop_2(i);
    }
    return tAll;
}
/**
 * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better
 * performance with more than one file.
 * @param data The raw compressed ZIP file
 * @returns The decompressed files
 */
function unzipSync(data) {
    var files = {};
    var e = data.length - 22;
    for (; b4(data, e) != 0x6054B50; --e) {
        if (!e || data.length - e > 65558)
            throw 'invalid zip file';
    }
    ;
    var c = b2(data, e + 8);
    if (!c)
        return {};
    var o = b4(data, e + 16);
    var z = o == 4294967295;
    if (z) {
        e = b4(data, e - 12);
        if (b4(data, e) != 0x6064B50)
            throw 'invalid zip file';
        c = b4(data, e + 32);
        o = b4(data, e + 48);
    }
    for (var i = 0; i < c; ++i) {
        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
        o = no;
        if (!c_2)
            files[fn] = slc(data, b, b + sc);
        else if (c_2 == 8)
            files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));
        else
            throw 'unknown compression type ' + c_2;
    }
    return files;
}


/***/ }),

/***/ "./node_modules/jspdf/dist/jspdf.es.min.js":
/*!*************************************************!*\
  !*** ./node_modules/jspdf/dist/jspdf.es.min.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AcroForm: () => (/* binding */ St),
/* harmony export */   AcroFormAppearance: () => (/* binding */ At),
/* harmony export */   AcroFormButton: () => (/* binding */ mt),
/* harmony export */   AcroFormCheckBox: () => (/* binding */ wt),
/* harmony export */   AcroFormChoiceField: () => (/* binding */ ft),
/* harmony export */   AcroFormComboBox: () => (/* binding */ pt),
/* harmony export */   AcroFormEditBox: () => (/* binding */ gt),
/* harmony export */   AcroFormListBox: () => (/* binding */ dt),
/* harmony export */   AcroFormPasswordField: () => (/* binding */ Lt),
/* harmony export */   AcroFormPushButton: () => (/* binding */ vt),
/* harmony export */   AcroFormRadioButton: () => (/* binding */ bt),
/* harmony export */   AcroFormTextField: () => (/* binding */ Nt),
/* harmony export */   GState: () => (/* binding */ j),
/* harmony export */   ShadingPattern: () => (/* binding */ B),
/* harmony export */   TilingPattern: () => (/* binding */ M),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   jsPDF: () => (/* binding */ E)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var fflate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fflate */ "./node_modules/fflate/esm/browser.js");
/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.5.1 Built on 2022-01-28T15:37:57.791Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2021 yWorks GmbH, http://www.yworks.com
 *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, https://github.com/willowsystems
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */

var n=function(){return"undefined"!=typeof window?window:"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:this}();function i(){n.console&&"function"==typeof n.console.log&&n.console.log.apply(n.console,arguments)}var a={log:i,warn:function(t){n.console&&("function"==typeof n.console.warn?n.console.warn.apply(n.console,arguments):i.call(null,arguments))},error:function(t){n.console&&("function"==typeof n.console.error?n.console.error.apply(n.console,arguments):i(t))}};function o(t,e,r){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){l(n.response,e,r)},n.onerror=function(){a.error("could not download file")},n.send()}function s(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return e.status>=200&&e.status<=299}function c(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(r){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var u,h,l=n.saveAs||("object"!==("undefined"==typeof window?"undefined":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(window))||window!==n?function(){}:"undefined"!=typeof HTMLAnchorElement&&"download"in HTMLAnchorElement.prototype?function(t,e,r){var i=n.URL||n.webkitURL,a=document.createElement("a");e=e||t.name||"download",a.download=e,a.rel="noopener","string"==typeof t?(a.href=t,a.origin!==location.origin?s(a.href)?o(t,e,r):c(a,a.target="_blank"):c(a)):(a.href=i.createObjectURL(t),setTimeout((function(){i.revokeObjectURL(a.href)}),4e4),setTimeout((function(){c(a)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,r,n){if(r=r||e.name||"download","string"==typeof e)if(s(e))o(e,r,n);else{var i=document.createElement("a");i.href=e,i.target="_blank",setTimeout((function(){c(i)}))}else navigator.msSaveOrOpenBlob(function(e,r){return void 0===r?r={autoBom:!1}:"object"!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(r)&&(a.warn("Deprecated: Expected third argument to be a object"),r={autoBom:!r}),r.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob([String.fromCharCode(65279),e],{type:e.type}):e}(e,n),r)}:function(e,r,i,a){if((a=a||open("","_blank"))&&(a.document.title=a.document.body.innerText="downloading..."),"string"==typeof e)return o(e,r,i);var s="application/octet-stream"===e.type,c=/constructor/i.test(n.HTMLElement)||n.safari,u=/CriOS\/[\d]+/.test(navigator.userAgent);if((u||s&&c)&&"object"===("undefined"==typeof FileReader?"undefined":(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(FileReader))){var h=new FileReader;h.onloadend=function(){var t=h.result;t=u?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),a?a.location.href=t:location=t,a=null},h.readAsDataURL(e)}else{var l=n.URL||n.webkitURL,f=l.createObjectURL(e);a?a.location=f:location.href=f,a=null,setTimeout((function(){l.revokeObjectURL(f)}),4e4)}});
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */function f(t){var e;t=t||"",this.ok=!1,"#"==t.charAt(0)&&(t=t.substr(1,6));t={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"}[t=(t=t.replace(/ /g,"")).toLowerCase()]||t;for(var r=[{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^(\w{2})(\w{2})(\w{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^(\w{1})(\w{1})(\w{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],n=0;n<r.length;n++){var i=r[n].re,a=r[n].process,o=i.exec(t);o&&(e=a(o),this.r=e[0],this.g=e[1],this.b=e[2],this.ok=!0)}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r}}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */
function d(t,e){var r=t[0],n=t[1],i=t[2],a=t[3];r=g(r,n,i,a,e[0],7,-680876936),a=g(a,r,n,i,e[1],12,-389564586),i=g(i,a,r,n,e[2],17,606105819),n=g(n,i,a,r,e[3],22,-1044525330),r=g(r,n,i,a,e[4],7,-176418897),a=g(a,r,n,i,e[5],12,1200080426),i=g(i,a,r,n,e[6],17,-1473231341),n=g(n,i,a,r,e[7],22,-45705983),r=g(r,n,i,a,e[8],7,1770035416),a=g(a,r,n,i,e[9],12,-1958414417),i=g(i,a,r,n,e[10],17,-42063),n=g(n,i,a,r,e[11],22,-1990404162),r=g(r,n,i,a,e[12],7,1804603682),a=g(a,r,n,i,e[13],12,-40341101),i=g(i,a,r,n,e[14],17,-1502002290),r=m(r,n=g(n,i,a,r,e[15],22,1236535329),i,a,e[1],5,-165796510),a=m(a,r,n,i,e[6],9,-1069501632),i=m(i,a,r,n,e[11],14,643717713),n=m(n,i,a,r,e[0],20,-373897302),r=m(r,n,i,a,e[5],5,-701558691),a=m(a,r,n,i,e[10],9,38016083),i=m(i,a,r,n,e[15],14,-660478335),n=m(n,i,a,r,e[4],20,-405537848),r=m(r,n,i,a,e[9],5,568446438),a=m(a,r,n,i,e[14],9,-1019803690),i=m(i,a,r,n,e[3],14,-187363961),n=m(n,i,a,r,e[8],20,1163531501),r=m(r,n,i,a,e[13],5,-1444681467),a=m(a,r,n,i,e[2],9,-51403784),i=m(i,a,r,n,e[7],14,1735328473),r=v(r,n=m(n,i,a,r,e[12],20,-1926607734),i,a,e[5],4,-378558),a=v(a,r,n,i,e[8],11,-2022574463),i=v(i,a,r,n,e[11],16,1839030562),n=v(n,i,a,r,e[14],23,-35309556),r=v(r,n,i,a,e[1],4,-1530992060),a=v(a,r,n,i,e[4],11,1272893353),i=v(i,a,r,n,e[7],16,-155497632),n=v(n,i,a,r,e[10],23,-1094730640),r=v(r,n,i,a,e[13],4,681279174),a=v(a,r,n,i,e[0],11,-358537222),i=v(i,a,r,n,e[3],16,-722521979),n=v(n,i,a,r,e[6],23,76029189),r=v(r,n,i,a,e[9],4,-640364487),a=v(a,r,n,i,e[12],11,-421815835),i=v(i,a,r,n,e[15],16,530742520),r=b(r,n=v(n,i,a,r,e[2],23,-995338651),i,a,e[0],6,-198630844),a=b(a,r,n,i,e[7],10,1126891415),i=b(i,a,r,n,e[14],15,-1416354905),n=b(n,i,a,r,e[5],21,-57434055),r=b(r,n,i,a,e[12],6,1700485571),a=b(a,r,n,i,e[3],10,-1894986606),i=b(i,a,r,n,e[10],15,-1051523),n=b(n,i,a,r,e[1],21,-2054922799),r=b(r,n,i,a,e[8],6,1873313359),a=b(a,r,n,i,e[15],10,-30611744),i=b(i,a,r,n,e[6],15,-1560198380),n=b(n,i,a,r,e[13],21,1309151649),r=b(r,n,i,a,e[4],6,-145523070),a=b(a,r,n,i,e[11],10,-1120210379),i=b(i,a,r,n,e[2],15,718787259),n=b(n,i,a,r,e[9],21,-343485551),t[0]=_(r,t[0]),t[1]=_(n,t[1]),t[2]=_(i,t[2]),t[3]=_(a,t[3])}function p(t,e,r,n,i,a){return e=_(_(e,t),_(n,a)),_(e<<i|e>>>32-i,r)}function g(t,e,r,n,i,a,o){return p(e&r|~e&n,t,e,i,a,o)}function m(t,e,r,n,i,a,o){return p(e&n|r&~n,t,e,i,a,o)}function v(t,e,r,n,i,a,o){return p(e^r^n,t,e,i,a,o)}function b(t,e,r,n,i,a,o){return p(r^(e|~n),t,e,i,a,o)}function y(t){var e,r=t.length,n=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=t.length;e+=64)d(n,w(t.substring(e-64,e)));t=t.substring(e-64);var i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(e=0;e<t.length;e++)i[e>>2]|=t.charCodeAt(e)<<(e%4<<3);if(i[e>>2]|=128<<(e%4<<3),e>55)for(d(n,i),e=0;e<16;e++)i[e]=0;return i[14]=8*r,d(n,i),n}function w(t){var e,r=[];for(e=0;e<64;e+=4)r[e>>2]=t.charCodeAt(e)+(t.charCodeAt(e+1)<<8)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+3)<<24);return r}u=n.atob.bind(n),h=n.btoa.bind(n);var N="0123456789abcdef".split("");function L(t){for(var e="",r=0;r<4;r++)e+=N[t>>8*r+4&15]+N[t>>8*r&15];return e}function A(t){return String.fromCharCode((255&t)>>0,(65280&t)>>8,(16711680&t)>>16,(4278190080&t)>>24)}function x(t){return y(t).map(A).join("")}var S="5d41402abc4b2a76b9719d911017c592"!=function(t){for(var e=0;e<t.length;e++)t[e]=L(t[e]);return t.join("")}(y("hello"));function _(t,e){if(S){var r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}return t+e&4294967295}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */function P(t,e){var r,n,i,a;if(t!==r){for(var o=(i=t,a=1+(256/t.length>>0),new Array(a+1).join(i)),s=[],c=0;c<256;c++)s[c]=c;var u=0;for(c=0;c<256;c++){var h=s[c];u=(u+h+o.charCodeAt(c))%256,s[c]=s[u],s[u]=h}r=t,n=s}else s=n;var l=e.length,f=0,d=0,p="";for(c=0;c<l;c++)d=(d+(h=s[f=(f+1)%256]))%256,s[f]=s[d],s[d]=h,o=s[(s[f]+s[d])%256],p+=String.fromCharCode(e.charCodeAt(c)^o);return p}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */var k={print:4,modify:8,copy:16,"annot-forms":32};function I(t,e,r,n){this.v=1,this.r=2;var i=192;t.forEach((function(t){if(void 0!==k.perm)throw new Error("Invalid permission: "+t);i+=k[t]})),this.padding="(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";var a=(e+this.padding).substr(0,32),o=(r+this.padding).substr(0,32);this.O=this.processOwnerPassword(a,o),this.P=-(1+(255^i)),this.encryptionKey=x(a+this.O+this.lsbFirstWord(this.P)+this.hexToBytes(n)).substr(0,5),this.U=P(this.encryptionKey,this.padding)}function F(t){if(/[^\u0000-\u00ff]/.test(t))throw new Error("Invalid PDF Name Object: "+t+", Only accept ASCII characters.");for(var e="",r=t.length,n=0;n<r;n++){var i=t.charCodeAt(n);if(i<33||35===i||37===i||40===i||41===i||47===i||60===i||62===i||91===i||93===i||123===i||125===i||i>126)e+="#"+("0"+i.toString(16)).slice(-2);else e+=t[n]}return e}function C(e){if("object"!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e))throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");var r={};this.subscribe=function(t,e,n){if(n=n||!1,"string"!=typeof t||"function"!=typeof e||"boolean"!=typeof n)throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");r.hasOwnProperty(t)||(r[t]={});var i=Math.random().toString(35);return r[t][i]=[e,!!n],i},this.unsubscribe=function(t){for(var e in r)if(r[e][t])return delete r[e][t],0===Object.keys(r[e]).length&&delete r[e],!0;return!1},this.publish=function(t){if(r.hasOwnProperty(t)){var i=Array.prototype.slice.call(arguments,1),o=[];for(var s in r[t]){var c=r[t][s];try{c[0].apply(e,i)}catch(t){n.console&&a.error("jsPDF PubSub Error",t.message,t)}c[1]&&o.push(s)}o.length&&o.forEach(this.unsubscribe)}},this.getTopics=function(){return r}}function j(t){if(!(this instanceof j))return new j(t);var e="opacity,stroke-opacity".split(",");for(var r in t)t.hasOwnProperty(r)&&e.indexOf(r)>=0&&(this[r]=t[r]);this.id="",this.objectNumber=-1}function O(t,e){this.gState=t,this.matrix=e,this.id="",this.objectNumber=-1}function B(t,e,r,n,i){if(!(this instanceof B))return new B(t,e,r,n,i);this.type="axial"===t?2:3,this.coords=e,this.colors=r,O.call(this,n,i)}function M(t,e,r,n,i){if(!(this instanceof M))return new M(t,e,r,n,i);this.boundingBox=t,this.xStep=e,this.yStep=r,this.stream="",this.cloneIndex=0,O.call(this,n,i)}function E(e){var r,i="string"==typeof arguments[0]?arguments[0]:"p",o=arguments[1],s=arguments[2],c=arguments[3],u=[],d=1,p=16,g="S",m=null;"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e=e||{})&&(i=e.orientation,o=e.unit||o,s=e.format||s,c=e.compress||e.compressPdf||c,null!==(m=e.encryption||null)&&(m.userPassword=m.userPassword||"",m.ownerPassword=m.ownerPassword||"",m.userPermissions=m.userPermissions||[]),d="number"==typeof e.userUnit?Math.abs(e.userUnit):1,void 0!==e.precision&&(r=e.precision),void 0!==e.floatPrecision&&(p=e.floatPrecision),g=e.defaultPathOperation||"S"),u=e.filters||(!0===c?["FlateEncode"]:u),o=o||"mm",i=(""+(i||"P")).toLowerCase();var v=e.putOnlyUsedFonts||!1,b={},y={internal:{},__private__:{}};y.__private__.PubSub=C;var w="1.3",N=y.__private__.getPdfVersion=function(){return w};y.__private__.setPdfVersion=function(t){w=t};var L={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};y.__private__.getPageFormats=function(){return L};var A=y.__private__.getPageFormat=function(t){return L[t]};s=s||"a4";var x={COMPAT:"compat",ADVANCED:"advanced"},S=x.COMPAT;function _(){this.saveGraphicsState(),lt(new Vt(_t,0,0,-_t,0,Rr()*_t).toString()+" cm"),this.setFontSize(this.getFontSize()/_t),g="n",S=x.ADVANCED}function P(){this.restoreGraphicsState(),g="S",S=x.COMPAT}var k=y.__private__.combineFontStyleAndFontWeight=function(t,e){if("bold"==t&&"normal"==e||"bold"==t&&400==e||"normal"==t&&"italic"==e||"bold"==t&&"italic"==e)throw new Error("Invalid Combination of fontweight and fontstyle");return e&&(t=400==e||"normal"===e?"italic"===t?"italic":"normal":700!=e&&"bold"!==e||"normal"!==t?(700==e?"bold":e)+""+t:"bold"),t};y.advancedAPI=function(t){var e=S===x.COMPAT;return e&&_.call(this),"function"!=typeof t||(t(this),e&&P.call(this)),this},y.compatAPI=function(t){var e=S===x.ADVANCED;return e&&P.call(this),"function"!=typeof t||(t(this),e&&_.call(this)),this},y.isAdvancedAPI=function(){return S===x.ADVANCED};var O,q=function(t){if(S!==x.ADVANCED)throw new Error(t+" is only available in 'advanced' API mode. You need to call advancedAPI() first.")},D=y.roundToPrecision=y.__private__.roundToPrecision=function(t,e){var n=r||e;if(isNaN(t)||isNaN(n))throw new Error("Invalid argument passed to jsPDF.roundToPrecision");return t.toFixed(n).replace(/0+$/,"")};O=y.hpf=y.__private__.hpf="number"==typeof p?function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return D(t,p)}:"smart"===p?function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return D(t,t>-1&&t<1?16:5)}:function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return D(t,16)};var R=y.f2=y.__private__.f2=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f2");return D(t,2)},T=y.__private__.f3=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f3");return D(t,3)},U=y.scale=y.__private__.scale=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.scale");return S===x.COMPAT?t*_t:S===x.ADVANCED?t:void 0},z=function(t){return S===x.COMPAT?Rr()-t:S===x.ADVANCED?t:void 0},H=function(t){return U(z(t))};y.__private__.setPrecision=y.setPrecision=function(t){"number"==typeof parseInt(t,10)&&(r=parseInt(t,10))};var W,V="00000000000000000000000000000000",G=y.__private__.getFileId=function(){return V},Y=y.__private__.setFileId=function(t){return V=void 0!==t&&/^[a-fA-F0-9]{32}$/.test(t)?t.toUpperCase():V.split("").map((function(){return"ABCDEF0123456789".charAt(Math.floor(16*Math.random()))})).join(""),null!==m&&(Ye=new I(m.userPermissions,m.userPassword,m.ownerPassword,V)),V};y.setFileId=function(t){return Y(t),this},y.getFileId=function(){return G()};var J=y.__private__.convertDateToPDFDate=function(t){var e=t.getTimezoneOffset(),r=e<0?"+":"-",n=Math.floor(Math.abs(e/60)),i=Math.abs(e%60),a=[r,Q(n),"'",Q(i),"'"].join("");return["D:",t.getFullYear(),Q(t.getMonth()+1),Q(t.getDate()),Q(t.getHours()),Q(t.getMinutes()),Q(t.getSeconds()),a].join("")},X=y.__private__.convertPDFDateToDate=function(t){var e=parseInt(t.substr(2,4),10),r=parseInt(t.substr(6,2),10)-1,n=parseInt(t.substr(8,2),10),i=parseInt(t.substr(10,2),10),a=parseInt(t.substr(12,2),10),o=parseInt(t.substr(14,2),10);return new Date(e,r,n,i,a,o,0)},K=y.__private__.setCreationDate=function(t){var e;if(void 0===t&&(t=new Date),t instanceof Date)e=J(t);else{if(!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t))throw new Error("Invalid argument passed to jsPDF.setCreationDate");e=t}return W=e},Z=y.__private__.getCreationDate=function(t){var e=W;return"jsDate"===t&&(e=X(W)),e};y.setCreationDate=function(t){return K(t),this},y.getCreationDate=function(t){return Z(t)};var $,Q=y.__private__.padd2=function(t){return("0"+parseInt(t)).slice(-2)},tt=y.__private__.padd2Hex=function(t){return("00"+(t=t.toString())).substr(t.length)},et=0,rt=[],nt=[],it=0,at=[],ot=[],st=!1,ct=nt,ut=function(){et=0,it=0,nt=[],rt=[],at=[],Qt=Kt(),te=Kt()};y.__private__.setCustomOutputDestination=function(t){st=!0,ct=t};var ht=function(t){st||(ct=t)};y.__private__.resetCustomOutputDestination=function(){st=!1,ct=nt};var lt=y.__private__.out=function(t){return t=t.toString(),it+=t.length+1,ct.push(t),ct},ft=y.__private__.write=function(t){return lt(1===arguments.length?t.toString():Array.prototype.join.call(arguments," "))},dt=y.__private__.getArrayBuffer=function(t){for(var e=t.length,r=new ArrayBuffer(e),n=new Uint8Array(r);e--;)n[e]=t.charCodeAt(e);return r},pt=[["Helvetica","helvetica","normal","WinAnsiEncoding"],["Helvetica-Bold","helvetica","bold","WinAnsiEncoding"],["Helvetica-Oblique","helvetica","italic","WinAnsiEncoding"],["Helvetica-BoldOblique","helvetica","bolditalic","WinAnsiEncoding"],["Courier","courier","normal","WinAnsiEncoding"],["Courier-Bold","courier","bold","WinAnsiEncoding"],["Courier-Oblique","courier","italic","WinAnsiEncoding"],["Courier-BoldOblique","courier","bolditalic","WinAnsiEncoding"],["Times-Roman","times","normal","WinAnsiEncoding"],["Times-Bold","times","bold","WinAnsiEncoding"],["Times-Italic","times","italic","WinAnsiEncoding"],["Times-BoldItalic","times","bolditalic","WinAnsiEncoding"],["ZapfDingbats","zapfdingbats","normal",null],["Symbol","symbol","normal",null]];y.__private__.getStandardFonts=function(){return pt};var gt=e.fontSize||16;y.__private__.setFontSize=y.setFontSize=function(t){return gt=S===x.ADVANCED?t/_t:t,this};var mt,vt=y.__private__.getFontSize=y.getFontSize=function(){return S===x.COMPAT?gt:gt*_t},bt=e.R2L||!1;y.__private__.setR2L=y.setR2L=function(t){return bt=t,this},y.__private__.getR2L=y.getR2L=function(){return bt};var yt,wt=y.__private__.setZoomMode=function(t){var e=[void 0,null,"fullwidth","fullheight","fullpage","original"];if(/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t))mt=t;else if(isNaN(t)){if(-1===e.indexOf(t))throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "'+t+'" is not recognized.');mt=t}else mt=parseInt(t,10)};y.__private__.getZoomMode=function(){return mt};var Nt,Lt=y.__private__.setPageMode=function(t){if(-1==[void 0,null,"UseNone","UseOutlines","UseThumbs","FullScreen"].indexOf(t))throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "'+t+'" is not recognized.');yt=t};y.__private__.getPageMode=function(){return yt};var At=y.__private__.setLayoutMode=function(t){if(-1==[void 0,null,"continuous","single","twoleft","tworight","two"].indexOf(t))throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "'+t+'" is not recognized.');Nt=t};y.__private__.getLayoutMode=function(){return Nt},y.__private__.setDisplayMode=y.setDisplayMode=function(t,e,r){return wt(t),At(e),Lt(r),this};var xt={title:"",subject:"",author:"",keywords:"",creator:""};y.__private__.getDocumentProperty=function(t){if(-1===Object.keys(xt).indexOf(t))throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");return xt[t]},y.__private__.getDocumentProperties=function(){return xt},y.__private__.setDocumentProperties=y.setProperties=y.setDocumentProperties=function(t){for(var e in xt)xt.hasOwnProperty(e)&&t[e]&&(xt[e]=t[e]);return this},y.__private__.setDocumentProperty=function(t,e){if(-1===Object.keys(xt).indexOf(t))throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");return xt[t]=e};var St,_t,Pt,kt,It,Ft={},Ct={},jt=[],Ot={},Bt={},Mt={},Et={},qt=null,Dt=0,Rt=[],Tt=new C(y),Ut=e.hotfixes||[],zt={},Ht={},Wt=[],Vt=function t(e,r,n,i,a,o){if(!(this instanceof t))return new t(e,r,n,i,a,o);isNaN(e)&&(e=1),isNaN(r)&&(r=0),isNaN(n)&&(n=0),isNaN(i)&&(i=1),isNaN(a)&&(a=0),isNaN(o)&&(o=0),this._matrix=[e,r,n,i,a,o]};Object.defineProperty(Vt.prototype,"sx",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Vt.prototype,"shy",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Vt.prototype,"shx",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Vt.prototype,"sy",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Vt.prototype,"tx",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Vt.prototype,"ty",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Vt.prototype,"a",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Vt.prototype,"b",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Vt.prototype,"c",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Vt.prototype,"d",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Vt.prototype,"e",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Vt.prototype,"f",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Vt.prototype,"rotation",{get:function(){return Math.atan2(this.shx,this.sx)}}),Object.defineProperty(Vt.prototype,"scaleX",{get:function(){return this.decompose().scale.sx}}),Object.defineProperty(Vt.prototype,"scaleY",{get:function(){return this.decompose().scale.sy}}),Object.defineProperty(Vt.prototype,"isIdentity",{get:function(){return 1===this.sx&&(0===this.shy&&(0===this.shx&&(1===this.sy&&(0===this.tx&&0===this.ty))))}}),Vt.prototype.join=function(t){return[this.sx,this.shy,this.shx,this.sy,this.tx,this.ty].map(O).join(t)},Vt.prototype.multiply=function(t){var e=t.sx*this.sx+t.shy*this.shx,r=t.sx*this.shy+t.shy*this.sy,n=t.shx*this.sx+t.sy*this.shx,i=t.shx*this.shy+t.sy*this.sy,a=t.tx*this.sx+t.ty*this.shx+this.tx,o=t.tx*this.shy+t.ty*this.sy+this.ty;return new Vt(e,r,n,i,a,o)},Vt.prototype.decompose=function(){var t=this.sx,e=this.shy,r=this.shx,n=this.sy,i=this.tx,a=this.ty,o=Math.sqrt(t*t+e*e),s=(t/=o)*r+(e/=o)*n;r-=t*s,n-=e*s;var c=Math.sqrt(r*r+n*n);return s/=c,t*(n/=c)<e*(r/=c)&&(t=-t,e=-e,s=-s,o=-o),{scale:new Vt(o,0,0,c,0,0),translate:new Vt(1,0,0,1,i,a),rotate:new Vt(t,e,-e,t,0,0),skew:new Vt(1,0,s,1,0,0)}},Vt.prototype.toString=function(t){return this.join(" ")},Vt.prototype.inversed=function(){var t=this.sx,e=this.shy,r=this.shx,n=this.sy,i=this.tx,a=this.ty,o=1/(t*n-e*r),s=n*o,c=-e*o,u=-r*o,h=t*o;return new Vt(s,c,u,h,-s*i-u*a,-c*i-h*a)},Vt.prototype.applyToPoint=function(t){var e=t.x*this.sx+t.y*this.shx+this.tx,r=t.x*this.shy+t.y*this.sy+this.ty;return new Cr(e,r)},Vt.prototype.applyToRectangle=function(t){var e=this.applyToPoint(t),r=this.applyToPoint(new Cr(t.x+t.w,t.y+t.h));return new jr(e.x,e.y,r.x-e.x,r.y-e.y)},Vt.prototype.clone=function(){var t=this.sx,e=this.shy,r=this.shx,n=this.sy,i=this.tx,a=this.ty;return new Vt(t,e,r,n,i,a)},y.Matrix=Vt;var Gt=y.matrixMult=function(t,e){return e.multiply(t)},Yt=new Vt(1,0,0,1,0,0);y.unitMatrix=y.identityMatrix=Yt;var Jt=function(t,e){if(!Bt[t]){var r=(e instanceof B?"Sh":"P")+(Object.keys(Ot).length+1).toString(10);e.id=r,Bt[t]=r,Ot[r]=e,Tt.publish("addPattern",e)}};y.ShadingPattern=B,y.TilingPattern=M,y.addShadingPattern=function(t,e){return q("addShadingPattern()"),Jt(t,e),this},y.beginTilingPattern=function(t){q("beginTilingPattern()"),Br(t.boundingBox[0],t.boundingBox[1],t.boundingBox[2]-t.boundingBox[0],t.boundingBox[3]-t.boundingBox[1],t.matrix)},y.endTilingPattern=function(t,e){q("endTilingPattern()"),e.stream=ot[$].join("\n"),Jt(t,e),Tt.publish("endTilingPattern",e),Wt.pop().restore()};var Xt=y.__private__.newObject=function(){var t=Kt();return Zt(t,!0),t},Kt=y.__private__.newObjectDeferred=function(){return et++,rt[et]=function(){return it},et},Zt=function(t,e){return e="boolean"==typeof e&&e,rt[t]=it,e&&lt(t+" 0 obj"),t},$t=y.__private__.newAdditionalObject=function(){var t={objId:Kt(),content:""};return at.push(t),t},Qt=Kt(),te=Kt(),ee=y.__private__.decodeColorString=function(t){var e=t.split(" ");if(2!==e.length||"g"!==e[1]&&"G"!==e[1]){if(5===e.length&&("k"===e[4]||"K"===e[4])){e=[(1-e[0])*(1-e[3]),(1-e[1])*(1-e[3]),(1-e[2])*(1-e[3]),"r"]}}else{var r=parseFloat(e[0]);e=[r,r,r,"r"]}for(var n="#",i=0;i<3;i++)n+=("0"+Math.floor(255*parseFloat(e[i])).toString(16)).slice(-2);return n},re=y.__private__.encodeColorString=function(e){var r;"string"==typeof e&&(e={ch1:e});var n=e.ch1,i=e.ch2,a=e.ch3,o=e.ch4,s="draw"===e.pdfColorType?["G","RG","K"]:["g","rg","k"];if("string"==typeof n&&"#"!==n.charAt(0)){var c=new f(n);if(c.ok)n=c.toHex();else if(!/^\d*\.?\d*$/.test(n))throw new Error('Invalid color "'+n+'" passed to jsPDF.encodeColorString.')}if("string"==typeof n&&/^#[0-9A-Fa-f]{3}$/.test(n)&&(n="#"+n[1]+n[1]+n[2]+n[2]+n[3]+n[3]),"string"==typeof n&&/^#[0-9A-Fa-f]{6}$/.test(n)){var u=parseInt(n.substr(1),16);n=u>>16&255,i=u>>8&255,a=255&u}if(void 0===i||void 0===o&&n===i&&i===a)if("string"==typeof n)r=n+" "+s[0];else switch(e.precision){case 2:r=R(n/255)+" "+s[0];break;case 3:default:r=T(n/255)+" "+s[0]}else if(void 0===o||"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(o)){if(o&&!isNaN(o.a)&&0===o.a)return r=["1.","1.","1.",s[1]].join(" ");if("string"==typeof n)r=[n,i,a,s[1]].join(" ");else switch(e.precision){case 2:r=[R(n/255),R(i/255),R(a/255),s[1]].join(" ");break;default:case 3:r=[T(n/255),T(i/255),T(a/255),s[1]].join(" ")}}else if("string"==typeof n)r=[n,i,a,o,s[2]].join(" ");else switch(e.precision){case 2:r=[R(n),R(i),R(a),R(o),s[2]].join(" ");break;case 3:default:r=[T(n),T(i),T(a),T(o),s[2]].join(" ")}return r},ne=y.__private__.getFilters=function(){return u},ie=y.__private__.putStream=function(t){var e=(t=t||{}).data||"",r=t.filters||ne(),n=t.alreadyAppliedFilters||[],i=t.addLength1||!1,a=e.length,o=t.objectId,s=function(t){return t};if(null!==m&&void 0===o)throw new Error("ObjectId must be passed to putStream for file encryption");null!==m&&(s=Ye.encryptor(o,0));var c={};!0===r&&(r=["FlateEncode"]);var u=t.additionalKeyValues||[],h=(c=void 0!==E.API.processDataByFilters?E.API.processDataByFilters(e,r):{data:e,reverseChain:[]}).reverseChain+(Array.isArray(n)?n.join(" "):n.toString());if(0!==c.data.length&&(u.push({key:"Length",value:c.data.length}),!0===i&&u.push({key:"Length1",value:a})),0!=h.length)if(h.split("/").length-1==1)u.push({key:"Filter",value:h});else{u.push({key:"Filter",value:"["+h+"]"});for(var l=0;l<u.length;l+=1)if("DecodeParms"===u[l].key){for(var f=[],d=0;d<c.reverseChain.split("/").length-1;d+=1)f.push("null");f.push(u[l].value),u[l].value="["+f.join(" ")+"]"}}lt("<<");for(var p=0;p<u.length;p++)lt("/"+u[p].key+" "+u[p].value);lt(">>"),0!==c.data.length&&(lt("stream"),lt(s(c.data)),lt("endstream"))},ae=y.__private__.putPage=function(t){var e=t.number,r=t.data,n=t.objId,i=t.contentsObjId;Zt(n,!0),lt("<</Type /Page"),lt("/Parent "+t.rootDictionaryObjId+" 0 R"),lt("/Resources "+t.resourceDictionaryObjId+" 0 R"),lt("/MediaBox ["+parseFloat(O(t.mediaBox.bottomLeftX))+" "+parseFloat(O(t.mediaBox.bottomLeftY))+" "+O(t.mediaBox.topRightX)+" "+O(t.mediaBox.topRightY)+"]"),null!==t.cropBox&&lt("/CropBox ["+O(t.cropBox.bottomLeftX)+" "+O(t.cropBox.bottomLeftY)+" "+O(t.cropBox.topRightX)+" "+O(t.cropBox.topRightY)+"]"),null!==t.bleedBox&&lt("/BleedBox ["+O(t.bleedBox.bottomLeftX)+" "+O(t.bleedBox.bottomLeftY)+" "+O(t.bleedBox.topRightX)+" "+O(t.bleedBox.topRightY)+"]"),null!==t.trimBox&&lt("/TrimBox ["+O(t.trimBox.bottomLeftX)+" "+O(t.trimBox.bottomLeftY)+" "+O(t.trimBox.topRightX)+" "+O(t.trimBox.topRightY)+"]"),null!==t.artBox&&lt("/ArtBox ["+O(t.artBox.bottomLeftX)+" "+O(t.artBox.bottomLeftY)+" "+O(t.artBox.topRightX)+" "+O(t.artBox.topRightY)+"]"),"number"==typeof t.userUnit&&1!==t.userUnit&&lt("/UserUnit "+t.userUnit),Tt.publish("putPage",{objId:n,pageContext:Rt[e],pageNumber:e,page:r}),lt("/Contents "+i+" 0 R"),lt(">>"),lt("endobj");var a=r.join("\n");return S===x.ADVANCED&&(a+="\nQ"),Zt(i,!0),ie({data:a,filters:ne(),objectId:i}),lt("endobj"),n},oe=y.__private__.putPages=function(){var t,e,r=[];for(t=1;t<=Dt;t++)Rt[t].objId=Kt(),Rt[t].contentsObjId=Kt();for(t=1;t<=Dt;t++)r.push(ae({number:t,data:ot[t],objId:Rt[t].objId,contentsObjId:Rt[t].contentsObjId,mediaBox:Rt[t].mediaBox,cropBox:Rt[t].cropBox,bleedBox:Rt[t].bleedBox,trimBox:Rt[t].trimBox,artBox:Rt[t].artBox,userUnit:Rt[t].userUnit,rootDictionaryObjId:Qt,resourceDictionaryObjId:te}));Zt(Qt,!0),lt("<</Type /Pages");var n="/Kids [";for(e=0;e<Dt;e++)n+=r[e]+" 0 R ";lt(n+"]"),lt("/Count "+Dt),lt(">>"),lt("endobj"),Tt.publish("postPutPages")},se=function(t){Tt.publish("putFont",{font:t,out:lt,newObject:Xt,putStream:ie}),!0!==t.isAlreadyPutted&&(t.objectNumber=Xt(),lt("<<"),lt("/Type /Font"),lt("/BaseFont /"+F(t.postScriptName)),lt("/Subtype /Type1"),"string"==typeof t.encoding&&lt("/Encoding /"+t.encoding),lt("/FirstChar 32"),lt("/LastChar 255"),lt(">>"),lt("endobj"))},ce=function(){for(var t in Ft)Ft.hasOwnProperty(t)&&(!1===v||!0===v&&b.hasOwnProperty(t))&&se(Ft[t])},ue=function(t){t.objectNumber=Xt();var e=[];e.push({key:"Type",value:"/XObject"}),e.push({key:"Subtype",value:"/Form"}),e.push({key:"BBox",value:"["+[O(t.x),O(t.y),O(t.x+t.width),O(t.y+t.height)].join(" ")+"]"}),e.push({key:"Matrix",value:"["+t.matrix.toString()+"]"});var r=t.pages[1].join("\n");ie({data:r,additionalKeyValues:e,objectId:t.objectNumber}),lt("endobj")},he=function(){for(var t in zt)zt.hasOwnProperty(t)&&ue(zt[t])},le=function(t,e){var r,n=[],i=1/(e-1);for(r=0;r<1;r+=i)n.push(r);if(n.push(1),0!=t[0].offset){var a={offset:0,color:t[0].color};t.unshift(a)}if(1!=t[t.length-1].offset){var o={offset:1,color:t[t.length-1].color};t.push(o)}for(var s="",c=0,u=0;u<n.length;u++){for(r=n[u];r>t[c+1].offset;)c++;var h=t[c].offset,l=(r-h)/(t[c+1].offset-h),f=t[c].color,d=t[c+1].color;s+=tt(Math.round((1-l)*f[0]+l*d[0]).toString(16))+tt(Math.round((1-l)*f[1]+l*d[1]).toString(16))+tt(Math.round((1-l)*f[2]+l*d[2]).toString(16))}return s.trim()},fe=function(t,e){e||(e=21);var r=Xt(),n=le(t.colors,e),i=[];i.push({key:"FunctionType",value:"0"}),i.push({key:"Domain",value:"[0.0 1.0]"}),i.push({key:"Size",value:"["+e+"]"}),i.push({key:"BitsPerSample",value:"8"}),i.push({key:"Range",value:"[0.0 1.0 0.0 1.0 0.0 1.0]"}),i.push({key:"Decode",value:"[0.0 1.0 0.0 1.0 0.0 1.0]"}),ie({data:n,additionalKeyValues:i,alreadyAppliedFilters:["/ASCIIHexDecode"],objectId:r}),lt("endobj"),t.objectNumber=Xt(),lt("<< /ShadingType "+t.type),lt("/ColorSpace /DeviceRGB");var a="/Coords ["+O(parseFloat(t.coords[0]))+" "+O(parseFloat(t.coords[1]))+" ";2===t.type?a+=O(parseFloat(t.coords[2]))+" "+O(parseFloat(t.coords[3])):a+=O(parseFloat(t.coords[2]))+" "+O(parseFloat(t.coords[3]))+" "+O(parseFloat(t.coords[4]))+" "+O(parseFloat(t.coords[5])),lt(a+="]"),t.matrix&&lt("/Matrix ["+t.matrix.toString()+"]"),lt("/Function "+r+" 0 R"),lt("/Extend [true true]"),lt(">>"),lt("endobj")},de=function(t,e){var r=Kt(),n=Xt();e.push({resourcesOid:r,objectOid:n}),t.objectNumber=n;var i=[];i.push({key:"Type",value:"/Pattern"}),i.push({key:"PatternType",value:"1"}),i.push({key:"PaintType",value:"1"}),i.push({key:"TilingType",value:"1"}),i.push({key:"BBox",value:"["+t.boundingBox.map(O).join(" ")+"]"}),i.push({key:"XStep",value:O(t.xStep)}),i.push({key:"YStep",value:O(t.yStep)}),i.push({key:"Resources",value:r+" 0 R"}),t.matrix&&i.push({key:"Matrix",value:"["+t.matrix.toString()+"]"}),ie({data:t.stream,additionalKeyValues:i,objectId:t.objectNumber}),lt("endobj")},pe=function(t){var e;for(e in Ot)Ot.hasOwnProperty(e)&&(Ot[e]instanceof B?fe(Ot[e]):Ot[e]instanceof M&&de(Ot[e],t))},ge=function(t){for(var e in t.objectNumber=Xt(),lt("<<"),t)switch(e){case"opacity":lt("/ca "+R(t[e]));break;case"stroke-opacity":lt("/CA "+R(t[e]))}lt(">>"),lt("endobj")},me=function(){var t;for(t in Mt)Mt.hasOwnProperty(t)&&ge(Mt[t])},ve=function(){for(var t in lt("/XObject <<"),zt)zt.hasOwnProperty(t)&&zt[t].objectNumber>=0&&lt("/"+t+" "+zt[t].objectNumber+" 0 R");Tt.publish("putXobjectDict"),lt(">>")},be=function(){Ye.oid=Xt(),lt("<<"),lt("/Filter /Standard"),lt("/V "+Ye.v),lt("/R "+Ye.r),lt("/U <"+Ye.toHexString(Ye.U)+">"),lt("/O <"+Ye.toHexString(Ye.O)+">"),lt("/P "+Ye.P),lt(">>"),lt("endobj")},ye=function(){for(var t in lt("/Font <<"),Ft)Ft.hasOwnProperty(t)&&(!1===v||!0===v&&b.hasOwnProperty(t))&&lt("/"+t+" "+Ft[t].objectNumber+" 0 R");lt(">>")},we=function(){if(Object.keys(Ot).length>0){for(var t in lt("/Shading <<"),Ot)Ot.hasOwnProperty(t)&&Ot[t]instanceof B&&Ot[t].objectNumber>=0&&lt("/"+t+" "+Ot[t].objectNumber+" 0 R");Tt.publish("putShadingPatternDict"),lt(">>")}},Ne=function(t){if(Object.keys(Ot).length>0){for(var e in lt("/Pattern <<"),Ot)Ot.hasOwnProperty(e)&&Ot[e]instanceof y.TilingPattern&&Ot[e].objectNumber>=0&&Ot[e].objectNumber<t&&lt("/"+e+" "+Ot[e].objectNumber+" 0 R");Tt.publish("putTilingPatternDict"),lt(">>")}},Le=function(){if(Object.keys(Mt).length>0){var t;for(t in lt("/ExtGState <<"),Mt)Mt.hasOwnProperty(t)&&Mt[t].objectNumber>=0&&lt("/"+t+" "+Mt[t].objectNumber+" 0 R");Tt.publish("putGStateDict"),lt(">>")}},Ae=function(t){Zt(t.resourcesOid,!0),lt("<<"),lt("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"),ye(),we(),Ne(t.objectOid),Le(),ve(),lt(">>"),lt("endobj")},xe=function(){var t=[];ce(),me(),he(),pe(t),Tt.publish("putResources"),t.forEach(Ae),Ae({resourcesOid:te,objectOid:Number.MAX_SAFE_INTEGER}),Tt.publish("postPutResources")},Se=function(){Tt.publish("putAdditionalObjects");for(var t=0;t<at.length;t++){var e=at[t];Zt(e.objId,!0),lt(e.content),lt("endobj")}Tt.publish("postPutAdditionalObjects")},_e=function(t){Ct[t.fontName]=Ct[t.fontName]||{},Ct[t.fontName][t.fontStyle]=t.id},Pe=function(t,e,r,n,i){var a={id:"F"+(Object.keys(Ft).length+1).toString(10),postScriptName:t,fontName:e,fontStyle:r,encoding:n,isStandardFont:i||!1,metadata:{}};return Tt.publish("addFont",{font:a,instance:this}),Ft[a.id]=a,_e(a),a.id},ke=function(t){for(var e=0,r=pt.length;e<r;e++){var n=Pe.call(this,t[e][0],t[e][1],t[e][2],pt[e][3],!0);!1===v&&(b[n]=!0);var i=t[e][0].split("-");_e({id:n,fontName:i[0],fontStyle:i[1]||""})}Tt.publish("addFonts",{fonts:Ft,dictionary:Ct})},Ie=function(t){return t.foo=function(){try{return t.apply(this,arguments)}catch(t){var e=t.stack||"";~e.indexOf(" at ")&&(e=e.split(" at ")[1]);var r="Error in function "+e.split("\n")[0].split("<")[0]+": "+t.message;if(!n.console)throw new Error(r);n.console.error(r,t),n.alert&&alert(r)}},t.foo.bar=t,t.foo},Fe=function(t,e){var r,n,i,a,o,s,c,u,h;if(i=(e=e||{}).sourceEncoding||"Unicode",o=e.outputEncoding,(e.autoencode||o)&&Ft[St].metadata&&Ft[St].metadata[i]&&Ft[St].metadata[i].encoding&&(a=Ft[St].metadata[i].encoding,!o&&Ft[St].encoding&&(o=Ft[St].encoding),!o&&a.codePages&&(o=a.codePages[0]),"string"==typeof o&&(o=a[o]),o)){for(c=!1,s=[],r=0,n=t.length;r<n;r++)(u=o[t.charCodeAt(r)])?s.push(String.fromCharCode(u)):s.push(t[r]),s[r].charCodeAt(0)>>8&&(c=!0);t=s.join("")}for(r=t.length;void 0===c&&0!==r;)t.charCodeAt(r-1)>>8&&(c=!0),r--;if(!c)return t;for(s=e.noBOM?[]:[254,255],r=0,n=t.length;r<n;r++){if((h=(u=t.charCodeAt(r))>>8)>>8)throw new Error("Character at position "+r+" of string '"+t+"' exceeds 16bits. Cannot be encoded into UCS-2 BE");s.push(h),s.push(u-(h<<8))}return String.fromCharCode.apply(void 0,s)},Ce=y.__private__.pdfEscape=y.pdfEscape=function(t,e){return Fe(t,e).replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},je=y.__private__.beginPage=function(t){ot[++Dt]=[],Rt[Dt]={objId:0,contentsObjId:0,userUnit:Number(d),artBox:null,bleedBox:null,cropBox:null,trimBox:null,mediaBox:{bottomLeftX:0,bottomLeftY:0,topRightX:Number(t[0]),topRightY:Number(t[1])}},Me(Dt),ht(ot[$])},Oe=function(t,e){var r,n,o;switch(i=e||i,"string"==typeof t&&(r=A(t.toLowerCase()),Array.isArray(r)&&(n=r[0],o=r[1])),Array.isArray(t)&&(n=t[0]*_t,o=t[1]*_t),isNaN(n)&&(n=s[0],o=s[1]),(n>14400||o>14400)&&(a.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"),n=Math.min(14400,n),o=Math.min(14400,o)),s=[n,o],i.substr(0,1)){case"l":o>n&&(s=[o,n]);break;case"p":n>o&&(s=[o,n])}je(s),pr(fr),lt(Lr),0!==kr&&lt(kr+" J"),0!==Ir&&lt(Ir+" j"),Tt.publish("addPage",{pageNumber:Dt})},Be=function(t){t>0&&t<=Dt&&(ot.splice(t,1),Rt.splice(t,1),Dt--,$>Dt&&($=Dt),this.setPage($))},Me=function(t){t>0&&t<=Dt&&($=t)},Ee=y.__private__.getNumberOfPages=y.getNumberOfPages=function(){return ot.length-1},qe=function(t,e,r){var n,i=void 0;return r=r||{},t=void 0!==t?t:Ft[St].fontName,e=void 0!==e?e:Ft[St].fontStyle,n=t.toLowerCase(),void 0!==Ct[n]&&void 0!==Ct[n][e]?i=Ct[n][e]:void 0!==Ct[t]&&void 0!==Ct[t][e]?i=Ct[t][e]:!1===r.disableWarning&&a.warn("Unable to look up font label for font '"+t+"', '"+e+"'. Refer to getFontList() for available fonts."),i||r.noFallback||null==(i=Ct.times[e])&&(i=Ct.times.normal),i},De=y.__private__.putInfo=function(){var t=Xt(),e=function(t){return t};for(var r in null!==m&&(e=Ye.encryptor(t,0)),lt("<<"),lt("/Producer ("+Ce(e("jsPDF "+E.version))+")"),xt)xt.hasOwnProperty(r)&&xt[r]&&lt("/"+r.substr(0,1).toUpperCase()+r.substr(1)+" ("+Ce(e(xt[r]))+")");lt("/CreationDate ("+Ce(e(W))+")"),lt(">>"),lt("endobj")},Re=y.__private__.putCatalog=function(t){var e=(t=t||{}).rootDictionaryObjId||Qt;switch(Xt(),lt("<<"),lt("/Type /Catalog"),lt("/Pages "+e+" 0 R"),mt||(mt="fullwidth"),mt){case"fullwidth":lt("/OpenAction [3 0 R /FitH null]");break;case"fullheight":lt("/OpenAction [3 0 R /FitV null]");break;case"fullpage":lt("/OpenAction [3 0 R /Fit]");break;case"original":lt("/OpenAction [3 0 R /XYZ null null 1]");break;default:var r=""+mt;"%"===r.substr(r.length-1)&&(mt=parseInt(mt)/100),"number"==typeof mt&&lt("/OpenAction [3 0 R /XYZ null null "+R(mt)+"]")}switch(Nt||(Nt="continuous"),Nt){case"continuous":lt("/PageLayout /OneColumn");break;case"single":lt("/PageLayout /SinglePage");break;case"two":case"twoleft":lt("/PageLayout /TwoColumnLeft");break;case"tworight":lt("/PageLayout /TwoColumnRight")}yt&&lt("/PageMode /"+yt),Tt.publish("putCatalog"),lt(">>"),lt("endobj")},Te=y.__private__.putTrailer=function(){lt("trailer"),lt("<<"),lt("/Size "+(et+1)),lt("/Root "+et+" 0 R"),lt("/Info "+(et-1)+" 0 R"),null!==m&&lt("/Encrypt "+Ye.oid+" 0 R"),lt("/ID [ <"+V+"> <"+V+"> ]"),lt(">>")},Ue=y.__private__.putHeader=function(){lt("%PDF-"+w),lt("%ºß¬à")},ze=y.__private__.putXRef=function(){var t="0000000000";lt("xref"),lt("0 "+(et+1)),lt("0000000000 65535 f ");for(var e=1;e<=et;e++){"function"==typeof rt[e]?lt((t+rt[e]()).slice(-10)+" 00000 n "):void 0!==rt[e]?lt((t+rt[e]).slice(-10)+" 00000 n "):lt("0000000000 00000 n ")}},He=y.__private__.buildDocument=function(){ut(),ht(nt),Tt.publish("buildDocument"),Ue(),oe(),Se(),xe(),null!==m&&be(),De(),Re();var t=it;return ze(),Te(),lt("startxref"),lt(""+t),lt("%%EOF"),ht(ot[$]),nt.join("\n")},We=y.__private__.getBlob=function(t){return new Blob([dt(t)],{type:"application/pdf"})},Ve=y.output=y.__private__.output=Ie((function(t,e){switch("string"==typeof(e=e||{})?e={filename:e}:e.filename=e.filename||"generated.pdf",t){case void 0:return He();case"save":y.save(e.filename);break;case"arraybuffer":return dt(He());case"blob":return We(He());case"bloburi":case"bloburl":if(void 0!==n.URL&&"function"==typeof n.URL.createObjectURL)return n.URL&&n.URL.createObjectURL(We(He()))||void 0;a.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");break;case"datauristring":case"dataurlstring":var r="",i=He();try{r=h(i)}catch(t){r=h(unescape(encodeURIComponent(i)))}return"data:application/pdf;filename="+e.filename+";base64,"+r;case"pdfobjectnewwindow":if("[object Window]"===Object.prototype.toString.call(n)){var o="https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js",s=' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';e.pdfObjectUrl&&(o=e.pdfObjectUrl,s="");var c='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="'+o+'"'+s+'><\/script><script >PDFObject.embed("'+this.output("dataurlstring")+'", '+JSON.stringify(e)+");<\/script></body></html>",u=n.open();return null!==u&&u.document.write(c),u}throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");case"pdfjsnewwindow":if("[object Window]"===Object.prototype.toString.call(n)){var l='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="'+(e.pdfJsUrl||"examples/PDF.js/web/viewer.html")+"?file=&downloadName="+e.filename+'" width="500px" height="400px" /></body></html>',f=n.open();if(null!==f){f.document.write(l);var d=this;f.document.documentElement.querySelector("#pdfViewer").onload=function(){f.document.title=e.filename,f.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d.output("bloburl"))}}return f}throw new Error("The option pdfjsnewwindow just works in a browser-environment.");case"dataurlnewwindow":if("[object Window]"!==Object.prototype.toString.call(n))throw new Error("The option dataurlnewwindow just works in a browser-environment.");var p='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="'+this.output("datauristring",e)+'"></iframe></body></html>',g=n.open();if(null!==g&&(g.document.write(p),g.document.title=e.filename),g||"undefined"==typeof safari)return g;break;case"datauri":case"dataurl":return n.document.location.href=this.output("datauristring",e);default:return null}})),Ge=function(t){return!0===Array.isArray(Ut)&&Ut.indexOf(t)>-1};switch(o){case"pt":_t=1;break;case"mm":_t=72/25.4;break;case"cm":_t=72/2.54;break;case"in":_t=72;break;case"px":_t=1==Ge("px_scaling")?.75:96/72;break;case"pc":case"em":_t=12;break;case"ex":_t=6;break;default:if("number"!=typeof o)throw new Error("Invalid unit: "+o);_t=o}var Ye=null;K(),Y();var Je=function(t){return null!==m?Ye.encryptor(t,0):function(t){return t}},Xe=y.__private__.getPageInfo=y.getPageInfo=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfo");return{objId:Rt[t].objId,pageNumber:t,pageContext:Rt[t]}},Ke=y.__private__.getPageInfoByObjId=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");for(var e in Rt)if(Rt[e].objId===t)break;return Xe(e)},Ze=y.__private__.getCurrentPageInfo=y.getCurrentPageInfo=function(){return{objId:Rt[$].objId,pageNumber:$,pageContext:Rt[$]}};y.addPage=function(){return Oe.apply(this,arguments),this},y.setPage=function(){return Me.apply(this,arguments),ht.call(this,ot[$]),this},y.insertPage=function(t){return this.addPage(),this.movePage($,t),this},y.movePage=function(t,e){var r,n;if(t>e){r=ot[t],n=Rt[t];for(var i=t;i>e;i--)ot[i]=ot[i-1],Rt[i]=Rt[i-1];ot[e]=r,Rt[e]=n,this.setPage(e)}else if(t<e){r=ot[t],n=Rt[t];for(var a=t;a<e;a++)ot[a]=ot[a+1],Rt[a]=Rt[a+1];ot[e]=r,Rt[e]=n,this.setPage(e)}return this},y.deletePage=function(){return Be.apply(this,arguments),this},y.__private__.text=y.text=function(e,r,n,i,a){var o,s,c,u,h,l,f,d,p,g=(i=i||{}).scope||this;if("number"==typeof e&&"number"==typeof r&&("string"==typeof n||Array.isArray(n))){var m=n;n=r,r=e,e=m}if(arguments[3]instanceof Vt==!1?(c=arguments[4],u=arguments[5],"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(f=arguments[3])&&null!==f||("string"==typeof c&&(u=c,c=null),"string"==typeof f&&(u=f,f=null),"number"==typeof f&&(c=f,f=null),i={flags:f,angle:c,align:u})):(q("The transform parameter of text() with a Matrix value"),p=a),isNaN(r)||isNaN(n)||null==e)throw new Error("Invalid arguments passed to jsPDF.text");if(0===e.length)return g;var v="",y=!1,w="number"==typeof i.lineHeightFactor?i.lineHeightFactor:lr,N=g.internal.scaleFactor;function L(t){return t=t.split("\t").join(Array(i.TabLen||9).join(" ")),Ce(t,f)}function A(t){for(var e,r=t.concat(),n=[],i=r.length;i--;)"string"==typeof(e=r.shift())?n.push(e):Array.isArray(t)&&(1===e.length||void 0===e[1]&&void 0===e[2])?n.push(e[0]):n.push([e[0],e[1],e[2]]);return n}function _(t,e){var r;if("string"==typeof t)r=e(t)[0];else if(Array.isArray(t)){for(var n,i,a=t.concat(),o=[],s=a.length;s--;)"string"==typeof(n=a.shift())?o.push(e(n)[0]):Array.isArray(n)&&"string"==typeof n[0]&&(i=e(n[0],n[1],n[2]),o.push([i[0],i[1],i[2]]));r=o}return r}var P=!1,k=!0;if("string"==typeof e)P=!0;else if(Array.isArray(e)){var I=e.concat();s=[];for(var F,C=I.length;C--;)("string"!=typeof(F=I.shift())||Array.isArray(F)&&"string"!=typeof F[0])&&(k=!1);P=k}if(!1===P)throw new Error('Type of text must be string or Array. "'+e+'" is not recognized.');"string"==typeof e&&(e=e.match(/[\r?\n]/)?e.split(/\r\n|\r|\n/g):[e]);var j=gt/g.internal.scaleFactor,B=j*(w-1);switch(i.baseline){case"bottom":n-=B;break;case"top":n+=j-B;break;case"hanging":n+=j-2*B;break;case"middle":n+=j/2-B}if((l=i.maxWidth||0)>0&&("string"==typeof e?e=g.splitTextToSize(e,l):"[object Array]"===Object.prototype.toString.call(e)&&(e=e.reduce((function(t,e){return t.concat(g.splitTextToSize(e,l))}),[]))),o={text:e,x:r,y:n,options:i,mutex:{pdfEscape:Ce,activeFontKey:St,fonts:Ft,activeFontSize:gt}},Tt.publish("preProcessText",o),e=o.text,c=(i=o.options).angle,p instanceof Vt==!1&&c&&"number"==typeof c){c*=Math.PI/180,0===i.rotationDirection&&(c=-c),S===x.ADVANCED&&(c=-c);var M=Math.cos(c),E=Math.sin(c);p=new Vt(M,E,-E,M,0,0)}else c&&c instanceof Vt&&(p=c);S!==x.ADVANCED||p||(p=Yt),void 0!==(h=i.charSpace||_r)&&(v+=O(U(h))+" Tc\n",this.setCharSpace(this.getCharSpace()||0)),void 0!==(d=i.horizontalScale)&&(v+=O(100*d)+" Tz\n");i.lang;var D=-1,R=void 0!==i.renderingMode?i.renderingMode:i.stroke,T=g.internal.getCurrentPageInfo().pageContext;switch(R){case 0:case!1:case"fill":D=0;break;case 1:case!0:case"stroke":D=1;break;case 2:case"fillThenStroke":D=2;break;case 3:case"invisible":D=3;break;case 4:case"fillAndAddForClipping":D=4;break;case 5:case"strokeAndAddPathForClipping":D=5;break;case 6:case"fillThenStrokeAndAddToPathForClipping":D=6;break;case 7:case"addToPathForClipping":D=7}var z=void 0!==T.usedRenderingMode?T.usedRenderingMode:-1;-1!==D?v+=D+" Tr\n":-1!==z&&(v+="0 Tr\n"),-1!==D&&(T.usedRenderingMode=D),u=i.align||"left";var H,W=gt*w,V=g.internal.pageSize.getWidth(),G=Ft[St];h=i.charSpace||_r,l=i.maxWidth||0,f=Object.assign({autoencode:!0,noBOM:!0},i.flags);var Y=[];if("[object Array]"===Object.prototype.toString.call(e)){var J;s=A(e),"left"!==u&&(H=s.map((function(t){return g.getStringUnitWidth(t,{font:G,charSpace:h,fontSize:gt,doKerning:!1})*gt/N})));var X,K=0;if("right"===u){r-=H[0],e=[],C=s.length;for(var Z=0;Z<C;Z++)0===Z?(X=br(r),J=yr(n)):(X=U(K-H[Z]),J=-W),e.push([s[Z],X,J]),K=H[Z]}else if("center"===u){r-=H[0]/2,e=[],C=s.length;for(var $=0;$<C;$++)0===$?(X=br(r),J=yr(n)):(X=U((K-H[$])/2),J=-W),e.push([s[$],X,J]),K=H[$]}else if("left"===u){e=[],C=s.length;for(var Q=0;Q<C;Q++)e.push(s[Q])}else{if("justify"!==u)throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');e=[],C=s.length,l=0!==l?l:V;for(var tt=0;tt<C;tt++)J=0===tt?yr(n):-W,X=0===tt?br(r):0,tt<C-1?Y.push(O(U((l-H[tt])/(s[tt].split(" ").length-1)))):Y.push(0),e.push([s[tt],X,J])}}var et="boolean"==typeof i.R2L?i.R2L:bt;!0===et&&(e=_(e,(function(t,e,r){return[t.split("").reverse().join(""),e,r]}))),o={text:e,x:r,y:n,options:i,mutex:{pdfEscape:Ce,activeFontKey:St,fonts:Ft,activeFontSize:gt}},Tt.publish("postProcessText",o),e=o.text,y=o.mutex.isHex||!1;var rt=Ft[St].encoding;"WinAnsiEncoding"!==rt&&"StandardEncoding"!==rt||(e=_(e,(function(t,e,r){return[L(t),e,r]}))),s=A(e),e=[];for(var nt,it,at,ot=0,st=1,ct=Array.isArray(s[0])?st:ot,ut="",ht=function(t,e,r){var n="";return r instanceof Vt?(r="number"==typeof i.angle?Gt(r,new Vt(1,0,0,1,t,e)):Gt(new Vt(1,0,0,1,t,e),r),S===x.ADVANCED&&(r=Gt(new Vt(1,0,0,-1,0,0),r)),n=r.join(" ")+" Tm\n"):n=O(t)+" "+O(e)+" Td\n",n},ft=0;ft<s.length;ft++){switch(ut="",ct){case st:at=(y?"<":"(")+s[ft][0]+(y?">":")"),nt=parseFloat(s[ft][1]),it=parseFloat(s[ft][2]);break;case ot:at=(y?"<":"(")+s[ft]+(y?">":")"),nt=br(r),it=yr(n)}void 0!==Y&&void 0!==Y[ft]&&(ut=Y[ft]+" Tw\n"),0===ft?e.push(ut+ht(nt,it,p)+at):ct===ot?e.push(ut+at):ct===st&&e.push(ut+ht(nt,it,p)+at)}e=ct===ot?e.join(" Tj\nT* "):e.join(" Tj\n"),e+=" Tj\n";var dt="BT\n/";return dt+=St+" "+gt+" Tf\n",dt+=O(gt*w)+" TL\n",dt+=xr+"\n",dt+=v,dt+=e,lt(dt+="ET"),b[St]=!0,g};var $e=y.__private__.clip=y.clip=function(t){return lt("evenodd"===t?"W*":"W"),this};y.clipEvenOdd=function(){return $e("evenodd")},y.__private__.discardPath=y.discardPath=function(){return lt("n"),this};var Qe=y.__private__.isValidStyle=function(t){var e=!1;return-1!==[void 0,null,"S","D","F","DF","FD","f","f*","B","B*","n"].indexOf(t)&&(e=!0),e};y.__private__.setDefaultPathOperation=y.setDefaultPathOperation=function(t){return Qe(t)&&(g=t),this};var tr=y.__private__.getStyle=y.getStyle=function(t){var e=g;switch(t){case"D":case"S":e="S";break;case"F":e="f";break;case"FD":case"DF":e="B";break;case"f":case"f*":case"B":case"B*":e=t}return e},er=y.close=function(){return lt("h"),this};y.stroke=function(){return lt("S"),this},y.fill=function(t){return rr("f",t),this},y.fillEvenOdd=function(t){return rr("f*",t),this},y.fillStroke=function(t){return rr("B",t),this},y.fillStrokeEvenOdd=function(t){return rr("B*",t),this};var rr=function(e,r){"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(r)?ar(r,e):lt(e)},nr=function(t){null===t||S===x.ADVANCED&&void 0===t||(t=tr(t),lt(t))};function ir(t,e,r,n,i){var a=new M(e||this.boundingBox,r||this.xStep,n||this.yStep,this.gState,i||this.matrix);a.stream=this.stream;var o=t+"$$"+this.cloneIndex+++"$$";return Jt(o,a),a}var ar=function(t,e){var r=Bt[t.key],n=Ot[r];if(n instanceof B)lt("q"),lt(or(e)),n.gState&&y.setGState(n.gState),lt(t.matrix.toString()+" cm"),lt("/"+r+" sh"),lt("Q");else if(n instanceof M){var i=new Vt(1,0,0,-1,0,Rr());t.matrix&&(i=i.multiply(t.matrix||Yt),r=ir.call(n,t.key,t.boundingBox,t.xStep,t.yStep,i).id),lt("q"),lt("/Pattern cs"),lt("/"+r+" scn"),n.gState&&y.setGState(n.gState),lt(e),lt("Q")}},or=function(t){switch(t){case"f":case"F":return"W n";case"f*":return"W* n";case"B":return"W S";case"B*":return"W* S";case"S":return"W S";case"n":return"W n"}},sr=y.moveTo=function(t,e){return lt(O(U(t))+" "+O(H(e))+" m"),this},cr=y.lineTo=function(t,e){return lt(O(U(t))+" "+O(H(e))+" l"),this},ur=y.curveTo=function(t,e,r,n,i,a){return lt([O(U(t)),O(H(e)),O(U(r)),O(H(n)),O(U(i)),O(H(a)),"c"].join(" ")),this};y.__private__.line=y.line=function(t,e,r,n,i){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||!Qe(i))throw new Error("Invalid arguments passed to jsPDF.line");return S===x.COMPAT?this.lines([[r-t,n-e]],t,e,[1,1],i||"S"):this.lines([[r-t,n-e]],t,e,[1,1]).stroke()},y.__private__.lines=y.lines=function(t,e,r,n,i,a){var o,s,c,u,h,l,f,d,p,g,m,v;if("number"==typeof t&&(v=r,r=e,e=t,t=v),n=n||[1,1],a=a||!1,isNaN(e)||isNaN(r)||!Array.isArray(t)||!Array.isArray(n)||!Qe(i)||"boolean"!=typeof a)throw new Error("Invalid arguments passed to jsPDF.lines");for(sr(e,r),o=n[0],s=n[1],u=t.length,g=e,m=r,c=0;c<u;c++)2===(h=t[c]).length?(g=h[0]*o+g,m=h[1]*s+m,cr(g,m)):(l=h[0]*o+g,f=h[1]*s+m,d=h[2]*o+g,p=h[3]*s+m,g=h[4]*o+g,m=h[5]*s+m,ur(l,f,d,p,g,m));return a&&er(),nr(i),this},y.path=function(t){for(var e=0;e<t.length;e++){var r=t[e],n=r.c;switch(r.op){case"m":sr(n[0],n[1]);break;case"l":cr(n[0],n[1]);break;case"c":ur.apply(this,n);break;case"h":er()}}return this},y.__private__.rect=y.rect=function(t,e,r,n,i){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||!Qe(i))throw new Error("Invalid arguments passed to jsPDF.rect");return S===x.COMPAT&&(n=-n),lt([O(U(t)),O(H(e)),O(U(r)),O(U(n)),"re"].join(" ")),nr(i),this},y.__private__.triangle=y.triangle=function(t,e,r,n,i,a,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i)||isNaN(a)||!Qe(o))throw new Error("Invalid arguments passed to jsPDF.triangle");return this.lines([[r-t,n-e],[i-r,a-n],[t-i,e-a]],t,e,[1,1],o,!0),this},y.__private__.roundedRect=y.roundedRect=function(t,e,r,n,i,a,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i)||isNaN(a)||!Qe(o))throw new Error("Invalid arguments passed to jsPDF.roundedRect");var s=4/3*(Math.SQRT2-1);return i=Math.min(i,.5*r),a=Math.min(a,.5*n),this.lines([[r-2*i,0],[i*s,0,i,a-a*s,i,a],[0,n-2*a],[0,a*s,-i*s,a,-i,a],[2*i-r,0],[-i*s,0,-i,-a*s,-i,-a],[0,2*a-n],[0,-a*s,i*s,-a,i,-a]],t+i,e,[1,1],o,!0),this},y.__private__.ellipse=y.ellipse=function(t,e,r,n,i){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||!Qe(i))throw new Error("Invalid arguments passed to jsPDF.ellipse");var a=4/3*(Math.SQRT2-1)*r,o=4/3*(Math.SQRT2-1)*n;return sr(t+r,e),ur(t+r,e-o,t+a,e-n,t,e-n),ur(t-a,e-n,t-r,e-o,t-r,e),ur(t-r,e+o,t-a,e+n,t,e+n),ur(t+a,e+n,t+r,e+o,t+r,e),nr(i),this},y.__private__.circle=y.circle=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||!Qe(n))throw new Error("Invalid arguments passed to jsPDF.circle");return this.ellipse(t,e,r,r,n)},y.setFont=function(t,e,r){return r&&(e=k(e,r)),St=qe(t,e,{disableWarning:!1}),this};var hr=y.__private__.getFont=y.getFont=function(){return Ft[qe.apply(y,arguments)]};y.__private__.getFontList=y.getFontList=function(){var t,e,r={};for(t in Ct)if(Ct.hasOwnProperty(t))for(e in r[t]=[],Ct[t])Ct[t].hasOwnProperty(e)&&r[t].push(e);return r},y.addFont=function(t,e,r,n,i){var a=["StandardEncoding","MacRomanEncoding","Identity-H","WinAnsiEncoding"];return arguments[3]&&-1!==a.indexOf(arguments[3])?i=arguments[3]:arguments[3]&&-1==a.indexOf(arguments[3])&&(r=k(r,n)),i=i||"Identity-H",Pe.call(this,t,e,r,i)};var lr,fr=e.lineWidth||.200025,dr=y.__private__.getLineWidth=y.getLineWidth=function(){return fr},pr=y.__private__.setLineWidth=y.setLineWidth=function(t){return fr=t,lt(O(U(t))+" w"),this};y.__private__.setLineDash=E.API.setLineDash=E.API.setLineDashPattern=function(t,e){if(t=t||[],e=e||0,isNaN(e)||!Array.isArray(t))throw new Error("Invalid arguments passed to jsPDF.setLineDash");return t=t.map((function(t){return O(U(t))})).join(" "),e=O(U(e)),lt("["+t+"] "+e+" d"),this};var gr=y.__private__.getLineHeight=y.getLineHeight=function(){return gt*lr};y.__private__.getLineHeight=y.getLineHeight=function(){return gt*lr};var mr=y.__private__.setLineHeightFactor=y.setLineHeightFactor=function(t){return"number"==typeof(t=t||1.15)&&(lr=t),this},vr=y.__private__.getLineHeightFactor=y.getLineHeightFactor=function(){return lr};mr(e.lineHeight);var br=y.__private__.getHorizontalCoordinate=function(t){return U(t)},yr=y.__private__.getVerticalCoordinate=function(t){return S===x.ADVANCED?t:Rt[$].mediaBox.topRightY-Rt[$].mediaBox.bottomLeftY-U(t)},wr=y.__private__.getHorizontalCoordinateString=y.getHorizontalCoordinateString=function(t){return O(br(t))},Nr=y.__private__.getVerticalCoordinateString=y.getVerticalCoordinateString=function(t){return O(yr(t))},Lr=e.strokeColor||"0 G";y.__private__.getStrokeColor=y.getDrawColor=function(){return ee(Lr)},y.__private__.setStrokeColor=y.setDrawColor=function(t,e,r,n){return Lr=re({ch1:t,ch2:e,ch3:r,ch4:n,pdfColorType:"draw",precision:2}),lt(Lr),this};var Ar=e.fillColor||"0 g";y.__private__.getFillColor=y.getFillColor=function(){return ee(Ar)},y.__private__.setFillColor=y.setFillColor=function(t,e,r,n){return Ar=re({ch1:t,ch2:e,ch3:r,ch4:n,pdfColorType:"fill",precision:2}),lt(Ar),this};var xr=e.textColor||"0 g",Sr=y.__private__.getTextColor=y.getTextColor=function(){return ee(xr)};y.__private__.setTextColor=y.setTextColor=function(t,e,r,n){return xr=re({ch1:t,ch2:e,ch3:r,ch4:n,pdfColorType:"text",precision:3}),this};var _r=e.charSpace,Pr=y.__private__.getCharSpace=y.getCharSpace=function(){return parseFloat(_r||0)};y.__private__.setCharSpace=y.setCharSpace=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.setCharSpace");return _r=t,this};var kr=0;y.CapJoinStyles={0:0,butt:0,but:0,miter:0,1:1,round:1,rounded:1,circle:1,2:2,projecting:2,project:2,square:2,bevel:2},y.__private__.setLineCap=y.setLineCap=function(t){var e=y.CapJoinStyles[t];if(void 0===e)throw new Error("Line cap style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return kr=e,lt(e+" J"),this};var Ir=0;y.__private__.setLineJoin=y.setLineJoin=function(t){var e=y.CapJoinStyles[t];if(void 0===e)throw new Error("Line join style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return Ir=e,lt(e+" j"),this},y.__private__.setLineMiterLimit=y.__private__.setMiterLimit=y.setLineMiterLimit=y.setMiterLimit=function(t){if(t=t||0,isNaN(t))throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");return lt(O(U(t))+" M"),this},y.GState=j,y.setGState=function(t){(t="string"==typeof t?Mt[Et[t]]:Fr(null,t)).equals(qt)||(lt("/"+t.id+" gs"),qt=t)};var Fr=function(t,e){if(!t||!Et[t]){var r=!1;for(var n in Mt)if(Mt.hasOwnProperty(n)&&Mt[n].equals(e)){r=!0;break}if(r)e=Mt[n];else{var i="GS"+(Object.keys(Mt).length+1).toString(10);Mt[i]=e,e.id=i}return t&&(Et[t]=e.id),Tt.publish("addGState",e),e}};y.addGState=function(t,e){return Fr(t,e),this},y.saveGraphicsState=function(){return lt("q"),jt.push({key:St,size:gt,color:xr}),this},y.restoreGraphicsState=function(){lt("Q");var t=jt.pop();return St=t.key,gt=t.size,xr=t.color,qt=null,this},y.setCurrentTransformationMatrix=function(t){return lt(t.toString()+" cm"),this},y.comment=function(t){return lt("#"+t),this};var Cr=function(t,e){var r=t||0;Object.defineProperty(this,"x",{enumerable:!0,get:function(){return r},set:function(t){isNaN(t)||(r=parseFloat(t))}});var n=e||0;Object.defineProperty(this,"y",{enumerable:!0,get:function(){return n},set:function(t){isNaN(t)||(n=parseFloat(t))}});var i="pt";return Object.defineProperty(this,"type",{enumerable:!0,get:function(){return i},set:function(t){i=t.toString()}}),this},jr=function(t,e,r,n){Cr.call(this,t,e),this.type="rect";var i=r||0;Object.defineProperty(this,"w",{enumerable:!0,get:function(){return i},set:function(t){isNaN(t)||(i=parseFloat(t))}});var a=n||0;return Object.defineProperty(this,"h",{enumerable:!0,get:function(){return a},set:function(t){isNaN(t)||(a=parseFloat(t))}}),this},Or=function(){this.page=Dt,this.currentPage=$,this.pages=ot.slice(0),this.pagesContext=Rt.slice(0),this.x=Pt,this.y=kt,this.matrix=It,this.width=qr($),this.height=Rr($),this.outputDestination=ct,this.id="",this.objectNumber=-1};Or.prototype.restore=function(){Dt=this.page,$=this.currentPage,Rt=this.pagesContext,ot=this.pages,Pt=this.x,kt=this.y,It=this.matrix,Dr($,this.width),Tr($,this.height),ct=this.outputDestination};var Br=function(t,e,r,n,i){Wt.push(new Or),Dt=$=0,ot=[],Pt=t,kt=e,It=i,je([r,n])},Mr=function(t){if(Ht[t])Wt.pop().restore();else{var e=new Or,r="Xo"+(Object.keys(zt).length+1).toString(10);e.id=r,Ht[t]=r,zt[r]=e,Tt.publish("addFormObject",e),Wt.pop().restore()}};for(var Er in y.beginFormObject=function(t,e,r,n,i){return Br(t,e,r,n,i),this},y.endFormObject=function(t){return Mr(t),this},y.doFormObject=function(t,e){var r=zt[Ht[t]];return lt("q"),lt(e.toString()+" cm"),lt("/"+r.id+" Do"),lt("Q"),this},y.getFormObject=function(t){var e=zt[Ht[t]];return{x:e.x,y:e.y,width:e.width,height:e.height,matrix:e.matrix}},y.save=function(t,e){return t=t||"generated.pdf",(e=e||{}).returnPromise=e.returnPromise||!1,!1===e.returnPromise?(l(We(He()),t),"function"==typeof l.unload&&n.setTimeout&&setTimeout(l.unload,911),this):new Promise((function(e,r){try{var i=l(We(He()),t);"function"==typeof l.unload&&n.setTimeout&&setTimeout(l.unload,911),e(i)}catch(t){r(t.message)}}))},E.API)E.API.hasOwnProperty(Er)&&("events"===Er&&E.API.events.length?function(t,e){var r,n,i;for(i=e.length-1;-1!==i;i--)r=e[i][0],n=e[i][1],t.subscribe.apply(t,[r].concat("function"==typeof n?[n]:n))}(Tt,E.API.events):y[Er]=E.API[Er]);var qr=y.getPageWidth=function(t){return(Rt[t=t||$].mediaBox.topRightX-Rt[t].mediaBox.bottomLeftX)/_t},Dr=y.setPageWidth=function(t,e){Rt[t].mediaBox.topRightX=e*_t+Rt[t].mediaBox.bottomLeftX},Rr=y.getPageHeight=function(t){return(Rt[t=t||$].mediaBox.topRightY-Rt[t].mediaBox.bottomLeftY)/_t},Tr=y.setPageHeight=function(t,e){Rt[t].mediaBox.topRightY=e*_t+Rt[t].mediaBox.bottomLeftY};return y.internal={pdfEscape:Ce,getStyle:tr,getFont:hr,getFontSize:vt,getCharSpace:Pr,getTextColor:Sr,getLineHeight:gr,getLineHeightFactor:vr,getLineWidth:dr,write:ft,getHorizontalCoordinate:br,getVerticalCoordinate:yr,getCoordinateString:wr,getVerticalCoordinateString:Nr,collections:{},newObject:Xt,newAdditionalObject:$t,newObjectDeferred:Kt,newObjectDeferredBegin:Zt,getFilters:ne,putStream:ie,events:Tt,scaleFactor:_t,pageSize:{getWidth:function(){return qr($)},setWidth:function(t){Dr($,t)},getHeight:function(){return Rr($)},setHeight:function(t){Tr($,t)}},encryptionOptions:m,encryption:Ye,getEncryptor:Je,output:Ve,getNumberOfPages:Ee,pages:ot,out:lt,f2:R,f3:T,getPageInfo:Xe,getPageInfoByObjId:Ke,getCurrentPageInfo:Ze,getPDFVersion:N,Point:Cr,Rectangle:jr,Matrix:Vt,hasHotfix:Ge},Object.defineProperty(y.internal.pageSize,"width",{get:function(){return qr($)},set:function(t){Dr($,t)},enumerable:!0,configurable:!0}),Object.defineProperty(y.internal.pageSize,"height",{get:function(){return Rr($)},set:function(t){Tr($,t)},enumerable:!0,configurable:!0}),ke.call(y,pt),St="F1",Oe(s,i),Tt.publish("initialized"),y}I.prototype.lsbFirstWord=function(t){return String.fromCharCode(t>>0&255,t>>8&255,t>>16&255,t>>24&255)},I.prototype.toHexString=function(t){return t.split("").map((function(t){return("0"+(255&t.charCodeAt(0)).toString(16)).slice(-2)})).join("")},I.prototype.hexToBytes=function(t){for(var e=[],r=0;r<t.length;r+=2)e.push(String.fromCharCode(parseInt(t.substr(r,2),16)));return e.join("")},I.prototype.processOwnerPassword=function(t,e){return P(x(e).substr(0,5),t)},I.prototype.encryptor=function(t,e){var r=x(this.encryptionKey+String.fromCharCode(255&t,t>>8&255,t>>16&255,255&e,e>>8&255)).substr(0,10);return function(t){return P(r,t)}},j.prototype.equals=function(e){var r,n="id,objectNumber,equals";if(!e||(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(this))return!1;var i=0;for(r in this)if(!(n.indexOf(r)>=0)){if(this.hasOwnProperty(r)&&!e.hasOwnProperty(r))return!1;if(this[r]!==e[r])return!1;i++}for(r in e)e.hasOwnProperty(r)&&n.indexOf(r)<0&&i--;return 0===i},E.API={events:[]},E.version="2.5.1";var q=E.API,D=1,R=function(t){return t.replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},T=function(t){return t.replace(/\\\\/g,"\\").replace(/\\\(/g,"(").replace(/\\\)/g,")")},U=function(t){return t.toFixed(2)},z=function(t){return t.toFixed(5)};q.__acroform__={};var H=function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t},W=function(t){return t*D},V=function(t){var e=new ut,r=At.internal.getHeight(t)||0,n=At.internal.getWidth(t)||0;return e.BBox=[0,0,Number(U(n)),Number(U(r))],e},G=q.__acroform__.setBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");return t|=1<<e},Y=q.__acroform__.clearBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");return t&=~(1<<e)},J=q.__acroform__.getBit=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");return 0==(t&1<<e)?0:1},X=q.__acroform__.getBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");return J(t,e-1)},K=q.__acroform__.setBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");return G(t,e-1)},Z=q.__acroform__.clearBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");return Y(t,e-1)},$=q.__acroform__.calculateCoordinates=function(t,e){var r=e.internal.getHorizontalCoordinate,n=e.internal.getVerticalCoordinate,i=t[0],a=t[1],o=t[2],s=t[3],c={};return c.lowerLeft_X=r(i)||0,c.lowerLeft_Y=n(a+s)||0,c.upperRight_X=r(i+o)||0,c.upperRight_Y=n(a)||0,[Number(U(c.lowerLeft_X)),Number(U(c.lowerLeft_Y)),Number(U(c.upperRight_X)),Number(U(c.upperRight_Y))]},Q=function(t){if(t.appearanceStreamContent)return t.appearanceStreamContent;if(t.V||t.DV){var e=[],r=t._V||t.DV,n=tt(t,r),i=t.scope.internal.getFont(t.fontName,t.fontStyle).id;e.push("/Tx BMC"),e.push("q"),e.push("BT"),e.push(t.scope.__private__.encodeColorString(t.color)),e.push("/"+i+" "+U(n.fontSize)+" Tf"),e.push("1 0 0 1 0 0 Tm"),e.push(n.text),e.push("ET"),e.push("Q"),e.push("EMC");var a=V(t);return a.scope=t.scope,a.stream=e.join("\n"),a}},tt=function(t,e){var r=0===t.fontSize?t.maxFontSize:t.fontSize,n={text:"",fontSize:""},i=(e=")"==(e="("==e.substr(0,1)?e.substr(1):e).substr(e.length-1)?e.substr(0,e.length-1):e).split(" ");i=t.multiline?i.map((function(t){return t.split("\n")})):i.map((function(t){return[t]}));var a=r,o=At.internal.getHeight(t)||0;o=o<0?-o:o;var s=At.internal.getWidth(t)||0;s=s<0?-s:s;var c=function(e,r,n){if(e+1<i.length){var a=r+" "+i[e+1][0];return et(a,t,n).width<=s-4}return!1};a++;t:for(;a>0;){e="",a--;var u,h,l=et("3",t,a).height,f=t.multiline?o-a:(o-l)/2,d=f+=2,p=0,g=0,m=0;if(a<=0){e="(...) Tj\n",e+="% Width of Text: "+et(e,t,a=12).width+", FieldWidth:"+s+"\n";break}for(var v="",b=0,y=0;y<i.length;y++)if(i.hasOwnProperty(y)){var w=!1;if(1!==i[y].length&&m!==i[y].length-1){if((l+2)*(b+2)+2>o)continue t;v+=i[y][m],w=!0,g=y,y--}else{v=" "==(v+=i[y][m]+" ").substr(v.length-1)?v.substr(0,v.length-1):v;var N=parseInt(y),L=c(N,v,a),A=y>=i.length-1;if(L&&!A){v+=" ",m=0;continue}if(L||A){if(A)g=N;else if(t.multiline&&(l+2)*(b+2)+2>o)continue t}else{if(!t.multiline)continue t;if((l+2)*(b+2)+2>o)continue t;g=N}}for(var x="",S=p;S<=g;S++){var _=i[S];if(t.multiline){if(S===g){x+=_[m]+" ",m=(m+1)%_.length;continue}if(S===p){x+=_[_.length-1]+" ";continue}}x+=_[0]+" "}switch(x=" "==x.substr(x.length-1)?x.substr(0,x.length-1):x,h=et(x,t,a).width,t.textAlign){case"right":u=s-h-2;break;case"center":u=(s-h)/2;break;case"left":default:u=2}e+=U(u)+" "+U(d)+" Td\n",e+="("+R(x)+") Tj\n",e+=-U(u)+" 0 Td\n",d=-(a+2),h=0,p=w?g:g+1,b++,v=""}else;break}return n.text=e,n.fontSize=a,n},et=function(t,e,r){var n=e.scope.internal.getFont(e.fontName,e.fontStyle),i=e.scope.getStringUnitWidth(t,{font:n,fontSize:parseFloat(r),charSpace:0})*parseFloat(r);return{height:e.scope.getStringUnitWidth("3",{font:n,fontSize:parseFloat(r),charSpace:0})*parseFloat(r)*1.5,width:i}},rt={fields:[],xForms:[],acroFormDictionaryRoot:null,printedOut:!1,internal:null,isInitialized:!1},nt=function(t,e){var r={type:"reference",object:t};void 0===e.internal.getPageInfo(t.page).pageContext.annotations.find((function(t){return t.type===r.type&&t.object===r.object}))&&e.internal.getPageInfo(t.page).pageContext.annotations.push(r)},it=function(e,r){for(var n in e)if(e.hasOwnProperty(n)){var i=n,a=e[n];r.internal.newObjectDeferredBegin(a.objId,!0),"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(a)&&"function"==typeof a.putStream&&a.putStream(),delete e[i]}},at=function(e,r){if(r.scope=e,void 0!==e.internal&&(void 0===e.internal.acroformPlugin||!1===e.internal.acroformPlugin.isInitialized)){if(lt.FieldNum=0,e.internal.acroformPlugin=JSON.parse(JSON.stringify(rt)),e.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("Exception while creating AcroformDictionary");D=e.internal.scaleFactor,e.internal.acroformPlugin.acroFormDictionaryRoot=new ht,e.internal.acroformPlugin.acroFormDictionaryRoot.scope=e,e.internal.acroformPlugin.acroFormDictionaryRoot._eventID=e.internal.events.subscribe("postPutResources",(function(){!function(t){t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID),delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID,t.internal.acroformPlugin.printedOut=!0}(e)})),e.internal.events.subscribe("buildDocument",(function(){!function(t){t.internal.acroformPlugin.acroFormDictionaryRoot.objId=void 0;var e=t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;for(var r in e)if(e.hasOwnProperty(r)){var n=e[r];n.objId=void 0,n.hasAnnotation&&nt(n,t)}}(e)})),e.internal.events.subscribe("putCatalog",(function(){!function(t){if(void 0===t.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("putCatalogCallback: Root missing.");t.internal.write("/AcroForm "+t.internal.acroformPlugin.acroFormDictionaryRoot.objId+" 0 R")}(e)})),e.internal.events.subscribe("postPutPages",(function(r){!function(e,r){var n=!e;for(var i in e||(r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId,!0),r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()),e=e||r.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if(e.hasOwnProperty(i)){var a=e[i],o=[],s=a.Rect;if(a.Rect&&(a.Rect=$(a.Rect,r)),r.internal.newObjectDeferredBegin(a.objId,!0),a.DA=At.createDefaultAppearanceStream(a),"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(a)&&"function"==typeof a.getKeyValueListForStream&&(o=a.getKeyValueListForStream()),a.Rect=s,a.hasAppearanceStream&&!a.appearanceStreamContent){var c=Q(a);o.push({key:"AP",value:"<</N "+c+">>"}),r.internal.acroformPlugin.xForms.push(c)}if(a.appearanceStreamContent){var u="";for(var h in a.appearanceStreamContent)if(a.appearanceStreamContent.hasOwnProperty(h)){var l=a.appearanceStreamContent[h];if(u+="/"+h+" ",u+="<<",Object.keys(l).length>=1||Array.isArray(l)){for(var i in l)if(l.hasOwnProperty(i)){var f=l[i];"function"==typeof f&&(f=f.call(r,a)),u+="/"+i+" "+f+" ",r.internal.acroformPlugin.xForms.indexOf(f)>=0||r.internal.acroformPlugin.xForms.push(f)}}else"function"==typeof(f=l)&&(f=f.call(r,a)),u+="/"+i+" "+f,r.internal.acroformPlugin.xForms.indexOf(f)>=0||r.internal.acroformPlugin.xForms.push(f);u+=">>"}o.push({key:"AP",value:"<<\n"+u+">>"})}r.internal.putStream({additionalKeyValues:o,objectId:a.objId}),r.internal.out("endobj")}n&&it(r.internal.acroformPlugin.xForms,r)}(r,e)})),e.internal.acroformPlugin.isInitialized=!0}},ot=q.__acroform__.arrayToPdfArray=function(e,r,n){var i=function(t){return t};if(Array.isArray(e)){for(var a="[",o=0;o<e.length;o++)switch(0!==o&&(a+=" "),(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e[o])){case"boolean":case"number":case"object":a+=e[o].toString();break;case"string":"/"!==e[o].substr(0,1)?(void 0!==r&&n&&(i=n.internal.getEncryptor(r)),a+="("+R(i(e[o].toString()))+")"):a+=e[o].toString()}return a+="]"}throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray")};var st=function(t,e,r){var n=function(t){return t};return void 0!==e&&r&&(n=r.internal.getEncryptor(e)),(t=t||"").toString(),t="("+R(n(t))+")"},ct=function(){this._objId=void 0,this._scope=void 0,Object.defineProperty(this,"objId",{get:function(){if(void 0===this._objId){if(void 0===this.scope)return;this._objId=this.scope.internal.newObjectDeferred()}return this._objId},set:function(t){this._objId=t}}),Object.defineProperty(this,"scope",{value:this._scope,writable:!0})};ct.prototype.toString=function(){return this.objId+" 0 R"},ct.prototype.putStream=function(){var t=this.getKeyValueListForStream();this.scope.internal.putStream({data:this.stream,additionalKeyValues:t,objectId:this.objId}),this.scope.internal.out("endobj")},ct.prototype.getKeyValueListForStream=function(){var t=[],e=Object.getOwnPropertyNames(this).filter((function(t){return"content"!=t&&"appearanceStreamContent"!=t&&"scope"!=t&&"objId"!=t&&"_"!=t.substring(0,1)}));for(var r in e)if(!1===Object.getOwnPropertyDescriptor(this,e[r]).configurable){var n=e[r],i=this[n];i&&(Array.isArray(i)?t.push({key:n,value:ot(i,this.objId,this.scope)}):i instanceof ct?(i.scope=this.scope,t.push({key:n,value:i.objId+" 0 R"})):"function"!=typeof i&&t.push({key:n,value:i}))}return t};var ut=function(){ct.call(this),Object.defineProperty(this,"Type",{value:"/XObject",configurable:!1,writable:!0}),Object.defineProperty(this,"Subtype",{value:"/Form",configurable:!1,writable:!0}),Object.defineProperty(this,"FormType",{value:1,configurable:!1,writable:!0});var t,e=[];Object.defineProperty(this,"BBox",{configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,"Resources",{value:"2 0 R",configurable:!1,writable:!0}),Object.defineProperty(this,"stream",{enumerable:!1,configurable:!0,set:function(e){t=e.trim()},get:function(){return t||null}})};H(ut,ct);var ht=function(){ct.call(this);var t,e=[];Object.defineProperty(this,"Kids",{enumerable:!1,configurable:!0,get:function(){return e.length>0?e:void 0}}),Object.defineProperty(this,"Fields",{enumerable:!1,configurable:!1,get:function(){return e}}),Object.defineProperty(this,"DA",{enumerable:!1,configurable:!1,get:function(){if(t){var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),"("+R(e(t))+")"}},set:function(e){t=e}})};H(ht,ct);var lt=function t(){ct.call(this);var e=4;Object.defineProperty(this,"F",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute F supplied.');e=t}}),Object.defineProperty(this,"showWhenPrinted",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(e,3))},set:function(t){!0===Boolean(t)?this.F=K(e,3):this.F=Z(e,3)}});var r=0;Object.defineProperty(this,"Ff",{enumerable:!1,configurable:!1,get:function(){return r},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute Ff supplied.');r=t}});var n=[];Object.defineProperty(this,"Rect",{enumerable:!1,configurable:!1,get:function(){if(0!==n.length)return n},set:function(t){n=void 0!==t?t:[]}}),Object.defineProperty(this,"x",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[0])?0:n[0]},set:function(t){n[0]=t}}),Object.defineProperty(this,"y",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[1])?0:n[1]},set:function(t){n[1]=t}}),Object.defineProperty(this,"width",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[2])?0:n[2]},set:function(t){n[2]=t}}),Object.defineProperty(this,"height",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[3])?0:n[3]},set:function(t){n[3]=t}});var i="";Object.defineProperty(this,"FT",{enumerable:!0,configurable:!1,get:function(){return i},set:function(t){switch(t){case"/Btn":case"/Tx":case"/Ch":case"/Sig":i=t;break;default:throw new Error('Invalid value "'+t+'" for attribute FT supplied.')}}});var a=null;Object.defineProperty(this,"T",{enumerable:!0,configurable:!1,get:function(){if(!a||a.length<1){if(this instanceof yt)return;a="FieldObject"+t.FieldNum++}var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),"("+R(e(a))+")"},set:function(t){a=t.toString()}}),Object.defineProperty(this,"fieldName",{configurable:!0,enumerable:!0,get:function(){return a},set:function(t){a=t}});var o="helvetica";Object.defineProperty(this,"fontName",{enumerable:!0,configurable:!0,get:function(){return o},set:function(t){o=t}});var s="normal";Object.defineProperty(this,"fontStyle",{enumerable:!0,configurable:!0,get:function(){return s},set:function(t){s=t}});var c=0;Object.defineProperty(this,"fontSize",{enumerable:!0,configurable:!0,get:function(){return c},set:function(t){c=t}});var u=void 0;Object.defineProperty(this,"maxFontSize",{enumerable:!0,configurable:!0,get:function(){return void 0===u?50/D:u},set:function(t){u=t}});var h="black";Object.defineProperty(this,"color",{enumerable:!0,configurable:!0,get:function(){return h},set:function(t){h=t}});var l="/F1 0 Tf 0 g";Object.defineProperty(this,"DA",{enumerable:!0,configurable:!1,get:function(){if(!(!l||this instanceof yt||this instanceof Nt))return st(l,this.objId,this.scope)},set:function(t){t=t.toString(),l=t}});var f=null;Object.defineProperty(this,"DV",{enumerable:!1,configurable:!1,get:function(){if(f)return this instanceof mt==!1?st(f,this.objId,this.scope):f},set:function(t){t=t.toString(),f=this instanceof mt==!1?"("===t.substr(0,1)?T(t.substr(1,t.length-2)):T(t):t}}),Object.defineProperty(this,"defaultValue",{enumerable:!0,configurable:!0,get:function(){return this instanceof mt==!0?T(f.substr(1,f.length-1)):f},set:function(t){t=t.toString(),f=this instanceof mt==!0?"/"+t:t}});var d=null;Object.defineProperty(this,"_V",{enumerable:!1,configurable:!1,get:function(){if(d)return d},set:function(t){this.V=t}}),Object.defineProperty(this,"V",{enumerable:!1,configurable:!1,get:function(){if(d)return this instanceof mt==!1?st(d,this.objId,this.scope):d},set:function(t){t=t.toString(),d=this instanceof mt==!1?"("===t.substr(0,1)?T(t.substr(1,t.length-2)):T(t):t}}),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,get:function(){return this instanceof mt==!0?T(d.substr(1,d.length-1)):d},set:function(t){t=t.toString(),d=this instanceof mt==!0?"/"+t:t}}),Object.defineProperty(this,"hasAnnotation",{enumerable:!0,configurable:!0,get:function(){return this.Rect}}),Object.defineProperty(this,"Type",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Annot":null}}),Object.defineProperty(this,"Subtype",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Widget":null}});var p,g=!1;Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return g},set:function(t){t=Boolean(t),g=t}}),Object.defineProperty(this,"page",{enumerable:!0,configurable:!0,get:function(){if(p)return p},set:function(t){p=t}}),Object.defineProperty(this,"readOnly",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,1))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,1):this.Ff=Z(this.Ff,1)}}),Object.defineProperty(this,"required",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,2))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,2):this.Ff=Z(this.Ff,2)}}),Object.defineProperty(this,"noExport",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,3))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,3):this.Ff=Z(this.Ff,3)}});var m=null;Object.defineProperty(this,"Q",{enumerable:!0,configurable:!1,get:function(){if(null!==m)return m},set:function(t){if(-1===[0,1,2].indexOf(t))throw new Error('Invalid value "'+t+'" for attribute Q supplied.');m=t}}),Object.defineProperty(this,"textAlign",{get:function(){var t;switch(m){case 0:default:t="left";break;case 1:t="center";break;case 2:t="right"}return t},configurable:!0,enumerable:!0,set:function(t){switch(t){case"right":case 2:m=2;break;case"center":case 1:m=1;break;case"left":case 0:default:m=0}}})};H(lt,ct);var ft=function(){lt.call(this),this.FT="/Ch",this.V="()",this.fontName="zapfdingbats";var t=0;Object.defineProperty(this,"TI",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"topIndex",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){t=e}});var e=[];Object.defineProperty(this,"Opt",{enumerable:!0,configurable:!1,get:function(){return ot(e,this.objId,this.scope)},set:function(t){var r,n;n=[],"string"==typeof(r=t)&&(n=function(t,e,r){r||(r=1);for(var n,i=[];n=e.exec(t);)i.push(n[r]);return i}(r,/\((.*?)\)/g)),e=n}}),this.getOptions=function(){return e},this.setOptions=function(t){e=t,this.sort&&e.sort()},this.addOption=function(t){t=(t=t||"").toString(),e.push(t),this.sort&&e.sort()},this.removeOption=function(t,r){for(r=r||!1,t=(t=t||"").toString();-1!==e.indexOf(t)&&(e.splice(e.indexOf(t),1),!1!==r););},Object.defineProperty(this,"combo",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,18))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,18):this.Ff=Z(this.Ff,18)}}),Object.defineProperty(this,"edit",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,19))},set:function(t){!0===this.combo&&(!0===Boolean(t)?this.Ff=K(this.Ff,19):this.Ff=Z(this.Ff,19))}}),Object.defineProperty(this,"sort",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,20))},set:function(t){!0===Boolean(t)?(this.Ff=K(this.Ff,20),e.sort()):this.Ff=Z(this.Ff,20)}}),Object.defineProperty(this,"multiSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,22))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,22):this.Ff=Z(this.Ff,22)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,23):this.Ff=Z(this.Ff,23)}}),Object.defineProperty(this,"commitOnSelChange",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,27))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,27):this.Ff=Z(this.Ff,27)}}),this.hasAppearanceStream=!1};H(ft,lt);var dt=function(){ft.call(this),this.fontName="helvetica",this.combo=!1};H(dt,ft);var pt=function(){dt.call(this),this.combo=!0};H(pt,dt);var gt=function(){pt.call(this),this.edit=!0};H(gt,pt);var mt=function(){lt.call(this),this.FT="/Btn",Object.defineProperty(this,"noToggleToOff",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,15))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,15):this.Ff=Z(this.Ff,15)}}),Object.defineProperty(this,"radio",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,16))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,16):this.Ff=Z(this.Ff,16)}}),Object.defineProperty(this,"pushButton",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,17))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,17):this.Ff=Z(this.Ff,17)}}),Object.defineProperty(this,"radioIsUnison",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,26):this.Ff=Z(this.Ff,26)}});var e,r={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};if(this.scope&&(t=this.scope.internal.getEncryptor(this.objId)),0!==Object.keys(r).length){var e,n=[];for(e in n.push("<<"),r)n.push("/"+e+" ("+R(t(r[e]))+")");return n.push(">>"),n.join("\n")}},set:function(e){"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)&&(r=e)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return r.CA||""},set:function(t){"string"==typeof t&&(r.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return e.substr(1,e.length-1)},set:function(t){e="/"+t}})};H(mt,lt);var vt=function(){mt.call(this),this.pushButton=!0};H(vt,mt);var bt=function(){mt.call(this),this.radio=!0,this.pushButton=!1;var t=[];Object.defineProperty(this,"Kids",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=void 0!==e?e:[]}})};H(bt,mt);var yt=function(){var e,r;lt.call(this),Object.defineProperty(this,"Parent",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,"optionName",{enumerable:!1,configurable:!0,get:function(){return r},set:function(t){r=t}});var n,i={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};this.scope&&(t=this.scope.internal.getEncryptor(this.objId));var e,r=[];for(e in r.push("<<"),i)r.push("/"+e+" ("+R(t(i[e]))+")");return r.push(">>"),r.join("\n")},set:function(e){"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)&&(i=e)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return i.CA||""},set:function(t){"string"==typeof t&&(i.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return n},set:function(t){n=t}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return n.substr(1,n.length-1)},set:function(t){n="/"+t}}),this.caption="l",this.appearanceState="Off",this._AppearanceType=At.RadioButton.Circle,this.appearanceStreamContent=this._AppearanceType.createAppearanceStream(this.optionName)};H(yt,lt),bt.prototype.setAppearance=function(t){if(!("createAppearanceStream"in t)||!("getCA"in t))throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");for(var e in this.Kids)if(this.Kids.hasOwnProperty(e)){var r=this.Kids[e];r.appearanceStreamContent=t.createAppearanceStream(r.optionName),r.caption=t.getCA()}},bt.prototype.createOption=function(t){var e=new yt;return e.Parent=this,e.optionName=t,this.Kids.push(e),xt.call(this.scope,e),e};var wt=function(){mt.call(this),this.fontName="zapfdingbats",this.caption="3",this.appearanceState="On",this.value="On",this.textAlign="center",this.appearanceStreamContent=At.CheckBox.createAppearanceStream()};H(wt,mt);var Nt=function(){lt.call(this),this.FT="/Tx",Object.defineProperty(this,"multiline",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,13))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,13):this.Ff=Z(this.Ff,13)}}),Object.defineProperty(this,"fileSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,21))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,21):this.Ff=Z(this.Ff,21)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,23):this.Ff=Z(this.Ff,23)}}),Object.defineProperty(this,"doNotScroll",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,24))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,24):this.Ff=Z(this.Ff,24)}}),Object.defineProperty(this,"comb",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,25))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,25):this.Ff=Z(this.Ff,25)}}),Object.defineProperty(this,"richText",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,26):this.Ff=Z(this.Ff,26)}});var t=null;Object.defineProperty(this,"MaxLen",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"maxLength",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){Number.isInteger(e)&&(t=e)}}),Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return this.V||this.DV}})};H(Nt,lt);var Lt=function(){Nt.call(this),Object.defineProperty(this,"password",{enumerable:!0,configurable:!0,get:function(){return Boolean(X(this.Ff,14))},set:function(t){!0===Boolean(t)?this.Ff=K(this.Ff,14):this.Ff=Z(this.Ff,14)}}),this.password=!0};H(Lt,Nt);var At={CheckBox:{createAppearanceStream:function(){return{N:{On:At.CheckBox.YesNormal},D:{On:At.CheckBox.YesPushDown,Off:At.CheckBox.OffPushDown}}},YesPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[],n=t.scope.internal.getFont(t.fontName,t.fontStyle).id,i=t.scope.__private__.encodeColorString(t.color),a=tt(t,t.caption);return r.push("0.749023 g"),r.push("0 0 "+U(At.internal.getWidth(t))+" "+U(At.internal.getHeight(t))+" re"),r.push("f"),r.push("BMC"),r.push("q"),r.push("0 0 1 rg"),r.push("/"+n+" "+U(a.fontSize)+" Tf "+i),r.push("BT"),r.push(a.text),r.push("ET"),r.push("Q"),r.push("EMC"),e.stream=r.join("\n"),e},YesNormal:function(t){var e=V(t);e.scope=t.scope;var r=t.scope.internal.getFont(t.fontName,t.fontStyle).id,n=t.scope.__private__.encodeColorString(t.color),i=[],a=At.internal.getHeight(t),o=At.internal.getWidth(t),s=tt(t,t.caption);return i.push("1 g"),i.push("0 0 "+U(o)+" "+U(a)+" re"),i.push("f"),i.push("q"),i.push("0 0 1 rg"),i.push("0 0 "+U(o-1)+" "+U(a-1)+" re"),i.push("W"),i.push("n"),i.push("0 g"),i.push("BT"),i.push("/"+r+" "+U(s.fontSize)+" Tf "+n),i.push(s.text),i.push("ET"),i.push("Q"),e.stream=i.join("\n"),e},OffPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[];return r.push("0.749023 g"),r.push("0 0 "+U(At.internal.getWidth(t))+" "+U(At.internal.getHeight(t))+" re"),r.push("f"),e.stream=r.join("\n"),e}},RadioButton:{Circle:{createAppearanceStream:function(t){var e={D:{Off:At.RadioButton.Circle.OffPushDown},N:{}};return e.N[t]=At.RadioButton.Circle.YesNormal,e.D[t]=At.RadioButton.Circle.YesPushDown,e},getCA:function(){return"l"},YesNormal:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.getWidth(t)<=At.internal.getHeight(t)?At.internal.getWidth(t)/4:At.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var i=At.internal.Bezier_C,a=Number((n*i).toFixed(5));return r.push("q"),r.push("1 0 0 1 "+z(At.internal.getWidth(t)/2)+" "+z(At.internal.getHeight(t)/2)+" cm"),r.push(n+" 0 m"),r.push(n+" "+a+" "+a+" "+n+" 0 "+n+" c"),r.push("-"+a+" "+n+" -"+n+" "+a+" -"+n+" 0 c"),r.push("-"+n+" -"+a+" -"+a+" -"+n+" 0 -"+n+" c"),r.push(a+" -"+n+" "+n+" -"+a+" "+n+" 0 c"),r.push("f"),r.push("Q"),e.stream=r.join("\n"),e},YesPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.getWidth(t)<=At.internal.getHeight(t)?At.internal.getWidth(t)/4:At.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var i=Number((2*n).toFixed(5)),a=Number((i*At.internal.Bezier_C).toFixed(5)),o=Number((n*At.internal.Bezier_C).toFixed(5));return r.push("0.749023 g"),r.push("q"),r.push("1 0 0 1 "+z(At.internal.getWidth(t)/2)+" "+z(At.internal.getHeight(t)/2)+" cm"),r.push(i+" 0 m"),r.push(i+" "+a+" "+a+" "+i+" 0 "+i+" c"),r.push("-"+a+" "+i+" -"+i+" "+a+" -"+i+" 0 c"),r.push("-"+i+" -"+a+" -"+a+" -"+i+" 0 -"+i+" c"),r.push(a+" -"+i+" "+i+" -"+a+" "+i+" 0 c"),r.push("f"),r.push("Q"),r.push("0 g"),r.push("q"),r.push("1 0 0 1 "+z(At.internal.getWidth(t)/2)+" "+z(At.internal.getHeight(t)/2)+" cm"),r.push(n+" 0 m"),r.push(n+" "+o+" "+o+" "+n+" 0 "+n+" c"),r.push("-"+o+" "+n+" -"+n+" "+o+" -"+n+" 0 c"),r.push("-"+n+" -"+o+" -"+o+" -"+n+" 0 -"+n+" c"),r.push(o+" -"+n+" "+n+" -"+o+" "+n+" 0 c"),r.push("f"),r.push("Q"),e.stream=r.join("\n"),e},OffPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.getWidth(t)<=At.internal.getHeight(t)?At.internal.getWidth(t)/4:At.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var i=Number((2*n).toFixed(5)),a=Number((i*At.internal.Bezier_C).toFixed(5));return r.push("0.749023 g"),r.push("q"),r.push("1 0 0 1 "+z(At.internal.getWidth(t)/2)+" "+z(At.internal.getHeight(t)/2)+" cm"),r.push(i+" 0 m"),r.push(i+" "+a+" "+a+" "+i+" 0 "+i+" c"),r.push("-"+a+" "+i+" -"+i+" "+a+" -"+i+" 0 c"),r.push("-"+i+" -"+a+" -"+a+" -"+i+" 0 -"+i+" c"),r.push(a+" -"+i+" "+i+" -"+a+" "+i+" 0 c"),r.push("f"),r.push("Q"),e.stream=r.join("\n"),e}},Cross:{createAppearanceStream:function(t){var e={D:{Off:At.RadioButton.Cross.OffPushDown},N:{}};return e.N[t]=At.RadioButton.Cross.YesNormal,e.D[t]=At.RadioButton.Cross.YesPushDown,e},getCA:function(){return"8"},YesNormal:function(t){var e=V(t);e.scope=t.scope;var r=[],n=At.internal.calculateCross(t);return r.push("q"),r.push("1 1 "+U(At.internal.getWidth(t)-2)+" "+U(At.internal.getHeight(t)-2)+" re"),r.push("W"),r.push("n"),r.push(U(n.x1.x)+" "+U(n.x1.y)+" m"),r.push(U(n.x2.x)+" "+U(n.x2.y)+" l"),r.push(U(n.x4.x)+" "+U(n.x4.y)+" m"),r.push(U(n.x3.x)+" "+U(n.x3.y)+" l"),r.push("s"),r.push("Q"),e.stream=r.join("\n"),e},YesPushDown:function(t){var e=V(t);e.scope=t.scope;var r=At.internal.calculateCross(t),n=[];return n.push("0.749023 g"),n.push("0 0 "+U(At.internal.getWidth(t))+" "+U(At.internal.getHeight(t))+" re"),n.push("f"),n.push("q"),n.push("1 1 "+U(At.internal.getWidth(t)-2)+" "+U(At.internal.getHeight(t)-2)+" re"),n.push("W"),n.push("n"),n.push(U(r.x1.x)+" "+U(r.x1.y)+" m"),n.push(U(r.x2.x)+" "+U(r.x2.y)+" l"),n.push(U(r.x4.x)+" "+U(r.x4.y)+" m"),n.push(U(r.x3.x)+" "+U(r.x3.y)+" l"),n.push("s"),n.push("Q"),e.stream=n.join("\n"),e},OffPushDown:function(t){var e=V(t);e.scope=t.scope;var r=[];return r.push("0.749023 g"),r.push("0 0 "+U(At.internal.getWidth(t))+" "+U(At.internal.getHeight(t))+" re"),r.push("f"),e.stream=r.join("\n"),e}}},createDefaultAppearanceStream:function(t){var e=t.scope.internal.getFont(t.fontName,t.fontStyle).id,r=t.scope.__private__.encodeColorString(t.color);return"/"+e+" "+t.fontSize+" Tf "+r}};At.internal={Bezier_C:.551915024494,calculateCross:function(t){var e=At.internal.getWidth(t),r=At.internal.getHeight(t),n=Math.min(e,r);return{x1:{x:(e-n)/2,y:(r-n)/2+n},x2:{x:(e-n)/2+n,y:(r-n)/2},x3:{x:(e-n)/2,y:(r-n)/2},x4:{x:(e-n)/2+n,y:(r-n)/2+n}}}},At.internal.getWidth=function(e){var r=0;return"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)&&(r=W(e.Rect[2])),r},At.internal.getHeight=function(e){var r=0;return"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)&&(r=W(e.Rect[3])),r};var xt=q.addField=function(t){if(at(this,t),!(t instanceof lt))throw new Error("Invalid argument passed to jsPDF.addField.");var e;return(e=t).scope.internal.acroformPlugin.printedOut&&(e.scope.internal.acroformPlugin.printedOut=!1,e.scope.internal.acroformPlugin.acroFormDictionaryRoot=null),e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e),t.page=t.scope.internal.getCurrentPageInfo().pageNumber,this};q.AcroFormChoiceField=ft,q.AcroFormListBox=dt,q.AcroFormComboBox=pt,q.AcroFormEditBox=gt,q.AcroFormButton=mt,q.AcroFormPushButton=vt,q.AcroFormRadioButton=bt,q.AcroFormCheckBox=wt,q.AcroFormTextField=Nt,q.AcroFormPasswordField=Lt,q.AcroFormAppearance=At,q.AcroForm={ChoiceField:ft,ListBox:dt,ComboBox:pt,EditBox:gt,Button:mt,PushButton:vt,RadioButton:bt,CheckBox:wt,TextField:Nt,PasswordField:Lt,Appearance:At},E.AcroForm={ChoiceField:ft,ListBox:dt,ComboBox:pt,EditBox:gt,Button:mt,PushButton:vt,RadioButton:bt,CheckBox:wt,TextField:Nt,PasswordField:Lt,Appearance:At};var St=E.AcroForm;function _t(t){return t.reduce((function(t,e,r){return t[e]=r,t}),{})}!function(e){e.__addimage__={};var r="UNKNOWN",n={PNG:[[137,80,78,71]],TIFF:[[77,77,0,42],[73,73,42,0]],JPEG:[[255,216,255,224,void 0,void 0,74,70,73,70,0],[255,216,255,225,void 0,void 0,69,120,105,102,0,0],[255,216,255,219],[255,216,255,238]],JPEG2000:[[0,0,0,12,106,80,32,32]],GIF87a:[[71,73,70,56,55,97]],GIF89a:[[71,73,70,56,57,97]],WEBP:[[82,73,70,70,void 0,void 0,void 0,void 0,87,69,66,80]],BMP:[[66,77],[66,65],[67,73],[67,80],[73,67],[80,84]]},i=e.__addimage__.getImageFileTypeByImageData=function(t,e){var i,a,o,s,c,u=r;if("RGBA"===(e=e||r)||void 0!==t.data&&t.data instanceof Uint8ClampedArray&&"height"in t&&"width"in t)return"RGBA";if(x(t))for(c in n)for(o=n[c],i=0;i<o.length;i+=1){for(s=!0,a=0;a<o[i].length;a+=1)if(void 0!==o[i][a]&&o[i][a]!==t[a]){s=!1;break}if(!0===s){u=c;break}}else for(c in n)for(o=n[c],i=0;i<o.length;i+=1){for(s=!0,a=0;a<o[i].length;a+=1)if(void 0!==o[i][a]&&o[i][a]!==t.charCodeAt(a)){s=!1;break}if(!0===s){u=c;break}}return u===r&&e!==r&&(u=e),u},a=function t(e){for(var r=this.internal.write,n=this.internal.putStream,i=(0,this.internal.getFilters)();-1!==i.indexOf("FlateEncode");)i.splice(i.indexOf("FlateEncode"),1);e.objectId=this.internal.newObject();var a=[];if(a.push({key:"Type",value:"/XObject"}),a.push({key:"Subtype",value:"/Image"}),a.push({key:"Width",value:e.width}),a.push({key:"Height",value:e.height}),e.colorSpace===b.INDEXED?a.push({key:"ColorSpace",value:"[/Indexed /DeviceRGB "+(e.palette.length/3-1)+" "+("sMask"in e&&void 0!==e.sMask?e.objectId+2:e.objectId+1)+" 0 R]"}):(a.push({key:"ColorSpace",value:"/"+e.colorSpace}),e.colorSpace===b.DEVICE_CMYK&&a.push({key:"Decode",value:"[1 0 1 0 1 0 1 0]"})),a.push({key:"BitsPerComponent",value:e.bitsPerComponent}),"decodeParameters"in e&&void 0!==e.decodeParameters&&a.push({key:"DecodeParms",value:"<<"+e.decodeParameters+">>"}),"transparency"in e&&Array.isArray(e.transparency)){for(var o="",s=0,c=e.transparency.length;s<c;s++)o+=e.transparency[s]+" "+e.transparency[s]+" ";a.push({key:"Mask",value:"["+o+"]"})}void 0!==e.sMask&&a.push({key:"SMask",value:e.objectId+1+" 0 R"});var u=void 0!==e.filter?["/"+e.filter]:void 0;if(n({data:e.data,additionalKeyValues:a,alreadyAppliedFilters:u,objectId:e.objectId}),r("endobj"),"sMask"in e&&void 0!==e.sMask){var h="/Predictor "+e.predictor+" /Colors 1 /BitsPerComponent "+e.bitsPerComponent+" /Columns "+e.width,l={width:e.width,height:e.height,colorSpace:"DeviceGray",bitsPerComponent:e.bitsPerComponent,decodeParameters:h,data:e.sMask};"filter"in e&&(l.filter=e.filter),t.call(this,l)}if(e.colorSpace===b.INDEXED){var f=this.internal.newObject();n({data:_(new Uint8Array(e.palette)),objectId:f}),r("endobj")}},o=function(){var t=this.internal.collections.addImage_images;for(var e in t)a.call(this,t[e])},s=function(){var t,e=this.internal.collections.addImage_images,r=this.internal.write;for(var n in e)r("/I"+(t=e[n]).index,t.objectId,"0","R")},c=function(){this.internal.collections.addImage_images||(this.internal.collections.addImage_images={},this.internal.events.subscribe("putResources",o),this.internal.events.subscribe("putXobjectDict",s))},h=function(){var t=this.internal.collections.addImage_images;return c.call(this),t},l=function(){return Object.keys(this.internal.collections.addImage_images).length},f=function(t){return"function"==typeof e["process"+t.toUpperCase()]},d=function(e){return"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)&&1===e.nodeType},p=function(t,r){if("IMG"===t.nodeName&&t.hasAttribute("src")){var n=""+t.getAttribute("src");if(0===n.indexOf("data:image/"))return u(unescape(n).split("base64,").pop());var i=e.loadFile(n,!0);if(void 0!==i)return i}if("CANVAS"===t.nodeName){if(0===t.width||0===t.height)throw new Error("Given canvas must have data. Canvas width: "+t.width+", height: "+t.height);var a;switch(r){case"PNG":a="image/png";break;case"WEBP":a="image/webp";break;case"JPEG":case"JPG":default:a="image/jpeg"}return u(t.toDataURL(a,1).split("base64,").pop())}},g=function(t){var e=this.internal.collections.addImage_images;if(e)for(var r in e)if(t===e[r].alias)return e[r]},m=function(t,e,r){return t||e||(t=-96,e=-96),t<0&&(t=-1*r.width*72/t/this.internal.scaleFactor),e<0&&(e=-1*r.height*72/e/this.internal.scaleFactor),0===t&&(t=e*r.width/r.height),0===e&&(e=t*r.height/r.width),[t,e]},v=function(t,e,r,n,i,a){var o=m.call(this,r,n,i),s=this.internal.getCoordinateString,c=this.internal.getVerticalCoordinateString,u=h.call(this);if(r=o[0],n=o[1],u[i.index]=i,a){a*=Math.PI/180;var l=Math.cos(a),f=Math.sin(a),d=function(t){return t.toFixed(4)},p=[d(l),d(f),d(-1*f),d(l),0,0,"cm"]}this.internal.write("q"),a?(this.internal.write([1,"0","0",1,s(t),c(e+n),"cm"].join(" ")),this.internal.write(p.join(" ")),this.internal.write([s(r),"0","0",s(n),"0","0","cm"].join(" "))):this.internal.write([s(r),"0","0",s(n),s(t),c(e+n),"cm"].join(" ")),this.isAdvancedAPI()&&this.internal.write([1,0,0,-1,0,0,"cm"].join(" ")),this.internal.write("/I"+i.index+" Do"),this.internal.write("Q")},b=e.color_spaces={DEVICE_RGB:"DeviceRGB",DEVICE_GRAY:"DeviceGray",DEVICE_CMYK:"DeviceCMYK",CAL_GREY:"CalGray",CAL_RGB:"CalRGB",LAB:"Lab",ICC_BASED:"ICCBased",INDEXED:"Indexed",PATTERN:"Pattern",SEPARATION:"Separation",DEVICE_N:"DeviceN"};e.decode={DCT_DECODE:"DCTDecode",FLATE_DECODE:"FlateDecode",LZW_DECODE:"LZWDecode",JPX_DECODE:"JPXDecode",JBIG2_DECODE:"JBIG2Decode",ASCII85_DECODE:"ASCII85Decode",ASCII_HEX_DECODE:"ASCIIHexDecode",RUN_LENGTH_DECODE:"RunLengthDecode",CCITT_FAX_DECODE:"CCITTFaxDecode"};var y=e.image_compression={NONE:"NONE",FAST:"FAST",MEDIUM:"MEDIUM",SLOW:"SLOW"},w=e.__addimage__.sHashCode=function(t){var e,r,n=0;if("string"==typeof t)for(r=t.length,e=0;e<r;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;else if(x(t))for(r=t.byteLength/2,e=0;e<r;e++)n=(n<<5)-n+t[e],n|=0;return n},N=e.__addimage__.validateStringAsBase64=function(t){(t=t||"").toString().trim();var e=!0;return 0===t.length&&(e=!1),t.length%4!=0&&(e=!1),!1===/^[A-Za-z0-9+/]+$/.test(t.substr(0,t.length-2))&&(e=!1),!1===/^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2))&&(e=!1),e},L=e.__addimage__.extractImageFromDataUrl=function(t){var e=(t=t||"").split("base64,"),r=null;if(2===e.length){var n=/^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);Array.isArray(n)&&(r={mimeType:n[1],charset:n[2],data:e[1]})}return r},A=e.__addimage__.supportsArrayBuffer=function(){return"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array};e.__addimage__.isArrayBuffer=function(t){return A()&&t instanceof ArrayBuffer};var x=e.__addimage__.isArrayBufferView=function(t){return A()&&"undefined"!=typeof Uint32Array&&(t instanceof Int8Array||t instanceof Uint8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)},S=e.__addimage__.binaryStringToUint8Array=function(t){for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r},_=e.__addimage__.arrayBufferToBinaryString=function(t){for(var e="",r=x(t)?t:new Uint8Array(t),n=0;n<r.length;n+=8192)e+=String.fromCharCode.apply(null,r.subarray(n,n+8192));return e};e.addImage=function(){var e,n,i,a,o,s,u,h,l;if("number"==typeof arguments[1]?(n=r,i=arguments[1],a=arguments[2],o=arguments[3],s=arguments[4],u=arguments[5],h=arguments[6],l=arguments[7]):(n=arguments[1],i=arguments[2],a=arguments[3],o=arguments[4],s=arguments[5],u=arguments[6],h=arguments[7],l=arguments[8]),"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e=arguments[0])&&!d(e)&&"imageData"in e){var f=e;e=f.imageData,n=f.format||n||r,i=f.x||i||0,a=f.y||a||0,o=f.w||f.width||o,s=f.h||f.height||s,u=f.alias||u,h=f.compression||h,l=f.rotation||f.angle||l}var p=this.internal.getFilters();if(void 0===h&&-1!==p.indexOf("FlateEncode")&&(h="SLOW"),isNaN(i)||isNaN(a))throw new Error("Invalid coordinates passed to jsPDF.addImage");c.call(this);var g=P.call(this,e,n,u,h);return v.call(this,i,a,o,s,g,l),this};var P=function(t,n,a,o){var s,c,u;if("string"==typeof t&&i(t)===r){t=unescape(t);var h=k(t,!1);(""!==h||void 0!==(h=e.loadFile(t,!0)))&&(t=h)}if(d(t)&&(t=p(t,n)),n=i(t,n),!f(n))throw new Error("addImage does not support files of type '"+n+"', please ensure that a plugin for '"+n+"' support is added.");if((null==(u=a)||0===u.length)&&(a=function(t){return"string"==typeof t||x(t)?w(t):x(t.data)?w(t.data):null}(t)),(s=g.call(this,a))||(A()&&(t instanceof Uint8Array||"RGBA"===n||(c=t,t=S(t))),s=this["process"+n.toUpperCase()](t,l.call(this),a,function(t){return t&&"string"==typeof t&&(t=t.toUpperCase()),t in e.image_compression?t:y.NONE}(o),c)),!s)throw new Error("An unknown error occurred whilst processing the image.");return s},k=e.__addimage__.convertBase64ToBinaryString=function(t,e){var r;e="boolean"!=typeof e||e;var n,i="";if("string"==typeof t){n=null!==(r=L(t))?r.data:t;try{i=u(n)}catch(t){if(e)throw N(n)?new Error("atob-Error in jsPDF.convertBase64ToBinaryString "+t.message):new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ")}}return i};e.getImageProperties=function(t){var n,a,o="";if(d(t)&&(t=p(t)),"string"==typeof t&&i(t)===r&&(""===(o=k(t,!1))&&(o=e.loadFile(t)||""),t=o),a=i(t),!f(a))throw new Error("addImage does not support files of type '"+a+"', please ensure that a plugin for '"+a+"' support is added.");if(!A()||t instanceof Uint8Array||(t=S(t)),!(n=this["process"+a.toUpperCase()](t)))throw new Error("An unknown error occurred whilst processing the image");return n.fileType=a,n}}(E.API),
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e=function(t){if(void 0!==t&&""!=t)return!0};E.API.events.push(["addPage",function(t){this.internal.getPageInfo(t.pageNumber).pageContext.annotations=[]}]),t.events.push(["putPage",function(t){for(var r,n,i,a=this.internal.getCoordinateString,o=this.internal.getVerticalCoordinateString,s=this.internal.getPageInfoByObjId(t.objId),c=t.pageContext.annotations,u=!1,h=0;h<c.length&&!u;h++)switch((r=c[h]).type){case"link":(e(r.options.url)||e(r.options.pageNumber))&&(u=!0);break;case"reference":case"text":case"freetext":u=!0}if(0!=u){this.internal.write("/Annots [");for(var l=0;l<c.length;l++){r=c[l];var f=this.internal.pdfEscape,d=this.internal.getEncryptor(t.objId);switch(r.type){case"reference":this.internal.write(" "+r.object.objId+" 0 R ");break;case"text":var p=this.internal.newAdditionalObject(),g=this.internal.newAdditionalObject(),m=this.internal.getEncryptor(p.objId),v=r.title||"Note";i="<</Type /Annot /Subtype /Text "+(n="/Rect ["+a(r.bounds.x)+" "+o(r.bounds.y+r.bounds.h)+" "+a(r.bounds.x+r.bounds.w)+" "+o(r.bounds.y)+"] ")+"/Contents ("+f(m(r.contents))+")",i+=" /Popup "+g.objId+" 0 R",i+=" /P "+s.objId+" 0 R",i+=" /T ("+f(m(v))+") >>",p.content=i;var b=p.objId+" 0 R";i="<</Type /Annot /Subtype /Popup "+(n="/Rect ["+a(r.bounds.x+30)+" "+o(r.bounds.y+r.bounds.h)+" "+a(r.bounds.x+r.bounds.w+30)+" "+o(r.bounds.y)+"] ")+" /Parent "+b,r.open&&(i+=" /Open true"),i+=" >>",g.content=i,this.internal.write(p.objId,"0 R",g.objId,"0 R");break;case"freetext":n="/Rect ["+a(r.bounds.x)+" "+o(r.bounds.y)+" "+a(r.bounds.x+r.bounds.w)+" "+o(r.bounds.y+r.bounds.h)+"] ";var y=r.color||"#000000";i="<</Type /Annot /Subtype /FreeText "+n+"/Contents ("+f(d(r.contents))+")",i+=" /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#"+y+")",i+=" /Border [0 0 0]",i+=" >>",this.internal.write(i);break;case"link":if(r.options.name){var w=this.annotations._nameMap[r.options.name];r.options.pageNumber=w.page,r.options.top=w.y}else r.options.top||(r.options.top=0);if(n="/Rect ["+r.finalBounds.x+" "+r.finalBounds.y+" "+r.finalBounds.w+" "+r.finalBounds.h+"] ",i="",r.options.url)i="<</Type /Annot /Subtype /Link "+n+"/Border [0 0 0] /A <</S /URI /URI ("+f(d(r.options.url))+") >>";else if(r.options.pageNumber){switch(i="<</Type /Annot /Subtype /Link "+n+"/Border [0 0 0] /Dest ["+this.internal.getPageInfo(r.options.pageNumber).objId+" 0 R",r.options.magFactor=r.options.magFactor||"XYZ",r.options.magFactor){case"Fit":i+=" /Fit]";break;case"FitH":i+=" /FitH "+r.options.top+"]";break;case"FitV":r.options.left=r.options.left||0,i+=" /FitV "+r.options.left+"]";break;case"XYZ":default:var N=o(r.options.top);r.options.left=r.options.left||0,void 0===r.options.zoom&&(r.options.zoom=0),i+=" /XYZ "+r.options.left+" "+N+" "+r.options.zoom+"]"}}""!=i&&(i+=" >>",this.internal.write(i))}}this.internal.write("]")}}]),t.createAnnotation=function(t){var e=this.internal.getCurrentPageInfo();switch(t.type){case"link":this.link(t.bounds.x,t.bounds.y,t.bounds.w,t.bounds.h,t);break;case"text":case"freetext":e.pageContext.annotations.push(t)}},t.link=function(t,e,r,n,i){var a=this.internal.getCurrentPageInfo(),o=this.internal.getCoordinateString,s=this.internal.getVerticalCoordinateString;a.pageContext.annotations.push({finalBounds:{x:o(t),y:s(e),w:o(t+r),h:s(e+n)},options:i,type:"link"})},t.textWithLink=function(t,e,r,n){var i,a,o=this.getTextWidth(t),s=this.internal.getLineHeight()/this.internal.scaleFactor;if(void 0!==n.maxWidth){a=n.maxWidth;var c=this.splitTextToSize(t,a).length;i=Math.ceil(s*c)}else a=o,i=s;return this.text(t,e,r,n),r+=.2*s,"center"===n.align&&(e-=o/2),"right"===n.align&&(e-=o),this.link(e,r-s,a,i,n),o},t.getTextWidth=function(t){var e=this.internal.getFontSize();return this.getStringUnitWidth(t)*e/this.internal.scaleFactor}}(E.API),
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e={1569:[65152],1570:[65153,65154],1571:[65155,65156],1572:[65157,65158],1573:[65159,65160],1574:[65161,65162,65163,65164],1575:[65165,65166],1576:[65167,65168,65169,65170],1577:[65171,65172],1578:[65173,65174,65175,65176],1579:[65177,65178,65179,65180],1580:[65181,65182,65183,65184],1581:[65185,65186,65187,65188],1582:[65189,65190,65191,65192],1583:[65193,65194],1584:[65195,65196],1585:[65197,65198],1586:[65199,65200],1587:[65201,65202,65203,65204],1588:[65205,65206,65207,65208],1589:[65209,65210,65211,65212],1590:[65213,65214,65215,65216],1591:[65217,65218,65219,65220],1592:[65221,65222,65223,65224],1593:[65225,65226,65227,65228],1594:[65229,65230,65231,65232],1601:[65233,65234,65235,65236],1602:[65237,65238,65239,65240],1603:[65241,65242,65243,65244],1604:[65245,65246,65247,65248],1605:[65249,65250,65251,65252],1606:[65253,65254,65255,65256],1607:[65257,65258,65259,65260],1608:[65261,65262],1609:[65263,65264,64488,64489],1610:[65265,65266,65267,65268],1649:[64336,64337],1655:[64477],1657:[64358,64359,64360,64361],1658:[64350,64351,64352,64353],1659:[64338,64339,64340,64341],1662:[64342,64343,64344,64345],1663:[64354,64355,64356,64357],1664:[64346,64347,64348,64349],1667:[64374,64375,64376,64377],1668:[64370,64371,64372,64373],1670:[64378,64379,64380,64381],1671:[64382,64383,64384,64385],1672:[64392,64393],1676:[64388,64389],1677:[64386,64387],1678:[64390,64391],1681:[64396,64397],1688:[64394,64395],1700:[64362,64363,64364,64365],1702:[64366,64367,64368,64369],1705:[64398,64399,64400,64401],1709:[64467,64468,64469,64470],1711:[64402,64403,64404,64405],1713:[64410,64411,64412,64413],1715:[64406,64407,64408,64409],1722:[64414,64415],1723:[64416,64417,64418,64419],1726:[64426,64427,64428,64429],1728:[64420,64421],1729:[64422,64423,64424,64425],1733:[64480,64481],1734:[64473,64474],1735:[64471,64472],1736:[64475,64476],1737:[64482,64483],1739:[64478,64479],1740:[64508,64509,64510,64511],1744:[64484,64485,64486,64487],1746:[64430,64431],1747:[64432,64433]},r={65247:{65154:65269,65156:65271,65160:65273,65166:65275},65248:{65154:65270,65156:65272,65160:65274,65166:65276},65165:{65247:{65248:{65258:65010}}},1617:{1612:64606,1613:64607,1614:64608,1615:64609,1616:64610}},n={1612:64606,1613:64607,1614:64608,1615:64609,1616:64610},i=[1570,1571,1573,1575];t.__arabicParser__={};var a=t.__arabicParser__.isInArabicSubstitutionA=function(t){return void 0!==e[t.charCodeAt(0)]},o=t.__arabicParser__.isArabicLetter=function(t){return"string"==typeof t&&/^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t)},s=t.__arabicParser__.isArabicEndLetter=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length<=2},c=t.__arabicParser__.isArabicAlfLetter=function(t){return o(t)&&i.indexOf(t.charCodeAt(0))>=0};t.__arabicParser__.arabicLetterHasIsolatedForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=1};var u=t.__arabicParser__.arabicLetterHasFinalForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=2};t.__arabicParser__.arabicLetterHasInitialForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=3};var h=t.__arabicParser__.arabicLetterHasMedialForm=function(t){return o(t)&&a(t)&&4==e[t.charCodeAt(0)].length},l=t.__arabicParser__.resolveLigatures=function(t){var e=0,n=r,i="",a=0;for(e=0;e<t.length;e+=1)void 0!==n[t.charCodeAt(e)]?(a++,"number"==typeof(n=n[t.charCodeAt(e)])&&(i+=String.fromCharCode(n),n=r,a=0),e===t.length-1&&(n=r,i+=t.charAt(e-(a-1)),e-=a-1,a=0)):(n=r,i+=t.charAt(e-a),e-=a,a=0);return i};t.__arabicParser__.isArabicDiacritic=function(t){return void 0!==t&&void 0!==n[t.charCodeAt(0)]};var f=t.__arabicParser__.getCorrectForm=function(t,e,r){return o(t)?!1===a(t)?-1:!u(t)||!o(e)&&!o(r)||!o(r)&&s(e)||s(t)&&!o(e)||s(t)&&c(e)||s(t)&&s(e)?0:h(t)&&o(e)&&!s(e)&&o(r)&&u(r)?3:s(t)||!o(r)?1:2:-1},d=function(t){var r=0,n=0,i=0,a="",s="",c="",u=(t=t||"").split("\\s+"),h=[];for(r=0;r<u.length;r+=1){for(h.push(""),n=0;n<u[r].length;n+=1)a=u[r][n],s=u[r][n-1],c=u[r][n+1],o(a)?(i=f(a,s,c),h[r]+=-1!==i?String.fromCharCode(e[a.charCodeAt(0)][i]):a):h[r]+=a;h[r]=l(h[r])}return h.join(" ")},p=t.__arabicParser__.processArabic=t.processArabic=function(){var t,e="string"==typeof arguments[0]?arguments[0]:arguments[0].text,r=[];if(Array.isArray(e)){var n=0;for(r=[],n=0;n<e.length;n+=1)Array.isArray(e[n])?r.push([d(e[n][0]),e[n][1],e[n][2]]):r.push([d(e[n])]);t=r}else t=d(e);return"string"==typeof arguments[0]?t:(arguments[0].text=t,arguments[0])};t.events.push(["preProcessText",p])}(E.API),E.API.autoPrint=function(t){var e;switch((t=t||{}).variant=t.variant||"non-conform",t.variant){case"javascript":this.addJS("print({});");break;case"non-conform":default:this.internal.events.subscribe("postPutResources",(function(){e=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /Named"),this.internal.out("/Type /Action"),this.internal.out("/N /Print"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){this.internal.out("/OpenAction "+e+" 0 R")}))}return this},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e=function(){var t=void 0;Object.defineProperty(this,"pdf",{get:function(){return t},set:function(e){t=e}});var e=150;Object.defineProperty(this,"width",{get:function(){return e},set:function(t){e=isNaN(t)||!1===Number.isInteger(t)||t<0?150:t,this.getContext("2d").pageWrapXEnabled&&(this.getContext("2d").pageWrapX=e+1)}});var r=300;Object.defineProperty(this,"height",{get:function(){return r},set:function(t){r=isNaN(t)||!1===Number.isInteger(t)||t<0?300:t,this.getContext("2d").pageWrapYEnabled&&(this.getContext("2d").pageWrapY=r+1)}});var n=[];Object.defineProperty(this,"childNodes",{get:function(){return n},set:function(t){n=t}});var i={};Object.defineProperty(this,"style",{get:function(){return i},set:function(t){i=t}}),Object.defineProperty(this,"parentNode",{})};e.prototype.getContext=function(t,e){var r;if("2d"!==(t=t||"2d"))return null;for(r in e)this.pdf.context2d.hasOwnProperty(r)&&(this.pdf.context2d[r]=e[r]);return this.pdf.context2d._canvas=this,this.pdf.context2d},e.prototype.toDataURL=function(){throw new Error("toDataURL is not implemented.")},t.events.push(["initialized",function(){this.canvas=new e,this.canvas.pdf=this}])}(E.API),function(e){var r={left:0,top:0,bottom:0,right:0},n=!1,i=function(){void 0===this.internal.__cell__&&(this.internal.__cell__={},this.internal.__cell__.padding=3,this.internal.__cell__.headerFunction=void 0,this.internal.__cell__.margins=Object.assign({},r),this.internal.__cell__.margins.width=this.getPageWidth(),a.call(this))},a=function(){this.internal.__cell__.lastCell=new o,this.internal.__cell__.pages=1},o=function(){var t=arguments[0];Object.defineProperty(this,"x",{enumerable:!0,get:function(){return t},set:function(e){t=e}});var e=arguments[1];Object.defineProperty(this,"y",{enumerable:!0,get:function(){return e},set:function(t){e=t}});var r=arguments[2];Object.defineProperty(this,"width",{enumerable:!0,get:function(){return r},set:function(t){r=t}});var n=arguments[3];Object.defineProperty(this,"height",{enumerable:!0,get:function(){return n},set:function(t){n=t}});var i=arguments[4];Object.defineProperty(this,"text",{enumerable:!0,get:function(){return i},set:function(t){i=t}});var a=arguments[5];Object.defineProperty(this,"lineNumber",{enumerable:!0,get:function(){return a},set:function(t){a=t}});var o=arguments[6];return Object.defineProperty(this,"align",{enumerable:!0,get:function(){return o},set:function(t){o=t}}),this};o.prototype.clone=function(){return new o(this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align)},o.prototype.toArray=function(){return[this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align]},e.setHeaderFunction=function(t){return i.call(this),this.internal.__cell__.headerFunction="function"==typeof t?t:void 0,this},e.getTextDimensions=function(t,e){i.call(this);var r=(e=e||{}).fontSize||this.getFontSize(),n=e.font||this.getFont(),a=e.scaleFactor||this.internal.scaleFactor,o=0,s=0,c=0,u=this;if(!Array.isArray(t)&&"string"!=typeof t){if("number"!=typeof t)throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");t=String(t)}var h=e.maxWidth;h>0?"string"==typeof t?t=this.splitTextToSize(t,h):"[object Array]"===Object.prototype.toString.call(t)&&(t=t.reduce((function(t,e){return t.concat(u.splitTextToSize(e,h))}),[])):t=Array.isArray(t)?t:[t];for(var l=0;l<t.length;l++)o<(c=this.getStringUnitWidth(t[l],{font:n})*r)&&(o=c);return 0!==o&&(s=t.length),{w:o/=a,h:Math.max((s*r*this.getLineHeightFactor()-r*(this.getLineHeightFactor()-1))/a,0)}},e.cellAddPage=function(){i.call(this),this.addPage();var t=this.internal.__cell__.margins||r;return this.internal.__cell__.lastCell=new o(t.left,t.top,void 0,void 0),this.internal.__cell__.pages+=1,this};var s=e.cell=function(){var t;t=arguments[0]instanceof o?arguments[0]:new o(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]),i.call(this);var e=this.internal.__cell__.lastCell,a=this.internal.__cell__.padding,s=this.internal.__cell__.margins||r,c=this.internal.__cell__.tableHeaderRow,u=this.internal.__cell__.printHeaders;return void 0!==e.lineNumber&&(e.lineNumber===t.lineNumber?(t.x=(e.x||0)+(e.width||0),t.y=e.y||0):e.y+e.height+t.height+s.bottom>this.getPageHeight()?(this.cellAddPage(),t.y=s.top,u&&c&&(this.printHeaderRow(t.lineNumber,!0),t.y+=c[0].height)):t.y=e.y+e.height||t.y),void 0!==t.text[0]&&(this.rect(t.x,t.y,t.width,t.height,!0===n?"FD":void 0),"right"===t.align?this.text(t.text,t.x+t.width-a,t.y+a,{align:"right",baseline:"top"}):"center"===t.align?this.text(t.text,t.x+t.width/2,t.y+a,{align:"center",baseline:"top",maxWidth:t.width-a-a}):this.text(t.text,t.x+a,t.y+a,{align:"left",baseline:"top",maxWidth:t.width-a-a})),this.internal.__cell__.lastCell=t,this};e.table=function(e,n,u,h,l){if(i.call(this),!u)throw new Error("No data for PDF table.");var f,d,p,g,m=[],v=[],b=[],y={},w={},N=[],L=[],A=(l=l||{}).autoSize||!1,x=!1!==l.printHeaders,S=l.css&&void 0!==l.css["font-size"]?16*l.css["font-size"]:l.fontSize||12,_=l.margins||Object.assign({width:this.getPageWidth()},r),P="number"==typeof l.padding?l.padding:3,k=l.headerBackgroundColor||"#c8c8c8",I=l.headerTextColor||"#000";if(a.call(this),this.internal.__cell__.printHeaders=x,this.internal.__cell__.margins=_,this.internal.__cell__.table_font_size=S,this.internal.__cell__.padding=P,this.internal.__cell__.headerBackgroundColor=k,this.internal.__cell__.headerTextColor=I,this.setFontSize(S),null==h)v=m=Object.keys(u[0]),b=m.map((function(){return"left"}));else if(Array.isArray(h)&&"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(h[0]))for(m=h.map((function(t){return t.name})),v=h.map((function(t){return t.prompt||t.name||""})),b=h.map((function(t){return t.align||"left"})),f=0;f<h.length;f+=1)w[h[f].name]=h[f].width*(19.049976/25.4);else Array.isArray(h)&&"string"==typeof h[0]&&(v=m=h,b=m.map((function(){return"left"})));if(A||Array.isArray(h)&&"string"==typeof h[0])for(f=0;f<m.length;f+=1){for(y[g=m[f]]=u.map((function(t){return t[g]})),this.setFont(void 0,"bold"),N.push(this.getTextDimensions(v[f],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w),d=y[g],this.setFont(void 0,"normal"),p=0;p<d.length;p+=1)N.push(this.getTextDimensions(d[p],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w);w[g]=Math.max.apply(null,N)+P+P,N=[]}if(x){var F={};for(f=0;f<m.length;f+=1)F[m[f]]={},F[m[f]].text=v[f],F[m[f]].align=b[f];var C=c.call(this,F,w);L=m.map((function(t){return new o(e,n,w[t],C,F[t].text,void 0,F[t].align)})),this.setTableHeaderRow(L),this.printHeaderRow(1,!1)}var j=h.reduce((function(t,e){return t[e.name]=e.align,t}),{});for(f=0;f<u.length;f+=1){"rowStart"in l&&l.rowStart instanceof Function&&l.rowStart({row:f,data:u[f]},this);var O=c.call(this,u[f],w);for(p=0;p<m.length;p+=1){var B=u[f][m[p]];"cellStart"in l&&l.cellStart instanceof Function&&l.cellStart({row:f,col:p,data:B},this),s.call(this,new o(e,n,w[m[p]],O,B,f+2,j[m[p]]))}}return this.internal.__cell__.table_x=e,this.internal.__cell__.table_y=n,this};var c=function(t,e){var r=this.internal.__cell__.padding,n=this.internal.__cell__.table_font_size,i=this.internal.scaleFactor;return Object.keys(t).map((function(n){var i=t[n];return this.splitTextToSize(i.hasOwnProperty("text")?i.text:i,e[n]-r-r)}),this).map((function(t){return this.getLineHeightFactor()*t.length*n/i+r+r}),this).reduce((function(t,e){return Math.max(t,e)}),0)};e.setTableHeaderRow=function(t){i.call(this),this.internal.__cell__.tableHeaderRow=t},e.printHeaderRow=function(t,e){if(i.call(this),!this.internal.__cell__.tableHeaderRow)throw new Error("Property tableHeaderRow does not exist.");var r;if(n=!0,"function"==typeof this.internal.__cell__.headerFunction){var a=this.internal.__cell__.headerFunction(this,this.internal.__cell__.pages);this.internal.__cell__.lastCell=new o(a[0],a[1],a[2],a[3],void 0,-1)}this.setFont(void 0,"bold");for(var c=[],u=0;u<this.internal.__cell__.tableHeaderRow.length;u+=1){r=this.internal.__cell__.tableHeaderRow[u].clone(),e&&(r.y=this.internal.__cell__.margins.top||0,c.push(r)),r.lineNumber=t;var h=this.getTextColor();this.setTextColor(this.internal.__cell__.headerTextColor),this.setFillColor(this.internal.__cell__.headerBackgroundColor),s.call(this,r),this.setTextColor(h)}c.length>0&&this.setTableHeaderRow(c),this.setFont(void 0,"normal"),n=!1}}(E.API);var Pt={italic:["italic","oblique","normal"],oblique:["oblique","italic","normal"],normal:["normal","oblique","italic"]},kt=["ultra-condensed","extra-condensed","condensed","semi-condensed","normal","semi-expanded","expanded","extra-expanded","ultra-expanded"],It=_t(kt),Ft=[100,200,300,400,500,600,700,800,900],Ct=_t(Ft);function jt(t){var e=t.family.replace(/"|'/g,"").toLowerCase(),r=function(t){return Pt[t=t||"normal"]?t:"normal"}(t.style),n=function(t){if(!t)return 400;if("number"==typeof t)return t>=100&&t<=900&&t%100==0?t:400;if(/^\d00$/.test(t))return parseInt(t);switch(t){case"bold":return 700;case"normal":default:return 400}}(t.weight),i=function(t){return"number"==typeof It[t=t||"normal"]?t:"normal"}(t.stretch);return{family:e,style:r,weight:n,stretch:i,src:t.src||[],ref:t.ref||{name:e,style:[i,r,n].join(" ")}}}function Ot(t,e,r,n){var i;for(i=r;i>=0&&i<e.length;i+=n)if(t[e[i]])return t[e[i]];for(i=r;i>=0&&i<e.length;i-=n)if(t[e[i]])return t[e[i]]}var Bt={"sans-serif":"helvetica",fixed:"courier",monospace:"courier",terminal:"courier",cursive:"times",fantasy:"times",serif:"times"},Mt={caption:"times",icon:"times",menu:"times","message-box":"times","small-caption":"times","status-bar":"times"};function Et(t){return[t.stretch,t.style,t.weight,t.family].join(" ")}function qt(t,e,r){for(var n=(r=r||{}).defaultFontFamily||"times",i=Object.assign({},Bt,r.genericFontFamilies||{}),a=null,o=null,s=0;s<e.length;++s)if(i[(a=jt(e[s])).family]&&(a.family=i[a.family]),t.hasOwnProperty(a.family)){o=t[a.family];break}if(!(o=o||t[n]))throw new Error("Could not find a font-family for the rule '"+Et(a)+"' and default family '"+n+"'.");if(o=function(t,e){if(e[t])return e[t];var r=It[t],n=r<=It.normal?-1:1,i=Ot(e,kt,r,n);if(!i)throw new Error("Could not find a matching font-stretch value for "+t);return i}(a.stretch,o),o=function(t,e){if(e[t])return e[t];for(var r=Pt[t],n=0;n<r.length;++n)if(e[r[n]])return e[r[n]];throw new Error("Could not find a matching font-style for "+t)}(a.style,o),!(o=function(t,e){if(e[t])return e[t];if(400===t&&e[500])return e[500];if(500===t&&e[400])return e[400];var r=Ct[t],n=Ot(e,Ft,r,t<400?-1:1);if(!n)throw new Error("Could not find a matching font-weight for value "+t);return n}(a.weight,o)))throw new Error("Failed to resolve a font for the rule '"+Et(a)+"'.");return o}function Dt(t){return t.trimLeft()}function Rt(t,e){for(var r=0;r<t.length;){if(t.charAt(r)===e)return[t.substring(0,r),t.substring(r+1)];r+=1}return null}function Tt(t){var e=t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);return null===e?null:[e[0],t.substring(e[0].length)]}var Ut,zt,Ht,Wt=["times"];!function(e){var r,n,i,o,s,c,u,h,l,d=function(t){return t=t||{},this.isStrokeTransparent=t.isStrokeTransparent||!1,this.strokeOpacity=t.strokeOpacity||1,this.strokeStyle=t.strokeStyle||"#000000",this.fillStyle=t.fillStyle||"#000000",this.isFillTransparent=t.isFillTransparent||!1,this.fillOpacity=t.fillOpacity||1,this.font=t.font||"10px sans-serif",this.textBaseline=t.textBaseline||"alphabetic",this.textAlign=t.textAlign||"left",this.lineWidth=t.lineWidth||1,this.lineJoin=t.lineJoin||"miter",this.lineCap=t.lineCap||"butt",this.path=t.path||[],this.transform=void 0!==t.transform?t.transform.clone():new h,this.globalCompositeOperation=t.globalCompositeOperation||"normal",this.globalAlpha=t.globalAlpha||1,this.clip_path=t.clip_path||[],this.currentPoint=t.currentPoint||new c,this.miterLimit=t.miterLimit||10,this.lastPoint=t.lastPoint||new c,this.lineDashOffset=t.lineDashOffset||0,this.lineDash=t.lineDash||[],this.margin=t.margin||[0,0,0,0],this.prevPageLastElemOffset=t.prevPageLastElemOffset||0,this.ignoreClearRect="boolean"!=typeof t.ignoreClearRect||t.ignoreClearRect,this};e.events.push(["initialized",function(){this.context2d=new p(this),r=this.internal.f2,n=this.internal.getCoordinateString,i=this.internal.getVerticalCoordinateString,o=this.internal.getHorizontalCoordinate,s=this.internal.getVerticalCoordinate,c=this.internal.Point,u=this.internal.Rectangle,h=this.internal.Matrix,l=new d}]);var p=function(t){Object.defineProperty(this,"canvas",{get:function(){return{parentNode:!1,style:!1}}});var e=t;Object.defineProperty(this,"pdf",{get:function(){return e}});var r=!1;Object.defineProperty(this,"pageWrapXEnabled",{get:function(){return r},set:function(t){r=Boolean(t)}});var n=!1;Object.defineProperty(this,"pageWrapYEnabled",{get:function(){return n},set:function(t){n=Boolean(t)}});var i=0;Object.defineProperty(this,"posX",{get:function(){return i},set:function(t){isNaN(t)||(i=t)}});var a=0;Object.defineProperty(this,"posY",{get:function(){return a},set:function(t){isNaN(t)||(a=t)}}),Object.defineProperty(this,"margin",{get:function(){return l.margin},set:function(t){var e;"number"==typeof t?e=[t,t,t,t]:((e=new Array(4))[0]=t[0],e[1]=t.length>=2?t[1]:e[0],e[2]=t.length>=3?t[2]:e[0],e[3]=t.length>=4?t[3]:e[1]),l.margin=e}});var o=!1;Object.defineProperty(this,"autoPaging",{get:function(){return o},set:function(t){o=t}});var s=0;Object.defineProperty(this,"lastBreak",{get:function(){return s},set:function(t){s=t}});var c=[];Object.defineProperty(this,"pageBreaks",{get:function(){return c},set:function(t){c=t}}),Object.defineProperty(this,"ctx",{get:function(){return l},set:function(t){t instanceof d&&(l=t)}}),Object.defineProperty(this,"path",{get:function(){return l.path},set:function(t){l.path=t}});var u=[];Object.defineProperty(this,"ctxStack",{get:function(){return u},set:function(t){u=t}}),Object.defineProperty(this,"fillStyle",{get:function(){return this.ctx.fillStyle},set:function(t){var e;e=g(t),this.ctx.fillStyle=e.style,this.ctx.isFillTransparent=0===e.a,this.ctx.fillOpacity=e.a,this.pdf.setFillColor(e.r,e.g,e.b,{a:e.a}),this.pdf.setTextColor(e.r,e.g,e.b,{a:e.a})}}),Object.defineProperty(this,"strokeStyle",{get:function(){return this.ctx.strokeStyle},set:function(t){var e=g(t);this.ctx.strokeStyle=e.style,this.ctx.isStrokeTransparent=0===e.a,this.ctx.strokeOpacity=e.a,0===e.a?this.pdf.setDrawColor(255,255,255):(e.a,this.pdf.setDrawColor(e.r,e.g,e.b))}}),Object.defineProperty(this,"lineCap",{get:function(){return this.ctx.lineCap},set:function(t){-1!==["butt","round","square"].indexOf(t)&&(this.ctx.lineCap=t,this.pdf.setLineCap(t))}}),Object.defineProperty(this,"lineWidth",{get:function(){return this.ctx.lineWidth},set:function(t){isNaN(t)||(this.ctx.lineWidth=t,this.pdf.setLineWidth(t))}}),Object.defineProperty(this,"lineJoin",{get:function(){return this.ctx.lineJoin},set:function(t){-1!==["bevel","round","miter"].indexOf(t)&&(this.ctx.lineJoin=t,this.pdf.setLineJoin(t))}}),Object.defineProperty(this,"miterLimit",{get:function(){return this.ctx.miterLimit},set:function(t){isNaN(t)||(this.ctx.miterLimit=t,this.pdf.setMiterLimit(t))}}),Object.defineProperty(this,"textBaseline",{get:function(){return this.ctx.textBaseline},set:function(t){this.ctx.textBaseline=t}}),Object.defineProperty(this,"textAlign",{get:function(){return this.ctx.textAlign},set:function(t){-1!==["right","end","center","left","start"].indexOf(t)&&(this.ctx.textAlign=t)}});var h=null;function f(t,e){if(null===h){var r=function(t){var e=[];return Object.keys(t).forEach((function(r){t[r].forEach((function(t){var n=null;switch(t){case"bold":n={family:r,weight:"bold"};break;case"italic":n={family:r,style:"italic"};break;case"bolditalic":n={family:r,weight:"bold",style:"italic"};break;case"":case"normal":n={family:r}}null!==n&&(n.ref={name:r,style:t},e.push(n))}))})),e}(t.getFontList());h=function(t){for(var e={},r=0;r<t.length;++r){var n=jt(t[r]),i=n.family,a=n.stretch,o=n.style,s=n.weight;e[i]=e[i]||{},e[i][a]=e[i][a]||{},e[i][a][o]=e[i][a][o]||{},e[i][a][o][s]=n}return e}(r.concat(e))}return h}var p=null;Object.defineProperty(this,"fontFaces",{get:function(){return p},set:function(t){h=null,p=t}}),Object.defineProperty(this,"font",{get:function(){return this.ctx.font},set:function(t){var e;if(this.ctx.font=t,null!==(e=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))){var r=e[1],n=(e[2],e[3]),i=e[4],a=(e[5],e[6]),o=/^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];i="px"===o?Math.floor(parseFloat(i)*this.pdf.internal.scaleFactor):"em"===o?Math.floor(parseFloat(i)*this.pdf.getFontSize()):Math.floor(parseFloat(i)*this.pdf.internal.scaleFactor),this.pdf.setFontSize(i);var s=function(t){var e,r,n=[],i=t.trim();if(""===i)return Wt;if(i in Mt)return[Mt[i]];for(;""!==i;){switch(r=null,e=(i=Dt(i)).charAt(0)){case'"':case"'":r=Rt(i.substring(1),e);break;default:r=Tt(i)}if(null===r)return Wt;if(n.push(r[0]),""!==(i=Dt(r[1]))&&","!==i.charAt(0))return Wt;i=i.replace(/^,/,"")}return n}(a);if(this.fontFaces){var c=qt(f(this.pdf,this.fontFaces),s.map((function(t){return{family:t,stretch:"normal",weight:n,style:r}})));this.pdf.setFont(c.ref.name,c.ref.style)}else{var u="";("bold"===n||parseInt(n,10)>=700||"bold"===r)&&(u="bold"),"italic"===r&&(u+="italic"),0===u.length&&(u="normal");for(var h="",l={arial:"Helvetica",Arial:"Helvetica",verdana:"Helvetica",Verdana:"Helvetica",helvetica:"Helvetica",Helvetica:"Helvetica","sans-serif":"Helvetica",fixed:"Courier",monospace:"Courier",terminal:"Courier",cursive:"Times",fantasy:"Times",serif:"Times"},d=0;d<s.length;d++){if(void 0!==this.pdf.internal.getFont(s[d],u,{noFallback:!0,disableWarning:!0})){h=s[d];break}if("bolditalic"===u&&void 0!==this.pdf.internal.getFont(s[d],"bold",{noFallback:!0,disableWarning:!0}))h=s[d],u="bold";else if(void 0!==this.pdf.internal.getFont(s[d],"normal",{noFallback:!0,disableWarning:!0})){h=s[d],u="normal";break}}if(""===h)for(var p=0;p<s.length;p++)if(l[s[p]]){h=l[s[p]];break}h=""===h?"Times":h,this.pdf.setFont(h,u)}}}}),Object.defineProperty(this,"globalCompositeOperation",{get:function(){return this.ctx.globalCompositeOperation},set:function(t){this.ctx.globalCompositeOperation=t}}),Object.defineProperty(this,"globalAlpha",{get:function(){return this.ctx.globalAlpha},set:function(t){this.ctx.globalAlpha=t}}),Object.defineProperty(this,"lineDashOffset",{get:function(){return this.ctx.lineDashOffset},set:function(t){this.ctx.lineDashOffset=t,T.call(this)}}),Object.defineProperty(this,"lineDash",{get:function(){return this.ctx.lineDash},set:function(t){this.ctx.lineDash=t,T.call(this)}}),Object.defineProperty(this,"ignoreClearRect",{get:function(){return this.ctx.ignoreClearRect},set:function(t){this.ctx.ignoreClearRect=Boolean(t)}})};p.prototype.setLineDash=function(t){this.lineDash=t},p.prototype.getLineDash=function(){return this.lineDash.length%2?this.lineDash.concat(this.lineDash):this.lineDash.slice()},p.prototype.fill=function(){A.call(this,"fill",!1)},p.prototype.stroke=function(){A.call(this,"stroke",!1)},p.prototype.beginPath=function(){this.path=[{type:"begin"}]},p.prototype.moveTo=function(t,e){if(isNaN(t)||isNaN(e))throw a.error("jsPDF.context2d.moveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.moveTo");var r=this.ctx.transform.applyToPoint(new c(t,e));this.path.push({type:"mt",x:r.x,y:r.y}),this.ctx.lastPoint=new c(t,e)},p.prototype.closePath=function(){var e=new c(0,0),r=0;for(r=this.path.length-1;-1!==r;r--)if("begin"===this.path[r].type&&"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(this.path[r+1])&&"number"==typeof this.path[r+1].x){e=new c(this.path[r+1].x,this.path[r+1].y);break}this.path.push({type:"close"}),this.ctx.lastPoint=new c(e.x,e.y)},p.prototype.lineTo=function(t,e){if(isNaN(t)||isNaN(e))throw a.error("jsPDF.context2d.lineTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.lineTo");var r=this.ctx.transform.applyToPoint(new c(t,e));this.path.push({type:"lt",x:r.x,y:r.y}),this.ctx.lastPoint=new c(r.x,r.y)},p.prototype.clip=function(){this.ctx.clip_path=JSON.parse(JSON.stringify(this.path)),A.call(this,null,!0)},p.prototype.quadraticCurveTo=function(t,e,r,n){if(isNaN(r)||isNaN(n)||isNaN(t)||isNaN(e))throw a.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");var i=this.ctx.transform.applyToPoint(new c(r,n)),o=this.ctx.transform.applyToPoint(new c(t,e));this.path.push({type:"qct",x1:o.x,y1:o.y,x:i.x,y:i.y}),this.ctx.lastPoint=new c(i.x,i.y)},p.prototype.bezierCurveTo=function(t,e,r,n,i,o){if(isNaN(i)||isNaN(o)||isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error("jsPDF.context2d.bezierCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");var s=this.ctx.transform.applyToPoint(new c(i,o)),u=this.ctx.transform.applyToPoint(new c(t,e)),h=this.ctx.transform.applyToPoint(new c(r,n));this.path.push({type:"bct",x1:u.x,y1:u.y,x2:h.x,y2:h.y,x:s.x,y:s.y}),this.ctx.lastPoint=new c(s.x,s.y)},p.prototype.arc=function(t,e,r,n,i,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i))throw a.error("jsPDF.context2d.arc: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.arc");if(o=Boolean(o),!this.ctx.transform.isIdentity){var s=this.ctx.transform.applyToPoint(new c(t,e));t=s.x,e=s.y;var u=this.ctx.transform.applyToPoint(new c(0,r)),h=this.ctx.transform.applyToPoint(new c(0,0));r=Math.sqrt(Math.pow(u.x-h.x,2)+Math.pow(u.y-h.y,2))}Math.abs(i-n)>=2*Math.PI&&(n=0,i=2*Math.PI),this.path.push({type:"arc",x:t,y:e,radius:r,startAngle:n,endAngle:i,counterclockwise:o})},p.prototype.arcTo=function(t,e,r,n,i){throw new Error("arcTo not implemented.")},p.prototype.rect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error("jsPDF.context2d.rect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rect");this.moveTo(t,e),this.lineTo(t+r,e),this.lineTo(t+r,e+n),this.lineTo(t,e+n),this.lineTo(t,e),this.lineTo(t+r,e),this.lineTo(t,e)},p.prototype.fillRect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error("jsPDF.context2d.fillRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillRect");if(!m.call(this)){var i={};"butt"!==this.lineCap&&(i.lineCap=this.lineCap,this.lineCap="butt"),"miter"!==this.lineJoin&&(i.lineJoin=this.lineJoin,this.lineJoin="miter"),this.beginPath(),this.rect(t,e,r,n),this.fill(),i.hasOwnProperty("lineCap")&&(this.lineCap=i.lineCap),i.hasOwnProperty("lineJoin")&&(this.lineJoin=i.lineJoin)}},p.prototype.strokeRect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error("jsPDF.context2d.strokeRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");v.call(this)||(this.beginPath(),this.rect(t,e,r,n),this.stroke())},p.prototype.clearRect=function(t,e,r,n){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n))throw a.error("jsPDF.context2d.clearRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.clearRect");this.ignoreClearRect||(this.fillStyle="#ffffff",this.fillRect(t,e,r,n))},p.prototype.save=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,r=0;r<this.pdf.internal.getNumberOfPages();r++)this.pdf.setPage(r+1),this.pdf.internal.out("q");if(this.pdf.setPage(e),t){this.ctx.fontSize=this.pdf.internal.getFontSize();var n=new d(this.ctx);this.ctxStack.push(this.ctx),this.ctx=n}},p.prototype.restore=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,r=0;r<this.pdf.internal.getNumberOfPages();r++)this.pdf.setPage(r+1),this.pdf.internal.out("Q");this.pdf.setPage(e),t&&0!==this.ctxStack.length&&(this.ctx=this.ctxStack.pop(),this.fillStyle=this.ctx.fillStyle,this.strokeStyle=this.ctx.strokeStyle,this.font=this.ctx.font,this.lineCap=this.ctx.lineCap,this.lineWidth=this.ctx.lineWidth,this.lineJoin=this.ctx.lineJoin,this.lineDash=this.ctx.lineDash,this.lineDashOffset=this.ctx.lineDashOffset)},p.prototype.toDataURL=function(){throw new Error("toDataUrl not implemented.")};var g=function(t){var e,r,n,i;if(!0===t.isCanvasGradient&&(t=t.getColor()),!t)return{r:0,g:0,b:0,a:0,style:t};if(/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t))e=0,r=0,n=0,i=0;else{var a=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);if(null!==a)e=parseInt(a[1]),r=parseInt(a[2]),n=parseInt(a[3]),i=1;else if(null!==(a=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t)))e=parseInt(a[1]),r=parseInt(a[2]),n=parseInt(a[3]),i=parseFloat(a[4]);else{if(i=1,"string"==typeof t&&"#"!==t.charAt(0)){var o=new f(t);t=o.ok?o.toHex():"#000000"}4===t.length?(e=t.substring(1,2),e+=e,r=t.substring(2,3),r+=r,n=t.substring(3,4),n+=n):(e=t.substring(1,3),r=t.substring(3,5),n=t.substring(5,7)),e=parseInt(e,16),r=parseInt(r,16),n=parseInt(n,16)}}return{r:e,g:r,b:n,a:i,style:t}},m=function(){return this.ctx.isFillTransparent||0==this.globalAlpha},v=function(){return Boolean(this.ctx.isStrokeTransparent||0==this.globalAlpha)};p.prototype.fillText=function(t,e,r,n){if(isNaN(e)||isNaN(r)||"string"!=typeof t)throw a.error("jsPDF.context2d.fillText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillText");if(n=isNaN(n)?void 0:n,!m.call(this)){var i=q(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;C.call(this,{text:t,x:e,y:r,scale:o,angle:i,align:this.textAlign,maxWidth:n})}},p.prototype.strokeText=function(t,e,r,n){if(isNaN(e)||isNaN(r)||"string"!=typeof t)throw a.error("jsPDF.context2d.strokeText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeText");if(!v.call(this)){n=isNaN(n)?void 0:n;var i=q(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;C.call(this,{text:t,x:e,y:r,scale:o,renderingMode:"stroke",angle:i,align:this.textAlign,maxWidth:n})}},p.prototype.measureText=function(t){if("string"!=typeof t)throw a.error("jsPDF.context2d.measureText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.measureText");var e=this.pdf,r=this.pdf.internal.scaleFactor,n=e.internal.getFontSize(),i=e.getStringUnitWidth(t)*n/e.internal.scaleFactor,o=function(t){var e=(t=t||{}).width||0;return Object.defineProperty(this,"width",{get:function(){return e}}),this};return new o({width:i*=Math.round(96*r/72*1e4)/1e4})},p.prototype.scale=function(t,e){if(isNaN(t)||isNaN(e))throw a.error("jsPDF.context2d.scale: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.scale");var r=new h(t,0,0,e,0,0);this.ctx.transform=this.ctx.transform.multiply(r)},p.prototype.rotate=function(t){if(isNaN(t))throw a.error("jsPDF.context2d.rotate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rotate");var e=new h(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0);this.ctx.transform=this.ctx.transform.multiply(e)},p.prototype.translate=function(t,e){if(isNaN(t)||isNaN(e))throw a.error("jsPDF.context2d.translate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.translate");var r=new h(1,0,0,1,t,e);this.ctx.transform=this.ctx.transform.multiply(r)},p.prototype.transform=function(t,e,r,n,i,o){if(isNaN(t)||isNaN(e)||isNaN(r)||isNaN(n)||isNaN(i)||isNaN(o))throw a.error("jsPDF.context2d.transform: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.transform");var s=new h(t,e,r,n,i,o);this.ctx.transform=this.ctx.transform.multiply(s)},p.prototype.setTransform=function(t,e,r,n,i,a){t=isNaN(t)?1:t,e=isNaN(e)?0:e,r=isNaN(r)?0:r,n=isNaN(n)?1:n,i=isNaN(i)?0:i,a=isNaN(a)?0:a,this.ctx.transform=new h(t,e,r,n,i,a)};var b=function(){return this.margin[0]>0||this.margin[1]>0||this.margin[2]>0||this.margin[3]>0};p.prototype.drawImage=function(t,e,r,n,i,a,o,s,c){var l=this.pdf.getImageProperties(t),f=1,d=1,p=1,g=1;void 0!==n&&void 0!==s&&(p=s/n,g=c/i,f=l.width/n*s/n,d=l.height/i*c/i),void 0===a&&(a=e,o=r,e=0,r=0),void 0!==n&&void 0===s&&(s=n,c=i),void 0===n&&void 0===s&&(s=l.width,c=l.height);for(var m,v=this.ctx.transform.decompose(),w=q(v.rotate.shx),A=new h,S=(A=(A=(A=A.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new u(a-e*p,o-r*g,n*f,i*d)),_=y.call(this,S),P=[],k=0;k<_.length;k+=1)-1===P.indexOf(_[k])&&P.push(_[k]);if(L(P),this.autoPaging)for(var I=P[0],F=P[P.length-1],C=I;C<F+1;C++){this.pdf.setPage(C);var j=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],O=1===C?this.posY+this.margin[0]:this.margin[0],B=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],M=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],E=1===C?0:B+(C-2)*M;if(0!==this.ctx.clip_path.length){var D=this.path;m=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=N(m,this.posX+this.margin[3],-E+O+this.ctx.prevPageLastElemOffset),x.call(this,"fill",!0),this.path=D}var R=JSON.parse(JSON.stringify(S));R=N([R],this.posX+this.margin[3],-E+O+this.ctx.prevPageLastElemOffset)[0];var T=(C>I||C<F)&&b.call(this);T&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],j,M,null).clip().discardPath()),this.pdf.addImage(t,"JPEG",R.x,R.y,R.w,R.h,null,null,w),T&&this.pdf.restoreGraphicsState()}else this.pdf.addImage(t,"JPEG",S.x,S.y,S.w,S.h,null,null,w)};var y=function(t,e,r){var n=[];e=e||this.pdf.internal.pageSize.width,r=r||this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2];var i=this.posY+this.ctx.prevPageLastElemOffset;switch(t.type){default:case"mt":case"lt":n.push(Math.floor((t.y+i)/r)+1);break;case"arc":n.push(Math.floor((t.y+i-t.radius)/r)+1),n.push(Math.floor((t.y+i+t.radius)/r)+1);break;case"qct":var a=D(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x,t.y);n.push(Math.floor((a.y+i)/r)+1),n.push(Math.floor((a.y+a.h+i)/r)+1);break;case"bct":var o=R(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x2,t.y2,t.x,t.y);n.push(Math.floor((o.y+i)/r)+1),n.push(Math.floor((o.y+o.h+i)/r)+1);break;case"rect":n.push(Math.floor((t.y+i)/r)+1),n.push(Math.floor((t.y+t.h+i)/r)+1)}for(var s=0;s<n.length;s+=1)for(;this.pdf.internal.getNumberOfPages()<n[s];)w.call(this);return n},w=function(){var t=this.fillStyle,e=this.strokeStyle,r=this.font,n=this.lineCap,i=this.lineWidth,a=this.lineJoin;this.pdf.addPage(),this.fillStyle=t,this.strokeStyle=e,this.font=r,this.lineCap=n,this.lineWidth=i,this.lineJoin=a},N=function(t,e,r){for(var n=0;n<t.length;n++)switch(t[n].type){case"bct":t[n].x2+=e,t[n].y2+=r;case"qct":t[n].x1+=e,t[n].y1+=r;case"mt":case"lt":case"arc":default:t[n].x+=e,t[n].y+=r}return t},L=function(t){return t.sort((function(t,e){return t-e}))},A=function(t,e){for(var r,n,i=this.fillStyle,a=this.strokeStyle,o=this.lineCap,s=this.lineWidth,c=Math.abs(s*this.ctx.transform.scaleX),u=this.lineJoin,h=JSON.parse(JSON.stringify(this.path)),l=JSON.parse(JSON.stringify(this.path)),f=[],d=0;d<l.length;d++)if(void 0!==l[d].x)for(var p=y.call(this,l[d]),g=0;g<p.length;g+=1)-1===f.indexOf(p[g])&&f.push(p[g]);for(var m=0;m<f.length;m++)for(;this.pdf.internal.getNumberOfPages()<f[m];)w.call(this);if(L(f),this.autoPaging)for(var v=f[0],A=f[f.length-1],S=v;S<A+1;S++){this.pdf.setPage(S),this.fillStyle=i,this.strokeStyle=a,this.lineCap=o,this.lineWidth=c,this.lineJoin=u;var _=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],P=1===S?this.posY+this.margin[0]:this.margin[0],k=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],I=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],F=1===S?0:k+(S-2)*I;if(0!==this.ctx.clip_path.length){var C=this.path;r=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=N(r,this.posX+this.margin[3],-F+P+this.ctx.prevPageLastElemOffset),x.call(this,t,!0),this.path=C}if(n=JSON.parse(JSON.stringify(h)),this.path=N(n,this.posX+this.margin[3],-F+P+this.ctx.prevPageLastElemOffset),!1===e||0===S){var j=(S>v||S<A)&&b.call(this);j&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],_,I,null).clip().discardPath()),x.call(this,t,e),j&&this.pdf.restoreGraphicsState()}this.lineWidth=s}else this.lineWidth=c,x.call(this,t,e),this.lineWidth=s;this.path=h},x=function(t,e){if(("stroke"!==t||e||!v.call(this))&&("stroke"===t||e||!m.call(this))){for(var r,n,i=[],a=this.path,o=0;o<a.length;o++){var s=a[o];switch(s.type){case"begin":i.push({begin:!0});break;case"close":i.push({close:!0});break;case"mt":i.push({start:s,deltas:[],abs:[]});break;case"lt":var c=i.length;if(a[o-1]&&!isNaN(a[o-1].x)&&(r=[s.x-a[o-1].x,s.y-a[o-1].y],c>0))for(;c>=0;c--)if(!0!==i[c-1].close&&!0!==i[c-1].begin){i[c-1].deltas.push(r),i[c-1].abs.push(s);break}break;case"bct":r=[s.x1-a[o-1].x,s.y1-a[o-1].y,s.x2-a[o-1].x,s.y2-a[o-1].y,s.x-a[o-1].x,s.y-a[o-1].y],i[i.length-1].deltas.push(r);break;case"qct":var u=a[o-1].x+2/3*(s.x1-a[o-1].x),h=a[o-1].y+2/3*(s.y1-a[o-1].y),l=s.x+2/3*(s.x1-s.x),f=s.y+2/3*(s.y1-s.y),d=s.x,p=s.y;r=[u-a[o-1].x,h-a[o-1].y,l-a[o-1].x,f-a[o-1].y,d-a[o-1].x,p-a[o-1].y],i[i.length-1].deltas.push(r);break;case"arc":i.push({deltas:[],abs:[],arc:!0}),Array.isArray(i[i.length-1].abs)&&i[i.length-1].abs.push(s)}}n=e?null:"stroke"===t?"stroke":"fill";for(var g=!1,b=0;b<i.length;b++)if(i[b].arc)for(var y=i[b].abs,w=0;w<y.length;w++){var N=y[w];"arc"===N.type?P.call(this,N.x,N.y,N.radius,N.startAngle,N.endAngle,N.counterclockwise,void 0,e,!g):j.call(this,N.x,N.y),g=!0}else if(!0===i[b].close)this.pdf.internal.out("h"),g=!1;else if(!0!==i[b].begin){var L=i[b].start.x,A=i[b].start.y;O.call(this,i[b].deltas,L,A),g=!0}n&&k.call(this,n),e&&I.call(this)}},S=function(t){var e=this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor,r=e*(this.pdf.internal.getLineHeightFactor()-1);switch(this.ctx.textBaseline){case"bottom":return t-r;case"top":return t+e-r;case"hanging":return t+e-2*r;case"middle":return t+e/2-r;case"ideographic":return t;case"alphabetic":default:return t}},_=function(t){return t+this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor*(this.pdf.internal.getLineHeightFactor()-1)};p.prototype.createLinearGradient=function(){var t=function(){};return t.colorStops=[],t.addColorStop=function(t,e){this.colorStops.push([t,e])},t.getColor=function(){return 0===this.colorStops.length?"#000000":this.colorStops[0][1]},t.isCanvasGradient=!0,t},p.prototype.createPattern=function(){return this.createLinearGradient()},p.prototype.createRadialGradient=function(){return this.createLinearGradient()};var P=function(t,e,r,n,i,a,o,s,c){for(var u=M.call(this,r,n,i,a),h=0;h<u.length;h++){var l=u[h];0===h&&(c?F.call(this,l.x1+t,l.y1+e):j.call(this,l.x1+t,l.y1+e)),B.call(this,t,e,l.x2,l.y2,l.x3,l.y3,l.x4,l.y4)}s?I.call(this):k.call(this,o)},k=function(t){switch(t){case"stroke":this.pdf.internal.out("S");break;case"fill":this.pdf.internal.out("f")}},I=function(){this.pdf.clip(),this.pdf.discardPath()},F=function(t,e){this.pdf.internal.out(n(t)+" "+i(e)+" m")},C=function(t){var e;switch(t.align){case"right":case"end":e="right";break;case"center":e="center";break;case"left":case"start":default:e="left"}var r=this.pdf.getTextDimensions(t.text),n=S.call(this,t.y),i=_.call(this,n)-r.h,a=this.ctx.transform.applyToPoint(new c(t.x,n)),o=this.ctx.transform.decompose(),s=new h;s=(s=(s=s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);for(var l,f,d,p=this.ctx.transform.applyToRectangle(new u(t.x,n,r.w,r.h)),g=s.applyToRectangle(new u(t.x,i,r.w,r.h)),m=y.call(this,g),v=[],w=0;w<m.length;w+=1)-1===v.indexOf(m[w])&&v.push(m[w]);if(L(v),this.autoPaging)for(var A=v[0],P=v[v.length-1],k=A;k<P+1;k++){this.pdf.setPage(k);var I=1===k?this.posY+this.margin[0]:this.margin[0],F=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],C=this.pdf.internal.pageSize.height-this.margin[2],j=C-this.margin[0],O=this.pdf.internal.pageSize.width-this.margin[1],B=O-this.margin[3],M=1===k?0:F+(k-2)*j;if(0!==this.ctx.clip_path.length){var E=this.path;l=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=N(l,this.posX+this.margin[3],-1*M+I),x.call(this,"fill",!0),this.path=E}var q=N([JSON.parse(JSON.stringify(g))],this.posX+this.margin[3],-M+I+this.ctx.prevPageLastElemOffset)[0];t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale);var D="text"!==this.autoPaging;if(D||q.y+q.h<=C){if(D||q.y>=I&&q.x<=O){var R=D?t.text:this.pdf.splitTextToSize(t.text,t.maxWidth||O-q.x)[0],T=N([JSON.parse(JSON.stringify(p))],this.posX+this.margin[3],-M+I+this.ctx.prevPageLastElemOffset)[0],U=D&&(k>A||k<P)&&b.call(this);U&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],B,j,null).clip().discardPath()),this.pdf.text(R,T.x,T.y,{angle:t.angle,align:e,renderingMode:t.renderingMode}),U&&this.pdf.restoreGraphicsState()}}else q.y<C&&(this.ctx.prevPageLastElemOffset+=C-q.y);t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)}else t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale),this.pdf.text(t.text,a.x+this.posX,a.y+this.posY,{angle:t.angle,align:e,renderingMode:t.renderingMode,maxWidth:t.maxWidth}),t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)},j=function(t,e,r,a){r=r||0,a=a||0,this.pdf.internal.out(n(t+r)+" "+i(e+a)+" l")},O=function(t,e,r){return this.pdf.lines(t,e,r,null,null)},B=function(t,e,n,i,a,c,u,h){this.pdf.internal.out([r(o(n+t)),r(s(i+e)),r(o(a+t)),r(s(c+e)),r(o(u+t)),r(s(h+e)),"c"].join(" "))},M=function(t,e,r,n){for(var i=2*Math.PI,a=Math.PI/2;e>r;)e-=i;var o=Math.abs(r-e);o<i&&n&&(o=i-o);for(var s=[],c=n?-1:1,u=e;o>1e-5;){var h=u+c*Math.min(o,a);s.push(E.call(this,t,u,h)),o-=Math.abs(h-u),u=h}return s},E=function(t,e,r){var n=(r-e)/2,i=t*Math.cos(n),a=t*Math.sin(n),o=i,s=-a,c=o*o+s*s,u=c+o*i+s*a,h=4/3*(Math.sqrt(2*c*u)-u)/(o*a-s*i),l=o-h*s,f=s+h*o,d=l,p=-f,g=n+e,m=Math.cos(g),v=Math.sin(g);return{x1:t*Math.cos(e),y1:t*Math.sin(e),x2:l*m-f*v,y2:l*v+f*m,x3:d*m-p*v,y3:d*v+p*m,x4:t*Math.cos(r),y4:t*Math.sin(r)}},q=function(t){return 180*t/Math.PI},D=function(t,e,r,n,i,a){var o=t+.5*(r-t),s=e+.5*(n-e),c=i+.5*(r-i),h=a+.5*(n-a),l=Math.min(t,i,o,c),f=Math.max(t,i,o,c),d=Math.min(e,a,s,h),p=Math.max(e,a,s,h);return new u(l,d,f-l,p-d)},R=function(t,e,r,n,i,a,o,s){var c,h,l,f,d,p,g,m,v,b,y,w,N,L,A=r-t,x=n-e,S=i-r,_=a-n,P=o-i,k=s-a;for(h=0;h<41;h++)v=(g=(l=t+(c=h/40)*A)+c*((d=r+c*S)-l))+c*(d+c*(i+c*P-d)-g),b=(m=(f=e+c*x)+c*((p=n+c*_)-f))+c*(p+c*(a+c*k-p)-m),0==h?(y=v,w=b,N=v,L=b):(y=Math.min(y,v),w=Math.min(w,b),N=Math.max(N,v),L=Math.max(L,b));return new u(Math.round(y),Math.round(w),Math.round(N-y),Math.round(L-w))},T=function(){if(this.prevLineDash||this.ctx.lineDash.length||this.ctx.lineDashOffset){var t,e,r=(t=this.ctx.lineDash,e=this.ctx.lineDashOffset,JSON.stringify({lineDash:t,lineDashOffset:e}));this.prevLineDash!==r&&(this.pdf.setLineDash(this.ctx.lineDash,this.ctx.lineDashOffset),this.prevLineDash=r)}}}(E.API),
/**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var r=function(t){var e,r,n,i,a,o,s,c,u,h;for(/[^\x00-\xFF]/.test(t),r=[],n=0,i=(t+=e="\0\0\0\0".slice(t.length%4||4)).length;i>n;n+=4)0!==(a=(t.charCodeAt(n)<<24)+(t.charCodeAt(n+1)<<16)+(t.charCodeAt(n+2)<<8)+t.charCodeAt(n+3))?(o=(a=((a=((a=((a=(a-(h=a%85))/85)-(u=a%85))/85)-(c=a%85))/85)-(s=a%85))/85)%85,r.push(o+33,s+33,c+33,u+33,h+33)):r.push(122);return function(t,e){for(var r=e;r>0;r--)t.pop()}(r,e.length),String.fromCharCode.apply(String,r)+"~>"},n=function(t){var e,r,n,i,a,o=String,s="length",c=255,u="charCodeAt",h="slice",l="replace";for(t[h](-2),t=t[h](0,-2)[l](/\s/g,"")[l]("z","!!!!!"),n=[],i=0,a=(t+=e="uuuuu"[h](t[s]%5||5))[s];a>i;i+=5)r=52200625*(t[u](i)-33)+614125*(t[u](i+1)-33)+7225*(t[u](i+2)-33)+85*(t[u](i+3)-33)+(t[u](i+4)-33),n.push(c&r>>24,c&r>>16,c&r>>8,c&r);return function(t,e){for(var r=e;r>0;r--)t.pop()}(n,e[s]),o.fromCharCode.apply(o,n)},i=function(t){var e=new RegExp(/^([0-9A-Fa-f]{2})+$/);if(-1!==(t=t.replace(/\s/g,"")).indexOf(">")&&(t=t.substr(0,t.indexOf(">"))),t.length%2&&(t+="0"),!1===e.test(t))return"";for(var r="",n=0;n<t.length;n+=2)r+=String.fromCharCode("0x"+(t[n]+t[n+1]));return r},a=function(t){for(var r=new Uint8Array(t.length),n=t.length;n--;)r[n]=t.charCodeAt(n);return t=(r=(0,fflate__WEBPACK_IMPORTED_MODULE_1__.zlibSync)(r)).reduce((function(t,e){return t+String.fromCharCode(e)}),"")};t.processDataByFilters=function(t,e){var o=0,s=t||"",c=[];for("string"==typeof(e=e||[])&&(e=[e]),o=0;o<e.length;o+=1)switch(e[o]){case"ASCII85Decode":case"/ASCII85Decode":s=n(s),c.push("/ASCII85Encode");break;case"ASCII85Encode":case"/ASCII85Encode":s=r(s),c.push("/ASCII85Decode");break;case"ASCIIHexDecode":case"/ASCIIHexDecode":s=i(s),c.push("/ASCIIHexEncode");break;case"ASCIIHexEncode":case"/ASCIIHexEncode":s=s.split("").map((function(t){return("0"+t.charCodeAt().toString(16)).slice(-2)})).join("")+">",c.push("/ASCIIHexDecode");break;case"FlateEncode":case"/FlateEncode":s=a(s),c.push("/FlateDecode");break;default:throw new Error('The filter: "'+e[o]+'" is not implemented')}return{data:s,reverseChain:c.reverse().join(" ")}}}(E.API),
/**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){t.loadFile=function(t,e,r){return function(t,e,r){e=!1!==e,r="function"==typeof r?r:function(){};var n=void 0;try{n=function(t,e,r){var n=new XMLHttpRequest,i=0,a=function(t){var e=t.length,r=[],n=String.fromCharCode;for(i=0;i<e;i+=1)r.push(n(255&t.charCodeAt(i)));return r.join("")};if(n.open("GET",t,!e),n.overrideMimeType("text/plain; charset=x-user-defined"),!1===e&&(n.onload=function(){200===n.status?r(a(this.responseText)):r(void 0)}),n.send(null),e&&200===n.status)return a(n.responseText)}(t,e,r)}catch(t){}return n}(t,e,r)},t.loadImageFile=t.loadFile}(E.API),function(e){function r(){return(n.html2canvas?Promise.resolve(n.html2canvas):__webpack_require__.e(/*! import() */ "vendors-node_modules_html2canvas_dist_html2canvas_js").then(__webpack_require__.t.bind(__webpack_require__, /*! html2canvas */ "./node_modules/html2canvas/dist/html2canvas.js", 23))).catch((function(t){return Promise.reject(new Error("Could not load html2canvas: "+t))})).then((function(t){return t.default?t.default:t}))}function i(){return(n.DOMPurify?Promise.resolve(n.DOMPurify):__webpack_require__.e(/*! import() */ "vendors-node_modules_dompurify_dist_purify_js").then(__webpack_require__.t.bind(__webpack_require__, /*! dompurify */ "./node_modules/dompurify/dist/purify.js", 23))).catch((function(t){return Promise.reject(new Error("Could not load dompurify: "+t))})).then((function(t){return t.default?t.default:t}))}var a=function(e){var r=(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e);return"undefined"===r?"undefined":"string"===r||e instanceof String?"string":"number"===r||e instanceof Number?"number":"function"===r||e instanceof Function?"function":e&&e.constructor===Array?"array":e&&1===e.nodeType?"element":"object"===r?"object":"unknown"},o=function(t,e){var r=document.createElement(t);for(var n in e.className&&(r.className=e.className),e.innerHTML&&e.dompurify&&(r.innerHTML=e.dompurify.sanitize(e.innerHTML)),e.style)r.style[n]=e.style[n];return r},s=function t(e){var r=Object.assign(t.convert(Promise.resolve()),JSON.parse(JSON.stringify(t.template))),n=t.convert(Promise.resolve(),r);return n=(n=n.setProgress(1,t,1,[t])).set(e)};(s.prototype=Object.create(Promise.prototype)).constructor=s,s.convert=function(t,e){return t.__proto__=e||s.prototype,t},s.template={prop:{src:null,container:null,overlay:null,canvas:null,img:null,pdf:null,pageSize:null,callback:function(){}},progress:{val:0,state:null,n:0,stack:[]},opt:{filename:"file.pdf",margin:[0,0,0,0],enableLinks:!0,x:0,y:0,html2canvas:{},jsPDF:{},backgroundColor:"transparent"}},s.prototype.from=function(t,e){return this.then((function(){switch(e=e||function(t){switch(a(t)){case"string":return"string";case"element":return"canvas"===t.nodeName.toLowerCase()?"canvas":"element";default:return"unknown"}}(t)){case"string":return this.then(i).then((function(e){return this.set({src:o("div",{innerHTML:t,dompurify:e})})}));case"element":return this.set({src:t});case"canvas":return this.set({canvas:t});case"img":return this.set({img:t});default:return this.error("Unknown source type.")}}))},s.prototype.to=function(t){switch(t){case"container":return this.toContainer();case"canvas":return this.toCanvas();case"img":return this.toImg();case"pdf":return this.toPdf();default:return this.error("Invalid target.")}},s.prototype.toContainer=function(){return this.thenList([function(){return this.prop.src||this.error("Cannot duplicate - no source HTML.")},function(){return this.prop.pageSize||this.setPageSize()}]).then((function(){var t={position:"relative",display:"inline-block",width:("number"!=typeof this.opt.width||isNaN(this.opt.width)||"number"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?Math.max(this.prop.src.clientWidth,this.prop.src.scrollWidth,this.prop.src.offsetWidth):this.opt.windowWidth)+"px",left:0,right:0,top:0,margin:"auto",backgroundColor:this.opt.backgroundColor},e=function t(e,r){for(var n=3===e.nodeType?document.createTextNode(e.nodeValue):e.cloneNode(!1),i=e.firstChild;i;i=i.nextSibling)!0!==r&&1===i.nodeType&&"SCRIPT"===i.nodeName||n.appendChild(t(i,r));return 1===e.nodeType&&("CANVAS"===e.nodeName?(n.width=e.width,n.height=e.height,n.getContext("2d").drawImage(e,0,0)):"TEXTAREA"!==e.nodeName&&"SELECT"!==e.nodeName||(n.value=e.value),n.addEventListener("load",(function(){n.scrollTop=e.scrollTop,n.scrollLeft=e.scrollLeft}),!0)),n}(this.prop.src,this.opt.html2canvas.javascriptEnabled);"BODY"===e.tagName&&(t.height=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight)+"px"),this.prop.overlay=o("div",{className:"html2pdf__overlay",style:{position:"fixed",overflow:"hidden",zIndex:1e3,left:"-100000px",right:0,bottom:0,top:0}}),this.prop.container=o("div",{className:"html2pdf__container",style:t}),this.prop.container.appendChild(e),this.prop.container.firstChild.appendChild(o("div",{style:{clear:"both",border:"0 none transparent",margin:0,padding:0,height:0}})),this.prop.container.style.float="none",this.prop.overlay.appendChild(this.prop.container),document.body.appendChild(this.prop.overlay),this.prop.container.firstChild.style.position="relative",this.prop.container.height=Math.max(this.prop.container.firstChild.clientHeight,this.prop.container.firstChild.scrollHeight,this.prop.container.firstChild.offsetHeight)+"px"}))},s.prototype.toCanvas=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(r).then((function(t){var e=Object.assign({},this.opt.html2canvas);return delete e.onrendered,t(this.prop.container,e)})).then((function(t){(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},s.prototype.toContext2d=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(r).then((function(t){var e=this.opt.jsPDF,r=this.opt.fontFaces,n="number"!=typeof this.opt.width||isNaN(this.opt.width)||"number"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?1:this.opt.width/this.opt.windowWidth,i=Object.assign({async:!0,allowTaint:!0,scale:n,scrollX:this.opt.scrollX||0,scrollY:this.opt.scrollY||0,backgroundColor:"#ffffff",imageTimeout:15e3,logging:!0,proxy:null,removeContainer:!0,foreignObjectRendering:!1,useCORS:!1},this.opt.html2canvas);if(delete i.onrendered,e.context2d.autoPaging=void 0===this.opt.autoPaging||this.opt.autoPaging,e.context2d.posX=this.opt.x,e.context2d.posY=this.opt.y,e.context2d.margin=this.opt.margin,e.context2d.fontFaces=r,r)for(var a=0;a<r.length;++a){var o=r[a],s=o.src.find((function(t){return"truetype"===t.format}));s&&e.addFont(s.url,o.ref.name,o.ref.style)}return i.windowHeight=i.windowHeight||0,i.windowHeight=0==i.windowHeight?Math.max(this.prop.container.clientHeight,this.prop.container.scrollHeight,this.prop.container.offsetHeight):i.windowHeight,e.context2d.save(!0),t(this.prop.container,i)})).then((function(t){this.opt.jsPDF.context2d.restore(!0),(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},s.prototype.toImg=function(){return this.thenList([function(){return this.prop.canvas||this.toCanvas()}]).then((function(){var t=this.prop.canvas.toDataURL("image/"+this.opt.image.type,this.opt.image.quality);this.prop.img=document.createElement("img"),this.prop.img.src=t}))},s.prototype.toPdf=function(){return this.thenList([function(){return this.toContext2d()}]).then((function(){this.prop.pdf=this.prop.pdf||this.opt.jsPDF}))},s.prototype.output=function(t,e,r){return"img"===(r=r||"pdf").toLowerCase()||"image"===r.toLowerCase()?this.outputImg(t,e):this.outputPdf(t,e)},s.prototype.outputPdf=function(t,e){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){return this.prop.pdf.output(t,e)}))},s.prototype.outputImg=function(t){return this.thenList([function(){return this.prop.img||this.toImg()}]).then((function(){switch(t){case void 0:case"img":return this.prop.img;case"datauristring":case"dataurlstring":return this.prop.img.src;case"datauri":case"dataurl":return document.location.href=this.prop.img.src;default:throw'Image output type "'+t+'" is not supported.'}}))},s.prototype.save=function(t){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).set(t?{filename:t}:null).then((function(){this.prop.pdf.save(this.opt.filename)}))},s.prototype.doCallback=function(){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){this.prop.callback(this.prop.pdf)}))},s.prototype.set=function(t){if("object"!==a(t))return this;var e=Object.keys(t||{}).map((function(e){if(e in s.template.prop)return function(){this.prop[e]=t[e]};switch(e){case"margin":return this.setMargin.bind(this,t.margin);case"jsPDF":return function(){return this.opt.jsPDF=t.jsPDF,this.setPageSize()};case"pageSize":return this.setPageSize.bind(this,t.pageSize);default:return function(){this.opt[e]=t[e]}}}),this);return this.then((function(){return this.thenList(e)}))},s.prototype.get=function(t,e){return this.then((function(){var r=t in s.template.prop?this.prop[t]:this.opt[t];return e?e(r):r}))},s.prototype.setMargin=function(t){return this.then((function(){switch(a(t)){case"number":t=[t,t,t,t];case"array":if(2===t.length&&(t=[t[0],t[1],t[0],t[1]]),4===t.length)break;default:return this.error("Invalid margin array.")}this.opt.margin=t})).then(this.setPageSize)},s.prototype.setPageSize=function(t){function e(t,e){return Math.floor(t*e/72*96)}return this.then((function(){(t=t||E.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner")||(t.inner={width:t.width-this.opt.margin[1]-this.opt.margin[3],height:t.height-this.opt.margin[0]-this.opt.margin[2]},t.inner.px={width:e(t.inner.width,t.k),height:e(t.inner.height,t.k)},t.inner.ratio=t.inner.height/t.inner.width),this.prop.pageSize=t}))},s.prototype.setProgress=function(t,e,r,n){return null!=t&&(this.progress.val=t),null!=e&&(this.progress.state=e),null!=r&&(this.progress.n=r),null!=n&&(this.progress.stack=n),this.progress.ratio=this.progress.val/this.progress.state,this},s.prototype.updateProgress=function(t,e,r,n){return this.setProgress(t?this.progress.val+t:null,e||null,r?this.progress.n+r:null,n?this.progress.stack.concat(n):null)},s.prototype.then=function(t,e){var r=this;return this.thenCore(t,e,(function(t,e){return r.updateProgress(null,null,1,[t]),Promise.prototype.then.call(this,(function(e){return r.updateProgress(null,t),e})).then(t,e).then((function(t){return r.updateProgress(1),t}))}))},s.prototype.thenCore=function(t,e,r){r=r||Promise.prototype.then;t&&(t=t.bind(this)),e&&(e=e.bind(this));var n=-1!==Promise.toString().indexOf("[native code]")&&"Promise"===Promise.name?this:s.convert(Object.assign({},this),Promise.prototype),i=r.call(n,t,e);return s.convert(i,this.__proto__)},s.prototype.thenExternal=function(t,e){return Promise.prototype.then.call(this,t,e)},s.prototype.thenList=function(t){var e=this;return t.forEach((function(t){e=e.thenCore(t)})),e},s.prototype.catch=function(t){t&&(t=t.bind(this));var e=Promise.prototype.catch.call(this,t);return s.convert(e,this)},s.prototype.catchExternal=function(t){return Promise.prototype.catch.call(this,t)},s.prototype.error=function(t){return this.then((function(){throw new Error(t)}))},s.prototype.using=s.prototype.set,s.prototype.saveAs=s.prototype.save,s.prototype.export=s.prototype.output,s.prototype.run=s.prototype.then,E.getPageSize=function(e,r,n){if("object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e)){var i=e;e=i.orientation,r=i.unit||r,n=i.format||n}r=r||"mm",n=n||"a4",e=(""+(e||"P")).toLowerCase();var a,o=(""+n).toLowerCase(),s={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};switch(r){case"pt":a=1;break;case"mm":a=72/25.4;break;case"cm":a=72/2.54;break;case"in":a=72;break;case"px":a=.75;break;case"pc":case"em":a=12;break;case"ex":a=6;break;default:throw"Invalid unit: "+r}var c,u=0,h=0;if(s.hasOwnProperty(o))u=s[o][1]/a,h=s[o][0]/a;else try{u=n[1],h=n[0]}catch(t){throw new Error("Invalid format: "+n)}if("p"===e||"portrait"===e)e="p",h>u&&(c=h,h=u,u=c);else{if("l"!==e&&"landscape"!==e)throw"Invalid orientation: "+e;e="l",u>h&&(c=h,h=u,u=c)}return{width:h,height:u,unit:r,k:a,orientation:e}},e.html=function(t,e){(e=e||{}).callback=e.callback||function(){},e.html2canvas=e.html2canvas||{},e.html2canvas.canvas=e.html2canvas.canvas||this.canvas,e.jsPDF=e.jsPDF||this,e.fontFaces=e.fontFaces?e.fontFaces.map(jt):null;var r=new s(e);return e.worker?r:r.from(t).doCallback()}}(E.API),E.API.addJS=function(t){return Ht=t,this.internal.events.subscribe("postPutResources",(function(){Ut=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/Names [(EmbeddedJS) "+(Ut+1)+" 0 R]"),this.internal.out(">>"),this.internal.out("endobj"),zt=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /JavaScript"),this.internal.out("/JS ("+Ht+")"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){void 0!==Ut&&void 0!==zt&&this.internal.out("/Names <</JavaScript "+Ut+" 0 R>>")})),this},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e;t.events.push(["postPutResources",function(){var t=this,r=/^(\d+) 0 obj$/;if(this.outline.root.children.length>0)for(var n=t.outline.render().split(/\r\n/),i=0;i<n.length;i++){var a=n[i],o=r.exec(a);if(null!=o){var s=o[1];t.internal.newObjectDeferredBegin(s,!1)}t.internal.write(a)}if(this.outline.createNamedDestinations){var c=this.internal.pages.length,u=[];for(i=0;i<c;i++){var h=t.internal.newObject();u.push(h);var l=t.internal.getPageInfo(i+1);t.internal.write("<< /D["+l.objId+" 0 R /XYZ null null null]>> endobj")}var f=t.internal.newObject();t.internal.write("<< /Names [ ");for(i=0;i<u.length;i++)t.internal.write("(page_"+(i+1)+")"+u[i]+" 0 R");t.internal.write(" ] >>","endobj"),e=t.internal.newObject(),t.internal.write("<< /Dests "+f+" 0 R"),t.internal.write(">>","endobj")}}]),t.events.push(["putCatalog",function(){this.outline.root.children.length>0&&(this.internal.write("/Outlines",this.outline.makeRef(this.outline.root)),this.outline.createNamedDestinations&&this.internal.write("/Names "+e+" 0 R"))}]),t.events.push(["initialized",function(){var t=this;t.outline={createNamedDestinations:!1,root:{children:[]}},t.outline.add=function(t,e,r){var n={title:e,options:r,children:[]};return null==t&&(t=this.root),t.children.push(n),n},t.outline.render=function(){return this.ctx={},this.ctx.val="",this.ctx.pdf=t,this.genIds_r(this.root),this.renderRoot(this.root),this.renderItems(this.root),this.ctx.val},t.outline.genIds_r=function(e){e.id=t.internal.newObjectDeferred();for(var r=0;r<e.children.length;r++)this.genIds_r(e.children[r])},t.outline.renderRoot=function(t){this.objStart(t),this.line("/Type /Outlines"),t.children.length>0&&(this.line("/First "+this.makeRef(t.children[0])),this.line("/Last "+this.makeRef(t.children[t.children.length-1]))),this.line("/Count "+this.count_r({count:0},t)),this.objEnd()},t.outline.renderItems=function(e){for(var r=this.ctx.pdf.internal.getVerticalCoordinateString,n=0;n<e.children.length;n++){var i=e.children[n];this.objStart(i),this.line("/Title "+this.makeString(i.title)),this.line("/Parent "+this.makeRef(e)),n>0&&this.line("/Prev "+this.makeRef(e.children[n-1])),n<e.children.length-1&&this.line("/Next "+this.makeRef(e.children[n+1])),i.children.length>0&&(this.line("/First "+this.makeRef(i.children[0])),this.line("/Last "+this.makeRef(i.children[i.children.length-1])));var a=this.count=this.count_r({count:0},i);if(a>0&&this.line("/Count "+a),i.options&&i.options.pageNumber){var o=t.internal.getPageInfo(i.options.pageNumber);this.line("/Dest ["+o.objId+" 0 R /XYZ 0 "+r(0)+" 0]")}this.objEnd()}for(var s=0;s<e.children.length;s++)this.renderItems(e.children[s])},t.outline.line=function(t){this.ctx.val+=t+"\r\n"},t.outline.makeRef=function(t){return t.id+" 0 R"},t.outline.makeString=function(e){return"("+t.internal.pdfEscape(e)+")"},t.outline.objStart=function(t){this.ctx.val+="\r\n"+t.id+" 0 obj\r\n<<\r\n"},t.outline.objEnd=function(){this.ctx.val+=">> \r\nendobj\r\n"},t.outline.count_r=function(t,e){for(var r=0;r<e.children.length;r++)t.count++,this.count_r(t,e.children[r]);return t.count}}])}(E.API),
/**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e=[192,193,194,195,196,197,198,199];t.processJPEG=function(t,r,n,i,a,o){var s,c=this.decode.DCT_DECODE,u=null;if("string"==typeof t||this.__addimage__.isArrayBuffer(t)||this.__addimage__.isArrayBufferView(t)){switch(t=a||t,t=this.__addimage__.isArrayBuffer(t)?new Uint8Array(t):t,(s=function(t){for(var r,n=256*t.charCodeAt(4)+t.charCodeAt(5),i=t.length,a={width:0,height:0,numcomponents:1},o=4;o<i;o+=2){if(o+=n,-1!==e.indexOf(t.charCodeAt(o+1))){r=256*t.charCodeAt(o+5)+t.charCodeAt(o+6),a={width:256*t.charCodeAt(o+7)+t.charCodeAt(o+8),height:r,numcomponents:t.charCodeAt(o+9)};break}n=256*t.charCodeAt(o+2)+t.charCodeAt(o+3)}return a}(t=this.__addimage__.isArrayBufferView(t)?this.__addimage__.arrayBufferToBinaryString(t):t)).numcomponents){case 1:o=this.color_spaces.DEVICE_GRAY;break;case 4:o=this.color_spaces.DEVICE_CMYK;break;case 3:o=this.color_spaces.DEVICE_RGB}u={data:t,width:s.width,height:s.height,colorSpace:o,bitsPerComponent:8,filter:c,index:r,alias:n}}return u}}(E.API);var Vt,Gt,Yt,Jt,Xt,Kt=function(){var t,e,i;function a(t){var e,r,n,i,a,o,s,c,u,h,l,f,d,p;for(this.data=t,this.pos=8,this.palette=[],this.imgData=[],this.transparency={},this.animation=null,this.text={},o=null;;){switch(e=this.readUInt32(),u=function(){var t,e;for(e=[],t=0;t<4;++t)e.push(String.fromCharCode(this.data[this.pos++]));return e}.call(this).join("")){case"IHDR":this.width=this.readUInt32(),this.height=this.readUInt32(),this.bits=this.data[this.pos++],this.colorType=this.data[this.pos++],this.compressionMethod=this.data[this.pos++],this.filterMethod=this.data[this.pos++],this.interlaceMethod=this.data[this.pos++];break;case"acTL":this.animation={numFrames:this.readUInt32(),numPlays:this.readUInt32()||1/0,frames:[]};break;case"PLTE":this.palette=this.read(e);break;case"fcTL":o&&this.animation.frames.push(o),this.pos+=4,o={width:this.readUInt32(),height:this.readUInt32(),xOffset:this.readUInt32(),yOffset:this.readUInt32()},a=this.readUInt16(),i=this.readUInt16()||100,o.delay=1e3*a/i,o.disposeOp=this.data[this.pos++],o.blendOp=this.data[this.pos++],o.data=[];break;case"IDAT":case"fdAT":for("fdAT"===u&&(this.pos+=4,e-=4),t=(null!=o?o.data:void 0)||this.imgData,f=0;0<=e?f<e:f>e;0<=e?++f:--f)t.push(this.data[this.pos++]);break;case"tRNS":switch(this.transparency={},this.colorType){case 3:if(n=this.palette.length/3,this.transparency.indexed=this.read(e),this.transparency.indexed.length>n)throw new Error("More transparent colors than palette size");if((h=n-this.transparency.indexed.length)>0)for(d=0;0<=h?d<h:d>h;0<=h?++d:--d)this.transparency.indexed.push(255);break;case 0:this.transparency.grayscale=this.read(e)[0];break;case 2:this.transparency.rgb=this.read(e)}break;case"tEXt":s=(l=this.read(e)).indexOf(0),c=String.fromCharCode.apply(String,l.slice(0,s)),this.text[c]=String.fromCharCode.apply(String,l.slice(s+1));break;case"IEND":return o&&this.animation.frames.push(o),this.colors=function(){switch(this.colorType){case 0:case 3:case 4:return 1;case 2:case 6:return 3}}.call(this),this.hasAlphaChannel=4===(p=this.colorType)||6===p,r=this.colors+(this.hasAlphaChannel?1:0),this.pixelBitlength=this.bits*r,this.colorSpace=function(){switch(this.colors){case 1:return"DeviceGray";case 3:return"DeviceRGB"}}.call(this),void(this.imgData=new Uint8Array(this.imgData));default:this.pos+=e}if(this.pos+=4,this.pos>this.data.length)throw new Error("Incomplete or corrupt PNG file")}}a.prototype.read=function(t){var e,r;for(r=[],e=0;0<=t?e<t:e>t;0<=t?++e:--e)r.push(this.data[this.pos++]);return r},a.prototype.readUInt32=function(){return this.data[this.pos++]<<24|this.data[this.pos++]<<16|this.data[this.pos++]<<8|this.data[this.pos++]},a.prototype.readUInt16=function(){return this.data[this.pos++]<<8|this.data[this.pos++]},a.prototype.decodePixels=function(t){var e=this.pixelBitlength/8,n=new Uint8Array(this.width*this.height*e),i=0,a=this;if(null==t&&(t=this.imgData),0===t.length)return new Uint8Array(0);function o(r,o,s,c){var u,h,l,f,d,p,g,m,v,b,y,w,N,L,A,x,S,_,P,k,I,F=Math.ceil((a.width-r)/s),C=Math.ceil((a.height-o)/c),j=a.width==F&&a.height==C;for(L=e*F,w=j?n:new Uint8Array(L*C),p=t.length,N=0,h=0;N<C&&i<p;){switch(t[i++]){case 0:for(f=S=0;S<L;f=S+=1)w[h++]=t[i++];break;case 1:for(f=_=0;_<L;f=_+=1)u=t[i++],d=f<e?0:w[h-e],w[h++]=(u+d)%256;break;case 2:for(f=P=0;P<L;f=P+=1)u=t[i++],l=(f-f%e)/e,A=N&&w[(N-1)*L+l*e+f%e],w[h++]=(A+u)%256;break;case 3:for(f=k=0;k<L;f=k+=1)u=t[i++],l=(f-f%e)/e,d=f<e?0:w[h-e],A=N&&w[(N-1)*L+l*e+f%e],w[h++]=(u+Math.floor((d+A)/2))%256;break;case 4:for(f=I=0;I<L;f=I+=1)u=t[i++],l=(f-f%e)/e,d=f<e?0:w[h-e],0===N?A=x=0:(A=w[(N-1)*L+l*e+f%e],x=l&&w[(N-1)*L+(l-1)*e+f%e]),g=d+A-x,m=Math.abs(g-d),b=Math.abs(g-A),y=Math.abs(g-x),v=m<=b&&m<=y?d:b<=y?A:x,w[h++]=(u+v)%256;break;default:throw new Error("Invalid filter algorithm: "+t[i-1])}if(!j){var O=((o+N*c)*a.width+r)*e,B=N*L;for(f=0;f<F;f+=1){for(var M=0;M<e;M+=1)n[O++]=w[B++];O+=(s-1)*e}}N++}}return t=(0,fflate__WEBPACK_IMPORTED_MODULE_1__.unzlibSync)(t),1==a.interlaceMethod?(o(0,0,8,8),o(4,0,8,8),o(0,4,4,8),o(2,0,4,4),o(0,2,2,4),o(1,0,2,2),o(0,1,1,2)):o(0,0,1,1),n},a.prototype.decodePalette=function(){var t,e,r,n,i,a,o,s,c;for(r=this.palette,a=this.transparency.indexed||[],i=new Uint8Array((a.length||0)+r.length),n=0,t=0,e=o=0,s=r.length;o<s;e=o+=3)i[n++]=r[e],i[n++]=r[e+1],i[n++]=r[e+2],i[n++]=null!=(c=a[t++])?c:255;return i},a.prototype.copyToImageData=function(t,e){var r,n,i,a,o,s,c,u,h,l,f;if(n=this.colors,h=null,r=this.hasAlphaChannel,this.palette.length&&(h=null!=(f=this._decodedPalette)?f:this._decodedPalette=this.decodePalette(),n=4,r=!0),u=(i=t.data||t).length,o=h||e,a=s=0,1===n)for(;a<u;)c=h?4*e[a/4]:s,l=o[c++],i[a++]=l,i[a++]=l,i[a++]=l,i[a++]=r?o[c++]:255,s=c;else for(;a<u;)c=h?4*e[a/4]:s,i[a++]=o[c++],i[a++]=o[c++],i[a++]=o[c++],i[a++]=r?o[c++]:255,s=c},a.prototype.decode=function(){var t;return t=new Uint8Array(this.width*this.height*4),this.copyToImageData(t,this.decodePixels()),t};var o=function(){if("[object Window]"===Object.prototype.toString.call(n)){try{e=n.document.createElement("canvas"),i=e.getContext("2d")}catch(t){return!1}return!0}return!1};return o(),t=function(t){var r;if(!0===o())return i.width=t.width,i.height=t.height,i.clearRect(0,0,t.width,t.height),i.putImageData(t,0,0),(r=new Image).src=e.toDataURL(),r;throw new Error("This method requires a Browser with Canvas-capability.")},a.prototype.decodeFrames=function(e){var r,n,i,a,o,s,c,u;if(this.animation){for(u=[],n=o=0,s=(c=this.animation.frames).length;o<s;n=++o)r=c[n],i=e.createImageData(r.width,r.height),a=this.decodePixels(new Uint8Array(r.data)),this.copyToImageData(i,a),r.imageData=i,u.push(r.image=t(i));return u}},a.prototype.renderFrame=function(t,e){var r,n,i;return r=(n=this.animation.frames)[e],i=n[e-1],0===e&&t.clearRect(0,0,this.width,this.height),1===(null!=i?i.disposeOp:void 0)?t.clearRect(i.xOffset,i.yOffset,i.width,i.height):2===(null!=i?i.disposeOp:void 0)&&t.putImageData(i.imageData,i.xOffset,i.yOffset),0===r.blendOp&&t.clearRect(r.xOffset,r.yOffset,r.width,r.height),t.drawImage(r.image,r.xOffset,r.yOffset)},a.prototype.animate=function(t){var e,r,n,i,a,o,s=this;return r=0,o=this.animation,i=o.numFrames,n=o.frames,a=o.numPlays,(e=function(){var o,c;if(o=r++%i,c=n[o],s.renderFrame(t,o),i>1&&r/i<a)return s.animation._timeout=setTimeout(e,c.delay)})()},a.prototype.stopAnimation=function(){var t;return clearTimeout(null!=(t=this.animation)?t._timeout:void 0)},a.prototype.render=function(t){var e,r;return t._png&&t._png.stopAnimation(),t._png=this,t.width=this.width,t.height=this.height,e=t.getContext("2d"),this.animation?(this.decodeFrames(e),this.animate(e)):(r=e.createImageData(this.width,this.height),this.copyToImageData(r,this.decodePixels()),e.putImageData(r,0,0))},a}();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
/**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */
function Zt(t){var e=0;if(71!==t[e++]||73!==t[e++]||70!==t[e++]||56!==t[e++]||56!=(t[e++]+1&253)||97!==t[e++])throw new Error("Invalid GIF 87a/89a header.");var r=t[e++]|t[e++]<<8,n=t[e++]|t[e++]<<8,i=t[e++],a=i>>7,o=1<<(7&i)+1;t[e++];t[e++];var s=null,c=null;a&&(s=e,c=o,e+=3*o);var u=!0,h=[],l=0,f=null,d=0,p=null;for(this.width=r,this.height=n;u&&e<t.length;)switch(t[e++]){case 33:switch(t[e++]){case 255:if(11!==t[e]||78==t[e+1]&&69==t[e+2]&&84==t[e+3]&&83==t[e+4]&&67==t[e+5]&&65==t[e+6]&&80==t[e+7]&&69==t[e+8]&&50==t[e+9]&&46==t[e+10]&&48==t[e+11]&&3==t[e+12]&&1==t[e+13]&&0==t[e+16])e+=14,p=t[e++]|t[e++]<<8,e++;else for(e+=12;;){if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}break;case 249:if(4!==t[e++]||0!==t[e+4])throw new Error("Invalid graphics extension block.");var g=t[e++];l=t[e++]|t[e++]<<8,f=t[e++],0==(1&g)&&(f=null),d=g>>2&7,e++;break;case 254:for(;;){if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}break;default:throw new Error("Unknown graphic control label: 0x"+t[e-1].toString(16))}break;case 44:var m=t[e++]|t[e++]<<8,v=t[e++]|t[e++]<<8,b=t[e++]|t[e++]<<8,y=t[e++]|t[e++]<<8,w=t[e++],N=w>>6&1,L=1<<(7&w)+1,A=s,x=c,S=!1;if(w>>7){S=!0;A=e,x=L,e+=3*L}var _=e;for(e++;;){var P;if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}h.push({x:m,y:v,width:b,height:y,has_local_palette:S,palette_offset:A,palette_size:x,data_offset:_,data_length:e-_,transparent_index:f,interlaced:!!N,delay:l,disposal:d});break;case 59:u=!1;break;default:throw new Error("Unknown gif block: 0x"+t[e-1].toString(16))}this.numFrames=function(){return h.length},this.loopCount=function(){return p},this.frameInfo=function(t){if(t<0||t>=h.length)throw new Error("Frame index out of range.");return h[t]},this.decodeAndBlitFrameBGRA=function(e,n){var i=this.frameInfo(e),a=i.width*i.height,o=new Uint8Array(a);$t(t,i.data_offset,o,a);var s=i.palette_offset,c=i.transparent_index;null===c&&(c=256);var u=i.width,h=r-u,l=u,f=4*(i.y*r+i.x),d=4*((i.y+i.height)*r+i.x),p=f,g=4*h;!0===i.interlaced&&(g+=4*r*7);for(var m=8,v=0,b=o.length;v<b;++v){var y=o[v];if(0===l&&(l=u,(p+=g)>=d&&(g=4*h+4*r*(m-1),p=f+(u+h)*(m<<1),m>>=1)),y===c)p+=4;else{var w=t[s+3*y],N=t[s+3*y+1],L=t[s+3*y+2];n[p++]=L,n[p++]=N,n[p++]=w,n[p++]=255}--l}},this.decodeAndBlitFrameRGBA=function(e,n){var i=this.frameInfo(e),a=i.width*i.height,o=new Uint8Array(a);$t(t,i.data_offset,o,a);var s=i.palette_offset,c=i.transparent_index;null===c&&(c=256);var u=i.width,h=r-u,l=u,f=4*(i.y*r+i.x),d=4*((i.y+i.height)*r+i.x),p=f,g=4*h;!0===i.interlaced&&(g+=4*r*7);for(var m=8,v=0,b=o.length;v<b;++v){var y=o[v];if(0===l&&(l=u,(p+=g)>=d&&(g=4*h+4*r*(m-1),p=f+(u+h)*(m<<1),m>>=1)),y===c)p+=4;else{var w=t[s+3*y],N=t[s+3*y+1],L=t[s+3*y+2];n[p++]=w,n[p++]=N,n[p++]=L,n[p++]=255}--l}}}function $t(t,e,r,n){for(var i=t[e++],o=1<<i,s=o+1,c=s+1,u=i+1,h=(1<<u)-1,l=0,f=0,d=0,p=t[e++],g=new Int32Array(4096),m=null;;){for(;l<16&&0!==p;)f|=t[e++]<<l,l+=8,1===p?p=t[e++]:--p;if(l<u)break;var v=f&h;if(f>>=u,l-=u,v!==o){if(v===s)break;for(var b=v<c?v:m,y=0,w=b;w>o;)w=g[w]>>8,++y;var N=w;if(d+y+(b!==v?1:0)>n)return void a.log("Warning, gif stream longer than expected.");r[d++]=N;var L=d+=y;for(b!==v&&(r[d++]=N),w=b;y--;)w=g[w],r[--L]=255&w,w>>=8;null!==m&&c<4096&&(g[c++]=m<<8|N,c>=h+1&&u<12&&(++u,h=h<<1|1)),m=v}else c=s+1,h=(1<<(u=i+1))-1,m=null}return d!==n&&a.log("Warning, gif stream shorter than expected."),r}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/function Qt(t){var e,r,n,i,a,o=Math.floor,s=new Array(64),c=new Array(64),u=new Array(64),h=new Array(64),l=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),g=[],m=0,v=7,b=new Array(64),y=new Array(64),w=new Array(64),N=new Array(256),L=new Array(2048),A=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],x=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],S=[0,1,2,3,4,5,6,7,8,9,10,11],_=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],P=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],k=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],I=[0,1,2,3,4,5,6,7,8,9,10,11],F=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],C=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function j(t,e){for(var r=0,n=0,i=new Array,a=1;a<=16;a++){for(var o=1;o<=t[a];o++)i[e[n]]=[],i[e[n]][0]=r,i[e[n]][1]=a,n++,r++;r*=2}return i}function O(t){for(var e=t[0],r=t[1]-1;r>=0;)e&1<<r&&(m|=1<<v),r--,--v<0&&(255==m?(B(255),B(0)):B(m),v=7,m=0)}function B(t){g.push(t)}function M(t){B(t>>8&255),B(255&t)}function E(t,e,r,n,i){for(var a,o=i[0],s=i[240],c=function(t,e){var r,n,i,a,o,s,c,u,h,l,f=0;for(h=0;h<8;++h){r=t[f],n=t[f+1],i=t[f+2],a=t[f+3],o=t[f+4],s=t[f+5],c=t[f+6];var p=r+(u=t[f+7]),g=r-u,m=n+c,v=n-c,b=i+s,y=i-s,w=a+o,N=a-o,L=p+w,A=p-w,x=m+b,S=m-b;t[f]=L+x,t[f+4]=L-x;var _=.707106781*(S+A);t[f+2]=A+_,t[f+6]=A-_;var P=.382683433*((L=N+y)-(S=v+g)),k=.5411961*L+P,I=1.306562965*S+P,F=.707106781*(x=y+v),C=g+F,j=g-F;t[f+5]=j+k,t[f+3]=j-k,t[f+1]=C+I,t[f+7]=C-I,f+=8}for(f=0,h=0;h<8;++h){r=t[f],n=t[f+8],i=t[f+16],a=t[f+24],o=t[f+32],s=t[f+40],c=t[f+48];var O=r+(u=t[f+56]),B=r-u,M=n+c,E=n-c,q=i+s,D=i-s,R=a+o,T=a-o,U=O+R,z=O-R,H=M+q,W=M-q;t[f]=U+H,t[f+32]=U-H;var V=.707106781*(W+z);t[f+16]=z+V,t[f+48]=z-V;var G=.382683433*((U=T+D)-(W=E+B)),Y=.5411961*U+G,J=1.306562965*W+G,X=.707106781*(H=D+E),K=B+X,Z=B-X;t[f+40]=Z+Y,t[f+24]=Z-Y,t[f+8]=K+J,t[f+56]=K-J,f++}for(h=0;h<64;++h)l=t[h]*e[h],d[h]=l>0?l+.5|0:l-.5|0;return d}(t,e),u=0;u<64;++u)p[A[u]]=c[u];var h=p[0]-r;r=p[0],0==h?O(n[0]):(O(n[f[a=32767+h]]),O(l[a]));for(var g=63;g>0&&0==p[g];)g--;if(0==g)return O(o),r;for(var m,v=1;v<=g;){for(var b=v;0==p[v]&&v<=g;)++v;var y=v-b;if(y>=16){m=y>>4;for(var w=1;w<=m;++w)O(s);y&=15}a=32767+p[v],O(i[(y<<4)+f[a]]),O(l[a]),v++}return 63!=g&&O(o),r}function q(t){(t=Math.min(Math.max(t,1),100),a!=t)&&(!function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],r=0;r<64;r++){var n=o((e[r]*t+50)/100);n=Math.min(Math.max(n,1),255),s[A[r]]=n}for(var i=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],a=0;a<64;a++){var l=o((i[a]*t+50)/100);l=Math.min(Math.max(l,1),255),c[A[a]]=l}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var g=0;g<8;g++)u[d]=1/(s[A[d]]*f[p]*f[g]*8),h[d]=1/(c[A[d]]*f[p]*f[g]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),a=t)}this.encode=function(t,a){a&&q(a),g=new Array,m=0,v=7,M(65496),M(65504),M(16),B(74),B(70),B(73),B(70),B(0),B(1),B(1),B(0),M(1),M(1),B(0),B(0),function(){M(65499),M(132),B(0);for(var t=0;t<64;t++)B(s[t]);B(1);for(var e=0;e<64;e++)B(c[e])}(),function(t,e){M(65472),M(17),B(8),M(e),M(t),B(3),B(1),B(17),B(0),B(2),B(17),B(1),B(3),B(17),B(1)}(t.width,t.height),function(){M(65476),M(418),B(0);for(var t=0;t<16;t++)B(x[t+1]);for(var e=0;e<=11;e++)B(S[e]);B(16);for(var r=0;r<16;r++)B(_[r+1]);for(var n=0;n<=161;n++)B(P[n]);B(1);for(var i=0;i<16;i++)B(k[i+1]);for(var a=0;a<=11;a++)B(I[a]);B(17);for(var o=0;o<16;o++)B(F[o+1]);for(var s=0;s<=161;s++)B(C[s])}(),M(65498),M(12),B(3),B(1),B(0),B(2),B(17),B(3),B(17),B(0),B(63),B(0);var o=0,l=0,f=0;m=0,v=7,this.encode.displayName="_encode_";for(var d,p,N,A,j,D,R,T,U,z=t.data,H=t.width,W=t.height,V=4*H,G=0;G<W;){for(d=0;d<V;){for(j=V*G+d,R=-1,T=0,U=0;U<64;U++)D=j+(T=U>>3)*V+(R=4*(7&U)),G+T>=W&&(D-=V*(G+1+T-W)),d+R>=V&&(D-=d+R-V+4),p=z[D++],N=z[D++],A=z[D++],b[U]=(L[p]+L[N+256>>0]+L[A+512>>0]>>16)-128,y[U]=(L[p+768>>0]+L[N+1024>>0]+L[A+1280>>0]>>16)-128,w[U]=(L[p+1280>>0]+L[N+1536>>0]+L[A+1792>>0]>>16)-128;o=E(b,u,o,e,n),l=E(y,h,l,r,i),f=E(w,h,f,r,i),d+=32}G+=8}if(v>=0){var Y=[];Y[1]=v+1,Y[0]=(1<<v+1)-1,O(Y)}return M(65497),new Uint8Array(g)},t=t||50,function(){for(var t=String.fromCharCode,e=0;e<256;e++)N[e]=t(e)}(),e=j(x,S),r=j(k,I),n=j(_,P),i=j(F,C),function(){for(var t=1,e=2,r=1;r<=15;r++){for(var n=t;n<e;n++)f[32767+n]=r,l[32767+n]=[],l[32767+n][1]=r,l[32767+n][0]=n;for(var i=-(e-1);i<=-t;i++)f[32767+i]=r,l[32767+i]=[],l[32767+i][1]=r,l[32767+i][0]=e-1+i;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)L[t]=19595*t,L[t+256>>0]=38470*t,L[t+512>>0]=7471*t+32768,L[t+768>>0]=-11059*t,L[t+1024>>0]=-21709*t,L[t+1280>>0]=32768*t+8421375,L[t+1536>>0]=-27439*t,L[t+1792>>0]=-5329*t}(),q(t)}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */function te(t,e){if(this.pos=0,this.buffer=t,this.datav=new DataView(t.buffer),this.is_with_alpha=!!e,this.bottom_up=!0,this.flag=String.fromCharCode(this.buffer[0])+String.fromCharCode(this.buffer[1]),this.pos+=2,-1===["BM","BA","CI","CP","IC","PT"].indexOf(this.flag))throw new Error("Invalid BMP File");this.parseHeader(),this.parseBGR()}function ee(t){function e(t){if(!t)throw Error("assert :P")}function r(t,e,r){for(var n=0;4>n;n++)if(t[e+n]!=r.charCodeAt(n))return!0;return!1}function n(t,e,r,n,i){for(var a=0;a<i;a++)t[e+a]=r[n+a]}function i(t,e,r,n){for(var i=0;i<n;i++)t[e+i]=r}function a(t){return new Int32Array(t)}function o(t,e){for(var r=[],n=0;n<t;n++)r.push(new e);return r}function s(t,e){var r=[];return function t(r,n,i){for(var a=i[n],o=0;o<a&&(r.push(i.length>n+1?[]:new e),!(i.length<n+1));o++)t(r[o],n+1,i)}(r,0,t),r}var c=function(){var t=this;function c(t,e){for(var r=1<<e-1>>>0;t&r;)r>>>=1;return r?(t&r-1)+r:t}function u(t,r,n,i,a){e(!(i%n));do{t[r+(i-=n)]=a}while(0<i)}function h(t,r,n,i,o){if(e(2328>=o),512>=o)var s=a(512);else if(null==(s=a(o)))return 0;return function(t,r,n,i,o,s){var h,f,d=r,p=1<<n,g=a(16),m=a(16);for(e(0!=o),e(null!=i),e(null!=t),e(0<n),f=0;f<o;++f){if(15<i[f])return 0;++g[i[f]]}if(g[0]==o)return 0;for(m[1]=0,h=1;15>h;++h){if(g[h]>1<<h)return 0;m[h+1]=m[h]+g[h]}for(f=0;f<o;++f)h=i[f],0<i[f]&&(s[m[h]++]=f);if(1==m[15])return(i=new l).g=0,i.value=s[0],u(t,d,1,p,i),p;var v,b=-1,y=p-1,w=0,N=1,L=1,A=1<<n;for(f=0,h=1,o=2;h<=n;++h,o<<=1){if(N+=L<<=1,0>(L-=g[h]))return 0;for(;0<g[h];--g[h])(i=new l).g=h,i.value=s[f++],u(t,d+w,o,A,i),w=c(w,h)}for(h=n+1,o=2;15>=h;++h,o<<=1){if(N+=L<<=1,0>(L-=g[h]))return 0;for(;0<g[h];--g[h]){if(i=new l,(w&y)!=b){for(d+=A,v=1<<(b=h)-n;15>b&&!(0>=(v-=g[b]));)++b,v<<=1;p+=A=1<<(v=b-n),t[r+(b=w&y)].g=v+n,t[r+b].value=d-r-b}i.g=h-n,i.value=s[f++],u(t,d+(w>>n),o,A,i),w=c(w,h)}}return N!=2*m[15]-1?0:p}(t,r,n,i,o,s)}function l(){this.value=this.g=0}function f(){this.value=this.g=0}function d(){this.G=o(5,l),this.H=a(5),this.jc=this.Qb=this.qb=this.nd=0,this.pd=o(Dr,f)}function p(t,r,n,i){e(null!=t),e(null!=r),e(2147483648>i),t.Ca=254,t.I=0,t.b=-8,t.Ka=0,t.oa=r,t.pa=n,t.Jd=r,t.Yc=n+i,t.Zc=4<=i?n+i-4+1:n,_(t)}function g(t,e){for(var r=0;0<e--;)r|=k(t,128)<<e;return r}function m(t,e){var r=g(t,e);return P(t)?-r:r}function v(t,r,n,i){var a,o=0;for(e(null!=t),e(null!=r),e(4294967288>i),t.Sb=i,t.Ra=0,t.u=0,t.h=0,4<i&&(i=4),a=0;a<i;++a)o+=r[n+a]<<8*a;t.Ra=o,t.bb=i,t.oa=r,t.pa=n}function b(t){for(;8<=t.u&&t.bb<t.Sb;)t.Ra>>>=8,t.Ra+=t.oa[t.pa+t.bb]<<Ur-8>>>0,++t.bb,t.u-=8;A(t)&&(t.h=1,t.u=0)}function y(t,r){if(e(0<=r),!t.h&&r<=Tr){var n=L(t)&Rr[r];return t.u+=r,b(t),n}return t.h=1,t.u=0}function w(){this.b=this.Ca=this.I=0,this.oa=[],this.pa=0,this.Jd=[],this.Yc=0,this.Zc=[],this.Ka=0}function N(){this.Ra=0,this.oa=[],this.h=this.u=this.bb=this.Sb=this.pa=0}function L(t){return t.Ra>>>(t.u&Ur-1)>>>0}function A(t){return e(t.bb<=t.Sb),t.h||t.bb==t.Sb&&t.u>Ur}function x(t,e){t.u=e,t.h=A(t)}function S(t){t.u>=zr&&(e(t.u>=zr),b(t))}function _(t){e(null!=t&&null!=t.oa),t.pa<t.Zc?(t.I=(t.oa[t.pa++]|t.I<<8)>>>0,t.b+=8):(e(null!=t&&null!=t.oa),t.pa<t.Yc?(t.b+=8,t.I=t.oa[t.pa++]|t.I<<8):t.Ka?t.b=0:(t.I<<=8,t.b+=8,t.Ka=1))}function P(t){return g(t,1)}function k(t,e){var r=t.Ca;0>t.b&&_(t);var n=t.b,i=r*e>>>8,a=(t.I>>>n>i)+0;for(a?(r-=i,t.I-=i+1<<n>>>0):r=i+1,n=r,i=0;256<=n;)i+=8,n>>=8;return n=7^i+Hr[n],t.b-=n,t.Ca=(r<<n)-1,a}function I(t,e,r){t[e+0]=r>>24&255,t[e+1]=r>>16&255,t[e+2]=r>>8&255,t[e+3]=r>>0&255}function F(t,e){return t[e+0]<<0|t[e+1]<<8}function C(t,e){return F(t,e)|t[e+2]<<16}function j(t,e){return F(t,e)|F(t,e+2)<<16}function O(t,r){var n=1<<r;return e(null!=t),e(0<r),t.X=a(n),null==t.X?0:(t.Mb=32-r,t.Xa=r,1)}function B(t,r){e(null!=t),e(null!=r),e(t.Xa==r.Xa),n(r.X,0,t.X,0,1<<r.Xa)}function M(){this.X=[],this.Xa=this.Mb=0}function E(t,r,n,i){e(null!=n),e(null!=i);var a=n[0],o=i[0];return 0==a&&(a=(t*o+r/2)/r),0==o&&(o=(r*a+t/2)/t),0>=a||0>=o?0:(n[0]=a,i[0]=o,1)}function q(t,e){return t+(1<<e)-1>>>e}function D(t,e){return((4278255360&t)+(4278255360&e)>>>0&4278255360)+((16711935&t)+(16711935&e)>>>0&16711935)>>>0}function R(e,r){t[r]=function(r,n,i,a,o,s,c){var u;for(u=0;u<o;++u){var h=t[e](s[c+u-1],i,a+u);s[c+u]=D(r[n+u],h)}}}function T(){this.ud=this.hd=this.jd=0}function U(t,e){return((4278124286&(t^e))>>>1)+(t&e)>>>0}function z(t){return 0<=t&&256>t?t:0>t?0:255<t?255:void 0}function H(t,e){return z(t+(t-e+.5>>1))}function W(t,e,r){return Math.abs(e-r)-Math.abs(t-r)}function V(t,e,r,n,i,a,o){for(n=a[o-1],r=0;r<i;++r)a[o+r]=n=D(t[e+r],n)}function G(t,e,r,n,i){var a;for(a=0;a<r;++a){var o=t[e+a],s=o>>8&255,c=16711935&(c=(c=16711935&o)+((s<<16)+s));n[i+a]=(4278255360&o)+c>>>0}}function Y(t,e){e.jd=t>>0&255,e.hd=t>>8&255,e.ud=t>>16&255}function J(t,e,r,n,i,a){var o;for(o=0;o<n;++o){var s=e[r+o],c=s>>>8,u=s,h=255&(h=(h=s>>>16)+((t.jd<<24>>24)*(c<<24>>24)>>>5));u=255&(u=(u=u+((t.hd<<24>>24)*(c<<24>>24)>>>5))+((t.ud<<24>>24)*(h<<24>>24)>>>5));i[a+o]=(4278255360&s)+(h<<16)+u}}function X(e,r,n,i,a){t[r]=function(t,e,r,n,o,s,c,u,h){for(n=c;n<u;++n)for(c=0;c<h;++c)o[s++]=a(r[i(t[e++])])},t[e]=function(e,r,o,s,c,u,h){var l=8>>e.b,f=e.Ea,d=e.K[0],p=e.w;if(8>l)for(e=(1<<e.b)-1,p=(1<<l)-1;r<o;++r){var g,m=0;for(g=0;g<f;++g)g&e||(m=i(s[c++])),u[h++]=a(d[m&p]),m>>=l}else t["VP8LMapColor"+n](s,c,d,p,u,h,r,o,f)}}function K(t,e,r,n,i){for(r=e+r;e<r;){var a=t[e++];n[i++]=a>>16&255,n[i++]=a>>8&255,n[i++]=a>>0&255}}function Z(t,e,r,n,i){for(r=e+r;e<r;){var a=t[e++];n[i++]=a>>16&255,n[i++]=a>>8&255,n[i++]=a>>0&255,n[i++]=a>>24&255}}function $(t,e,r,n,i){for(r=e+r;e<r;){var a=(o=t[e++])>>16&240|o>>12&15,o=o>>0&240|o>>28&15;n[i++]=a,n[i++]=o}}function Q(t,e,r,n,i){for(r=e+r;e<r;){var a=(o=t[e++])>>16&248|o>>13&7,o=o>>5&224|o>>3&31;n[i++]=a,n[i++]=o}}function tt(t,e,r,n,i){for(r=e+r;e<r;){var a=t[e++];n[i++]=a>>0&255,n[i++]=a>>8&255,n[i++]=a>>16&255}}function et(t,e,r,i,a,o){if(0==o)for(r=e+r;e<r;)I(i,((o=t[e++])[0]>>24|o[1]>>8&65280|o[2]<<8&16711680|o[3]<<24)>>>0),a+=32;else n(i,a,t,e,r)}function rt(e,r){t[r][0]=t[e+"0"],t[r][1]=t[e+"1"],t[r][2]=t[e+"2"],t[r][3]=t[e+"3"],t[r][4]=t[e+"4"],t[r][5]=t[e+"5"],t[r][6]=t[e+"6"],t[r][7]=t[e+"7"],t[r][8]=t[e+"8"],t[r][9]=t[e+"9"],t[r][10]=t[e+"10"],t[r][11]=t[e+"11"],t[r][12]=t[e+"12"],t[r][13]=t[e+"13"],t[r][14]=t[e+"0"],t[r][15]=t[e+"0"]}function nt(t){return t==Hn||t==Wn||t==Vn||t==Gn}function it(){this.eb=[],this.size=this.A=this.fb=0}function at(){this.y=[],this.f=[],this.ea=[],this.F=[],this.Tc=this.Ed=this.Cd=this.Fd=this.lb=this.Db=this.Ab=this.fa=this.J=this.W=this.N=this.O=0}function ot(){this.Rd=this.height=this.width=this.S=0,this.f={},this.f.RGBA=new it,this.f.kb=new at,this.sd=null}function st(){this.width=[0],this.height=[0],this.Pd=[0],this.Qd=[0],this.format=[0]}function ct(){this.Id=this.fd=this.Md=this.hb=this.ib=this.da=this.bd=this.cd=this.j=this.v=this.Da=this.Sd=this.ob=0}function ut(t){return alert("todo:WebPSamplerProcessPlane"),t.T}function ht(t,e){var r=t.T,i=e.ba.f.RGBA,a=i.eb,o=i.fb+t.ka*i.A,s=vi[e.ba.S],c=t.y,u=t.O,h=t.f,l=t.N,f=t.ea,d=t.W,p=e.cc,g=e.dc,m=e.Mc,v=e.Nc,b=t.ka,y=t.ka+t.T,w=t.U,N=w+1>>1;for(0==b?s(c,u,null,null,h,l,f,d,h,l,f,d,a,o,null,null,w):(s(e.ec,e.fc,c,u,p,g,m,v,h,l,f,d,a,o-i.A,a,o,w),++r);b+2<y;b+=2)p=h,g=l,m=f,v=d,l+=t.Rc,d+=t.Rc,o+=2*i.A,s(c,(u+=2*t.fa)-t.fa,c,u,p,g,m,v,h,l,f,d,a,o-i.A,a,o,w);return u+=t.fa,t.j+y<t.o?(n(e.ec,e.fc,c,u,w),n(e.cc,e.dc,h,l,N),n(e.Mc,e.Nc,f,d,N),r--):1&y||s(c,u,null,null,h,l,f,d,h,l,f,d,a,o+i.A,null,null,w),r}function lt(t,r,n){var i=t.F,a=[t.J];if(null!=i){var o=t.U,s=r.ba.S,c=s==Tn||s==Vn;r=r.ba.f.RGBA;var u=[0],h=t.ka;u[0]=t.T,t.Kb&&(0==h?--u[0]:(--h,a[0]-=t.width),t.j+t.ka+t.T==t.o&&(u[0]=t.o-t.j-h));var l=r.eb;h=r.fb+h*r.A;t=Sn(i,a[0],t.width,o,u,l,h+(c?0:3),r.A),e(n==u),t&&nt(s)&&An(l,h,c,o,u,r.A)}return 0}function ft(t){var e=t.ma,r=e.ba.S,n=11>r,i=r==qn||r==Rn||r==Tn||r==Un||12==r||nt(r);if(e.memory=null,e.Ib=null,e.Jb=null,e.Nd=null,!Mr(e.Oa,t,i?11:12))return 0;if(i&&nt(r)&&br(),t.da)alert("todo:use_scaling");else{if(n){if(e.Ib=ut,t.Kb){if(r=t.U+1>>1,e.memory=a(t.U+2*r),null==e.memory)return 0;e.ec=e.memory,e.fc=0,e.cc=e.ec,e.dc=e.fc+t.U,e.Mc=e.cc,e.Nc=e.dc+r,e.Ib=ht,br()}}else alert("todo:EmitYUV");i&&(e.Jb=lt,n&&mr())}if(n&&!Ci){for(t=0;256>t;++t)ji[t]=89858*(t-128)+_i>>Si,Mi[t]=-22014*(t-128)+_i,Bi[t]=-45773*(t-128),Oi[t]=113618*(t-128)+_i>>Si;for(t=Pi;t<ki;++t)e=76283*(t-16)+_i>>Si,Ei[t-Pi]=Vt(e,255),qi[t-Pi]=Vt(e+8>>4,15);Ci=1}return 1}function dt(t){var r=t.ma,n=t.U,i=t.T;return e(!(1&t.ka)),0>=n||0>=i?0:(n=r.Ib(t,r),null!=r.Jb&&r.Jb(t,r,n),r.Dc+=n,1)}function pt(t){t.ma.memory=null}function gt(t,e,r,n){return 47!=y(t,8)?0:(e[0]=y(t,14)+1,r[0]=y(t,14)+1,n[0]=y(t,1),0!=y(t,3)?0:!t.h)}function mt(t,e){if(4>t)return t+1;var r=t-2>>1;return(2+(1&t)<<r)+y(e,r)+1}function vt(t,e){return 120<e?e-120:1<=(r=((r=$n[e-1])>>4)*t+(8-(15&r)))?r:1;var r}function bt(t,e,r){var n=L(r),i=t[e+=255&n].g-8;return 0<i&&(x(r,r.u+8),n=L(r),e+=t[e].value,e+=n&(1<<i)-1),x(r,r.u+t[e].g),t[e].value}function yt(t,r,n){return n.g+=t.g,n.value+=t.value<<r>>>0,e(8>=n.g),t.g}function wt(t,r,n){var i=t.xc;return e((r=0==i?0:t.vc[t.md*(n>>i)+(r>>i)])<t.Wb),t.Ya[r]}function Nt(t,r,i,a){var o=t.ab,s=t.c*r,c=t.C;r=c+r;var u=i,h=a;for(a=t.Ta,i=t.Ua;0<o--;){var l=t.gc[o],f=c,d=r,p=u,g=h,m=(h=a,u=i,l.Ea);switch(e(f<d),e(d<=l.nc),l.hc){case 2:Gr(p,g,(d-f)*m,h,u);break;case 0:var v=f,b=d,y=h,w=u,N=(_=l).Ea;0==v&&(Wr(p,g,null,null,1,y,w),V(p,g+1,0,0,N-1,y,w+1),g+=N,w+=N,++v);for(var L=1<<_.b,A=L-1,x=q(N,_.b),S=_.K,_=_.w+(v>>_.b)*x;v<b;){var P=S,k=_,I=1;for(Vr(p,g,y,w-N,1,y,w);I<N;){var F=(I&~A)+L;F>N&&(F=N),(0,Zr[P[k++]>>8&15])(p,g+ +I,y,w+I-N,F-I,y,w+I),I=F}g+=N,w+=N,++v&A||(_+=x)}d!=l.nc&&n(h,u-m,h,u+(d-f-1)*m,m);break;case 1:for(m=p,b=g,N=(p=l.Ea)-(w=p&~(y=(g=1<<l.b)-1)),v=q(p,l.b),L=l.K,l=l.w+(f>>l.b)*v;f<d;){for(A=L,x=l,S=new T,_=b+w,P=b+p;b<_;)Y(A[x++],S),$r(S,m,b,g,h,u),b+=g,u+=g;b<P&&(Y(A[x++],S),$r(S,m,b,N,h,u),b+=N,u+=N),++f&y||(l+=v)}break;case 3:if(p==h&&g==u&&0<l.b){for(b=h,p=m=u+(d-f)*m-(w=(d-f)*q(l.Ea,l.b)),g=h,y=u,v=[],w=(N=w)-1;0<=w;--w)v[w]=g[y+w];for(w=N-1;0<=w;--w)b[p+w]=v[w];Yr(l,f,d,h,m,h,u)}else Yr(l,f,d,p,g,h,u)}u=a,h=i}h!=i&&n(a,i,u,h,s)}function Lt(t,r){var n=t.V,i=t.Ba+t.c*t.C,a=r-t.C;if(e(r<=t.l.o),e(16>=a),0<a){var o=t.l,s=t.Ta,c=t.Ua,u=o.width;if(Nt(t,a,n,i),a=c=[c],e((n=t.C)<(i=r)),e(o.v<o.va),i>o.o&&(i=o.o),n<o.j){var h=o.j-n;n=o.j;a[0]+=h*u}if(n>=i?n=0:(a[0]+=4*o.v,o.ka=n-o.j,o.U=o.va-o.v,o.T=i-n,n=1),n){if(c=c[0],11>(n=t.ca).S){var l=n.f.RGBA,f=(i=n.S,a=o.U,o=o.T,h=l.eb,l.A),d=o;for(l=l.fb+t.Ma*l.A;0<d--;){var p=s,g=c,m=a,v=h,b=l;switch(i){case En:Qr(p,g,m,v,b);break;case qn:tn(p,g,m,v,b);break;case Hn:tn(p,g,m,v,b),An(v,b,0,m,1,0);break;case Dn:nn(p,g,m,v,b);break;case Rn:et(p,g,m,v,b,1);break;case Wn:et(p,g,m,v,b,1),An(v,b,0,m,1,0);break;case Tn:et(p,g,m,v,b,0);break;case Vn:et(p,g,m,v,b,0),An(v,b,1,m,1,0);break;case Un:en(p,g,m,v,b);break;case Gn:en(p,g,m,v,b),xn(v,b,m,1,0);break;case zn:rn(p,g,m,v,b);break;default:e(0)}c+=u,l+=f}t.Ma+=o}else alert("todo:EmitRescaledRowsYUVA");e(t.Ma<=n.height)}}t.C=r,e(t.C<=t.i)}function At(t){var e;if(0<t.ua)return 0;for(e=0;e<t.Wb;++e){var r=t.Ya[e].G,n=t.Ya[e].H;if(0<r[1][n[1]+0].g||0<r[2][n[2]+0].g||0<r[3][n[3]+0].g)return 0}return 1}function xt(t,r,n,i,a,o){if(0!=t.Z){var s=t.qd,c=t.rd;for(e(null!=mi[t.Z]);r<n;++r)mi[t.Z](s,c,i,a,i,a,o),s=i,c=a,a+=o;t.qd=s,t.rd=c}}function St(t,r){var n=t.l.ma,i=0==n.Z||1==n.Z?t.l.j:t.C;i=t.C<i?i:t.C;if(e(r<=t.l.o),r>i){var a=t.l.width,o=n.ca,s=n.tb+a*i,c=t.V,u=t.Ba+t.c*i,h=t.gc;e(1==t.ab),e(3==h[0].hc),Xr(h[0],i,r,c,u,o,s),xt(n,i,r,o,s,a)}t.C=t.Ma=r}function _t(t,r,n,i,a,o,s){var c=t.$/i,u=t.$%i,h=t.m,l=t.s,f=n+t.$,d=f;a=n+i*a;var p=n+i*o,g=280+l.ua,m=t.Pb?c:16777216,v=0<l.ua?l.Wa:null,b=l.wc,y=f<p?wt(l,u,c):null;e(t.C<o),e(p<=a);var w=!1;t:for(;;){for(;w||f<p;){var N=0;if(c>=m){var _=f-n;e((m=t).Pb),m.wd=m.m,m.xd=_,0<m.s.ua&&B(m.s.Wa,m.s.vb),m=c+ti}if(u&b||(y=wt(l,u,c)),e(null!=y),y.Qb&&(r[f]=y.qb,w=!0),!w)if(S(h),y.jc){N=h,_=r;var P=f,k=y.pd[L(N)&Dr-1];e(y.jc),256>k.g?(x(N,N.u+k.g),_[P]=k.value,N=0):(x(N,N.u+k.g-256),e(256<=k.value),N=k.value),0==N&&(w=!0)}else N=bt(y.G[0],y.H[0],h);if(h.h)break;if(w||256>N){if(!w)if(y.nd)r[f]=(y.qb|N<<8)>>>0;else{if(S(h),w=bt(y.G[1],y.H[1],h),S(h),_=bt(y.G[2],y.H[2],h),P=bt(y.G[3],y.H[3],h),h.h)break;r[f]=(P<<24|w<<16|N<<8|_)>>>0}if(w=!1,++f,++u>=i&&(u=0,++c,null!=s&&c<=o&&!(c%16)&&s(t,c),null!=v))for(;d<f;)N=r[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N}else if(280>N){if(N=mt(N-256,h),_=bt(y.G[4],y.H[4],h),S(h),_=vt(i,_=mt(_,h)),h.h)break;if(f-n<_||a-f<N)break t;for(P=0;P<N;++P)r[f+P]=r[f+P-_];for(f+=N,u+=N;u>=i;)u-=i,++c,null!=s&&c<=o&&!(c%16)&&s(t,c);if(e(f<=a),u&b&&(y=wt(l,u,c)),null!=v)for(;d<f;)N=r[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N}else{if(!(N<g))break t;for(w=N-280,e(null!=v);d<f;)N=r[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N;N=f,e(!(w>>>(_=v).Xa)),r[N]=_.X[w],w=!0}w||e(h.h==A(h))}if(t.Pb&&h.h&&f<a)e(t.m.h),t.a=5,t.m=t.wd,t.$=t.xd,0<t.s.ua&&B(t.s.vb,t.s.Wa);else{if(h.h)break t;null!=s&&s(t,c>o?o:c),t.a=0,t.$=f-n}return 1}return t.a=3,0}function Pt(t){e(null!=t),t.vc=null,t.yc=null,t.Ya=null;var r=t.Wa;null!=r&&(r.X=null),t.vb=null,e(null!=t)}function kt(){var e=new or;return null==e?null:(e.a=0,e.xb=gi,rt("Predictor","VP8LPredictors"),rt("Predictor","VP8LPredictors_C"),rt("PredictorAdd","VP8LPredictorsAdd"),rt("PredictorAdd","VP8LPredictorsAdd_C"),Gr=G,$r=J,Qr=K,tn=Z,en=$,rn=Q,nn=tt,t.VP8LMapColor32b=Jr,t.VP8LMapColor8b=Kr,e)}function It(t,r,n,s,c){var u=1,f=[t],p=[r],g=s.m,m=s.s,v=null,b=0;t:for(;;){if(n)for(;u&&y(g,1);){var w=f,N=p,A=s,_=1,P=A.m,k=A.gc[A.ab],I=y(P,2);if(A.Oc&1<<I)u=0;else{switch(A.Oc|=1<<I,k.hc=I,k.Ea=w[0],k.nc=N[0],k.K=[null],++A.ab,e(4>=A.ab),I){case 0:case 1:k.b=y(P,3)+2,_=It(q(k.Ea,k.b),q(k.nc,k.b),0,A,k.K),k.K=k.K[0];break;case 3:var F,C=y(P,8)+1,j=16<C?0:4<C?1:2<C?2:3;if(w[0]=q(k.Ea,j),k.b=j,F=_=It(C,1,0,A,k.K)){var B,M=C,E=k,R=1<<(8>>E.b),T=a(R);if(null==T)F=0;else{var U=E.K[0],z=E.w;for(T[0]=E.K[0][0],B=1;B<1*M;++B)T[B]=D(U[z+B],T[B-1]);for(;B<4*R;++B)T[B]=0;E.K[0]=null,E.K[0]=T,F=1}}_=F;break;case 2:break;default:e(0)}u=_}}if(f=f[0],p=p[0],u&&y(g,1)&&!(u=1<=(b=y(g,4))&&11>=b)){s.a=3;break t}var H;if(H=u)e:{var W,V,G,Y=s,J=f,X=p,K=b,Z=n,$=Y.m,Q=Y.s,tt=[null],et=1,rt=0,nt=Qn[K];r:for(;;){if(Z&&y($,1)){var it=y($,3)+2,at=q(J,it),ot=q(X,it),st=at*ot;if(!It(at,ot,0,Y,tt))break r;for(tt=tt[0],Q.xc=it,W=0;W<st;++W){var ct=tt[W]>>8&65535;tt[W]=ct,ct>=et&&(et=ct+1)}}if($.h)break r;for(V=0;5>V;++V){var ut=Xn[V];!V&&0<K&&(ut+=1<<K),rt<ut&&(rt=ut)}var ht=o(et*nt,l),lt=et,ft=o(lt,d);if(null==ft)var dt=null;else e(65536>=lt),dt=ft;var pt=a(rt);if(null==dt||null==pt||null==ht){Y.a=1;break r}var gt=ht;for(W=G=0;W<et;++W){var mt=dt[W],vt=mt.G,bt=mt.H,wt=0,Nt=1,Lt=0;for(V=0;5>V;++V){ut=Xn[V],vt[V]=gt,bt[V]=G,!V&&0<K&&(ut+=1<<K);n:{var At,xt=ut,St=Y,kt=pt,Ft=gt,Ct=G,jt=0,Ot=St.m,Bt=y(Ot,1);if(i(kt,0,0,xt),Bt){var Mt=y(Ot,1)+1,Et=y(Ot,1),qt=y(Ot,0==Et?1:8);kt[qt]=1,2==Mt&&(kt[qt=y(Ot,8)]=1);var Dt=1}else{var Rt=a(19),Tt=y(Ot,4)+4;if(19<Tt){St.a=3;var Ut=0;break n}for(At=0;At<Tt;++At)Rt[Zn[At]]=y(Ot,3);var zt=void 0,Ht=void 0,Wt=St,Vt=Rt,Gt=xt,Yt=kt,Jt=0,Xt=Wt.m,Kt=8,Zt=o(128,l);i:for(;h(Zt,0,7,Vt,19);){if(y(Xt,1)){var $t=2+2*y(Xt,3);if((zt=2+y(Xt,$t))>Gt)break i}else zt=Gt;for(Ht=0;Ht<Gt&&zt--;){S(Xt);var Qt=Zt[0+(127&L(Xt))];x(Xt,Xt.u+Qt.g);var te=Qt.value;if(16>te)Yt[Ht++]=te,0!=te&&(Kt=te);else{var ee=16==te,re=te-16,ne=Jn[re],ie=y(Xt,Yn[re])+ne;if(Ht+ie>Gt)break i;for(var ae=ee?Kt:0;0<ie--;)Yt[Ht++]=ae}}Jt=1;break i}Jt||(Wt.a=3),Dt=Jt}(Dt=Dt&&!Ot.h)&&(jt=h(Ft,Ct,8,kt,xt)),Dt&&0!=jt?Ut=jt:(St.a=3,Ut=0)}if(0==Ut)break r;if(Nt&&1==Kn[V]&&(Nt=0==gt[G].g),wt+=gt[G].g,G+=Ut,3>=V){var oe,se=pt[0];for(oe=1;oe<ut;++oe)pt[oe]>se&&(se=pt[oe]);Lt+=se}}if(mt.nd=Nt,mt.Qb=0,Nt&&(mt.qb=(vt[3][bt[3]+0].value<<24|vt[1][bt[1]+0].value<<16|vt[2][bt[2]+0].value)>>>0,0==wt&&256>vt[0][bt[0]+0].value&&(mt.Qb=1,mt.qb+=vt[0][bt[0]+0].value<<8)),mt.jc=!mt.Qb&&6>Lt,mt.jc){var ce,ue=mt;for(ce=0;ce<Dr;++ce){var he=ce,le=ue.pd[he],fe=ue.G[0][ue.H[0]+he];256<=fe.value?(le.g=fe.g+256,le.value=fe.value):(le.g=0,le.value=0,he>>=yt(fe,8,le),he>>=yt(ue.G[1][ue.H[1]+he],16,le),he>>=yt(ue.G[2][ue.H[2]+he],0,le),yt(ue.G[3][ue.H[3]+he],24,le))}}}Q.vc=tt,Q.Wb=et,Q.Ya=dt,Q.yc=ht,H=1;break e}H=0}if(!(u=H)){s.a=3;break t}if(0<b){if(m.ua=1<<b,!O(m.Wa,b)){s.a=1,u=0;break t}}else m.ua=0;var de=s,pe=f,ge=p,me=de.s,ve=me.xc;if(de.c=pe,de.i=ge,me.md=q(pe,ve),me.wc=0==ve?-1:(1<<ve)-1,n){s.xb=pi;break t}if(null==(v=a(f*p))){s.a=1,u=0;break t}u=(u=_t(s,v,0,f,p,p,null))&&!g.h;break t}return u?(null!=c?c[0]=v:(e(null==v),e(n)),s.$=0,n||Pt(m)):Pt(m),u}function Ft(t,r){var n=t.c*t.i,i=n+r+16*r;return e(t.c<=r),t.V=a(i),null==t.V?(t.Ta=null,t.Ua=0,t.a=1,0):(t.Ta=t.V,t.Ua=t.Ba+n+r,1)}function Ct(t,r){var n=t.C,i=r-n,a=t.V,o=t.Ba+t.c*n;for(e(r<=t.l.o);0<i;){var s=16<i?16:i,c=t.l.ma,u=t.l.width,h=u*s,l=c.ca,f=c.tb+u*n,d=t.Ta,p=t.Ua;Nt(t,s,a,o),_n(d,p,l,f,h),xt(c,n,n+s,l,f,u),i-=s,a+=s*t.c,n+=s}e(n==r),t.C=t.Ma=r}function jt(){this.ub=this.yd=this.td=this.Rb=0}function Ot(){this.Kd=this.Ld=this.Ud=this.Td=this.i=this.c=0}function Bt(){this.Fb=this.Bb=this.Cb=0,this.Zb=a(4),this.Lb=a(4)}function Mt(){this.Yb=function(){var t=[];return function t(e,r,n){for(var i=n[r],a=0;a<i&&(e.push(n.length>r+1?[]:0),!(n.length<r+1));a++)t(e[a],r+1,n)}(t,0,[3,11]),t}()}function Et(){this.jb=a(3),this.Wc=s([4,8],Mt),this.Xc=s([4,17],Mt)}function qt(){this.Pc=this.wb=this.Tb=this.zd=0,this.vd=new a(4),this.od=new a(4)}function Dt(){this.ld=this.La=this.dd=this.tc=0}function Rt(){this.Na=this.la=0}function Tt(){this.Sc=[0,0],this.Eb=[0,0],this.Qc=[0,0],this.ia=this.lc=0}function Ut(){this.ad=a(384),this.Za=0,this.Ob=a(16),this.$b=this.Ad=this.ia=this.Gc=this.Hc=this.Dd=0}function zt(){this.uc=this.M=this.Nb=0,this.wa=Array(new Dt),this.Y=0,this.ya=Array(new Ut),this.aa=0,this.l=new Gt}function Ht(){this.y=a(16),this.f=a(8),this.ea=a(8)}function Wt(){this.cb=this.a=0,this.sc="",this.m=new w,this.Od=new jt,this.Kc=new Ot,this.ed=new qt,this.Qa=new Bt,this.Ic=this.$c=this.Aa=0,this.D=new zt,this.Xb=this.Va=this.Hb=this.zb=this.yb=this.Ub=this.za=0,this.Jc=o(8,w),this.ia=0,this.pb=o(4,Tt),this.Pa=new Et,this.Bd=this.kc=0,this.Ac=[],this.Bc=0,this.zc=[0,0,0,0],this.Gd=Array(new Ht),this.Hd=0,this.rb=Array(new Rt),this.sb=0,this.wa=Array(new Dt),this.Y=0,this.oc=[],this.pc=0,this.sa=[],this.ta=0,this.qa=[],this.ra=0,this.Ha=[],this.B=this.R=this.Ia=0,this.Ec=[],this.M=this.ja=this.Vb=this.Fc=0,this.ya=Array(new Ut),this.L=this.aa=0,this.gd=s([4,2],Dt),this.ga=null,this.Fa=[],this.Cc=this.qc=this.P=0,this.Gb=[],this.Uc=0,this.mb=[],this.nb=0,this.rc=[],this.Ga=this.Vc=0}function Vt(t,e){return 0>t?0:t>e?e:t}function Gt(){this.T=this.U=this.ka=this.height=this.width=0,this.y=[],this.f=[],this.ea=[],this.Rc=this.fa=this.W=this.N=this.O=0,this.ma="void",this.put="VP8IoPutHook",this.ac="VP8IoSetupHook",this.bc="VP8IoTeardownHook",this.ha=this.Kb=0,this.data=[],this.hb=this.ib=this.da=this.o=this.j=this.va=this.v=this.Da=this.ob=this.w=0,this.F=[],this.J=0}function Yt(){var t=new Wt;return null!=t&&(t.a=0,t.sc="OK",t.cb=0,t.Xb=0,ni||(ni=Zt)),t}function Jt(t,e,r){return 0==t.a&&(t.a=e,t.sc=r,t.cb=0),0}function Xt(t,e,r){return 3<=r&&157==t[e+0]&&1==t[e+1]&&42==t[e+2]}function Kt(t,r){if(null==t)return 0;if(t.a=0,t.sc="OK",null==r)return Jt(t,2,"null VP8Io passed to VP8GetHeaders()");var n=r.data,a=r.w,o=r.ha;if(4>o)return Jt(t,7,"Truncated header.");var s=n[a+0]|n[a+1]<<8|n[a+2]<<16,c=t.Od;if(c.Rb=!(1&s),c.td=s>>1&7,c.yd=s>>4&1,c.ub=s>>5,3<c.td)return Jt(t,3,"Incorrect keyframe parameters.");if(!c.yd)return Jt(t,4,"Frame not displayable.");a+=3,o-=3;var u=t.Kc;if(c.Rb){if(7>o)return Jt(t,7,"cannot parse picture header");if(!Xt(n,a,o))return Jt(t,3,"Bad code word");u.c=16383&(n[a+4]<<8|n[a+3]),u.Td=n[a+4]>>6,u.i=16383&(n[a+6]<<8|n[a+5]),u.Ud=n[a+6]>>6,a+=7,o-=7,t.za=u.c+15>>4,t.Ub=u.i+15>>4,r.width=u.c,r.height=u.i,r.Da=0,r.j=0,r.v=0,r.va=r.width,r.o=r.height,r.da=0,r.ib=r.width,r.hb=r.height,r.U=r.width,r.T=r.height,i((s=t.Pa).jb,0,255,s.jb.length),e(null!=(s=t.Qa)),s.Cb=0,s.Bb=0,s.Fb=1,i(s.Zb,0,0,s.Zb.length),i(s.Lb,0,0,s.Lb)}if(c.ub>o)return Jt(t,7,"bad partition length");p(s=t.m,n,a,c.ub),a+=c.ub,o-=c.ub,c.Rb&&(u.Ld=P(s),u.Kd=P(s)),u=t.Qa;var h,l=t.Pa;if(e(null!=s),e(null!=u),u.Cb=P(s),u.Cb){if(u.Bb=P(s),P(s)){for(u.Fb=P(s),h=0;4>h;++h)u.Zb[h]=P(s)?m(s,7):0;for(h=0;4>h;++h)u.Lb[h]=P(s)?m(s,6):0}if(u.Bb)for(h=0;3>h;++h)l.jb[h]=P(s)?g(s,8):255}else u.Bb=0;if(s.Ka)return Jt(t,3,"cannot parse segment header");if((u=t.ed).zd=P(s),u.Tb=g(s,6),u.wb=g(s,3),u.Pc=P(s),u.Pc&&P(s)){for(l=0;4>l;++l)P(s)&&(u.vd[l]=m(s,6));for(l=0;4>l;++l)P(s)&&(u.od[l]=m(s,6))}if(t.L=0==u.Tb?0:u.zd?1:2,s.Ka)return Jt(t,3,"cannot parse filter header");var f=o;if(o=h=a,a=h+f,u=f,t.Xb=(1<<g(t.m,2))-1,f<3*(l=t.Xb))n=7;else{for(h+=3*l,u-=3*l,f=0;f<l;++f){var d=n[o+0]|n[o+1]<<8|n[o+2]<<16;d>u&&(d=u),p(t.Jc[+f],n,h,d),h+=d,u-=d,o+=3}p(t.Jc[+l],n,h,u),n=h<a?0:5}if(0!=n)return Jt(t,n,"cannot parse partitions");for(n=g(h=t.m,7),o=P(h)?m(h,4):0,a=P(h)?m(h,4):0,u=P(h)?m(h,4):0,l=P(h)?m(h,4):0,h=P(h)?m(h,4):0,f=t.Qa,d=0;4>d;++d){if(f.Cb){var v=f.Zb[d];f.Fb||(v+=n)}else{if(0<d){t.pb[d]=t.pb[0];continue}v=n}var b=t.pb[d];b.Sc[0]=ei[Vt(v+o,127)],b.Sc[1]=ri[Vt(v+0,127)],b.Eb[0]=2*ei[Vt(v+a,127)],b.Eb[1]=101581*ri[Vt(v+u,127)]>>16,8>b.Eb[1]&&(b.Eb[1]=8),b.Qc[0]=ei[Vt(v+l,117)],b.Qc[1]=ri[Vt(v+h,127)],b.lc=v+h}if(!c.Rb)return Jt(t,4,"Not a key frame.");for(P(s),c=t.Pa,n=0;4>n;++n){for(o=0;8>o;++o)for(a=0;3>a;++a)for(u=0;11>u;++u)l=k(s,ui[n][o][a][u])?g(s,8):si[n][o][a][u],c.Wc[n][o].Yb[a][u]=l;for(o=0;17>o;++o)c.Xc[n][o]=c.Wc[n][hi[o]]}return t.kc=P(s),t.kc&&(t.Bd=g(s,8)),t.cb=1}function Zt(t,e,r,n,i,a,o){var s=e[i].Yb[r];for(r=0;16>i;++i){if(!k(t,s[r+0]))return i;for(;!k(t,s[r+1]);)if(s=e[++i].Yb[0],r=0,16==i)return 16;var c=e[i+1].Yb;if(k(t,s[r+2])){var u=t,h=0;if(k(u,(f=s)[(l=r)+3]))if(k(u,f[l+6])){for(s=0,l=2*(h=k(u,f[l+8]))+(f=k(u,f[l+9+h])),h=0,f=ii[l];f[s];++s)h+=h+k(u,f[s]);h+=3+(8<<l)}else k(u,f[l+7])?(h=7+2*k(u,165),h+=k(u,145)):h=5+k(u,159);else h=k(u,f[l+4])?3+k(u,f[l+5]):2;s=c[2]}else h=1,s=c[1];c=o+ai[i],0>(u=t).b&&_(u);var l,f=u.b,d=(l=u.Ca>>1)-(u.I>>f)>>31;--u.b,u.Ca+=d,u.Ca|=1,u.I-=(l+1&d)<<f,a[c]=((h^d)-d)*n[(0<i)+0]}return 16}function $t(t){var e=t.rb[t.sb-1];e.la=0,e.Na=0,i(t.zc,0,0,t.zc.length),t.ja=0}function Qt(t,r){if(null==t)return 0;if(null==r)return Jt(t,2,"NULL VP8Io parameter in VP8Decode().");if(!t.cb&&!Kt(t,r))return 0;if(e(t.cb),null==r.ac||r.ac(r)){r.ob&&(t.L=0);var s=Ri[t.L];if(2==t.L?(t.yb=0,t.zb=0):(t.yb=r.v-s>>4,t.zb=r.j-s>>4,0>t.yb&&(t.yb=0),0>t.zb&&(t.zb=0)),t.Va=r.o+15+s>>4,t.Hb=r.va+15+s>>4,t.Hb>t.za&&(t.Hb=t.za),t.Va>t.Ub&&(t.Va=t.Ub),0<t.L){var c=t.ed;for(s=0;4>s;++s){var u;if(t.Qa.Cb){var h=t.Qa.Lb[s];t.Qa.Fb||(h+=c.Tb)}else h=c.Tb;for(u=0;1>=u;++u){var l=t.gd[s][u],f=h;if(c.Pc&&(f+=c.vd[0],u&&(f+=c.od[0])),0<(f=0>f?0:63<f?63:f)){var d=f;0<c.wb&&((d=4<c.wb?d>>2:d>>1)>9-c.wb&&(d=9-c.wb)),1>d&&(d=1),l.dd=d,l.tc=2*f+d,l.ld=40<=f?2:15<=f?1:0}else l.tc=0;l.La=u}}}s=0}else Jt(t,6,"Frame setup failed"),s=t.a;if(s=0==s){if(s){t.$c=0,0<t.Aa||(t.Ic=Ui);t:{s=t.Ic;c=4*(d=t.za);var p=32*d,g=d+1,m=0<t.L?d*(0<t.Aa?2:1):0,v=(2==t.Aa?2:1)*d;if((l=c+832+(u=3*(16*s+Ri[t.L])/2*p)+(h=null!=t.Fa&&0<t.Fa.length?t.Kc.c*t.Kc.i:0))!=l)s=0;else{if(l>t.Vb){if(t.Vb=0,t.Ec=a(l),t.Fc=0,null==t.Ec){s=Jt(t,1,"no memory during frame initialization.");break t}t.Vb=l}l=t.Ec,f=t.Fc,t.Ac=l,t.Bc=f,f+=c,t.Gd=o(p,Ht),t.Hd=0,t.rb=o(g+1,Rt),t.sb=1,t.wa=m?o(m,Dt):null,t.Y=0,t.D.Nb=0,t.D.wa=t.wa,t.D.Y=t.Y,0<t.Aa&&(t.D.Y+=d),e(!0),t.oc=l,t.pc=f,f+=832,t.ya=o(v,Ut),t.aa=0,t.D.ya=t.ya,t.D.aa=t.aa,2==t.Aa&&(t.D.aa+=d),t.R=16*d,t.B=8*d,d=(p=Ri[t.L])*t.R,p=p/2*t.B,t.sa=l,t.ta=f+d,t.qa=t.sa,t.ra=t.ta+16*s*t.R+p,t.Ha=t.qa,t.Ia=t.ra+8*s*t.B+p,t.$c=0,f+=u,t.mb=h?l:null,t.nb=h?f:null,e(f+h<=t.Fc+t.Vb),$t(t),i(t.Ac,t.Bc,0,c),s=1}}if(s){if(r.ka=0,r.y=t.sa,r.O=t.ta,r.f=t.qa,r.N=t.ra,r.ea=t.Ha,r.Vd=t.Ia,r.fa=t.R,r.Rc=t.B,r.F=null,r.J=0,!Cn){for(s=-255;255>=s;++s)Pn[255+s]=0>s?-s:s;for(s=-1020;1020>=s;++s)kn[1020+s]=-128>s?-128:127<s?127:s;for(s=-112;112>=s;++s)In[112+s]=-16>s?-16:15<s?15:s;for(s=-255;510>=s;++s)Fn[255+s]=0>s?0:255<s?255:s;Cn=1}an=ue,on=ae,cn=oe,un=se,hn=ce,sn=ie,ln=Je,fn=Xe,dn=$e,pn=Qe,gn=Ke,mn=Ze,vn=tr,bn=er,yn=ze,wn=He,Nn=We,Ln=Ve,fi[0]=xe,fi[1]=le,fi[2]=Le,fi[3]=Ae,fi[4]=Se,fi[5]=Pe,fi[6]=_e,fi[7]=ke,fi[8]=Fe,fi[9]=Ie,li[0]=ve,li[1]=de,li[2]=pe,li[3]=ge,li[4]=be,li[5]=ye,li[6]=we,di[0]=Be,di[1]=fe,di[2]=Ce,di[3]=je,di[4]=Ee,di[5]=Me,di[6]=qe,s=1}else s=0}s&&(s=function(t,r){for(t.M=0;t.M<t.Va;++t.M){var o,s=t.Jc[t.M&t.Xb],c=t.m,u=t;for(o=0;o<u.za;++o){var h=c,l=u,f=l.Ac,d=l.Bc+4*o,p=l.zc,g=l.ya[l.aa+o];if(l.Qa.Bb?g.$b=k(h,l.Pa.jb[0])?2+k(h,l.Pa.jb[2]):k(h,l.Pa.jb[1]):g.$b=0,l.kc&&(g.Ad=k(h,l.Bd)),g.Za=!k(h,145)+0,g.Za){var m=g.Ob,v=0;for(l=0;4>l;++l){var b,y=p[0+l];for(b=0;4>b;++b){y=ci[f[d+b]][y];for(var w=oi[k(h,y[0])];0<w;)w=oi[2*w+k(h,y[w])];y=-w,f[d+b]=y}n(m,v,f,d,4),v+=4,p[0+l]=y}}else y=k(h,156)?k(h,128)?1:3:k(h,163)?2:0,g.Ob[0]=y,i(f,d,y,4),i(p,0,y,4);g.Dd=k(h,142)?k(h,114)?k(h,183)?1:3:2:0}if(u.m.Ka)return Jt(t,7,"Premature end-of-partition0 encountered.");for(;t.ja<t.za;++t.ja){if(u=s,h=(c=t).rb[c.sb-1],f=c.rb[c.sb+c.ja],o=c.ya[c.aa+c.ja],d=c.kc?o.Ad:0)h.la=f.la=0,o.Za||(h.Na=f.Na=0),o.Hc=0,o.Gc=0,o.ia=0;else{var N,L;h=f,f=u,d=c.Pa.Xc,p=c.ya[c.aa+c.ja],g=c.pb[p.$b];if(l=p.ad,m=0,v=c.rb[c.sb-1],y=b=0,i(l,m,0,384),p.Za)var A=0,x=d[3];else{w=a(16);var S=h.Na+v.Na;if(S=ni(f,d[1],S,g.Eb,0,w,0),h.Na=v.Na=(0<S)+0,1<S)an(w,0,l,m);else{var _=w[0]+3>>3;for(w=0;256>w;w+=16)l[m+w]=_}A=1,x=d[0]}var P=15&h.la,I=15&v.la;for(w=0;4>w;++w){var F=1&I;for(_=L=0;4>_;++_)P=P>>1|(F=(S=ni(f,x,S=F+(1&P),g.Sc,A,l,m))>A)<<7,L=L<<2|(3<S?3:1<S?2:0!=l[m+0]),m+=16;P>>=4,I=I>>1|F<<7,b=(b<<8|L)>>>0}for(x=P,A=I>>4,N=0;4>N;N+=2){for(L=0,P=h.la>>4+N,I=v.la>>4+N,w=0;2>w;++w){for(F=1&I,_=0;2>_;++_)S=F+(1&P),P=P>>1|(F=0<(S=ni(f,d[2],S,g.Qc,0,l,m)))<<3,L=L<<2|(3<S?3:1<S?2:0!=l[m+0]),m+=16;P>>=2,I=I>>1|F<<5}y|=L<<4*N,x|=P<<4<<N,A|=(240&I)<<N}h.la=x,v.la=A,p.Hc=b,p.Gc=y,p.ia=43690&y?0:g.ia,d=!(b|y)}if(0<c.L&&(c.wa[c.Y+c.ja]=c.gd[o.$b][o.Za],c.wa[c.Y+c.ja].La|=!d),u.Ka)return Jt(t,7,"Premature end-of-file encountered.")}if($t(t),c=r,u=1,o=(s=t).D,h=0<s.L&&s.M>=s.zb&&s.M<=s.Va,0==s.Aa)t:{if(o.M=s.M,o.uc=h,Or(s,o),u=1,o=(L=s.D).Nb,h=(y=Ri[s.L])*s.R,f=y/2*s.B,w=16*o*s.R,_=8*o*s.B,d=s.sa,p=s.ta-h+w,g=s.qa,l=s.ra-f+_,m=s.Ha,v=s.Ia-f+_,I=0==(P=L.M),b=P>=s.Va-1,2==s.Aa&&Or(s,L),L.uc)for(F=(S=s).D.M,e(S.D.uc),L=S.yb;L<S.Hb;++L){A=L,x=F;var C=(j=(U=S).D).Nb;N=U.R;var j=j.wa[j.Y+A],O=U.sa,B=U.ta+16*C*N+16*A,M=j.dd,E=j.tc;if(0!=E)if(e(3<=E),1==U.L)0<A&&wn(O,B,N,E+4),j.La&&Ln(O,B,N,E),0<x&&yn(O,B,N,E+4),j.La&&Nn(O,B,N,E);else{var q=U.B,D=U.qa,R=U.ra+8*C*q+8*A,T=U.Ha,U=U.Ia+8*C*q+8*A;C=j.ld;0<A&&(fn(O,B,N,E+4,M,C),pn(D,R,T,U,q,E+4,M,C)),j.La&&(mn(O,B,N,E,M,C),bn(D,R,T,U,q,E,M,C)),0<x&&(ln(O,B,N,E+4,M,C),dn(D,R,T,U,q,E+4,M,C)),j.La&&(gn(O,B,N,E,M,C),vn(D,R,T,U,q,E,M,C))}}if(s.ia&&alert("todo:DitherRow"),null!=c.put){if(L=16*P,P=16*(P+1),I?(c.y=s.sa,c.O=s.ta+w,c.f=s.qa,c.N=s.ra+_,c.ea=s.Ha,c.W=s.Ia+_):(L-=y,c.y=d,c.O=p,c.f=g,c.N=l,c.ea=m,c.W=v),b||(P-=y),P>c.o&&(P=c.o),c.F=null,c.J=null,null!=s.Fa&&0<s.Fa.length&&L<P&&(c.J=lr(s,c,L,P-L),c.F=s.mb,null==c.F&&0==c.F.length)){u=Jt(s,3,"Could not decode alpha data.");break t}L<c.j&&(y=c.j-L,L=c.j,e(!(1&y)),c.O+=s.R*y,c.N+=s.B*(y>>1),c.W+=s.B*(y>>1),null!=c.F&&(c.J+=c.width*y)),L<P&&(c.O+=c.v,c.N+=c.v>>1,c.W+=c.v>>1,null!=c.F&&(c.J+=c.v),c.ka=L-c.j,c.U=c.va-c.v,c.T=P-L,u=c.put(c))}o+1!=s.Ic||b||(n(s.sa,s.ta-h,d,p+16*s.R,h),n(s.qa,s.ra-f,g,l+8*s.B,f),n(s.Ha,s.Ia-f,m,v+8*s.B,f))}if(!u)return Jt(t,6,"Output aborted.")}return 1}(t,r)),null!=r.bc&&r.bc(r),s&=1}return s?(t.cb=0,s):0}function te(t,e,r,n,i){i=t[e+r+32*n]+(i>>3),t[e+r+32*n]=-256&i?0>i?0:255:i}function ee(t,e,r,n,i,a){te(t,e,0,r,n+i),te(t,e,1,r,n+a),te(t,e,2,r,n-a),te(t,e,3,r,n-i)}function re(t){return(20091*t>>16)+t}function ne(t,e,r,n){var i,o=0,s=a(16);for(i=0;4>i;++i){var c=t[e+0]+t[e+8],u=t[e+0]-t[e+8],h=(35468*t[e+4]>>16)-re(t[e+12]),l=re(t[e+4])+(35468*t[e+12]>>16);s[o+0]=c+l,s[o+1]=u+h,s[o+2]=u-h,s[o+3]=c-l,o+=4,e++}for(i=o=0;4>i;++i)c=(t=s[o+0]+4)+s[o+8],u=t-s[o+8],h=(35468*s[o+4]>>16)-re(s[o+12]),te(r,n,0,0,c+(l=re(s[o+4])+(35468*s[o+12]>>16))),te(r,n,1,0,u+h),te(r,n,2,0,u-h),te(r,n,3,0,c-l),o++,n+=32}function ie(t,e,r,n){var i=t[e+0]+4,a=35468*t[e+4]>>16,o=re(t[e+4]),s=35468*t[e+1]>>16;ee(r,n,0,i+o,t=re(t[e+1]),s),ee(r,n,1,i+a,t,s),ee(r,n,2,i-a,t,s),ee(r,n,3,i-o,t,s)}function ae(t,e,r,n,i){ne(t,e,r,n),i&&ne(t,e+16,r,n+4)}function oe(t,e,r,n){on(t,e+0,r,n,1),on(t,e+32,r,n+128,1)}function se(t,e,r,n){var i;for(t=t[e+0]+4,i=0;4>i;++i)for(e=0;4>e;++e)te(r,n,e,i,t)}function ce(t,e,r,n){t[e+0]&&un(t,e+0,r,n),t[e+16]&&un(t,e+16,r,n+4),t[e+32]&&un(t,e+32,r,n+128),t[e+48]&&un(t,e+48,r,n+128+4)}function ue(t,e,r,n){var i,o=a(16);for(i=0;4>i;++i){var s=t[e+0+i]+t[e+12+i],c=t[e+4+i]+t[e+8+i],u=t[e+4+i]-t[e+8+i],h=t[e+0+i]-t[e+12+i];o[0+i]=s+c,o[8+i]=s-c,o[4+i]=h+u,o[12+i]=h-u}for(i=0;4>i;++i)s=(t=o[0+4*i]+3)+o[3+4*i],c=o[1+4*i]+o[2+4*i],u=o[1+4*i]-o[2+4*i],h=t-o[3+4*i],r[n+0]=s+c>>3,r[n+16]=h+u>>3,r[n+32]=s-c>>3,r[n+48]=h-u>>3,n+=64}function he(t,e,r){var n,i=e-32,a=Bn,o=255-t[i-1];for(n=0;n<r;++n){var s,c=a,u=o+t[e-1];for(s=0;s<r;++s)t[e+s]=c[u+t[i+s]];e+=32}}function le(t,e){he(t,e,4)}function fe(t,e){he(t,e,8)}function de(t,e){he(t,e,16)}function pe(t,e){var r;for(r=0;16>r;++r)n(t,e+32*r,t,e-32,16)}function ge(t,e){var r;for(r=16;0<r;--r)i(t,e,t[e-1],16),e+=32}function me(t,e,r){var n;for(n=0;16>n;++n)i(e,r+32*n,t,16)}function ve(t,e){var r,n=16;for(r=0;16>r;++r)n+=t[e-1+32*r]+t[e+r-32];me(n>>5,t,e)}function be(t,e){var r,n=8;for(r=0;16>r;++r)n+=t[e-1+32*r];me(n>>4,t,e)}function ye(t,e){var r,n=8;for(r=0;16>r;++r)n+=t[e+r-32];me(n>>4,t,e)}function we(t,e){me(128,t,e)}function Ne(t,e,r){return t+2*e+r+2>>2}function Le(t,e){var r,i=e-32;i=new Uint8Array([Ne(t[i-1],t[i+0],t[i+1]),Ne(t[i+0],t[i+1],t[i+2]),Ne(t[i+1],t[i+2],t[i+3]),Ne(t[i+2],t[i+3],t[i+4])]);for(r=0;4>r;++r)n(t,e+32*r,i,0,i.length)}function Ae(t,e){var r=t[e-1],n=t[e-1+32],i=t[e-1+64],a=t[e-1+96];I(t,e+0,16843009*Ne(t[e-1-32],r,n)),I(t,e+32,16843009*Ne(r,n,i)),I(t,e+64,16843009*Ne(n,i,a)),I(t,e+96,16843009*Ne(i,a,a))}function xe(t,e){var r,n=4;for(r=0;4>r;++r)n+=t[e+r-32]+t[e-1+32*r];for(n>>=3,r=0;4>r;++r)i(t,e+32*r,n,4)}function Se(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1-32],o=t[e+0-32],s=t[e+1-32],c=t[e+2-32],u=t[e+3-32];t[e+0+96]=Ne(n,i,t[e-1+96]),t[e+1+96]=t[e+0+64]=Ne(r,n,i),t[e+2+96]=t[e+1+64]=t[e+0+32]=Ne(a,r,n),t[e+3+96]=t[e+2+64]=t[e+1+32]=t[e+0+0]=Ne(o,a,r),t[e+3+64]=t[e+2+32]=t[e+1+0]=Ne(s,o,a),t[e+3+32]=t[e+2+0]=Ne(c,s,o),t[e+3+0]=Ne(u,c,s)}function _e(t,e){var r=t[e+1-32],n=t[e+2-32],i=t[e+3-32],a=t[e+4-32],o=t[e+5-32],s=t[e+6-32],c=t[e+7-32];t[e+0+0]=Ne(t[e+0-32],r,n),t[e+1+0]=t[e+0+32]=Ne(r,n,i),t[e+2+0]=t[e+1+32]=t[e+0+64]=Ne(n,i,a),t[e+3+0]=t[e+2+32]=t[e+1+64]=t[e+0+96]=Ne(i,a,o),t[e+3+32]=t[e+2+64]=t[e+1+96]=Ne(a,o,s),t[e+3+64]=t[e+2+96]=Ne(o,s,c),t[e+3+96]=Ne(s,c,c)}function Pe(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1-32],o=t[e+0-32],s=t[e+1-32],c=t[e+2-32],u=t[e+3-32];t[e+0+0]=t[e+1+64]=a+o+1>>1,t[e+1+0]=t[e+2+64]=o+s+1>>1,t[e+2+0]=t[e+3+64]=s+c+1>>1,t[e+3+0]=c+u+1>>1,t[e+0+96]=Ne(i,n,r),t[e+0+64]=Ne(n,r,a),t[e+0+32]=t[e+1+96]=Ne(r,a,o),t[e+1+32]=t[e+2+96]=Ne(a,o,s),t[e+2+32]=t[e+3+96]=Ne(o,s,c),t[e+3+32]=Ne(s,c,u)}function ke(t,e){var r=t[e+0-32],n=t[e+1-32],i=t[e+2-32],a=t[e+3-32],o=t[e+4-32],s=t[e+5-32],c=t[e+6-32],u=t[e+7-32];t[e+0+0]=r+n+1>>1,t[e+1+0]=t[e+0+64]=n+i+1>>1,t[e+2+0]=t[e+1+64]=i+a+1>>1,t[e+3+0]=t[e+2+64]=a+o+1>>1,t[e+0+32]=Ne(r,n,i),t[e+1+32]=t[e+0+96]=Ne(n,i,a),t[e+2+32]=t[e+1+96]=Ne(i,a,o),t[e+3+32]=t[e+2+96]=Ne(a,o,s),t[e+3+64]=Ne(o,s,c),t[e+3+96]=Ne(s,c,u)}function Ie(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1+96];t[e+0+0]=r+n+1>>1,t[e+2+0]=t[e+0+32]=n+i+1>>1,t[e+2+32]=t[e+0+64]=i+a+1>>1,t[e+1+0]=Ne(r,n,i),t[e+3+0]=t[e+1+32]=Ne(n,i,a),t[e+3+32]=t[e+1+64]=Ne(i,a,a),t[e+3+64]=t[e+2+64]=t[e+0+96]=t[e+1+96]=t[e+2+96]=t[e+3+96]=a}function Fe(t,e){var r=t[e-1+0],n=t[e-1+32],i=t[e-1+64],a=t[e-1+96],o=t[e-1-32],s=t[e+0-32],c=t[e+1-32],u=t[e+2-32];t[e+0+0]=t[e+2+32]=r+o+1>>1,t[e+0+32]=t[e+2+64]=n+r+1>>1,t[e+0+64]=t[e+2+96]=i+n+1>>1,t[e+0+96]=a+i+1>>1,t[e+3+0]=Ne(s,c,u),t[e+2+0]=Ne(o,s,c),t[e+1+0]=t[e+3+32]=Ne(r,o,s),t[e+1+32]=t[e+3+64]=Ne(n,r,o),t[e+1+64]=t[e+3+96]=Ne(i,n,r),t[e+1+96]=Ne(a,i,n)}function Ce(t,e){var r;for(r=0;8>r;++r)n(t,e+32*r,t,e-32,8)}function je(t,e){var r;for(r=0;8>r;++r)i(t,e,t[e-1],8),e+=32}function Oe(t,e,r){var n;for(n=0;8>n;++n)i(e,r+32*n,t,8)}function Be(t,e){var r,n=8;for(r=0;8>r;++r)n+=t[e+r-32]+t[e-1+32*r];Oe(n>>4,t,e)}function Me(t,e){var r,n=4;for(r=0;8>r;++r)n+=t[e+r-32];Oe(n>>3,t,e)}function Ee(t,e){var r,n=4;for(r=0;8>r;++r)n+=t[e-1+32*r];Oe(n>>3,t,e)}function qe(t,e){Oe(128,t,e)}function De(t,e,r){var n=t[e-r],i=t[e+0],a=3*(i-n)+jn[1020+t[e-2*r]-t[e+r]],o=On[112+(a+4>>3)];t[e-r]=Bn[255+n+On[112+(a+3>>3)]],t[e+0]=Bn[255+i-o]}function Re(t,e,r,n){var i=t[e+0],a=t[e+r];return Mn[255+t[e-2*r]-t[e-r]]>n||Mn[255+a-i]>n}function Te(t,e,r,n){return 4*Mn[255+t[e-r]-t[e+0]]+Mn[255+t[e-2*r]-t[e+r]]<=n}function Ue(t,e,r,n,i){var a=t[e-3*r],o=t[e-2*r],s=t[e-r],c=t[e+0],u=t[e+r],h=t[e+2*r],l=t[e+3*r];return 4*Mn[255+s-c]+Mn[255+o-u]>n?0:Mn[255+t[e-4*r]-a]<=i&&Mn[255+a-o]<=i&&Mn[255+o-s]<=i&&Mn[255+l-h]<=i&&Mn[255+h-u]<=i&&Mn[255+u-c]<=i}function ze(t,e,r,n){var i=2*n+1;for(n=0;16>n;++n)Te(t,e+n,r,i)&&De(t,e+n,r)}function He(t,e,r,n){var i=2*n+1;for(n=0;16>n;++n)Te(t,e+n*r,1,i)&&De(t,e+n*r,1)}function We(t,e,r,n){var i;for(i=3;0<i;--i)ze(t,e+=4*r,r,n)}function Ve(t,e,r,n){var i;for(i=3;0<i;--i)He(t,e+=4,r,n)}function Ge(t,e,r,n,i,a,o,s){for(a=2*a+1;0<i--;){if(Ue(t,e,r,a,o))if(Re(t,e,r,s))De(t,e,r);else{var c=t,u=e,h=r,l=c[u-2*h],f=c[u-h],d=c[u+0],p=c[u+h],g=c[u+2*h],m=27*(b=jn[1020+3*(d-f)+jn[1020+l-p]])+63>>7,v=18*b+63>>7,b=9*b+63>>7;c[u-3*h]=Bn[255+c[u-3*h]+b],c[u-2*h]=Bn[255+l+v],c[u-h]=Bn[255+f+m],c[u+0]=Bn[255+d-m],c[u+h]=Bn[255+p-v],c[u+2*h]=Bn[255+g-b]}e+=n}}function Ye(t,e,r,n,i,a,o,s){for(a=2*a+1;0<i--;){if(Ue(t,e,r,a,o))if(Re(t,e,r,s))De(t,e,r);else{var c=t,u=e,h=r,l=c[u-h],f=c[u+0],d=c[u+h],p=On[112+((g=3*(f-l))+4>>3)],g=On[112+(g+3>>3)],m=p+1>>1;c[u-2*h]=Bn[255+c[u-2*h]+m],c[u-h]=Bn[255+l+g],c[u+0]=Bn[255+f-p],c[u+h]=Bn[255+d-m]}e+=n}}function Je(t,e,r,n,i,a){Ge(t,e,r,1,16,n,i,a)}function Xe(t,e,r,n,i,a){Ge(t,e,1,r,16,n,i,a)}function Ke(t,e,r,n,i,a){var o;for(o=3;0<o;--o)Ye(t,e+=4*r,r,1,16,n,i,a)}function Ze(t,e,r,n,i,a){var o;for(o=3;0<o;--o)Ye(t,e+=4,1,r,16,n,i,a)}function $e(t,e,r,n,i,a,o,s){Ge(t,e,i,1,8,a,o,s),Ge(r,n,i,1,8,a,o,s)}function Qe(t,e,r,n,i,a,o,s){Ge(t,e,1,i,8,a,o,s),Ge(r,n,1,i,8,a,o,s)}function tr(t,e,r,n,i,a,o,s){Ye(t,e+4*i,i,1,8,a,o,s),Ye(r,n+4*i,i,1,8,a,o,s)}function er(t,e,r,n,i,a,o,s){Ye(t,e+4,1,i,8,a,o,s),Ye(r,n+4,1,i,8,a,o,s)}function rr(){this.ba=new ot,this.ec=[],this.cc=[],this.Mc=[],this.Dc=this.Nc=this.dc=this.fc=0,this.Oa=new ct,this.memory=0,this.Ib="OutputFunc",this.Jb="OutputAlphaFunc",this.Nd="OutputRowFunc"}function nr(){this.data=[],this.offset=this.kd=this.ha=this.w=0,this.na=[],this.xa=this.gb=this.Ja=this.Sa=this.P=0}function ir(){this.nc=this.Ea=this.b=this.hc=0,this.K=[],this.w=0}function ar(){this.ua=0,this.Wa=new M,this.vb=new M,this.md=this.xc=this.wc=0,this.vc=[],this.Wb=0,this.Ya=new d,this.yc=new l}function or(){this.xb=this.a=0,this.l=new Gt,this.ca=new ot,this.V=[],this.Ba=0,this.Ta=[],this.Ua=0,this.m=new N,this.Pb=0,this.wd=new N,this.Ma=this.$=this.C=this.i=this.c=this.xd=0,this.s=new ar,this.ab=0,this.gc=o(4,ir),this.Oc=0}function sr(){this.Lc=this.Z=this.$a=this.i=this.c=0,this.l=new Gt,this.ic=0,this.ca=[],this.tb=0,this.qd=null,this.rd=0}function cr(t,e,r,n,i,a,o){for(t=null==t?0:t[e+0],e=0;e<o;++e)i[a+e]=t+r[n+e]&255,t=i[a+e]}function ur(t,e,r,n,i,a,o){var s;if(null==t)cr(null,null,r,n,i,a,o);else for(s=0;s<o;++s)i[a+s]=t[e+s]+r[n+s]&255}function hr(t,e,r,n,i,a,o){if(null==t)cr(null,null,r,n,i,a,o);else{var s,c=t[e+0],u=c,h=c;for(s=0;s<o;++s)u=h+(c=t[e+s])-u,h=r[n+s]+(-256&u?0>u?0:255:u)&255,u=c,i[a+s]=h}}function lr(t,r,i,o){var s=r.width,c=r.o;if(e(null!=t&&null!=r),0>i||0>=o||i+o>c)return null;if(!t.Cc){if(null==t.ga){var u;if(t.ga=new sr,(u=null==t.ga)||(u=r.width*r.o,e(0==t.Gb.length),t.Gb=a(u),t.Uc=0,null==t.Gb?u=0:(t.mb=t.Gb,t.nb=t.Uc,t.rc=null,u=1),u=!u),!u){u=t.ga;var h=t.Fa,l=t.P,f=t.qc,d=t.mb,p=t.nb,g=l+1,m=f-1,b=u.l;if(e(null!=h&&null!=d&&null!=r),mi[0]=null,mi[1]=cr,mi[2]=ur,mi[3]=hr,u.ca=d,u.tb=p,u.c=r.width,u.i=r.height,e(0<u.c&&0<u.i),1>=f)r=0;else if(u.$a=h[l+0]>>0&3,u.Z=h[l+0]>>2&3,u.Lc=h[l+0]>>4&3,l=h[l+0]>>6&3,0>u.$a||1<u.$a||4<=u.Z||1<u.Lc||l)r=0;else if(b.put=dt,b.ac=ft,b.bc=pt,b.ma=u,b.width=r.width,b.height=r.height,b.Da=r.Da,b.v=r.v,b.va=r.va,b.j=r.j,b.o=r.o,u.$a)t:{e(1==u.$a),r=kt();e:for(;;){if(null==r){r=0;break t}if(e(null!=u),u.mc=r,r.c=u.c,r.i=u.i,r.l=u.l,r.l.ma=u,r.l.width=u.c,r.l.height=u.i,r.a=0,v(r.m,h,g,m),!It(u.c,u.i,1,r,null))break e;if(1==r.ab&&3==r.gc[0].hc&&At(r.s)?(u.ic=1,h=r.c*r.i,r.Ta=null,r.Ua=0,r.V=a(h),r.Ba=0,null==r.V?(r.a=1,r=0):r=1):(u.ic=0,r=Ft(r,u.c)),!r)break e;r=1;break t}u.mc=null,r=0}else r=m>=u.c*u.i;u=!r}if(u)return null;1!=t.ga.Lc?t.Ga=0:o=c-i}e(null!=t.ga),e(i+o<=c);t:{if(r=(h=t.ga).c,c=h.l.o,0==h.$a){if(g=t.rc,m=t.Vc,b=t.Fa,l=t.P+1+i*r,f=t.mb,d=t.nb+i*r,e(l<=t.P+t.qc),0!=h.Z)for(e(null!=mi[h.Z]),u=0;u<o;++u)mi[h.Z](g,m,b,l,f,d,r),g=f,m=d,d+=r,l+=r;else for(u=0;u<o;++u)n(f,d,b,l,r),g=f,m=d,d+=r,l+=r;t.rc=g,t.Vc=m}else{if(e(null!=h.mc),r=i+o,e(null!=(u=h.mc)),e(r<=u.i),u.C>=r)r=1;else if(h.ic||mr(),h.ic){h=u.V,g=u.Ba,m=u.c;var y=u.i,w=(b=1,l=u.$/m,f=u.$%m,d=u.m,p=u.s,u.$),N=m*y,L=m*r,x=p.wc,_=w<L?wt(p,f,l):null;e(w<=N),e(r<=y),e(At(p));e:for(;;){for(;!d.h&&w<L;){if(f&x||(_=wt(p,f,l)),e(null!=_),S(d),256>(y=bt(_.G[0],_.H[0],d)))h[g+w]=y,++w,++f>=m&&(f=0,++l<=r&&!(l%16)&&St(u,l));else{if(!(280>y)){b=0;break e}y=mt(y-256,d);var P,k=bt(_.G[4],_.H[4],d);if(S(d),!(w>=(k=vt(m,k=mt(k,d)))&&N-w>=y)){b=0;break e}for(P=0;P<y;++P)h[g+w+P]=h[g+w+P-k];for(w+=y,f+=y;f>=m;)f-=m,++l<=r&&!(l%16)&&St(u,l);w<L&&f&x&&(_=wt(p,f,l))}e(d.h==A(d))}St(u,l>r?r:l);break e}!b||d.h&&w<N?(b=0,u.a=d.h?5:3):u.$=w,r=b}else r=_t(u,u.V,u.Ba,u.c,u.i,r,Ct);if(!r){o=0;break t}}i+o>=c&&(t.Cc=1),o=1}if(!o)return null;if(t.Cc&&(null!=(o=t.ga)&&(o.mc=null),t.ga=null,0<t.Ga))return alert("todo:WebPDequantizeLevels"),null}return t.nb+i*s}function fr(t,e,r,n,i,a){for(;0<i--;){var o,s=t,c=e+(r?1:0),u=t,h=e+(r?0:3);for(o=0;o<n;++o){var l=u[h+4*o];255!=l&&(l*=32897,s[c+4*o+0]=s[c+4*o+0]*l>>23,s[c+4*o+1]=s[c+4*o+1]*l>>23,s[c+4*o+2]=s[c+4*o+2]*l>>23)}e+=a}}function dr(t,e,r,n,i){for(;0<n--;){var a;for(a=0;a<r;++a){var o=t[e+2*a+0],s=15&(u=t[e+2*a+1]),c=4369*s,u=(240&u|u>>4)*c>>16;t[e+2*a+0]=(240&o|o>>4)*c>>16&240|(15&o|o<<4)*c>>16>>4&15,t[e+2*a+1]=240&u|s}e+=i}}function pr(t,e,r,n,i,a,o,s){var c,u,h=255;for(u=0;u<i;++u){for(c=0;c<n;++c){var l=t[e+c];a[o+4*c]=l,h&=l}e+=r,o+=s}return 255!=h}function gr(t,e,r,n,i){var a;for(a=0;a<i;++a)r[n+a]=t[e+a]>>8}function mr(){An=fr,xn=dr,Sn=pr,_n=gr}function vr(r,n,i){t[r]=function(t,r,a,o,s,c,u,h,l,f,d,p,g,m,v,b,y){var w,N=y-1>>1,L=s[c+0]|u[h+0]<<16,A=l[f+0]|d[p+0]<<16;e(null!=t);var x=3*L+A+131074>>2;for(n(t[r+0],255&x,x>>16,g,m),null!=a&&(x=3*A+L+131074>>2,n(a[o+0],255&x,x>>16,v,b)),w=1;w<=N;++w){var S=s[c+w]|u[h+w]<<16,_=l[f+w]|d[p+w]<<16,P=L+S+A+_+524296,k=P+2*(S+A)>>3;x=k+L>>1,L=(P=P+2*(L+_)>>3)+S>>1,n(t[r+2*w-1],255&x,x>>16,g,m+(2*w-1)*i),n(t[r+2*w-0],255&L,L>>16,g,m+(2*w-0)*i),null!=a&&(x=P+A>>1,L=k+_>>1,n(a[o+2*w-1],255&x,x>>16,v,b+(2*w-1)*i),n(a[o+2*w+0],255&L,L>>16,v,b+(2*w+0)*i)),L=S,A=_}1&y||(x=3*L+A+131074>>2,n(t[r+y-1],255&x,x>>16,g,m+(y-1)*i),null!=a&&(x=3*A+L+131074>>2,n(a[o+y-1],255&x,x>>16,v,b+(y-1)*i)))}}function br(){vi[En]=bi,vi[qn]=wi,vi[Dn]=yi,vi[Rn]=Ni,vi[Tn]=Li,vi[Un]=Ai,vi[zn]=xi,vi[Hn]=wi,vi[Wn]=Ni,vi[Vn]=Li,vi[Gn]=Ai}function yr(t){return t&~Fi?0>t?0:255:t>>Ii}function wr(t,e){return yr((19077*t>>8)+(26149*e>>8)-14234)}function Nr(t,e,r){return yr((19077*t>>8)-(6419*e>>8)-(13320*r>>8)+8708)}function Lr(t,e){return yr((19077*t>>8)+(33050*e>>8)-17685)}function Ar(t,e,r,n,i){n[i+0]=wr(t,r),n[i+1]=Nr(t,e,r),n[i+2]=Lr(t,e)}function xr(t,e,r,n,i){n[i+0]=Lr(t,e),n[i+1]=Nr(t,e,r),n[i+2]=wr(t,r)}function Sr(t,e,r,n,i){var a=Nr(t,e,r);e=a<<3&224|Lr(t,e)>>3,n[i+0]=248&wr(t,r)|a>>5,n[i+1]=e}function _r(t,e,r,n,i){var a=240&Lr(t,e)|15;n[i+0]=240&wr(t,r)|Nr(t,e,r)>>4,n[i+1]=a}function Pr(t,e,r,n,i){n[i+0]=255,Ar(t,e,r,n,i+1)}function kr(t,e,r,n,i){xr(t,e,r,n,i),n[i+3]=255}function Ir(t,e,r,n,i){Ar(t,e,r,n,i),n[i+3]=255}function Vt(t,e){return 0>t?0:t>e?e:t}function Fr(e,r,n){t[e]=function(t,e,i,a,o,s,c,u,h){for(var l=u+(-2&h)*n;u!=l;)r(t[e+0],i[a+0],o[s+0],c,u),r(t[e+1],i[a+0],o[s+0],c,u+n),e+=2,++a,++s,u+=2*n;1&h&&r(t[e+0],i[a+0],o[s+0],c,u)}}function Cr(t,e,r){return 0==r?0==t?0==e?6:5:0==e?4:0:r}function jr(t,e,r,n,i){switch(t>>>30){case 3:on(e,r,n,i,0);break;case 2:sn(e,r,n,i);break;case 1:un(e,r,n,i)}}function Or(t,e){var r,a,o=e.M,s=e.Nb,c=t.oc,u=t.pc+40,h=t.oc,l=t.pc+584,f=t.oc,d=t.pc+600;for(r=0;16>r;++r)c[u+32*r-1]=129;for(r=0;8>r;++r)h[l+32*r-1]=129,f[d+32*r-1]=129;for(0<o?c[u-1-32]=h[l-1-32]=f[d-1-32]=129:(i(c,u-32-1,127,21),i(h,l-32-1,127,9),i(f,d-32-1,127,9)),a=0;a<t.za;++a){var p=e.ya[e.aa+a];if(0<a){for(r=-1;16>r;++r)n(c,u+32*r-4,c,u+32*r+12,4);for(r=-1;8>r;++r)n(h,l+32*r-4,h,l+32*r+4,4),n(f,d+32*r-4,f,d+32*r+4,4)}var g=t.Gd,m=t.Hd+a,v=p.ad,b=p.Hc;if(0<o&&(n(c,u-32,g[m].y,0,16),n(h,l-32,g[m].f,0,8),n(f,d-32,g[m].ea,0,8)),p.Za){var y=c,w=u-32+16;for(0<o&&(a>=t.za-1?i(y,w,g[m].y[15],4):n(y,w,g[m+1].y,0,4)),r=0;4>r;r++)y[w+128+r]=y[w+256+r]=y[w+384+r]=y[w+0+r];for(r=0;16>r;++r,b<<=2)y=c,w=u+Di[r],fi[p.Ob[r]](y,w),jr(b,v,16*+r,y,w)}else if(y=Cr(a,o,p.Ob[0]),li[y](c,u),0!=b)for(r=0;16>r;++r,b<<=2)jr(b,v,16*+r,c,u+Di[r]);for(r=p.Gc,y=Cr(a,o,p.Dd),di[y](h,l),di[y](f,d),b=v,y=h,w=l,255&(p=r>>0)&&(170&p?cn(b,256,y,w):hn(b,256,y,w)),p=f,b=d,255&(r>>=8)&&(170&r?cn(v,320,p,b):hn(v,320,p,b)),o<t.Ub-1&&(n(g[m].y,0,c,u+480,16),n(g[m].f,0,h,l+224,8),n(g[m].ea,0,f,d+224,8)),r=8*s*t.B,g=t.sa,m=t.ta+16*a+16*s*t.R,v=t.qa,p=t.ra+8*a+r,b=t.Ha,y=t.Ia+8*a+r,r=0;16>r;++r)n(g,m+r*t.R,c,u+32*r,16);for(r=0;8>r;++r)n(v,p+r*t.B,h,l+32*r,8),n(b,y+r*t.B,f,d+32*r,8)}}function Br(t,n,i,a,o,s,c,u,h){var l=[0],f=[0],d=0,p=null!=h?h.kd:0,g=null!=h?h:new nr;if(null==t||12>i)return 7;g.data=t,g.w=n,g.ha=i,n=[n],i=[i],g.gb=[g.gb];t:{var m=n,b=i,y=g.gb;if(e(null!=t),e(null!=b),e(null!=y),y[0]=0,12<=b[0]&&!r(t,m[0],"RIFF")){if(r(t,m[0]+8,"WEBP")){y=3;break t}var w=j(t,m[0]+4);if(12>w||4294967286<w){y=3;break t}if(p&&w>b[0]-8){y=7;break t}y[0]=w,m[0]+=12,b[0]-=12}y=0}if(0!=y)return y;for(w=0<g.gb[0],i=i[0];;){t:{var L=t;b=n,y=i;var A=l,x=f,S=m=[0];if((k=d=[d])[0]=0,8>y[0])y=7;else{if(!r(L,b[0],"VP8X")){if(10!=j(L,b[0]+4)){y=3;break t}if(18>y[0]){y=7;break t}var _=j(L,b[0]+8),P=1+C(L,b[0]+12);if(2147483648<=P*(L=1+C(L,b[0]+15))){y=3;break t}null!=S&&(S[0]=_),null!=A&&(A[0]=P),null!=x&&(x[0]=L),b[0]+=18,y[0]-=18,k[0]=1}y=0}}if(d=d[0],m=m[0],0!=y)return y;if(b=!!(2&m),!w&&d)return 3;if(null!=s&&(s[0]=!!(16&m)),null!=c&&(c[0]=b),null!=u&&(u[0]=0),c=l[0],m=f[0],d&&b&&null==h){y=0;break}if(4>i){y=7;break}if(w&&d||!w&&!d&&!r(t,n[0],"ALPH")){i=[i],g.na=[g.na],g.P=[g.P],g.Sa=[g.Sa];t:{_=t,y=n,w=i;var k=g.gb;A=g.na,x=g.P,S=g.Sa;P=22,e(null!=_),e(null!=w),L=y[0];var I=w[0];for(e(null!=A),e(null!=S),A[0]=null,x[0]=null,S[0]=0;;){if(y[0]=L,w[0]=I,8>I){y=7;break t}var F=j(_,L+4);if(4294967286<F){y=3;break t}var O=8+F+1&-2;if(P+=O,0<k&&P>k){y=3;break t}if(!r(_,L,"VP8 ")||!r(_,L,"VP8L")){y=0;break t}if(I[0]<O){y=7;break t}r(_,L,"ALPH")||(A[0]=_,x[0]=L+8,S[0]=F),L+=O,I-=O}}if(i=i[0],g.na=g.na[0],g.P=g.P[0],g.Sa=g.Sa[0],0!=y)break}i=[i],g.Ja=[g.Ja],g.xa=[g.xa];t:if(k=t,y=n,w=i,A=g.gb[0],x=g.Ja,S=g.xa,_=y[0],L=!r(k,_,"VP8 "),P=!r(k,_,"VP8L"),e(null!=k),e(null!=w),e(null!=x),e(null!=S),8>w[0])y=7;else{if(L||P){if(k=j(k,_+4),12<=A&&k>A-12){y=3;break t}if(p&&k>w[0]-8){y=7;break t}x[0]=k,y[0]+=8,w[0]-=8,S[0]=P}else S[0]=5<=w[0]&&47==k[_+0]&&!(k[_+4]>>5),x[0]=w[0];y=0}if(i=i[0],g.Ja=g.Ja[0],g.xa=g.xa[0],n=n[0],0!=y)break;if(4294967286<g.Ja)return 3;if(null==u||b||(u[0]=g.xa?2:1),c=[c],m=[m],g.xa){if(5>i){y=7;break}u=c,p=m,b=s,null==t||5>i?t=0:5<=i&&47==t[n+0]&&!(t[n+4]>>5)?(w=[0],k=[0],A=[0],v(x=new N,t,n,i),gt(x,w,k,A)?(null!=u&&(u[0]=w[0]),null!=p&&(p[0]=k[0]),null!=b&&(b[0]=A[0]),t=1):t=0):t=0}else{if(10>i){y=7;break}u=m,null==t||10>i||!Xt(t,n+3,i-3)?t=0:(p=t[n+0]|t[n+1]<<8|t[n+2]<<16,b=16383&(t[n+7]<<8|t[n+6]),t=16383&(t[n+9]<<8|t[n+8]),1&p||3<(p>>1&7)||!(p>>4&1)||p>>5>=g.Ja||!b||!t?t=0:(c&&(c[0]=b),u&&(u[0]=t),t=1))}if(!t)return 3;if(c=c[0],m=m[0],d&&(l[0]!=c||f[0]!=m))return 3;null!=h&&(h[0]=g,h.offset=n-h.w,e(4294967286>n-h.w),e(h.offset==h.ha-i));break}return 0==y||7==y&&d&&null==h?(null!=s&&(s[0]|=null!=g.na&&0<g.na.length),null!=a&&(a[0]=c),null!=o&&(o[0]=m),0):y}function Mr(t,e,r){var n=e.width,i=e.height,a=0,o=0,s=n,c=i;if(e.Da=null!=t&&0<t.Da,e.Da&&(s=t.cd,c=t.bd,a=t.v,o=t.j,11>r||(a&=-2,o&=-2),0>a||0>o||0>=s||0>=c||a+s>n||o+c>i))return 0;if(e.v=a,e.j=o,e.va=a+s,e.o=o+c,e.U=s,e.T=c,e.da=null!=t&&0<t.da,e.da){if(!E(s,c,r=[t.ib],a=[t.hb]))return 0;e.ib=r[0],e.hb=a[0]}return e.ob=null!=t&&t.ob,e.Kb=null==t||!t.Sd,e.da&&(e.ob=e.ib<3*n/4&&e.hb<3*i/4,e.Kb=0),1}function Er(t){if(null==t)return 2;if(11>t.S){var e=t.f.RGBA;e.fb+=(t.height-1)*e.A,e.A=-e.A}else e=t.f.kb,t=t.height,e.O+=(t-1)*e.fa,e.fa=-e.fa,e.N+=(t-1>>1)*e.Ab,e.Ab=-e.Ab,e.W+=(t-1>>1)*e.Db,e.Db=-e.Db,null!=e.F&&(e.J+=(t-1)*e.lb,e.lb=-e.lb);return 0}function qr(t,e,r,n){if(null==n||0>=t||0>=e)return 2;if(null!=r){if(r.Da){var i=r.cd,o=r.bd,s=-2&r.v,c=-2&r.j;if(0>s||0>c||0>=i||0>=o||s+i>t||c+o>e)return 2;t=i,e=o}if(r.da){if(!E(t,e,i=[r.ib],o=[r.hb]))return 2;t=i[0],e=o[0]}}n.width=t,n.height=e;t:{var u=n.width,h=n.height;if(t=n.S,0>=u||0>=h||!(t>=En&&13>t))t=2;else{if(0>=n.Rd&&null==n.sd){s=o=i=e=0;var l=(c=u*zi[t])*h;if(11>t||(o=(h+1)/2*(e=(u+1)/2),12==t&&(s=(i=u)*h)),null==(h=a(l+2*o+s))){t=1;break t}n.sd=h,11>t?((u=n.f.RGBA).eb=h,u.fb=0,u.A=c,u.size=l):((u=n.f.kb).y=h,u.O=0,u.fa=c,u.Fd=l,u.f=h,u.N=0+l,u.Ab=e,u.Cd=o,u.ea=h,u.W=0+l+o,u.Db=e,u.Ed=o,12==t&&(u.F=h,u.J=0+l+2*o),u.Tc=s,u.lb=i)}if(e=1,i=n.S,o=n.width,s=n.height,i>=En&&13>i)if(11>i)t=n.f.RGBA,e&=(c=Math.abs(t.A))*(s-1)+o<=t.size,e&=c>=o*zi[i],e&=null!=t.eb;else{t=n.f.kb,c=(o+1)/2,l=(s+1)/2,u=Math.abs(t.fa);h=Math.abs(t.Ab);var f=Math.abs(t.Db),d=Math.abs(t.lb),p=d*(s-1)+o;e&=u*(s-1)+o<=t.Fd,e&=h*(l-1)+c<=t.Cd,e=(e&=f*(l-1)+c<=t.Ed)&u>=o&h>=c&f>=c,e&=null!=t.y,e&=null!=t.f,e&=null!=t.ea,12==i&&(e&=d>=o,e&=p<=t.Tc,e&=null!=t.F)}else e=0;t=e?0:2}}return 0!=t||null!=r&&r.fd&&(t=Er(n)),t}var Dr=64,Rr=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215],Tr=24,Ur=32,zr=8,Hr=[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];R("Predictor0","PredictorAdd0"),t.Predictor0=function(){return 4278190080},t.Predictor1=function(t){return t},t.Predictor2=function(t,e,r){return e[r+0]},t.Predictor3=function(t,e,r){return e[r+1]},t.Predictor4=function(t,e,r){return e[r-1]},t.Predictor5=function(t,e,r){return U(U(t,e[r+1]),e[r+0])},t.Predictor6=function(t,e,r){return U(t,e[r-1])},t.Predictor7=function(t,e,r){return U(t,e[r+0])},t.Predictor8=function(t,e,r){return U(e[r-1],e[r+0])},t.Predictor9=function(t,e,r){return U(e[r+0],e[r+1])},t.Predictor10=function(t,e,r){return U(U(t,e[r-1]),U(e[r+0],e[r+1]))},t.Predictor11=function(t,e,r){var n=e[r+0];return 0>=W(n>>24&255,t>>24&255,(e=e[r-1])>>24&255)+W(n>>16&255,t>>16&255,e>>16&255)+W(n>>8&255,t>>8&255,e>>8&255)+W(255&n,255&t,255&e)?n:t},t.Predictor12=function(t,e,r){var n=e[r+0];return(z((t>>24&255)+(n>>24&255)-((e=e[r-1])>>24&255))<<24|z((t>>16&255)+(n>>16&255)-(e>>16&255))<<16|z((t>>8&255)+(n>>8&255)-(e>>8&255))<<8|z((255&t)+(255&n)-(255&e)))>>>0},t.Predictor13=function(t,e,r){var n=e[r-1];return(H((t=U(t,e[r+0]))>>24&255,n>>24&255)<<24|H(t>>16&255,n>>16&255)<<16|H(t>>8&255,n>>8&255)<<8|H(t>>0&255,n>>0&255))>>>0};var Wr=t.PredictorAdd0;t.PredictorAdd1=V,R("Predictor2","PredictorAdd2"),R("Predictor3","PredictorAdd3"),R("Predictor4","PredictorAdd4"),R("Predictor5","PredictorAdd5"),R("Predictor6","PredictorAdd6"),R("Predictor7","PredictorAdd7"),R("Predictor8","PredictorAdd8"),R("Predictor9","PredictorAdd9"),R("Predictor10","PredictorAdd10"),R("Predictor11","PredictorAdd11"),R("Predictor12","PredictorAdd12"),R("Predictor13","PredictorAdd13");var Vr=t.PredictorAdd2;X("ColorIndexInverseTransform","MapARGB","32b",(function(t){return t>>8&255}),(function(t){return t})),X("VP8LColorIndexInverseTransformAlpha","MapAlpha","8b",(function(t){return t}),(function(t){return t>>8&255}));var Gr,Yr=t.ColorIndexInverseTransform,Jr=t.MapARGB,Xr=t.VP8LColorIndexInverseTransformAlpha,Kr=t.MapAlpha,Zr=t.VP8LPredictorsAdd=[];Zr.length=16,(t.VP8LPredictors=[]).length=16,(t.VP8LPredictorsAdd_C=[]).length=16,(t.VP8LPredictors_C=[]).length=16;var $r,Qr,tn,en,rn,nn,an,on,sn,cn,un,hn,ln,fn,dn,pn,gn,mn,vn,bn,yn,wn,Nn,Ln,An,xn,Sn,_n,Pn=a(511),kn=a(2041),In=a(225),Fn=a(767),Cn=0,jn=kn,On=In,Bn=Fn,Mn=Pn,En=0,qn=1,Dn=2,Rn=3,Tn=4,Un=5,zn=6,Hn=7,Wn=8,Vn=9,Gn=10,Yn=[2,3,7],Jn=[3,3,11],Xn=[280,256,256,256,40],Kn=[0,1,1,1,0],Zn=[17,18,0,1,2,3,4,5,16,6,7,8,9,10,11,12,13,14,15],$n=[24,7,23,25,40,6,39,41,22,26,38,42,56,5,55,57,21,27,54,58,37,43,72,4,71,73,20,28,53,59,70,74,36,44,88,69,75,52,60,3,87,89,19,29,86,90,35,45,68,76,85,91,51,61,104,2,103,105,18,30,102,106,34,46,84,92,67,77,101,107,50,62,120,1,119,121,83,93,17,31,100,108,66,78,118,122,33,47,117,123,49,63,99,109,82,94,0,116,124,65,79,16,32,98,110,48,115,125,81,95,64,114,126,97,111,80,113,127,96,112],Qn=[2954,2956,2958,2962,2970,2986,3018,3082,3212,3468,3980,5004],ti=8,ei=[4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,17,18,19,20,20,21,21,22,22,23,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,96,98,100,101,102,104,106,108,110,112,114,116,118,122,124,126,128,130,132,134,136,138,140,143,145,148,151,154,157],ri=[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,234,239,245,249,254,259,264,269,274,279,284],ni=null,ii=[[173,148,140,0],[176,155,140,135,0],[180,157,141,134,130,0],[254,254,243,230,196,177,153,140,133,130,129,0]],ai=[0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15],oi=[-0,1,-1,2,-2,3,4,6,-3,5,-4,-5,-6,7,-7,8,-8,-9],si=[[[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]],[[253,136,254,255,228,219,128,128,128,128,128],[189,129,242,255,227,213,255,219,128,128,128],[106,126,227,252,214,209,255,255,128,128,128]],[[1,98,248,255,236,226,255,255,128,128,128],[181,133,238,254,221,234,255,154,128,128,128],[78,134,202,247,198,180,255,219,128,128,128]],[[1,185,249,255,243,255,128,128,128,128,128],[184,150,247,255,236,224,128,128,128,128,128],[77,110,216,255,236,230,128,128,128,128,128]],[[1,101,251,255,241,255,128,128,128,128,128],[170,139,241,252,236,209,255,255,128,128,128],[37,116,196,243,228,255,255,255,128,128,128]],[[1,204,254,255,245,255,128,128,128,128,128],[207,160,250,255,238,128,128,128,128,128,128],[102,103,231,255,211,171,128,128,128,128,128]],[[1,152,252,255,240,255,128,128,128,128,128],[177,135,243,255,234,225,128,128,128,128,128],[80,129,211,255,194,224,128,128,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[246,1,255,128,128,128,128,128,128,128,128],[255,128,128,128,128,128,128,128,128,128,128]]],[[[198,35,237,223,193,187,162,160,145,155,62],[131,45,198,221,172,176,220,157,252,221,1],[68,47,146,208,149,167,221,162,255,223,128]],[[1,149,241,255,221,224,255,255,128,128,128],[184,141,234,253,222,220,255,199,128,128,128],[81,99,181,242,176,190,249,202,255,255,128]],[[1,129,232,253,214,197,242,196,255,255,128],[99,121,210,250,201,198,255,202,128,128,128],[23,91,163,242,170,187,247,210,255,255,128]],[[1,200,246,255,234,255,128,128,128,128,128],[109,178,241,255,231,245,255,255,128,128,128],[44,130,201,253,205,192,255,255,128,128,128]],[[1,132,239,251,219,209,255,165,128,128,128],[94,136,225,251,218,190,255,255,128,128,128],[22,100,174,245,186,161,255,199,128,128,128]],[[1,182,249,255,232,235,128,128,128,128,128],[124,143,241,255,227,234,128,128,128,128,128],[35,77,181,251,193,211,255,205,128,128,128]],[[1,157,247,255,236,231,255,255,128,128,128],[121,141,235,255,225,227,255,255,128,128,128],[45,99,188,251,195,217,255,224,128,128,128]],[[1,1,251,255,213,255,128,128,128,128,128],[203,1,248,255,255,128,128,128,128,128,128],[137,1,177,255,224,255,128,128,128,128,128]]],[[[253,9,248,251,207,208,255,192,128,128,128],[175,13,224,243,193,185,249,198,255,255,128],[73,17,171,221,161,179,236,167,255,234,128]],[[1,95,247,253,212,183,255,255,128,128,128],[239,90,244,250,211,209,255,255,128,128,128],[155,77,195,248,188,195,255,255,128,128,128]],[[1,24,239,251,218,219,255,205,128,128,128],[201,51,219,255,196,186,128,128,128,128,128],[69,46,190,239,201,218,255,228,128,128,128]],[[1,191,251,255,255,128,128,128,128,128,128],[223,165,249,255,213,255,128,128,128,128,128],[141,124,248,255,255,128,128,128,128,128,128]],[[1,16,248,255,255,128,128,128,128,128,128],[190,36,230,255,236,255,128,128,128,128,128],[149,1,255,128,128,128,128,128,128,128,128]],[[1,226,255,128,128,128,128,128,128,128,128],[247,192,255,128,128,128,128,128,128,128,128],[240,128,255,128,128,128,128,128,128,128,128]],[[1,134,252,255,255,128,128,128,128,128,128],[213,62,250,255,255,128,128,128,128,128,128],[55,93,255,128,128,128,128,128,128,128,128]],[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]]],[[[202,24,213,235,186,191,220,160,240,175,255],[126,38,182,232,169,184,228,174,255,187,128],[61,46,138,219,151,178,240,170,255,216,128]],[[1,112,230,250,199,191,247,159,255,255,128],[166,109,228,252,211,215,255,174,128,128,128],[39,77,162,232,172,180,245,178,255,255,128]],[[1,52,220,246,198,199,249,220,255,255,128],[124,74,191,243,183,193,250,221,255,255,128],[24,71,130,219,154,170,243,182,255,255,128]],[[1,182,225,249,219,240,255,224,128,128,128],[149,150,226,252,216,205,255,171,128,128,128],[28,108,170,242,183,194,254,223,255,255,128]],[[1,81,230,252,204,203,255,192,128,128,128],[123,102,209,247,188,196,255,233,128,128,128],[20,95,153,243,164,173,255,203,128,128,128]],[[1,222,248,255,216,213,128,128,128,128,128],[168,175,246,252,235,205,255,255,128,128,128],[47,116,215,255,211,212,255,255,128,128,128]],[[1,121,236,253,212,214,255,255,128,128,128],[141,84,213,252,201,202,255,219,128,128,128],[42,80,160,240,162,185,255,205,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[244,1,255,128,128,128,128,128,128,128,128],[238,1,255,128,128,128,128,128,128,128,128]]]],ci=[[[231,120,48,89,115,113,120,152,112],[152,179,64,126,170,118,46,70,95],[175,69,143,80,85,82,72,155,103],[56,58,10,171,218,189,17,13,152],[114,26,17,163,44,195,21,10,173],[121,24,80,195,26,62,44,64,85],[144,71,10,38,171,213,144,34,26],[170,46,55,19,136,160,33,206,71],[63,20,8,114,114,208,12,9,226],[81,40,11,96,182,84,29,16,36]],[[134,183,89,137,98,101,106,165,148],[72,187,100,130,157,111,32,75,80],[66,102,167,99,74,62,40,234,128],[41,53,9,178,241,141,26,8,107],[74,43,26,146,73,166,49,23,157],[65,38,105,160,51,52,31,115,128],[104,79,12,27,217,255,87,17,7],[87,68,71,44,114,51,15,186,23],[47,41,14,110,182,183,21,17,194],[66,45,25,102,197,189,23,18,22]],[[88,88,147,150,42,46,45,196,205],[43,97,183,117,85,38,35,179,61],[39,53,200,87,26,21,43,232,171],[56,34,51,104,114,102,29,93,77],[39,28,85,171,58,165,90,98,64],[34,22,116,206,23,34,43,166,73],[107,54,32,26,51,1,81,43,31],[68,25,106,22,64,171,36,225,114],[34,19,21,102,132,188,16,76,124],[62,18,78,95,85,57,50,48,51]],[[193,101,35,159,215,111,89,46,111],[60,148,31,172,219,228,21,18,111],[112,113,77,85,179,255,38,120,114],[40,42,1,196,245,209,10,25,109],[88,43,29,140,166,213,37,43,154],[61,63,30,155,67,45,68,1,209],[100,80,8,43,154,1,51,26,71],[142,78,78,16,255,128,34,197,171],[41,40,5,102,211,183,4,1,221],[51,50,17,168,209,192,23,25,82]],[[138,31,36,171,27,166,38,44,229],[67,87,58,169,82,115,26,59,179],[63,59,90,180,59,166,93,73,154],[40,40,21,116,143,209,34,39,175],[47,15,16,183,34,223,49,45,183],[46,17,33,183,6,98,15,32,183],[57,46,22,24,128,1,54,17,37],[65,32,73,115,28,128,23,128,205],[40,3,9,115,51,192,18,6,223],[87,37,9,115,59,77,64,21,47]],[[104,55,44,218,9,54,53,130,226],[64,90,70,205,40,41,23,26,57],[54,57,112,184,5,41,38,166,213],[30,34,26,133,152,116,10,32,134],[39,19,53,221,26,114,32,73,255],[31,9,65,234,2,15,1,118,73],[75,32,12,51,192,255,160,43,51],[88,31,35,67,102,85,55,186,85],[56,21,23,111,59,205,45,37,192],[55,38,70,124,73,102,1,34,98]],[[125,98,42,88,104,85,117,175,82],[95,84,53,89,128,100,113,101,45],[75,79,123,47,51,128,81,171,1],[57,17,5,71,102,57,53,41,49],[38,33,13,121,57,73,26,1,85],[41,10,67,138,77,110,90,47,114],[115,21,2,10,102,255,166,23,6],[101,29,16,10,85,128,101,196,26],[57,18,10,102,102,213,34,20,43],[117,20,15,36,163,128,68,1,26]],[[102,61,71,37,34,53,31,243,192],[69,60,71,38,73,119,28,222,37],[68,45,128,34,1,47,11,245,171],[62,17,19,70,146,85,55,62,70],[37,43,37,154,100,163,85,160,1],[63,9,92,136,28,64,32,201,85],[75,15,9,9,64,255,184,119,16],[86,6,28,5,64,255,25,248,1],[56,8,17,132,137,255,55,116,128],[58,15,20,82,135,57,26,121,40]],[[164,50,31,137,154,133,25,35,218],[51,103,44,131,131,123,31,6,158],[86,40,64,135,148,224,45,183,128],[22,26,17,131,240,154,14,1,209],[45,16,21,91,64,222,7,1,197],[56,21,39,155,60,138,23,102,213],[83,12,13,54,192,255,68,47,28],[85,26,85,85,128,128,32,146,171],[18,11,7,63,144,171,4,4,246],[35,27,10,146,174,171,12,26,128]],[[190,80,35,99,180,80,126,54,45],[85,126,47,87,176,51,41,20,32],[101,75,128,139,118,146,116,128,85],[56,41,15,176,236,85,37,9,62],[71,30,17,119,118,255,17,18,138],[101,38,60,138,55,70,43,26,142],[146,36,19,30,171,255,97,27,20],[138,45,61,62,219,1,81,188,64],[32,41,20,117,151,142,20,21,163],[112,19,12,61,195,128,48,4,24]]],ui=[[[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[176,246,255,255,255,255,255,255,255,255,255],[223,241,252,255,255,255,255,255,255,255,255],[249,253,253,255,255,255,255,255,255,255,255]],[[255,244,252,255,255,255,255,255,255,255,255],[234,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255]],[[255,246,254,255,255,255,255,255,255,255,255],[239,253,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[251,255,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[251,254,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,254,253,255,254,255,255,255,255,255,255],[250,255,254,255,254,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[217,255,255,255,255,255,255,255,255,255,255],[225,252,241,253,255,255,254,255,255,255,255],[234,250,241,250,253,255,253,254,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[223,254,254,255,255,255,255,255,255,255,255],[238,253,254,254,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[249,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,255,255,255,255,255,255,255,255,255],[247,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[252,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[186,251,250,255,255,255,255,255,255,255,255],[234,251,244,254,255,255,255,255,255,255,255],[251,251,243,253,254,255,254,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[236,253,254,255,255,255,255,255,255,255,255],[251,253,253,254,254,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[254,254,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[254,254,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[248,255,255,255,255,255,255,255,255,255,255],[250,254,252,254,255,255,255,255,255,255,255],[248,254,249,253,255,255,255,255,255,255,255]],[[255,253,253,255,255,255,255,255,255,255,255],[246,253,253,255,255,255,255,255,255,255,255],[252,254,251,254,254,255,255,255,255,255,255]],[[255,254,252,255,255,255,255,255,255,255,255],[248,254,253,255,255,255,255,255,255,255,255],[253,255,254,254,255,255,255,255,255,255,255]],[[255,251,254,255,255,255,255,255,255,255,255],[245,251,254,255,255,255,255,255,255,255,255],[253,253,254,255,255,255,255,255,255,255,255]],[[255,251,253,255,255,255,255,255,255,255,255],[252,253,254,255,255,255,255,255,255,255,255],[255,254,255,255,255,255,255,255,255,255,255]],[[255,252,255,255,255,255,255,255,255,255,255],[249,255,254,255,255,255,255,255,255,255,255],[255,255,254,255,255,255,255,255,255,255,255]],[[255,255,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]]],hi=[0,1,2,3,6,4,5,6,6,6,6,6,6,6,6,7,0],li=[],fi=[],di=[],pi=1,gi=2,mi=[],vi=[];vr("UpsampleRgbLinePair",Ar,3),vr("UpsampleBgrLinePair",xr,3),vr("UpsampleRgbaLinePair",Ir,4),vr("UpsampleBgraLinePair",kr,4),vr("UpsampleArgbLinePair",Pr,4),vr("UpsampleRgba4444LinePair",_r,2),vr("UpsampleRgb565LinePair",Sr,2);var bi=t.UpsampleRgbLinePair,yi=t.UpsampleBgrLinePair,wi=t.UpsampleRgbaLinePair,Ni=t.UpsampleBgraLinePair,Li=t.UpsampleArgbLinePair,Ai=t.UpsampleRgba4444LinePair,xi=t.UpsampleRgb565LinePair,Si=16,_i=1<<Si-1,Pi=-227,ki=482,Ii=6,Fi=(256<<Ii)-1,Ci=0,ji=a(256),Oi=a(256),Bi=a(256),Mi=a(256),Ei=a(ki-Pi),qi=a(ki-Pi);Fr("YuvToRgbRow",Ar,3),Fr("YuvToBgrRow",xr,3),Fr("YuvToRgbaRow",Ir,4),Fr("YuvToBgraRow",kr,4),Fr("YuvToArgbRow",Pr,4),Fr("YuvToRgba4444Row",_r,2),Fr("YuvToRgb565Row",Sr,2);var Di=[0,4,8,12,128,132,136,140,256,260,264,268,384,388,392,396],Ri=[0,2,8],Ti=[8,7,6,4,4,2,2,2,1,1,1,1],Ui=1;this.WebPDecodeRGBA=function(t,r,n,i,a){var o=qn,s=new rr,c=new ot;s.ba=c,c.S=o,c.width=[c.width],c.height=[c.height];var u=c.width,h=c.height,l=new st;if(null==l||null==t)var f=2;else e(null!=l),f=Br(t,r,n,l.width,l.height,l.Pd,l.Qd,l.format,null);if(0!=f?u=0:(null!=u&&(u[0]=l.width[0]),null!=h&&(h[0]=l.height[0]),u=1),u){c.width=c.width[0],c.height=c.height[0],null!=i&&(i[0]=c.width),null!=a&&(a[0]=c.height);t:{if(i=new Gt,(a=new nr).data=t,a.w=r,a.ha=n,a.kd=1,r=[0],e(null!=a),(0==(t=Br(a.data,a.w,a.ha,null,null,null,r,null,a))||7==t)&&r[0]&&(t=4),0==(r=t)){if(e(null!=s),i.data=a.data,i.w=a.w+a.offset,i.ha=a.ha-a.offset,i.put=dt,i.ac=ft,i.bc=pt,i.ma=s,a.xa){if(null==(t=kt())){s=1;break t}if(function(t,r){var n=[0],i=[0],a=[0];e:for(;;){if(null==t)return 0;if(null==r)return t.a=2,0;if(t.l=r,t.a=0,v(t.m,r.data,r.w,r.ha),!gt(t.m,n,i,a)){t.a=3;break e}if(t.xb=gi,r.width=n[0],r.height=i[0],!It(n[0],i[0],1,t,null))break e;return 1}return e(0!=t.a),0}(t,i)){if(i=0==(r=qr(i.width,i.height,s.Oa,s.ba))){e:{i=t;r:for(;;){if(null==i){i=0;break e}if(e(null!=i.s.yc),e(null!=i.s.Ya),e(0<i.s.Wb),e(null!=(n=i.l)),e(null!=(a=n.ma)),0!=i.xb){if(i.ca=a.ba,i.tb=a.tb,e(null!=i.ca),!Mr(a.Oa,n,Rn)){i.a=2;break r}if(!Ft(i,n.width))break r;if(n.da)break r;if((n.da||nt(i.ca.S))&&mr(),11>i.ca.S||(alert("todo:WebPInitConvertARGBToYUV"),null!=i.ca.f.kb.F&&mr()),i.Pb&&0<i.s.ua&&null==i.s.vb.X&&!O(i.s.vb,i.s.Wa.Xa)){i.a=1;break r}i.xb=0}if(!_t(i,i.V,i.Ba,i.c,i.i,n.o,Lt))break r;a.Dc=i.Ma,i=1;break e}e(0!=i.a),i=0}i=!i}i&&(r=t.a)}else r=t.a}else{if(null==(t=new Yt)){s=1;break t}if(t.Fa=a.na,t.P=a.P,t.qc=a.Sa,Kt(t,i)){if(0==(r=qr(i.width,i.height,s.Oa,s.ba))){if(t.Aa=0,n=s.Oa,e(null!=(a=t)),null!=n){if(0<(u=0>(u=n.Md)?0:100<u?255:255*u/100)){for(h=l=0;4>h;++h)12>(f=a.pb[h]).lc&&(f.ia=u*Ti[0>f.lc?0:f.lc]>>3),l|=f.ia;l&&(alert("todo:VP8InitRandom"),a.ia=1)}a.Ga=n.Id,100<a.Ga?a.Ga=100:0>a.Ga&&(a.Ga=0)}Qt(t,i)||(r=t.a)}}else r=t.a}0==r&&null!=s.Oa&&s.Oa.fd&&(r=Er(s.ba))}s=r}o=0!=s?null:11>o?c.f.RGBA.eb:c.f.kb.y}else o=null;return o};var zi=[3,4,3,4,4,2,2,4,4,4,2,1,1]};function u(t,e){for(var r="",n=0;n<4;n++)r+=String.fromCharCode(t[e++]);return r}function h(t,e){return(t[e+0]<<0|t[e+1]<<8|t[e+2]<<16)>>>0}function l(t,e){return(t[e+0]<<0|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}new c;var f=[0],d=[0],p=[],g=new c,m=t,v=function(t,e){var r={},n=0,i=!1,a=0,o=0;if(r.frames=[],!
/** @license
   * Copyright (c) 2017 Dominik Homberger
  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  https://webpjs.appspot.com
  WebPRiffParser dominikhlbg@gmail.com
  */
function(t,e,r,n){for(var i=0;i<n;i++)if(t[e+i]!=r.charCodeAt(i))return!0;return!1}(t,e,"RIFF",4)){var s,c;l(t,e+=4);for(e+=8;e<t.length;){var f=u(t,e),d=l(t,e+=4);e+=4;var p=d+(1&d);switch(f){case"VP8 ":case"VP8L":void 0===r.frames[n]&&(r.frames[n]={});(v=r.frames[n]).src_off=i?o:e-8,v.src_size=a+d+8,n++,i&&(i=!1,a=0,o=0);break;case"VP8X":(v=r.header={}).feature_flags=t[e];var g=e+4;v.canvas_width=1+h(t,g);g+=3;v.canvas_height=1+h(t,g);g+=3;break;case"ALPH":i=!0,a=p+8,o=e-8;break;case"ANIM":(v=r.header).bgcolor=l(t,e);g=e+4;v.loop_count=(s=t)[(c=g)+0]<<0|s[c+1]<<8;g+=2;break;case"ANMF":var m,v;(v=r.frames[n]={}).offset_x=2*h(t,e),e+=3,v.offset_y=2*h(t,e),e+=3,v.width=1+h(t,e),e+=3,v.height=1+h(t,e),e+=3,v.duration=h(t,e),e+=3,m=t[e++],v.dispose=1&m,v.blend=m>>1&1}"ANMF"!=f&&(e+=p)}return r}}(m,0);v.response=m,v.rgbaoutput=!0,v.dataurl=!1;var b=v.header?v.header:null,y=v.frames?v.frames:null;if(b){b.loop_counter=b.loop_count,f=[b.canvas_height],d=[b.canvas_width];for(var w=0;w<y.length&&0!=y[w].blend;w++);}var N=y[0],L=g.WebPDecodeRGBA(m,N.src_off,N.src_size,d,f);N.rgba=L,N.imgwidth=d[0],N.imgheight=f[0];for(var A=0;A<d[0]*f[0]*4;A++)p[A]=L[A];return this.width=d,this.height=f,this.data=p,this}!function(t){var r=function(){return"function"==typeof fflate__WEBPACK_IMPORTED_MODULE_1__.zlibSync},n=function(r,n,a,h){var l=4,f=s;switch(h){case t.image_compression.FAST:l=1,f=o;break;case t.image_compression.MEDIUM:l=6,f=c;break;case t.image_compression.SLOW:l=9,f=u}r=i(r,n,a,f);var d=(0,fflate__WEBPACK_IMPORTED_MODULE_1__.zlibSync)(r,{level:l});return t.__addimage__.arrayBufferToBinaryString(d)},i=function(t,e,r,n){for(var i,a,o,s=t.length/e,c=new Uint8Array(t.length+s),u=l(),h=0;h<s;h+=1){if(o=h*e,i=t.subarray(o,o+e),n)c.set(n(i,r,a),o+h);else{for(var d,p=u.length,g=[];d<p;d+=1)g[d]=u[d](i,r,a);var m=f(g.concat());c.set(g[m],o+h)}a=i}return c},a=function(t){var e=Array.apply([],t);return e.unshift(0),e},o=function(t,e){var r,n=[],i=t.length;n[0]=1;for(var a=0;a<i;a+=1)r=t[a-e]||0,n[a+1]=t[a]-r+256&255;return n},s=function(t,e,r){var n,i=[],a=t.length;i[0]=2;for(var o=0;o<a;o+=1)n=r&&r[o]||0,i[o+1]=t[o]-n+256&255;return i},c=function(t,e,r){var n,i,a=[],o=t.length;a[0]=3;for(var s=0;s<o;s+=1)n=t[s-e]||0,i=r&&r[s]||0,a[s+1]=t[s]+256-(n+i>>>1)&255;return a},u=function(t,e,r){var n,i,a,o,s=[],c=t.length;s[0]=4;for(var u=0;u<c;u+=1)n=t[u-e]||0,i=r&&r[u]||0,a=r&&r[u-e]||0,o=h(n,i,a),s[u+1]=t[u]-o+256&255;return s},h=function(t,e,r){if(t===e&&e===r)return t;var n=Math.abs(e-r),i=Math.abs(t-r),a=Math.abs(t+e-r-r);return n<=i&&n<=a?t:i<=a?e:r},l=function(){return[a,o,s,c,u]},f=function(t){var e=t.map((function(t){return t.reduce((function(t,e){return t+Math.abs(e)}),0)}));return e.indexOf(Math.min.apply(null,e))};t.processPNG=function(e,i,a,o){var s,c,u,h,l,f,d,p,g,m,v,b,y,w,N,L=this.decode.FLATE_DECODE,A="";if(this.__addimage__.isArrayBuffer(e)&&(e=new Uint8Array(e)),this.__addimage__.isArrayBufferView(e)){if(e=(u=new Kt(e)).imgData,c=u.bits,s=u.colorSpace,l=u.colors,-1!==[4,6].indexOf(u.colorType)){if(8===u.bits){g=(p=32==u.pixelBitlength?new Uint32Array(u.decodePixels().buffer):16==u.pixelBitlength?new Uint16Array(u.decodePixels().buffer):new Uint8Array(u.decodePixels().buffer)).length,v=new Uint8Array(g*u.colors),m=new Uint8Array(g);var x,S=u.pixelBitlength-u.bits;for(w=0,N=0;w<g;w++){for(y=p[w],x=0;x<S;)v[N++]=y>>>x&255,x+=u.bits;m[w]=y>>>x&255}}if(16===u.bits){g=(p=new Uint32Array(u.decodePixels().buffer)).length,v=new Uint8Array(g*(32/u.pixelBitlength)*u.colors),m=new Uint8Array(g*(32/u.pixelBitlength)),b=u.colors>1,w=0,N=0;for(var _=0;w<g;)y=p[w++],v[N++]=y>>>0&255,b&&(v[N++]=y>>>16&255,y=p[w++],v[N++]=y>>>0&255),m[_++]=y>>>16&255;c=8}o!==t.image_compression.NONE&&r()?(e=n(v,u.width*u.colors,u.colors,o),d=n(m,u.width,1,o)):(e=v,d=m,L=void 0)}if(3===u.colorType&&(s=this.color_spaces.INDEXED,f=u.palette,u.transparency.indexed)){var P=u.transparency.indexed,k=0;for(w=0,g=P.length;w<g;++w)k+=P[w];if((k/=255)===g-1&&-1!==P.indexOf(0))h=[P.indexOf(0)];else if(k!==g){for(p=u.decodePixels(),m=new Uint8Array(p.length),w=0,g=p.length;w<g;w++)m[w]=P[p[w]];d=n(m,u.width,1)}}var I=function(e){var r;switch(e){case t.image_compression.FAST:r=11;break;case t.image_compression.MEDIUM:r=13;break;case t.image_compression.SLOW:r=14;break;default:r=12}return r}(o);return L===this.decode.FLATE_DECODE&&(A="/Predictor "+I+" "),A+="/Colors "+l+" /BitsPerComponent "+c+" /Columns "+u.width,(this.__addimage__.isArrayBuffer(e)||this.__addimage__.isArrayBufferView(e))&&(e=this.__addimage__.arrayBufferToBinaryString(e)),(d&&this.__addimage__.isArrayBuffer(d)||this.__addimage__.isArrayBufferView(d))&&(d=this.__addimage__.arrayBufferToBinaryString(d)),{alias:a,data:e,index:i,filter:L,decodeParameters:A,transparency:h,palette:f,sMask:d,predictor:I,width:u.width,height:u.height,bitsPerComponent:c,colorSpace:s}}}}(E.API),function(t){t.processGIF89A=function(e,r,n,i){var a=new Zt(e),o=a.width,s=a.height,c=[];a.decodeAndBlitFrameRGBA(0,c);var u={data:c,width:o,height:s},h=new Qt(100).encode(u,100);return t.processJPEG.call(this,h,r,n,i)},t.processGIF87A=t.processGIF89A}(E.API),te.prototype.parseHeader=function(){if(this.fileSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.reserved=this.datav.getUint32(this.pos,!0),this.pos+=4,this.offset=this.datav.getUint32(this.pos,!0),this.pos+=4,this.headerSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.width=this.datav.getUint32(this.pos,!0),this.pos+=4,this.height=this.datav.getInt32(this.pos,!0),this.pos+=4,this.planes=this.datav.getUint16(this.pos,!0),this.pos+=2,this.bitPP=this.datav.getUint16(this.pos,!0),this.pos+=2,this.compress=this.datav.getUint32(this.pos,!0),this.pos+=4,this.rawSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.hr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.vr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.colors=this.datav.getUint32(this.pos,!0),this.pos+=4,this.importantColors=this.datav.getUint32(this.pos,!0),this.pos+=4,16===this.bitPP&&this.is_with_alpha&&(this.bitPP=15),this.bitPP<15){var t=0===this.colors?1<<this.bitPP:this.colors;this.palette=new Array(t);for(var e=0;e<t;e++){var r=this.datav.getUint8(this.pos++,!0),n=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0);this.palette[e]={red:i,green:n,blue:r,quad:a}}}this.height<0&&(this.height*=-1,this.bottom_up=!1)},te.prototype.parseBGR=function(){this.pos=this.offset;try{var t="bit"+this.bitPP,e=this.width*this.height*4;this.data=new Uint8Array(e),this[t]()}catch(t){a.log("bit decode error:"+t)}},te.prototype.bit1=function(){var t,e=Math.ceil(this.width/8),r=e%4;for(t=this.height-1;t>=0;t--){for(var n=this.bottom_up?t:this.height-1-t,i=0;i<e;i++)for(var a=this.datav.getUint8(this.pos++,!0),o=n*this.width*4+8*i*4,s=0;s<8&&8*i+s<this.width;s++){var c=this.palette[a>>7-s&1];this.data[o+4*s]=c.blue,this.data[o+4*s+1]=c.green,this.data[o+4*s+2]=c.red,this.data[o+4*s+3]=255}0!==r&&(this.pos+=4-r)}},te.prototype.bit4=function(){for(var t=Math.ceil(this.width/2),e=t%4,r=this.height-1;r>=0;r--){for(var n=this.bottom_up?r:this.height-1-r,i=0;i<t;i++){var a=this.datav.getUint8(this.pos++,!0),o=n*this.width*4+2*i*4,s=a>>4,c=15&a,u=this.palette[s];if(this.data[o]=u.blue,this.data[o+1]=u.green,this.data[o+2]=u.red,this.data[o+3]=255,2*i+1>=this.width)break;u=this.palette[c],this.data[o+4]=u.blue,this.data[o+4+1]=u.green,this.data[o+4+2]=u.red,this.data[o+4+3]=255}0!==e&&(this.pos+=4-e)}},te.prototype.bit8=function(){for(var t=this.width%4,e=this.height-1;e>=0;e--){for(var r=this.bottom_up?e:this.height-1-e,n=0;n<this.width;n++){var i=this.datav.getUint8(this.pos++,!0),a=r*this.width*4+4*n;if(i<this.palette.length){var o=this.palette[i];this.data[a]=o.red,this.data[a+1]=o.green,this.data[a+2]=o.blue,this.data[a+3]=255}else this.data[a]=255,this.data[a+1]=255,this.data[a+2]=255,this.data[a+3]=255}0!==t&&(this.pos+=4-t)}},te.prototype.bit15=function(){for(var t=this.width%3,e=parseInt("11111",2),r=this.height-1;r>=0;r--){for(var n=this.bottom_up?r:this.height-1-r,i=0;i<this.width;i++){var a=this.datav.getUint16(this.pos,!0);this.pos+=2;var o=(a&e)/e*255|0,s=(a>>5&e)/e*255|0,c=(a>>10&e)/e*255|0,u=a>>15?255:0,h=n*this.width*4+4*i;this.data[h]=c,this.data[h+1]=s,this.data[h+2]=o,this.data[h+3]=u}this.pos+=t}},te.prototype.bit16=function(){for(var t=this.width%3,e=parseInt("11111",2),r=parseInt("111111",2),n=this.height-1;n>=0;n--){for(var i=this.bottom_up?n:this.height-1-n,a=0;a<this.width;a++){var o=this.datav.getUint16(this.pos,!0);this.pos+=2;var s=(o&e)/e*255|0,c=(o>>5&r)/r*255|0,u=(o>>11)/e*255|0,h=i*this.width*4+4*a;this.data[h]=u,this.data[h+1]=c,this.data[h+2]=s,this.data[h+3]=255}this.pos+=t}},te.prototype.bit24=function(){for(var t=this.height-1;t>=0;t--){for(var e=this.bottom_up?t:this.height-1-t,r=0;r<this.width;r++){var n=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0),o=e*this.width*4+4*r;this.data[o]=a,this.data[o+1]=i,this.data[o+2]=n,this.data[o+3]=255}this.pos+=this.width%4}},te.prototype.bit32=function(){for(var t=this.height-1;t>=0;t--)for(var e=this.bottom_up?t:this.height-1-t,r=0;r<this.width;r++){var n=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=e*this.width*4+4*r;this.data[s]=a,this.data[s+1]=i,this.data[s+2]=n,this.data[s+3]=o}},te.prototype.getData=function(){return this.data},
/**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){t.processBMP=function(e,r,n,i){var a=new te(e,!1),o=a.width,s=a.height,c={data:a.getData(),width:o,height:s},u=new Qt(100).encode(c,100);return t.processJPEG.call(this,u,r,n,i)}}(E.API),ee.prototype.getData=function(){return this.data},
/**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){t.processWEBP=function(e,r,n,i){var a=new ee(e,!1),o=a.width,s=a.height,c={data:a.getData(),width:o,height:s},u=new Qt(100).encode(c,100);return t.processJPEG.call(this,u,r,n,i)}}(E.API),E.API.processRGBA=function(t,e,r){for(var n=t.data,i=n.length,a=new Uint8Array(i/4*3),o=new Uint8Array(i/4),s=0,c=0,u=0;u<i;u+=4){var h=n[u],l=n[u+1],f=n[u+2],d=n[u+3];a[s++]=h,a[s++]=l,a[s++]=f,o[c++]=d}var p=this.__addimage__.arrayBufferToBinaryString(a);return{alpha:this.__addimage__.arrayBufferToBinaryString(o),data:p,index:e,alias:r,colorSpace:"DeviceRGB",bitsPerComponent:8,width:t.width,height:t.height}},E.API.setLanguage=function(t){return void 0===this.internal.languageSettings&&(this.internal.languageSettings={},this.internal.languageSettings.isSubscribed=!1),void 0!=={af:"Afrikaans",sq:"Albanian",ar:"Arabic (Standard)","ar-DZ":"Arabic (Algeria)","ar-BH":"Arabic (Bahrain)","ar-EG":"Arabic (Egypt)","ar-IQ":"Arabic (Iraq)","ar-JO":"Arabic (Jordan)","ar-KW":"Arabic (Kuwait)","ar-LB":"Arabic (Lebanon)","ar-LY":"Arabic (Libya)","ar-MA":"Arabic (Morocco)","ar-OM":"Arabic (Oman)","ar-QA":"Arabic (Qatar)","ar-SA":"Arabic (Saudi Arabia)","ar-SY":"Arabic (Syria)","ar-TN":"Arabic (Tunisia)","ar-AE":"Arabic (U.A.E.)","ar-YE":"Arabic (Yemen)",an:"Aragonese",hy:"Armenian",as:"Assamese",ast:"Asturian",az:"Azerbaijani",eu:"Basque",be:"Belarusian",bn:"Bengali",bs:"Bosnian",br:"Breton",bg:"Bulgarian",my:"Burmese",ca:"Catalan",ch:"Chamorro",ce:"Chechen",zh:"Chinese","zh-HK":"Chinese (Hong Kong)","zh-CN":"Chinese (PRC)","zh-SG":"Chinese (Singapore)","zh-TW":"Chinese (Taiwan)",cv:"Chuvash",co:"Corsican",cr:"Cree",hr:"Croatian",cs:"Czech",da:"Danish",nl:"Dutch (Standard)","nl-BE":"Dutch (Belgian)",en:"English","en-AU":"English (Australia)","en-BZ":"English (Belize)","en-CA":"English (Canada)","en-IE":"English (Ireland)","en-JM":"English (Jamaica)","en-NZ":"English (New Zealand)","en-PH":"English (Philippines)","en-ZA":"English (South Africa)","en-TT":"English (Trinidad & Tobago)","en-GB":"English (United Kingdom)","en-US":"English (United States)","en-ZW":"English (Zimbabwe)",eo:"Esperanto",et:"Estonian",fo:"Faeroese",fj:"Fijian",fi:"Finnish",fr:"French (Standard)","fr-BE":"French (Belgium)","fr-CA":"French (Canada)","fr-FR":"French (France)","fr-LU":"French (Luxembourg)","fr-MC":"French (Monaco)","fr-CH":"French (Switzerland)",fy:"Frisian",fur:"Friulian",gd:"Gaelic (Scots)","gd-IE":"Gaelic (Irish)",gl:"Galacian",ka:"Georgian",de:"German (Standard)","de-AT":"German (Austria)","de-DE":"German (Germany)","de-LI":"German (Liechtenstein)","de-LU":"German (Luxembourg)","de-CH":"German (Switzerland)",el:"Greek",gu:"Gujurati",ht:"Haitian",he:"Hebrew",hi:"Hindi",hu:"Hungarian",is:"Icelandic",id:"Indonesian",iu:"Inuktitut",ga:"Irish",it:"Italian (Standard)","it-CH":"Italian (Switzerland)",ja:"Japanese",kn:"Kannada",ks:"Kashmiri",kk:"Kazakh",km:"Khmer",ky:"Kirghiz",tlh:"Klingon",ko:"Korean","ko-KP":"Korean (North Korea)","ko-KR":"Korean (South Korea)",la:"Latin",lv:"Latvian",lt:"Lithuanian",lb:"Luxembourgish",mk:"North Macedonia",ms:"Malay",ml:"Malayalam",mt:"Maltese",mi:"Maori",mr:"Marathi",mo:"Moldavian",nv:"Navajo",ng:"Ndonga",ne:"Nepali",no:"Norwegian",nb:"Norwegian (Bokmal)",nn:"Norwegian (Nynorsk)",oc:"Occitan",or:"Oriya",om:"Oromo",fa:"Persian","fa-IR":"Persian/Iran",pl:"Polish",pt:"Portuguese","pt-BR":"Portuguese (Brazil)",pa:"Punjabi","pa-IN":"Punjabi (India)","pa-PK":"Punjabi (Pakistan)",qu:"Quechua",rm:"Rhaeto-Romanic",ro:"Romanian","ro-MO":"Romanian (Moldavia)",ru:"Russian","ru-MO":"Russian (Moldavia)",sz:"Sami (Lappish)",sg:"Sango",sa:"Sanskrit",sc:"Sardinian",sd:"Sindhi",si:"Singhalese",sr:"Serbian",sk:"Slovak",sl:"Slovenian",so:"Somani",sb:"Sorbian",es:"Spanish","es-AR":"Spanish (Argentina)","es-BO":"Spanish (Bolivia)","es-CL":"Spanish (Chile)","es-CO":"Spanish (Colombia)","es-CR":"Spanish (Costa Rica)","es-DO":"Spanish (Dominican Republic)","es-EC":"Spanish (Ecuador)","es-SV":"Spanish (El Salvador)","es-GT":"Spanish (Guatemala)","es-HN":"Spanish (Honduras)","es-MX":"Spanish (Mexico)","es-NI":"Spanish (Nicaragua)","es-PA":"Spanish (Panama)","es-PY":"Spanish (Paraguay)","es-PE":"Spanish (Peru)","es-PR":"Spanish (Puerto Rico)","es-ES":"Spanish (Spain)","es-UY":"Spanish (Uruguay)","es-VE":"Spanish (Venezuela)",sx:"Sutu",sw:"Swahili",sv:"Swedish","sv-FI":"Swedish (Finland)","sv-SV":"Swedish (Sweden)",ta:"Tamil",tt:"Tatar",te:"Teluga",th:"Thai",tig:"Tigre",ts:"Tsonga",tn:"Tswana",tr:"Turkish",tk:"Turkmen",uk:"Ukrainian",hsb:"Upper Sorbian",ur:"Urdu",ve:"Venda",vi:"Vietnamese",vo:"Volapuk",wa:"Walloon",cy:"Welsh",xh:"Xhosa",ji:"Yiddish",zu:"Zulu"}[t]&&(this.internal.languageSettings.languageCode=t,!1===this.internal.languageSettings.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){this.internal.write("/Lang ("+this.internal.languageSettings.languageCode+")")})),this.internal.languageSettings.isSubscribed=!0)),this},Vt=E.API,Gt=Vt.getCharWidthsArray=function(e,r){var n,i,a=(r=r||{}).font||this.internal.getFont(),o=r.fontSize||this.internal.getFontSize(),s=r.charSpace||this.internal.getCharSpace(),c=r.widths?r.widths:a.metadata.Unicode.widths,u=c.fof?c.fof:1,h=r.kerning?r.kerning:a.metadata.Unicode.kerning,l=h.fof?h.fof:1,f=!1!==r.doKerning,d=0,p=e.length,g=0,m=c[0]||u,v=[];for(n=0;n<p;n++)i=e.charCodeAt(n),"function"==typeof a.metadata.widthOfString?v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i))+s*(1e3/o)||0)/1e3):(d=f&&"object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(h[i])&&!isNaN(parseInt(h[i][g],10))?h[i][g]/l:0,v.push((c[i]||m)/u+d)),g=i;return v},Yt=Vt.getStringUnitWidth=function(t,e){var r=(e=e||{}).fontSize||this.internal.getFontSize(),n=e.font||this.internal.getFont(),i=e.charSpace||this.internal.getCharSpace();return Vt.processArabic&&(t=Vt.processArabic(t)),"function"==typeof n.metadata.widthOfString?n.metadata.widthOfString(t,r,i)/r:Gt.apply(this,arguments).reduce((function(t,e){return t+e}),0)},Jt=function(t,e,r,n){for(var i=[],a=0,o=t.length,s=0;a!==o&&s+e[a]<r;)s+=e[a],a++;i.push(t.slice(0,a));var c=a;for(s=0;a!==o;)s+e[a]>n&&(i.push(t.slice(c,a)),s=0,c=a),s+=e[a],a++;return c!==a&&i.push(t.slice(c,a)),i},Xt=function(t,e,r){r||(r={});var n,i,a,o,s,c,u,h=[],l=[h],f=r.textIndent||0,d=0,p=0,g=t.split(" "),m=Gt.apply(this,[" ",r])[0];if(c=-1===r.lineIndent?g[0].length+2:r.lineIndent||0){var v=Array(c).join(" "),b=[];g.map((function(t){(t=t.split(/\s*\n/)).length>1?b=b.concat(t.map((function(t,e){return(e&&t.length?"\n":"")+t}))):b.push(t[0])})),g=b,c=Yt.apply(this,[v,r])}for(a=0,o=g.length;a<o;a++){var y=0;if(n=g[a],c&&"\n"==n[0]&&(n=n.substr(1),y=1),f+d+(p=(i=Gt.apply(this,[n,r])).reduce((function(t,e){return t+e}),0))>e||y){if(p>e){for(s=Jt.apply(this,[n,i,e-(f+d),e]),h.push(s.shift()),h=[s.pop()];s.length;)l.push([s.shift()]);p=i.slice(n.length-(h[0]?h[0].length:0)).reduce((function(t,e){return t+e}),0)}else h=[n];l.push(h),f=p+c,d=m}else h.push(n),f+=d+p,d=m}return u=c?function(t,e){return(e?v:"")+t.join(" ")}:function(t){return t.join(" ")},l.map(u)},Vt.splitTextToSize=function(t,e,r){var n,i=(r=r||{}).fontSize||this.internal.getFontSize(),a=function(t){if(t.widths&&t.kerning)return{widths:t.widths,kerning:t.kerning};var e=this.internal.getFont(t.fontName,t.fontStyle);return e.metadata.Unicode?{widths:e.metadata.Unicode.widths||{0:1},kerning:e.metadata.Unicode.kerning||{}}:{font:e.metadata,fontSize:this.internal.getFontSize(),charSpace:this.internal.getCharSpace()}}.call(this,r);n=Array.isArray(t)?t:String(t).split(/\r?\n/);var o=1*this.internal.scaleFactor*e/i;a.textIndent=r.textIndent?1*r.textIndent*this.internal.scaleFactor/i:0,a.lineIndent=r.lineIndent;var s,c,u=[];for(s=0,c=n.length;s<c;s++)u=u.concat(Xt.apply(this,[n[s],o,a]));return u},function(e){e.__fontmetrics__=e.__fontmetrics__||{};for(var r="klmnopqrstuvwxyz",n={},i={},a=0;a<r.length;a++)n[r[a]]="0123456789abcdef"[a],i["0123456789abcdef"[a]]=r[a];var o=function(t){return"0x"+parseInt(t,10).toString(16)},s=e.__fontmetrics__.compress=function(e){var r,n,a,c,u=["{"];for(var h in e){if(r=e[h],isNaN(parseInt(h,10))?n="'"+h+"'":(h=parseInt(h,10),n=(n=o(h).slice(2)).slice(0,-1)+i[n.slice(-1)]),"number"==typeof r)r<0?(a=o(r).slice(3),c="-"):(a=o(r).slice(2),c=""),a=c+a.slice(0,-1)+i[a.slice(-1)];else{if("object"!==(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(r))throw new Error("Don't know what to do with value type "+(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(r)+".");a=s(r)}u.push(n+a)}return u.push("}"),u.join("")},c=e.__fontmetrics__.uncompress=function(t){if("string"!=typeof t)throw new Error("Invalid argument passed to uncompress.");for(var e,r,i,a,o={},s=1,c=o,u=[],h="",l="",f=t.length-1,d=1;d<f;d+=1)"'"==(a=t[d])?e?(i=e.join(""),e=void 0):e=[]:e?e.push(a):"{"==a?(u.push([c,i]),c={},i=void 0):"}"==a?((r=u.pop())[0][r[1]]=c,i=void 0,c=r[0]):"-"==a?s=-1:void 0===i?n.hasOwnProperty(a)?(h+=n[a],i=parseInt(h,16)*s,s=1,h=""):h+=a:n.hasOwnProperty(a)?(l+=n[a],c[i]=parseInt(l,16)*s,s=1,i=void 0,l=""):l+=a;return o},u={codePages:["WinAnsiEncoding"],WinAnsiEncoding:c("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")},h={Unicode:{Courier:u,"Courier-Bold":u,"Courier-BoldOblique":u,"Courier-Oblique":u,Helvetica:u,"Helvetica-Bold":u,"Helvetica-BoldOblique":u,"Helvetica-Oblique":u,"Times-Roman":u,"Times-Bold":u,"Times-BoldItalic":u,"Times-Italic":u}},l={Unicode:{"Courier-Oblique":c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-BoldItalic":c("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),"Helvetica-Bold":c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),Courier:c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-BoldOblique":c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Bold":c("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),Symbol:c("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),Helvetica:c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),"Helvetica-BoldOblique":c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),ZapfDingbats:c("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-Bold":c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Italic":c("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),"Times-Roman":c("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),"Helvetica-Oblique":c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")}};e.events.push(["addFont",function(t){var e=t.font,r=l.Unicode[e.postScriptName];r&&(e.metadata.Unicode={},e.metadata.Unicode.widths=r.widths,e.metadata.Unicode.kerning=r.kerning);var n=h.Unicode[e.postScriptName];n&&(e.metadata.Unicode.encoding=n,e.encoding=n.codePages[0])}])}(E.API),
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e=function(t){for(var e=t.length,r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.charCodeAt(n);return r};t.API.events.push(["addFont",function(r){var n=void 0,i=r.font,a=r.instance;if(!i.isStandardFont){if(void 0===a)throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('"+i.postScriptName+"').");if("string"!=typeof(n=!1===a.existsFileInVFS(i.postScriptName)?a.loadFile(i.postScriptName):a.getFileFromVFS(i.postScriptName)))throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('"+i.postScriptName+"').");!function(r,n){n=/^\x00\x01\x00\x00/.test(n)?e(n):e(u(n)),r.metadata=t.API.TTFFont.open(n),r.metadata.Unicode=r.metadata.Unicode||{encoding:{},kerning:{},widths:[]},r.metadata.glyIdsUsed=[0]}(i,n)}}])}(E),
/** @license
 * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function(t){function e(){return(n.canvg?Promise.resolve(n.canvg):__webpack_require__.e(/*! import() */ "vendors-node_modules_canvg_lib_index_es_js").then(__webpack_require__.bind(__webpack_require__, /*! canvg */ "./node_modules/canvg/lib/index.es.js"))).catch((function(t){return Promise.reject(new Error("Could not load canvg: "+t))})).then((function(t){return t.default?t.default:t}))}E.API.addSvgAsImage=function(t,r,n,i,o,s,c,u){if(isNaN(r)||isNaN(n))throw a.error("jsPDF.addSvgAsImage: Invalid coordinates",arguments),new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");if(isNaN(i)||isNaN(o))throw a.error("jsPDF.addSvgAsImage: Invalid measurements",arguments),new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");var h=document.createElement("canvas");h.width=i,h.height=o;var l=h.getContext("2d");l.fillStyle="#fff",l.fillRect(0,0,h.width,h.height);var f={ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0},d=this;return e().then((function(e){return e.fromString(l,t,f)}),(function(){return Promise.reject(new Error("Could not load canvg."))})).then((function(t){return t.render(f)})).then((function(){d.addImage(h.toDataURL("image/jpeg",1),r,n,i,o,c,u)}))}}(),E.API.putTotalPages=function(t){var e,r=0;parseInt(this.internal.getFont().id.substr(1),10)<15?(e=new RegExp(t,"g"),r=this.internal.getNumberOfPages()):(e=new RegExp(this.pdfEscape16(t,this.internal.getFont()),"g"),r=this.pdfEscape16(this.internal.getNumberOfPages()+"",this.internal.getFont()));for(var n=1;n<=this.internal.getNumberOfPages();n++)for(var i=0;i<this.internal.pages[n].length;i++)this.internal.pages[n][i]=this.internal.pages[n][i].replace(e,r);return this},E.API.viewerPreferences=function(e,r){var n;e=e||{},r=r||!1;var i,a,o,s={HideToolbar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideMenubar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideWindowUI:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},FitWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},CenterWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},DisplayDocTitle:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.4},NonFullScreenPageMode:{defaultValue:"UseNone",value:"UseNone",type:"name",explicitSet:!1,valueSet:["UseNone","UseOutlines","UseThumbs","UseOC"],pdfVersion:1.3},Direction:{defaultValue:"L2R",value:"L2R",type:"name",explicitSet:!1,valueSet:["L2R","R2L"],pdfVersion:1.3},ViewArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},ViewClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintScaling:{defaultValue:"AppDefault",value:"AppDefault",type:"name",explicitSet:!1,valueSet:["AppDefault","None"],pdfVersion:1.6},Duplex:{defaultValue:"",value:"none",type:"name",explicitSet:!1,valueSet:["Simplex","DuplexFlipShortEdge","DuplexFlipLongEdge","none"],pdfVersion:1.7},PickTrayByPDFSize:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.7},PrintPageRange:{defaultValue:"",value:"",type:"array",explicitSet:!1,valueSet:null,pdfVersion:1.7},NumCopies:{defaultValue:1,value:1,type:"integer",explicitSet:!1,valueSet:null,pdfVersion:1.7}},c=Object.keys(s),u=[],h=0,l=0,f=0;function d(t,e){var r,n=!1;for(r=0;r<t.length;r+=1)t[r]===e&&(n=!0);return n}if(void 0===this.internal.viewerpreferences&&(this.internal.viewerpreferences={},this.internal.viewerpreferences.configuration=JSON.parse(JSON.stringify(s)),this.internal.viewerpreferences.isSubscribed=!1),n=this.internal.viewerpreferences.configuration,"reset"===e||!0===r){var p=c.length;for(f=0;f<p;f+=1)n[c[f]].value=n[c[f]].defaultValue,n[c[f]].explicitSet=!1}if("object"===(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(e))for(a in e)if(o=e[a],d(c,a)&&void 0!==o){if("boolean"===n[a].type&&"boolean"==typeof o)n[a].value=o;else if("name"===n[a].type&&d(n[a].valueSet,o))n[a].value=o;else if("integer"===n[a].type&&Number.isInteger(o))n[a].value=o;else if("array"===n[a].type){for(h=0;h<o.length;h+=1)if(i=!0,1===o[h].length&&"number"==typeof o[h][0])u.push(String(o[h]-1));else if(o[h].length>1){for(l=0;l<o[h].length;l+=1)"number"!=typeof o[h][l]&&(i=!1);!0===i&&u.push([o[h][0]-1,o[h][1]-1].join(" "))}n[a].value="["+u.join(" ")+"]"}else n[a].value=n[a].defaultValue;n[a].explicitSet=!0}return!1===this.internal.viewerpreferences.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){var t,e=[];for(t in n)!0===n[t].explicitSet&&("name"===n[t].type?e.push("/"+t+" /"+n[t].value):e.push("/"+t+" "+n[t].value));0!==e.length&&this.internal.write("/ViewerPreferences\n<<\n"+e.join("\n")+"\n>>")})),this.internal.viewerpreferences.isSubscribed=!0),this.internal.viewerpreferences.configuration=n,this},
/** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function(t){var e=function(){var t='<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="'+this.internal.__metadata__.namespaceuri+'"><jspdf:metadata>',e=unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),r=unescape(encodeURIComponent(t)),n=unescape(encodeURIComponent(this.internal.__metadata__.metadata)),i=unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),a=unescape(encodeURIComponent("</x:xmpmeta>")),o=r.length+n.length+i.length+e.length+a.length;this.internal.__metadata__.metadata_object_number=this.internal.newObject(),this.internal.write("<< /Type /Metadata /Subtype /XML /Length "+o+" >>"),this.internal.write("stream"),this.internal.write(e+r+n+i+a),this.internal.write("endstream"),this.internal.write("endobj")},r=function(){this.internal.__metadata__.metadata_object_number&&this.internal.write("/Metadata "+this.internal.__metadata__.metadata_object_number+" 0 R")};t.addMetadata=function(t,n){return void 0===this.internal.__metadata__&&(this.internal.__metadata__={metadata:t,namespaceuri:n||"http://jspdf.default.namespaceuri/"},this.internal.events.subscribe("putCatalog",r),this.internal.events.subscribe("postPutResources",e)),this}}(E.API),function(t){var e=t.API,r=e.pdfEscape16=function(t,e){for(var r,n=e.metadata.Unicode.widths,i=["","0","00","000","0000"],a=[""],o=0,s=t.length;o<s;++o){if(r=e.metadata.characterToGlyph(t.charCodeAt(o)),e.metadata.glyIdsUsed.push(r),e.metadata.toUnicode[r]=t.charCodeAt(o),-1==n.indexOf(r)&&(n.push(r),n.push([parseInt(e.metadata.widthOfGlyph(r),10)])),"0"==r)return a.join("");r=r.toString(16),a.push(i[4-r.length],r)}return a.join("")},n=function(t){var e,r,n,i,a,o,s;for(a="/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange",n=[],o=0,s=(r=Object.keys(t).sort((function(t,e){return t-e}))).length;o<s;o++)e=r[o],n.length>=100&&(a+="\n"+n.length+" beginbfchar\n"+n.join("\n")+"\nendbfchar",n=[]),void 0!==t[e]&&null!==t[e]&&"function"==typeof t[e].toString&&(i=("0000"+t[e].toString(16)).slice(-4),e=("0000"+(+e).toString(16)).slice(-4),n.push("<"+e+"><"+i+">"));return n.length&&(a+="\n"+n.length+" beginbfchar\n"+n.join("\n")+"\nendbfchar\n"),a+="endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"};e.events.push(["putFont",function(e){!function(e){var r=e.font,i=e.out,a=e.newObject,o=e.putStream;if(r.metadata instanceof t.API.TTFFont&&"Identity-H"===r.encoding){for(var s=r.metadata.Unicode.widths,c=r.metadata.subset.encode(r.metadata.glyIdsUsed,1),u="",h=0;h<c.length;h++)u+=String.fromCharCode(c[h]);var l=a();o({data:u,addLength1:!0,objectId:l}),i("endobj");var f=a();o({data:n(r.metadata.toUnicode),addLength1:!0,objectId:f}),i("endobj");var d=a();i("<<"),i("/Type /FontDescriptor"),i("/FontName /"+F(r.fontName)),i("/FontFile2 "+l+" 0 R"),i("/FontBBox "+t.API.PDFObject.convert(r.metadata.bbox)),i("/Flags "+r.metadata.flags),i("/StemV "+r.metadata.stemV),i("/ItalicAngle "+r.metadata.italicAngle),i("/Ascent "+r.metadata.ascender),i("/Descent "+r.metadata.decender),i("/CapHeight "+r.metadata.capHeight),i(">>"),i("endobj");var p=a();i("<<"),i("/Type /Font"),i("/BaseFont /"+F(r.fontName)),i("/FontDescriptor "+d+" 0 R"),i("/W "+t.API.PDFObject.convert(s)),i("/CIDToGIDMap /Identity"),i("/DW 1000"),i("/Subtype /CIDFontType2"),i("/CIDSystemInfo"),i("<<"),i("/Supplement 0"),i("/Registry (Adobe)"),i("/Ordering ("+r.encoding+")"),i(">>"),i(">>"),i("endobj"),r.objectNumber=a(),i("<<"),i("/Type /Font"),i("/Subtype /Type0"),i("/ToUnicode "+f+" 0 R"),i("/BaseFont /"+F(r.fontName)),i("/Encoding /"+r.encoding),i("/DescendantFonts ["+p+" 0 R]"),i(">>"),i("endobj"),r.isAlreadyPutted=!0}}(e)}]);e.events.push(["putFont",function(e){!function(e){var r=e.font,i=e.out,a=e.newObject,o=e.putStream;if(r.metadata instanceof t.API.TTFFont&&"WinAnsiEncoding"===r.encoding){for(var s=r.metadata.rawData,c="",u=0;u<s.length;u++)c+=String.fromCharCode(s[u]);var h=a();o({data:c,addLength1:!0,objectId:h}),i("endobj");var l=a();o({data:n(r.metadata.toUnicode),addLength1:!0,objectId:l}),i("endobj");var f=a();i("<<"),i("/Descent "+r.metadata.decender),i("/CapHeight "+r.metadata.capHeight),i("/StemV "+r.metadata.stemV),i("/Type /FontDescriptor"),i("/FontFile2 "+h+" 0 R"),i("/Flags 96"),i("/FontBBox "+t.API.PDFObject.convert(r.metadata.bbox)),i("/FontName /"+F(r.fontName)),i("/ItalicAngle "+r.metadata.italicAngle),i("/Ascent "+r.metadata.ascender),i(">>"),i("endobj"),r.objectNumber=a();for(var d=0;d<r.metadata.hmtx.widths.length;d++)r.metadata.hmtx.widths[d]=parseInt(r.metadata.hmtx.widths[d]*(1e3/r.metadata.head.unitsPerEm));i("<</Subtype/TrueType/Type/Font/ToUnicode "+l+" 0 R/BaseFont/"+F(r.fontName)+"/FontDescriptor "+f+" 0 R/Encoding/"+r.encoding+" /FirstChar 29 /LastChar 255 /Widths "+t.API.PDFObject.convert(r.metadata.hmtx.widths)+">>"),i("endobj"),r.isAlreadyPutted=!0}}(e)}]);var i=function(t){var e,n=t.text||"",i=t.x,a=t.y,o=t.options||{},s=t.mutex||{},c=s.pdfEscape,u=s.activeFontKey,h=s.fonts,l=u,f="",d=0,p="",g=h[l].encoding;if("Identity-H"!==h[l].encoding)return{text:n,x:i,y:a,options:o,mutex:s};for(p=n,l=u,Array.isArray(n)&&(p=n[0]),d=0;d<p.length;d+=1)h[l].metadata.hasOwnProperty("cmap")&&(e=h[l].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]),e||p[d].charCodeAt(0)<256&&h[l].metadata.hasOwnProperty("Unicode")?f+=p[d]:f+="";var m="";return parseInt(l.slice(1))<14||"WinAnsiEncoding"===g?m=c(f,l).split("").map((function(t){return t.charCodeAt(0).toString(16)})).join(""):"Identity-H"===g&&(m=r(f,h[l])),s.isHex=!0,{text:m,x:i,y:a,options:o,mutex:s}};e.events.push(["postProcessText",function(t){var e=t.text||"",r=[],n={text:e,x:t.x,y:t.y,options:t.options,mutex:t.mutex};if(Array.isArray(e)){var a=0;for(a=0;a<e.length;a+=1)Array.isArray(e[a])&&3===e[a].length?r.push([i(Object.assign({},n,{text:e[a][0]})).text,e[a][1],e[a][2]]):r.push(i(Object.assign({},n,{text:e[a]})).text);t.text=r}else t.text=i(Object.assign({},n,{text:e})).text}])}(E),
/**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function(t){var e=function(){return void 0===this.internal.vFS&&(this.internal.vFS={}),!0};t.existsFileInVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]},t.addFileToVFS=function(t,r){return e.call(this),this.internal.vFS[t]=r,this},t.getFileFromVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]?this.internal.vFS[t]:null}}(E.API),
/**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */
function(t){t.__bidiEngine__=t.prototype.__bidiEngine__=function(t){var r,n,i,a,o,s,c,u=e,h=[[0,3,0,1,0,0,0],[0,3,0,1,2,2,0],[0,3,0,17,2,0,1],[0,3,5,5,4,1,0],[0,3,21,21,4,0,1],[0,3,5,5,4,2,0]],l=[[2,0,1,1,0,1,0],[2,0,1,1,0,2,0],[2,0,2,1,3,2,0],[2,0,2,33,3,1,1]],f={L:0,R:1,EN:2,AN:3,N:4,B:5,S:6},d={0:0,5:1,6:2,7:3,32:4,251:5,254:6,255:7},p=["(",")","(","<",">","<","[","]","[","{","}","{","«","»","«","‹","›","‹","⁅","⁆","⁅","⁽","⁾","⁽","₍","₎","₍","≤","≥","≤","〈","〉","〈","﹙","﹚","﹙","﹛","﹜","﹛","﹝","﹞","﹝","﹤","﹥","﹤"],g=new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),m=!1,v=0;this.__bidiEngine__={};var b=function(t){var e=t.charCodeAt(),r=e>>8,n=d[r];return void 0!==n?u[256*n+(255&e)]:252===r||253===r?"AL":g.test(r)?"L":8===r?"R":"N"},y=function(t){for(var e,r=0;r<t.length;r++){if("L"===(e=b(t.charAt(r))))return!1;if("R"===e)return!0}return!1},w=function(t,e,o,s){var c,u,h,l,f=e[s];switch(f){case"L":case"R":m=!1;break;case"N":case"AN":break;case"EN":m&&(f="AN");break;case"AL":m=!0,f="R";break;case"WS":f="N";break;case"CS":s<1||s+1>=e.length||"EN"!==(c=o[s-1])&&"AN"!==c||"EN"!==(u=e[s+1])&&"AN"!==u?f="N":m&&(u="AN"),f=u===c?u:"N";break;case"ES":f="EN"===(c=s>0?o[s-1]:"B")&&s+1<e.length&&"EN"===e[s+1]?"EN":"N";break;case"ET":if(s>0&&"EN"===o[s-1]){f="EN";break}if(m){f="N";break}for(h=s+1,l=e.length;h<l&&"ET"===e[h];)h++;f=h<l&&"EN"===e[h]?"EN":"N";break;case"NSM":if(i&&!a){for(l=e.length,h=s+1;h<l&&"NSM"===e[h];)h++;if(h<l){var d=t[s],p=d>=1425&&d<=2303||64286===d;if(c=e[h],p&&("R"===c||"AL"===c)){f="R";break}}}f=s<1||"B"===(c=e[s-1])?"N":o[s-1];break;case"B":m=!1,r=!0,f=v;break;case"S":n=!0,f="N";break;case"LRE":case"RLE":case"LRO":case"RLO":case"PDF":m=!1;break;case"BN":f="N"}return f},N=function(t,e,r){var n=t.split("");return r&&L(n,r,{hiLevel:v}),n.reverse(),e&&e.reverse(),n.join("")},L=function(t,e,i){var a,o,s,c,u,d=-1,p=t.length,g=0,y=[],N=v?l:h,L=[];for(m=!1,r=!1,n=!1,o=0;o<p;o++)L[o]=b(t[o]);for(s=0;s<p;s++){if(u=g,y[s]=w(t,L,y,s),a=240&(g=N[u][f[y[s]]]),g&=15,e[s]=c=N[g][5],a>0)if(16===a){for(o=d;o<s;o++)e[o]=1;d=-1}else d=-1;if(N[g][6])-1===d&&(d=s);else if(d>-1){for(o=d;o<s;o++)e[o]=c;d=-1}"B"===L[s]&&(e[s]=0),i.hiLevel|=c}n&&function(t,e,r){for(var n=0;n<r;n++)if("S"===t[n]){e[n]=v;for(var i=n-1;i>=0&&"WS"===t[i];i--)e[i]=v}}(L,e,p)},A=function(t,e,n,i,a){if(!(a.hiLevel<t)){if(1===t&&1===v&&!r)return e.reverse(),void(n&&n.reverse());for(var o,s,c,u,h=e.length,l=0;l<h;){if(i[l]>=t){for(c=l+1;c<h&&i[c]>=t;)c++;for(u=l,s=c-1;u<s;u++,s--)o=e[u],e[u]=e[s],e[s]=o,n&&(o=n[u],n[u]=n[s],n[s]=o);l=c}l++}}},x=function(t,e,r){var n=t.split(""),i={hiLevel:v};return r||(r=[]),L(n,r,i),function(t,e,r){if(0!==r.hiLevel&&c)for(var n,i=0;i<t.length;i++)1===e[i]&&(n=p.indexOf(t[i]))>=0&&(t[i]=p[n+1])}(n,r,i),A(2,n,e,r,i),A(1,n,e,r,i),n.join("")};return this.__bidiEngine__.doBidiReorder=function(t,e,r){if(function(t,e){if(e)for(var r=0;r<t.length;r++)e[r]=r;void 0===a&&(a=y(t)),void 0===s&&(s=y(t))}(t,e),i||!o||s)if(i&&o&&a^s)v=a?1:0,t=N(t,e,r);else if(!i&&o&&s)v=a?1:0,t=x(t,e,r),t=N(t,e);else if(!i||a||o||s){if(i&&!o&&a^s)t=N(t,e),a?(v=0,t=x(t,e,r)):(v=1,t=x(t,e,r),t=N(t,e));else if(i&&a&&!o&&s)v=1,t=x(t,e,r),t=N(t,e);else if(!i&&!o&&a^s){var n=c;a?(v=1,t=x(t,e,r),v=0,c=!1,t=x(t,e,r),c=n):(v=0,t=x(t,e,r),t=N(t,e),v=1,c=!1,t=x(t,e,r),c=n,t=N(t,e))}}else v=0,t=x(t,e,r);else v=a?1:0,t=x(t,e,r);return t},this.__bidiEngine__.setOptions=function(t){t&&(i=t.isInputVisual,o=t.isOutputVisual,a=t.isInputRtl,s=t.isOutputRtl,c=t.isSymmetricSwapping)},this.__bidiEngine__.setOptions(t),this.__bidiEngine__};var e=["BN","BN","BN","BN","BN","BN","BN","BN","BN","S","B","S","WS","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","B","B","B","S","WS","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","BN","BN","BN","BN","BN","BN","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","CS","N","ET","ET","ET","ET","N","N","N","N","L","N","N","BN","N","N","ET","ET","EN","EN","N","L","N","N","N","EN","L","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","N","N","N","N","N","ET","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","NSM","R","NSM","NSM","R","NSM","NSM","R","NSM","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","N","N","N","N","N","R","R","R","R","R","N","N","N","N","N","N","N","N","N","N","N","AN","AN","AN","AN","AN","AN","N","N","AL","ET","ET","AL","CS","AL","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","AN","AN","AN","AN","AN","AN","AN","AN","AN","ET","AN","AN","AL","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","N","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","NSM","NSM","N","NSM","NSM","NSM","NSM","AL","AL","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","R","N","N","N","N","R","N","N","N","N","N","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","BN","BN","BN","L","R","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","B","LRE","RLE","PDF","LRO","RLO","CS","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","BN","BN","BN","BN","BN","N","LRI","RLI","FSI","PDI","BN","BN","BN","BN","BN","BN","EN","L","N","N","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","L","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","N","N","N","N","N","R","NSM","R","R","R","R","R","R","R","R","R","R","ES","R","R","R","R","R","R","R","R","R","R","R","R","R","N","R","R","R","R","R","N","R","N","R","R","N","R","R","N","R","R","R","R","R","R","R","R","R","R","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","CS","N","N","CS","N","N","N","N","N","N","N","N","N","ET","N","N","ES","ES","N","N","N","N","N","ET","ET","N","N","N","N","N","AL","AL","AL","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","BN","N","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","N","N","N","ET","ET","N","N","N","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N"],r=new t.__bidiEngine__({isInputVisual:!0});t.API.events.push(["postProcessText",function(t){var e=t.text,n=(t.x,t.y,t.options||{}),i=(t.mutex,n.lang,[]);if(n.isInputVisual="boolean"!=typeof n.isInputVisual||n.isInputVisual,r.setOptions(n),"[object Array]"===Object.prototype.toString.call(e)){var a=0;for(i=[],a=0;a<e.length;a+=1)"[object Array]"===Object.prototype.toString.call(e[a])?i.push([r.doBidiReorder(e[a][0]),e[a][1],e[a][2]]):i.push([r.doBidiReorder(e[a])]);t.text=i}else t.text=r.doBidiReorder(e);r.setOptions({isInputVisual:!0})}])}(E),E.API.TTFFont=function(){function t(t){var e;if(this.rawData=t,e=this.contents=new ne(t),this.contents.pos=4,"ttcf"===e.readString(4))throw new Error("TTCF not supported.");e.pos=0,this.parse(),this.subset=new Le(this),this.registerTTF()}return t.open=function(e){return new t(e)},t.prototype.parse=function(){return this.directory=new ie(this.contents),this.head=new se(this),this.name=new pe(this),this.cmap=new ue(this),this.toUnicode={},this.hhea=new he(this),this.maxp=new ge(this),this.hmtx=new me(this),this.post=new fe(this),this.os2=new le(this),this.loca=new Ne(this),this.glyf=new be(this),this.ascender=this.os2.exists&&this.os2.ascender||this.hhea.ascender,this.decender=this.os2.exists&&this.os2.decender||this.hhea.decender,this.lineGap=this.os2.exists&&this.os2.lineGap||this.hhea.lineGap,this.bbox=[this.head.xMin,this.head.yMin,this.head.xMax,this.head.yMax]},t.prototype.registerTTF=function(){var t,e,r,n,i;if(this.scaleFactor=1e3/this.head.unitsPerEm,this.bbox=function(){var e,r,n,i;for(i=[],e=0,r=(n=this.bbox).length;e<r;e++)t=n[e],i.push(Math.round(t*this.scaleFactor));return i}.call(this),this.stemV=0,this.post.exists?(r=255&(n=this.post.italic_angle),0!=(32768&(e=n>>16))&&(e=-(1+(65535^e))),this.italicAngle=+(e+"."+r)):this.italicAngle=0,this.ascender=Math.round(this.ascender*this.scaleFactor),this.decender=Math.round(this.decender*this.scaleFactor),this.lineGap=Math.round(this.lineGap*this.scaleFactor),this.capHeight=this.os2.exists&&this.os2.capHeight||this.ascender,this.xHeight=this.os2.exists&&this.os2.xHeight||0,this.familyClass=(this.os2.exists&&this.os2.familyClass||0)>>8,this.isSerif=1===(i=this.familyClass)||2===i||3===i||4===i||5===i||7===i,this.isScript=10===this.familyClass,this.flags=0,this.post.isFixedPitch&&(this.flags|=1),this.isSerif&&(this.flags|=2),this.isScript&&(this.flags|=8),0!==this.italicAngle&&(this.flags|=64),this.flags|=32,!this.cmap.unicode)throw new Error("No unicode cmap for font")},t.prototype.characterToGlyph=function(t){var e;return(null!=(e=this.cmap.unicode)?e.codeMap[t]:void 0)||0},t.prototype.widthOfGlyph=function(t){var e;return e=1e3/this.head.unitsPerEm,this.hmtx.forGlyph(t).advance*e},t.prototype.widthOfString=function(t,e,r){var n,i,a,o;for(a=0,i=0,o=(t=""+t).length;0<=o?i<o:i>o;i=0<=o?++i:--i)n=t.charCodeAt(i),a+=this.widthOfGlyph(this.characterToGlyph(n))+r*(1e3/e)||0;return a*(e/1e3)},t.prototype.lineHeight=function(t,e){var r;return null==e&&(e=!1),r=e?this.lineGap:0,(this.ascender+r-this.decender)/1e3*t},t}();var re,ne=function(){function t(t){this.data=null!=t?t:[],this.pos=0,this.length=this.data.length}return t.prototype.readByte=function(){return this.data[this.pos++]},t.prototype.writeByte=function(t){return this.data[this.pos++]=t},t.prototype.readUInt32=function(){return 16777216*this.readByte()+(this.readByte()<<16)+(this.readByte()<<8)+this.readByte()},t.prototype.writeUInt32=function(t){return this.writeByte(t>>>24&255),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt32=function(){var t;return(t=this.readUInt32())>=2147483648?t-4294967296:t},t.prototype.writeInt32=function(t){return t<0&&(t+=4294967296),this.writeUInt32(t)},t.prototype.readUInt16=function(){return this.readByte()<<8|this.readByte()},t.prototype.writeUInt16=function(t){return this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt16=function(){var t;return(t=this.readUInt16())>=32768?t-65536:t},t.prototype.writeInt16=function(t){return t<0&&(t+=65536),this.writeUInt16(t)},t.prototype.readString=function(t){var e,r;for(r=[],e=0;0<=t?e<t:e>t;e=0<=t?++e:--e)r[e]=String.fromCharCode(this.readByte());return r.join("")},t.prototype.writeString=function(t){var e,r,n;for(n=[],e=0,r=t.length;0<=r?e<r:e>r;e=0<=r?++e:--e)n.push(this.writeByte(t.charCodeAt(e)));return n},t.prototype.readShort=function(){return this.readInt16()},t.prototype.writeShort=function(t){return this.writeInt16(t)},t.prototype.readLongLong=function(){var t,e,r,n,i,a,o,s;return t=this.readByte(),e=this.readByte(),r=this.readByte(),n=this.readByte(),i=this.readByte(),a=this.readByte(),o=this.readByte(),s=this.readByte(),128&t?-1*(72057594037927940*(255^t)+281474976710656*(255^e)+1099511627776*(255^r)+4294967296*(255^n)+16777216*(255^i)+65536*(255^a)+256*(255^o)+(255^s)+1):72057594037927940*t+281474976710656*e+1099511627776*r+4294967296*n+16777216*i+65536*a+256*o+s},t.prototype.writeLongLong=function(t){var e,r;return e=Math.floor(t/4294967296),r=4294967295&t,this.writeByte(e>>24&255),this.writeByte(e>>16&255),this.writeByte(e>>8&255),this.writeByte(255&e),this.writeByte(r>>24&255),this.writeByte(r>>16&255),this.writeByte(r>>8&255),this.writeByte(255&r)},t.prototype.readInt=function(){return this.readInt32()},t.prototype.writeInt=function(t){return this.writeInt32(t)},t.prototype.read=function(t){var e,r;for(e=[],r=0;0<=t?r<t:r>t;r=0<=t?++r:--r)e.push(this.readByte());return e},t.prototype.write=function(t){var e,r,n,i;for(i=[],r=0,n=t.length;r<n;r++)e=t[r],i.push(this.writeByte(e));return i},t}(),ie=function(){var t;function e(t){var e,r,n;for(this.scalarType=t.readInt(),this.tableCount=t.readShort(),this.searchRange=t.readShort(),this.entrySelector=t.readShort(),this.rangeShift=t.readShort(),this.tables={},r=0,n=this.tableCount;0<=n?r<n:r>n;r=0<=n?++r:--r)e={tag:t.readString(4),checksum:t.readInt(),offset:t.readInt(),length:t.readInt()},this.tables[e.tag]=e}return e.prototype.encode=function(e){var r,n,i,a,o,s,c,u,h,l,f,d,p;for(p in f=Object.keys(e).length,s=Math.log(2),h=16*Math.floor(Math.log(f)/s),a=Math.floor(h/s),u=16*f-h,(n=new ne).writeInt(this.scalarType),n.writeShort(f),n.writeShort(h),n.writeShort(a),n.writeShort(u),i=16*f,c=n.pos+i,o=null,d=[],e)for(l=e[p],n.writeString(p),n.writeInt(t(l)),n.writeInt(c),n.writeInt(l.length),d=d.concat(l),"head"===p&&(o=c),c+=l.length;c%4;)d.push(0),c++;return n.write(d),r=2981146554-t(n.data),n.pos=o+8,n.writeUInt32(r),n.data},t=function(t){var e,r,n,i;for(t=ve.call(t);t.length%4;)t.push(0);for(n=new ne(t),r=0,e=0,i=t.length;e<i;e=e+=4)r+=n.readUInt32();return 4294967295&r},e}(),ae={}.hasOwnProperty,oe=function(t,e){for(var r in e)ae.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t};re=function(){function t(t){var e;this.file=t,e=this.file.directory.tables[this.tag],this.exists=!!e,e&&(this.offset=e.offset,this.length=e.length,this.parse(this.file.contents))}return t.prototype.parse=function(){},t.prototype.encode=function(){},t.prototype.raw=function(){return this.exists?(this.file.contents.pos=this.offset,this.file.contents.read(this.length)):null},t}();var se=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="head",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.revision=t.readInt(),this.checkSumAdjustment=t.readInt(),this.magicNumber=t.readInt(),this.flags=t.readShort(),this.unitsPerEm=t.readShort(),this.created=t.readLongLong(),this.modified=t.readLongLong(),this.xMin=t.readShort(),this.yMin=t.readShort(),this.xMax=t.readShort(),this.yMax=t.readShort(),this.macStyle=t.readShort(),this.lowestRecPPEM=t.readShort(),this.fontDirectionHint=t.readShort(),this.indexToLocFormat=t.readShort(),this.glyphDataFormat=t.readShort()},e.prototype.encode=function(t){var e;return(e=new ne).writeInt(this.version),e.writeInt(this.revision),e.writeInt(this.checkSumAdjustment),e.writeInt(this.magicNumber),e.writeShort(this.flags),e.writeShort(this.unitsPerEm),e.writeLongLong(this.created),e.writeLongLong(this.modified),e.writeShort(this.xMin),e.writeShort(this.yMin),e.writeShort(this.xMax),e.writeShort(this.yMax),e.writeShort(this.macStyle),e.writeShort(this.lowestRecPPEM),e.writeShort(this.fontDirectionHint),e.writeShort(t),e.writeShort(this.glyphDataFormat),e.data},e}(),ce=function(){function t(t,e){var r,n,i,a,o,s,c,u,h,l,f,d,p,g,m,v,b;switch(this.platformID=t.readUInt16(),this.encodingID=t.readShort(),this.offset=e+t.readInt(),h=t.pos,t.pos=this.offset,this.format=t.readUInt16(),this.length=t.readUInt16(),this.language=t.readUInt16(),this.isUnicode=3===this.platformID&&1===this.encodingID&&4===this.format||0===this.platformID&&4===this.format,this.codeMap={},this.format){case 0:for(s=0;s<256;++s)this.codeMap[s]=t.readByte();break;case 4:for(f=t.readUInt16(),l=f/2,t.pos+=6,i=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),t.pos+=2,p=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),c=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),u=function(){var e,r;for(r=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)r.push(t.readUInt16());return r}(),n=(this.length-t.pos+this.offset)/2,o=function(){var e,r;for(r=[],s=e=0;0<=n?e<n:e>n;s=0<=n?++e:--e)r.push(t.readUInt16());return r}(),s=m=0,b=i.length;m<b;s=++m)for(g=i[s],r=v=d=p[s];d<=g?v<=g:v>=g;r=d<=g?++v:--v)0===u[s]?a=r+c[s]:0!==(a=o[u[s]/2+(r-d)-(l-s)]||0)&&(a+=c[s]),this.codeMap[r]=65535&a}t.pos=h}return t.encode=function(t,e){var r,n,i,a,o,s,c,u,h,l,f,d,p,g,m,v,b,y,w,N,L,A,x,S,_,P,k,I,F,C,j,O,B,M,E,q,D,R,T,U,z,H,W,V,G,Y;switch(I=new ne,a=Object.keys(t).sort((function(t,e){return t-e})),e){case"macroman":for(p=0,g=function(){var t=[];for(d=0;d<256;++d)t.push(0);return t}(),v={0:0},i={},F=0,B=a.length;F<B;F++)null==v[W=t[n=a[F]]]&&(v[W]=++p),i[n]={old:t[n],new:v[t[n]]},g[n]=v[t[n]];return I.writeUInt16(1),I.writeUInt16(0),I.writeUInt32(12),I.writeUInt16(0),I.writeUInt16(262),I.writeUInt16(0),I.write(g),{charMap:i,subtable:I.data,maxGlyphID:p+1};case"unicode":for(P=[],h=[],b=0,v={},r={},m=c=null,C=0,M=a.length;C<M;C++)null==v[w=t[n=a[C]]]&&(v[w]=++b),r[n]={old:w,new:v[w]},o=v[w]-n,null!=m&&o===c||(m&&h.push(m),P.push(n),c=o),m=n;for(m&&h.push(m),h.push(65535),P.push(65535),S=2*(x=P.length),A=2*Math.pow(Math.log(x)/Math.LN2,2),l=Math.log(A/2)/Math.LN2,L=2*x-A,s=[],N=[],f=[],d=j=0,E=P.length;j<E;d=++j){if(_=P[d],u=h[d],65535===_){s.push(0),N.push(0);break}if(_-(k=r[_].new)>=32768)for(s.push(0),N.push(2*(f.length+x-d)),n=O=_;_<=u?O<=u:O>=u;n=_<=u?++O:--O)f.push(r[n].new);else s.push(k-_),N.push(0)}for(I.writeUInt16(3),I.writeUInt16(1),I.writeUInt32(12),I.writeUInt16(4),I.writeUInt16(16+8*x+2*f.length),I.writeUInt16(0),I.writeUInt16(S),I.writeUInt16(A),I.writeUInt16(l),I.writeUInt16(L),z=0,q=h.length;z<q;z++)n=h[z],I.writeUInt16(n);for(I.writeUInt16(0),H=0,D=P.length;H<D;H++)n=P[H],I.writeUInt16(n);for(V=0,R=s.length;V<R;V++)o=s[V],I.writeUInt16(o);for(G=0,T=N.length;G<T;G++)y=N[G],I.writeUInt16(y);for(Y=0,U=f.length;Y<U;Y++)p=f[Y],I.writeUInt16(p);return{charMap:r,subtable:I.data,maxGlyphID:b+1}}},t}(),ue=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="cmap",e.prototype.parse=function(t){var e,r,n;for(t.pos=this.offset,this.version=t.readUInt16(),n=t.readUInt16(),this.tables=[],this.unicode=null,r=0;0<=n?r<n:r>n;r=0<=n?++r:--r)e=new ce(t,this.offset),this.tables.push(e),e.isUnicode&&null==this.unicode&&(this.unicode=e);return!0},e.encode=function(t,e){var r,n;return null==e&&(e="macroman"),r=ce.encode(t,e),(n=new ne).writeUInt16(0),n.writeUInt16(1),r.table=n.data.concat(r.subtable),r},e}(),he=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="hhea",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.ascender=t.readShort(),this.decender=t.readShort(),this.lineGap=t.readShort(),this.advanceWidthMax=t.readShort(),this.minLeftSideBearing=t.readShort(),this.minRightSideBearing=t.readShort(),this.xMaxExtent=t.readShort(),this.caretSlopeRise=t.readShort(),this.caretSlopeRun=t.readShort(),this.caretOffset=t.readShort(),t.pos+=8,this.metricDataFormat=t.readShort(),this.numberOfMetrics=t.readUInt16()},e}(),le=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="OS/2",e.prototype.parse=function(t){if(t.pos=this.offset,this.version=t.readUInt16(),this.averageCharWidth=t.readShort(),this.weightClass=t.readUInt16(),this.widthClass=t.readUInt16(),this.type=t.readShort(),this.ySubscriptXSize=t.readShort(),this.ySubscriptYSize=t.readShort(),this.ySubscriptXOffset=t.readShort(),this.ySubscriptYOffset=t.readShort(),this.ySuperscriptXSize=t.readShort(),this.ySuperscriptYSize=t.readShort(),this.ySuperscriptXOffset=t.readShort(),this.ySuperscriptYOffset=t.readShort(),this.yStrikeoutSize=t.readShort(),this.yStrikeoutPosition=t.readShort(),this.familyClass=t.readShort(),this.panose=function(){var e,r;for(r=[],e=0;e<10;++e)r.push(t.readByte());return r}(),this.charRange=function(){var e,r;for(r=[],e=0;e<4;++e)r.push(t.readInt());return r}(),this.vendorID=t.readString(4),this.selection=t.readShort(),this.firstCharIndex=t.readShort(),this.lastCharIndex=t.readShort(),this.version>0&&(this.ascent=t.readShort(),this.descent=t.readShort(),this.lineGap=t.readShort(),this.winAscent=t.readShort(),this.winDescent=t.readShort(),this.codePageRange=function(){var e,r;for(r=[],e=0;e<2;e=++e)r.push(t.readInt());return r}(),this.version>1))return this.xHeight=t.readShort(),this.capHeight=t.readShort(),this.defaultChar=t.readShort(),this.breakChar=t.readShort(),this.maxContext=t.readShort()},e}(),fe=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="post",e.prototype.parse=function(t){var e,r,n;switch(t.pos=this.offset,this.format=t.readInt(),this.italicAngle=t.readInt(),this.underlinePosition=t.readShort(),this.underlineThickness=t.readShort(),this.isFixedPitch=t.readInt(),this.minMemType42=t.readInt(),this.maxMemType42=t.readInt(),this.minMemType1=t.readInt(),this.maxMemType1=t.readInt(),this.format){case 65536:break;case 131072:var i;for(r=t.readUInt16(),this.glyphNameIndex=[],i=0;0<=r?i<r:i>r;i=0<=r?++i:--i)this.glyphNameIndex.push(t.readUInt16());for(this.names=[],n=[];t.pos<this.offset+this.length;)e=t.readByte(),n.push(this.names.push(t.readString(e)));return n;case 151552:return r=t.readUInt16(),this.offsets=t.read(r);case 196608:break;case 262144:return this.map=function(){var e,r,n;for(n=[],i=e=0,r=this.file.maxp.numGlyphs;0<=r?e<r:e>r;i=0<=r?++e:--e)n.push(t.readUInt32());return n}.call(this)}},e}(),de=function(t,e){this.raw=t,this.length=t.length,this.platformID=e.platformID,this.encodingID=e.encodingID,this.languageID=e.languageID},pe=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="name",e.prototype.parse=function(t){var e,r,n,i,a,o,s,c,u,h,l;for(t.pos=this.offset,t.readShort(),e=t.readShort(),o=t.readShort(),r=[],i=0;0<=e?i<e:i>e;i=0<=e?++i:--i)r.push({platformID:t.readShort(),encodingID:t.readShort(),languageID:t.readShort(),nameID:t.readShort(),length:t.readShort(),offset:this.offset+o+t.readShort()});for(s={},i=u=0,h=r.length;u<h;i=++u)n=r[i],t.pos=n.offset,c=t.readString(n.length),a=new de(c,n),null==s[l=n.nameID]&&(s[l]=[]),s[n.nameID].push(a);this.strings=s,this.copyright=s[0],this.fontFamily=s[1],this.fontSubfamily=s[2],this.uniqueSubfamily=s[3],this.fontName=s[4],this.version=s[5];try{this.postscriptName=s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}catch(t){this.postscriptName=s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}return this.trademark=s[7],this.manufacturer=s[8],this.designer=s[9],this.description=s[10],this.vendorUrl=s[11],this.designerUrl=s[12],this.license=s[13],this.licenseUrl=s[14],this.preferredFamily=s[15],this.preferredSubfamily=s[17],this.compatibleFull=s[18],this.sampleText=s[19]},e}(),ge=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="maxp",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.numGlyphs=t.readUInt16(),this.maxPoints=t.readUInt16(),this.maxContours=t.readUInt16(),this.maxCompositePoints=t.readUInt16(),this.maxComponentContours=t.readUInt16(),this.maxZones=t.readUInt16(),this.maxTwilightPoints=t.readUInt16(),this.maxStorage=t.readUInt16(),this.maxFunctionDefs=t.readUInt16(),this.maxInstructionDefs=t.readUInt16(),this.maxStackElements=t.readUInt16(),this.maxSizeOfInstructions=t.readUInt16(),this.maxComponentElements=t.readUInt16(),this.maxComponentDepth=t.readUInt16()},e}(),me=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="hmtx",e.prototype.parse=function(t){var e,r,n,i,a,o,s;for(t.pos=this.offset,this.metrics=[],e=0,o=this.file.hhea.numberOfMetrics;0<=o?e<o:e>o;e=0<=o?++e:--e)this.metrics.push({advance:t.readUInt16(),lsb:t.readInt16()});for(n=this.file.maxp.numGlyphs-this.file.hhea.numberOfMetrics,this.leftSideBearings=function(){var r,i;for(i=[],e=r=0;0<=n?r<n:r>n;e=0<=n?++r:--r)i.push(t.readInt16());return i}(),this.widths=function(){var t,e,r,n;for(n=[],t=0,e=(r=this.metrics).length;t<e;t++)i=r[t],n.push(i.advance);return n}.call(this),r=this.widths[this.widths.length-1],s=[],e=a=0;0<=n?a<n:a>n;e=0<=n?++a:--a)s.push(this.widths.push(r));return s},e.prototype.forGlyph=function(t){return t in this.metrics?this.metrics[t]:{advance:this.metrics[this.metrics.length-1].advance,lsb:this.leftSideBearings[t-this.metrics.length]}},e}(),ve=[].slice,be=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="glyf",e.prototype.parse=function(){return this.cache={}},e.prototype.glyphFor=function(t){var e,r,n,i,a,o,s,c,u,h;return t in this.cache?this.cache[t]:(i=this.file.loca,e=this.file.contents,r=i.indexOf(t),0===(n=i.lengthOf(t))?this.cache[t]=null:(e.pos=this.offset+r,a=(o=new ne(e.read(n))).readShort(),c=o.readShort(),h=o.readShort(),s=o.readShort(),u=o.readShort(),this.cache[t]=-1===a?new we(o,c,h,s,u):new ye(o,a,c,h,s,u),this.cache[t]))},e.prototype.encode=function(t,e,r){var n,i,a,o,s;for(a=[],i=[],o=0,s=e.length;o<s;o++)n=t[e[o]],i.push(a.length),n&&(a=a.concat(n.encode(r)));return i.push(a.length),{table:a,offsets:i}},e}(),ye=function(){function t(t,e,r,n,i,a){this.raw=t,this.numberOfContours=e,this.xMin=r,this.yMin=n,this.xMax=i,this.yMax=a,this.compound=!1}return t.prototype.encode=function(){return this.raw.data},t}(),we=function(){function t(t,e,r,n,i){var a,o;for(this.raw=t,this.xMin=e,this.yMin=r,this.xMax=n,this.yMax=i,this.compound=!0,this.glyphIDs=[],this.glyphOffsets=[],a=this.raw;o=a.readShort(),this.glyphOffsets.push(a.pos),this.glyphIDs.push(a.readUInt16()),32&o;)a.pos+=1&o?4:2,128&o?a.pos+=8:64&o?a.pos+=4:8&o&&(a.pos+=2)}return 1,8,32,64,128,t.prototype.encode=function(){var t,e,r;for(e=new ne(ve.call(this.raw.data)),t=0,r=this.glyphIDs.length;t<r;++t)e.pos=this.glyphOffsets[t];return e.data},t}(),Ne=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return oe(e,re),e.prototype.tag="loca",e.prototype.parse=function(t){var e,r;return t.pos=this.offset,e=this.file.head.indexToLocFormat,this.offsets=0===e?function(){var e,n;for(n=[],r=0,e=this.length;r<e;r+=2)n.push(2*t.readUInt16());return n}.call(this):function(){var e,n;for(n=[],r=0,e=this.length;r<e;r+=4)n.push(t.readUInt32());return n}.call(this)},e.prototype.indexOf=function(t){return this.offsets[t]},e.prototype.lengthOf=function(t){return this.offsets[t+1]-this.offsets[t]},e.prototype.encode=function(t,e){for(var r=new Uint32Array(this.offsets.length),n=0,i=0,a=0;a<r.length;++a)if(r[a]=n,i<e.length&&e[i]==a){++i,r[a]=n;var o=this.offsets[a],s=this.offsets[a+1]-o;s>0&&(n+=s)}for(var c=new Array(4*r.length),u=0;u<r.length;++u)c[4*u+3]=255&r[u],c[4*u+2]=(65280&r[u])>>8,c[4*u+1]=(16711680&r[u])>>16,c[4*u]=(4278190080&r[u])>>24;return c},e}(),Le=function(){function t(t){this.font=t,this.subset={},this.unicodes={},this.next=33}return t.prototype.generateCmap=function(){var t,e,r,n,i;for(e in n=this.font.cmap.tables[0].codeMap,t={},i=this.subset)r=i[e],t[e]=n[r];return t},t.prototype.glyphsFor=function(t){var e,r,n,i,a,o,s;for(n={},a=0,o=t.length;a<o;a++)n[i=t[a]]=this.font.glyf.glyphFor(i);for(i in e=[],n)(null!=(r=n[i])?r.compound:void 0)&&e.push.apply(e,r.glyphIDs);if(e.length>0)for(i in s=this.glyphsFor(e))r=s[i],n[i]=r;return n},t.prototype.encode=function(t,e){var r,n,i,a,o,s,c,u,h,l,f,d,p,g,m;for(n in r=ue.encode(this.generateCmap(),"unicode"),a=this.glyphsFor(t),f={0:0},m=r.charMap)f[(s=m[n]).old]=s.new;for(d in l=r.maxGlyphID,a)d in f||(f[d]=l++);return u=function(t){var e,r;for(e in r={},t)r[t[e]]=e;return r}(f),h=Object.keys(u).sort((function(t,e){return t-e})),p=function(){var t,e,r;for(r=[],t=0,e=h.length;t<e;t++)o=h[t],r.push(u[o]);return r}(),i=this.font.glyf.encode(a,p,f),c=this.font.loca.encode(i.offsets,p),g={cmap:this.font.cmap.raw(),glyf:i.table,loca:c,hmtx:this.font.hmtx.raw(),hhea:this.font.hhea.raw(),maxp:this.font.maxp.raw(),post:this.font.post.raw(),name:this.font.name.raw(),head:this.font.head.encode(e)},this.font.os2.exists&&(g["OS/2"]=this.font.os2.raw()),this.font.directory.encode(g)},t}();E.API.PDFObject=function(){var t;function e(){}return t=function(t,e){return(Array(e+1).join("0")+t).slice(-e)},e.convert=function(r){var n,i,a,o;if(Array.isArray(r))return"["+function(){var t,i,a;for(a=[],t=0,i=r.length;t<i;t++)n=r[t],a.push(e.convert(n));return a}().join(" ")+"]";if("string"==typeof r)return"/"+r;if(null!=r?r.isString:void 0)return"("+r+")";if(r instanceof Date)return"(D:"+t(r.getUTCFullYear(),4)+t(r.getUTCMonth(),2)+t(r.getUTCDate(),2)+t(r.getUTCHours(),2)+t(r.getUTCMinutes(),2)+t(r.getUTCSeconds(),2)+"Z)";if("[object Object]"==={}.toString.call(r)){for(i in a=["<<"],r)o=r[i],a.push("/"+i+" "+e.convert(o));return a.push(">>"),a.join("\n")}return""+r},e}();/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (E);
//# sourceMappingURL=jspdf.es.min.js.map


/***/ }),

/***/ "./node_modules/jszip/dist/jszip.min.js":
/*!**********************************************!*\
  !*** ./node_modules/jszip/dist/jszip.min.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!

JSZip v3.10.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/main/LICENSE
*/

!function(e){if(true)module.exports=e();else {}}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t=undefined;if(!e&&t)return require(r,!0);if(l)return l(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h)}return o[r].exports}for(var l=undefined,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){"use strict";var d=e("./utils"),c=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c="string"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u="data:";if(e.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n=null;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function h(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new h("Deflate",e)},r.uncompressWorker=function(){return new h("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function A(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),c=I.transformTo("string",O.utf8encode(h.name)),d=h.comment,p=I.transformTo("string",s(d)),m=I.transformTo("string",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(n,4)+f+b+p}}var I=e("../utils"),i=e("../stream/GenericWorker"),O=e("../utf8"),B=e("../crc32"),R=e("../signature");function s(e,t,r,n){i.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo("string",i(n));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on("error",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var u=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.10.1",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var u=e("./utils"),i=e("./external"),n=e("./utf8"),s=e("./zipEntries"),a=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on("error",function(e){t(e)}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e()}).resume()})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):u.prepareContent("the loaded zip file",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s)}return t.zipComment.length&&(h.comment=t.zipComment),h})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}})}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on("error",function(e){n.emit("error",e)}).on("end",function(){n.push(null)})}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h}var i=e("./utf8"),u=e("./utils"),l=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),f=e("./defaults"),c=e("./compressedObject"),d=e("./zipObject"),o=e("./generate"),p=e("./nodejsUtils"),m=e("./nodejs/NodejsStreamInputAdapter"),_=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},g=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=o.generateWorker(this,r,n)}catch(e){(t=new l("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){"use strict";t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),h=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new h(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.end()}),e.on("error",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){"use strict";var h=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),u=e("../base64"),n=e("../support"),a=e("../external"),o=null;if(n.nodestream)try{o=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on("data",function(e,t){n.push(e),o&&o(t)}).on("error",function(e){n=[],r(e)}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return h.newBlob(h.transformTo("arraybuffer",t),r);case"base64":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()})}function f(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=f},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,s){"use strict";for(var o=e("./utils"),h=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,"utf-8 decode"),this.leftOver=null}function l(){n.call(this,"utf-8 encode")}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?"uint8array":"array",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,a){"use strict";var o=e("./support"),h=e("./base64"),r=e("./nodejsUtils"),u=e("./external");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e("setimmediate"),a.newBlob=function(t,r){a.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if("uint8array"===r?n=i.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||"",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split("/"),r=[],n=0;n<t.length;n++){var i=t[n];"."===i||""===i&&0!==n&&n!==t.length-1||(".."===i?r.pop():r.push(i))}return r.join("/")},a.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":o.nodebuffer&&r.isBuffer(e)?"nodebuffer":o.uint8array&&e instanceof Uint8Array?"uint8array":o.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[])})},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t=a.getTypeOf(e);return t?("arraybuffer"===t?e=a.transformTo("uint8array",e):"string"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,setimmediate:54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=e("./support");function h(e){this.files=[],this.loadOptions=e}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),h=e("./compressions"),u=e("./support");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),h=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new h("error")).error(e)}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,l,t){(function(t){"use strict";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length}n=!1}l.exports=function(e){1!==h.push(e)||n||r()}}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var i=e("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],n=["PENDING"];function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e)}function h(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError("Cannot resolve promise with itself")):l.resolve(t,e)})}function c(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e))}function i(e){r||(r=!0,l.resolve(t,e))}var s=p(function(){e(i,n)});"error"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},h.prototype.callRejected=function(e){l.reject(this.promise,e)},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=p(c,t);if("error"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s))},function(e){i||(i=!0,l.reject(o,e))})}},o.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e))},function(e){n||(n=!0,l.reject(s,e))});var a;return s}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var a=e("./zlib/deflate"),o=e("./utils/common"),h=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?h.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=h.string2buf(e):"[object ArrayBuffer]"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var c=e("./zlib/inflate"),d=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?h.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var h=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){"use strict";var h,c=e("../utils/common"),u=e("./trees"),d=e("./adler32"),p=e("./crc32"),n=e("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return(e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm)}function U(e,t){e.pending_buf[e.pending++]=t}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a]}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else{var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p}},{}],49:[function(e,t,r){"use strict";var I=e("../utils/common"),O=e("./adler32"),B=e("./crc32"),R=e("./inffast"),T=e("./inftrees"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){e.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+d>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;d--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg="incorrect data check",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var D=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===e||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var i=e("../utils/common"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function L(e,t,r){P(e,r[2*t],r[2*t+1])}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o))}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t)}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--)}}(e,t),Z(s,u,e.bl_count)}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4))}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4)}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p)}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e)},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(r,n){"use strict";if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i="[object process]"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e)})}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1},r.postMessage("","*"),r.onmessage=t,e}}()?(a="setImmediate$"+Math.random()+"$",r.addEventListener?r.addEventListener("message",d,!1):r.attachEvent("onmessage",d),function(e){r.postMessage(a+e,"*")}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data)},function(e){t.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(s=l.documentElement,function(e){var t=l.createElement("script");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):function(e){setTimeout(c,0,e)},e.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f}function f(e){delete h[e]}function c(e){if(u)setTimeout(c,0,e);else{var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}function d(e){e.source===r&&"string"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length))}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[10])(10)});

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;

      var storageKey = "loglevel";
      if (typeof name === "string") {
        storageKey += ":" + name;
      } else if (typeof name === "symbol") {
        storageKey = undefined;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType || !storageKey) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage.removeItem(storageKey);
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {}
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.resetLevel = function () {
          self.setLevel(defaultLevel, false);
          clearPersistedLevel();
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    // ES6 default export, for compatibility
    defaultLogger['default'] = defaultLogger;

    return defaultLogger;
}));


/***/ }),

/***/ "./node_modules/svg2pdf.js/dist/svg2pdf.umd.min.js":
/*!*********************************************************!*\
  !*** ./node_modules/svg2pdf.js/dist/svg2pdf.umd.min.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

/**
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015-2021 yWorks GmbH
 * Copyright (c) 2013-2015 by Vitaly Puzrin
 * 
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

!function(t,e){ true?e(exports,__webpack_require__(/*! jspdf */ "./node_modules/jspdf/dist/jspdf.es.min.js")):0}(this,(function(t,e){"use strict";var r="default"in e?e.default:e,i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function n(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var a=function(){return(a=Object.assign||function(t){for(var e,r=1,i=arguments.length;r<i;r++)for(var n in e=arguments[r])Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}).apply(this,arguments)};function s(t,e,r,i){return new(r||(r=Promise))((function(n,a){function s(t){try{l(i.next(t))}catch(t){a(t)}}function o(t){try{l(i.throw(t))}catch(t){a(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,o)}l((i=i.apply(t,e||[])).next())}))}function o(t,e){var r,i,n,a,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&a[0]?i.return:a[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,a[1])).done)return n;switch(i=0,n&&(a=[2&a[0],n.value]),a[0]){case 0:case 1:n=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(n=s.trys,(n=n.length>0&&n[n.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!n||a[1]>n[0]&&a[1]<n[3])){s.label=a[1];break}if(6===a[0]&&s.label<n[1]){s.label=n[1],n=a;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(a);break}n[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{r=n=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}var l=function(){function t(t){if(this.a=void 0,this.r=0,this.g=0,this.b=0,this.simpleColors={},this.colorDefs=[],this.ok=!1,t){for(var e in"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase(),this.simpleColors={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgrey:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",grey:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightslategrey:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"},this.simpleColors)t==e&&(t=this.simpleColors[e]);this.colorDefs=[{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^(\w{2})(\w{2})(\w{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^(\w{1})(\w{1})(\w{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}];for(var r=0;r<this.colorDefs.length;r++){var i=this.colorDefs[r].re,n=this.colorDefs[r].process,a=i.exec(t);if(a){var s=n(a);this.r=s[0],this.g=s[1],this.b=s[2],this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b}}return t.prototype.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},t.prototype.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+(this.a||"1")+")"},t.prototype.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},t.prototype.getHelpXML=function(){for(var e=[],r=0;r<this.colorDefs.length;r++)for(var i=this.colorDefs[r].example,n=0;n<i.length;n++)e[e.length]=i[n];for(var a in this.simpleColors)e[e.length]=a;var s=document.createElement("ul");s.setAttribute("id","rgbcolor-examples");for(r=0;r<e.length;r++)try{var o=document.createElement("li"),l=new t(e[r]),u=document.createElement("div");u.style.cssText="margin: 3px; border: 1px solid black; background:"+l.toHex()+"; color:"+l.toHex(),u.appendChild(document.createTextNode("test"));var h=document.createTextNode(" "+e[r]+" -> "+l.toRGB()+" -> "+l.toHex());o.appendChild(u),o.appendChild(h),s.appendChild(o)}catch(t){}return s},t}(),u=function(){function t(t){this.color=t}return t.prototype.getFillData=function(t,e){return s(this,void 0,void 0,(function(){return o(this,(function(t){return[2,void 0]}))}))},t}(),h=function(){function t(){this.xmlSpace="",this.fill=null,this.fillOpacity=1,this.fontFamily="",this.fontSize=16,this.fontStyle="",this.fontWeight="",this.opacity=1,this.stroke=null,this.strokeDasharray=null,this.strokeDashoffset=0,this.strokeLinecap="",this.strokeLinejoin="",this.strokeMiterlimit=4,this.strokeOpacity=1,this.strokeWidth=1,this.alignmentBaseline="",this.textAnchor="",this.visibility="",this.color=null}return t.prototype.clone=function(){var e=new t;return e.xmlSpace=this.xmlSpace,e.fill=this.fill,e.fillOpacity=this.fillOpacity,e.fontFamily=this.fontFamily,e.fontSize=this.fontSize,e.fontStyle=this.fontStyle,e.fontWeight=this.fontWeight,e.opacity=this.opacity,e.stroke=this.stroke,e.strokeDasharray=this.strokeDasharray,e.strokeDashoffset=this.strokeDashoffset,e.strokeLinecap=this.strokeLinecap,e.strokeLinejoin=this.strokeLinejoin,e.strokeMiterlimit=this.strokeMiterlimit,e.strokeOpacity=this.strokeOpacity,e.strokeWidth=this.strokeWidth,e.textAnchor=this.textAnchor,e.alignmentBaseline=this.alignmentBaseline,e.visibility=this.visibility,e.color=this.color,e},t.default=function(){var e=new t;return e.xmlSpace="default",e.fill=new u(new l("rgb(0, 0, 0)")),e.fillOpacity=1,e.fontFamily="times",e.fontSize=16,e.fontStyle="normal",e.fontWeight="normal",e.opacity=1,e.stroke=null,e.strokeDasharray=null,e.strokeDashoffset=0,e.strokeLinecap="butt",e.strokeLinejoin="miter",e.strokeMiterlimit=4,e.strokeOpacity=1,e.strokeWidth=1,e.alignmentBaseline="baseline",e.textAnchor="start",e.visibility="visible",e.color=new l("rgb(0, 0, 0)"),e},t}(),f=/url\(["']?#([^"']+)["']?\)/,c={bottom:"bottom","text-bottom":"bottom",top:"top","text-top":"top",hanging:"hanging",middle:"middle",central:"middle",center:"middle",mathematical:"middle",ideographic:"ideographic",alphabetic:"alphabetic",baseline:"alphabetic"},p=function(){function t(){this.measureMethods={}}return t.prototype.getTextOffset=function(t,e){var r=e.textAnchor;if("start"===r)return 0;var i=this.measureTextWidth(t,e),n=0;switch(r){case"end":n=i;break;case"middle":n=i/2}return n},t.prototype.measureTextWidth=function(t,e){if(0===t.length)return 0;var r=e.fontFamily;return this.getMeasureFunction(r).call(this,t,e.fontFamily,e.fontSize+"px",e.fontStyle,e.fontWeight)},t.prototype.getMeasurementTextNode=function(){if(!this.textMeasuringTextElement){this.textMeasuringTextElement=document.createElementNS("http://www.w3.org/2000/svg","text");var t=document.createElementNS("http://www.w3.org/2000/svg","svg");t.appendChild(this.textMeasuringTextElement),t.style.setProperty("position","absolute"),t.style.setProperty("visibility","hidden"),document.body.appendChild(t)}return this.textMeasuringTextElement},t.prototype.canvasTextMeasure=function(t,e,r,i,n){var a=document.createElement("canvas").getContext("2d");return null!=a?(a.font=[i,n,r,e].join(" "),a.measureText(t).width):0},t.prototype.svgTextMeasure=function(t,e,r,i,n,a){void 0===a&&(a=this.getMeasurementTextNode());var s=a;return s.setAttribute("font-family",e),s.setAttribute("font-size",r),s.setAttribute("font-style",i),s.setAttribute("font-weight",n),s.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),s.textContent=t,s.getBBox().width},t.prototype.getMeasureFunction=function(e){var r=this.measureMethods[e];if(!r){var i=this.canvasTextMeasure(t.testString,e,"16px","normal","normal"),n=this.svgTextMeasure(t.testString,e,"16px","normal","normal");r=Math.abs(i-n)<t.epsilon?this.canvasTextMeasure:this.svgTextMeasure,this.measureMethods[e]=r}return r},t.prototype.cleanupTextMeasuring=function(){if(this.textMeasuringTextElement){var t=this.textMeasuringTextElement.parentNode;t&&document.body.removeChild(t),this.textMeasuringTextElement=void 0}},t.testString="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789!\"$%&/()=?'\\+*-_.:,;^}][{#~|<>",t.epsilon=.1,t}(),d=function(){function t(t,e){var r,i,n,a,s,o;this.pdf=t,this.svg2pdfParameters=e.svg2pdfParameters,this.attributeState=e.attributeState?e.attributeState.clone():h.default(),this.viewport=e.viewport,this.refsHandler=null!==(r=e.refsHandler)&&void 0!==r?r:null,this.styleSheets=null!==(i=e.styleSheets)&&void 0!==i?i:null,this.textMeasure=null!==(n=e.textMeasure)&&void 0!==n?n:new p,this.transform=null!==(a=e.transform)&&void 0!==a?a:this.pdf.unitMatrix,this.withinClipPath=null!==(s=e.withinClipPath)&&void 0!==s&&s,this.withinUse=null!==(o=e.withinUse)&&void 0!==o&&o}return t.prototype.clone=function(e){var r,i,n,a,s,o,l,u;return void 0===e&&(e={}),new t(this.pdf,{svg2pdfParameters:null!==(r=e.svg2pdfParameters)&&void 0!==r?r:this.svg2pdfParameters,attributeState:e.attributeState?e.attributeState.clone():this.attributeState.clone(),viewport:null!==(i=e.viewport)&&void 0!==i?i:this.viewport,refsHandler:null!==(n=e.refsHandler)&&void 0!==n?n:this.refsHandler,styleSheets:null!==(a=e.styleSheets)&&void 0!==a?a:this.styleSheets,textMeasure:null!==(s=e.textMeasure)&&void 0!==s?s:this.textMeasure,transform:null!==(o=e.transform)&&void 0!==o?o:this.transform,withinClipPath:null!==(l=e.withinClipPath)&&void 0!==l?l:this.withinClipPath,withinUse:null!==(u=e.withinUse)&&void 0!==u?u:this.withinUse})},t}(),g={}.hasOwnProperty,m=/[ -,\.\/:-@\[-\^`\{-~]/,y=/[ -,\.\/:-@\[\]\^`\{-~]/,v=/(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g,b=function t(e,r){"single"!=(r=function(t,e){if(!t)return e;var r={};for(var i in e)r[i]=g.call(t,i)?t[i]:e[i];return r}(r,t.options)).quotes&&"double"!=r.quotes&&(r.quotes="single");for(var i="double"==r.quotes?'"':"'",n=r.isIdentifier,a=e.charAt(0),s="",o=0,l=e.length;o<l;){var u=e.charAt(o++),h=u.charCodeAt(),f=void 0;if(h<32||h>126){if(h>=55296&&h<=56319&&o<l){var c=e.charCodeAt(o++);56320==(64512&c)?h=((1023&h)<<10)+(1023&c)+65536:o--}f="\\"+h.toString(16).toUpperCase()+" "}else f=r.escapeEverything?m.test(u)?"\\"+u:"\\"+h.toString(16).toUpperCase()+" ":/[\t\n\f\r\x0B]/.test(u)?"\\"+h.toString(16).toUpperCase()+" ":"\\"==u||!n&&('"'==u&&i==u||"'"==u&&i==u)||n&&y.test(u)?"\\"+u:u;s+=f}return n&&(/^-[-\d]/.test(s)?s="\\-"+s.slice(1):/\d/.test(a)&&(s="\\3"+a+" "+s.slice(1))),s=s.replace(v,(function(t,e,r){return e&&e.length%2?t:(e||"")+r})),!n&&r.wrap?i+s+i:s};b.options={escapeEverything:!1,isIdentifier:!1,quotes:"single",wrap:!1},b.version="3.0.0";var x=b,S=function(){function t(e){this.renderedElements={},this.idMap=e,this.idPrefix=String(t.instanceCounter++)}return t.prototype.getRendered=function(t,e,r){return s(this,void 0,void 0,(function(){var i,n;return o(this,(function(a){switch(a.label){case 0:return i=this.generateKey(t,e),this.renderedElements.hasOwnProperty(i)?[2,this.renderedElements[t]]:(n=this.get(t),this.renderedElements[i]=n,[4,r(n)]);case 1:return a.sent(),[2,n]}}))}))},t.prototype.get=function(t){return this.idMap[x(t,{isIdentifier:!0})]},t.prototype.generateKey=function(t,e){return this.idPrefix+"|"+t+"|"+(e||new l("rgb(0,0,0)")).toRGBA()},t.instanceCounter=0,t}();function w(t,e){return Math.atan2(e[1]-t[1],e[0]-t[0])}function k(t,e){return[2/3*(e[0]-t[0])+t[0],2/3*(e[1]-t[1])+t[1]]}function M(t){var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]);return[t[0]/e,t[1]/e]}function C(t,e){return M([e[0]-t[0],e[1]-t[1]])}function A(t,e){return[t[0]+e[0],t[1]+e[1]]}function F(t,e){var r=t[0],i=t[1];return[e.a*r+e.c*i+e.e,e.b*r+e.d*i+e.f]}var T=function(){function t(){this.segments=[]}return t.prototype.moveTo=function(t,e){return this.segments.push(new P(t,e)),this},t.prototype.lineTo=function(t,e){return this.segments.push(new B(t,e)),this},t.prototype.curveTo=function(t,e,r,i,n,a){return this.segments.push(new N(t,e,r,i,n,a)),this},t.prototype.close=function(){return this.segments.push(new L),this},t.prototype.transform=function(t){this.segments.forEach((function(e){if(e instanceof P||e instanceof B||e instanceof N){var r=F([e.x,e.y],t);e.x=r[0],e.y=r[1]}if(e instanceof N){var i=F([e.x1,e.y1],t),n=F([e.x2,e.y2],t);e.x1=i[0],e.y1=i[1],e.x2=n[0],e.y2=n[1]}}))},t.prototype.draw=function(t){var e=t.pdf;this.segments.forEach((function(t){t instanceof P?e.moveTo(t.x,t.y):t instanceof B?e.lineTo(t.x,t.y):t instanceof N?e.curveTo(t.x1,t.y1,t.x2,t.y2,t.x,t.y):e.close()}))},t}(),P=function(t,e){this.x=t,this.y=e},B=function(t,e){this.x=t,this.y=e},N=function(t,e,r,i,n,a){this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.x=n,this.y=a},L=function(){};function E(t,e){return e.split(",").indexOf((t.nodeName||t.tagName).toLowerCase())>=0}function O(t,e,r,i){var n;void 0===i&&(i=r);var a=null===(n=t.style)||void 0===n?void 0:n.getPropertyValue(i);if(a)return a;var s=e.getPropertyValue(t,i);return s||(t.hasAttribute(r)&&t.getAttribute(r)||void 0)}function I(t,e,r){if("none"===O(t.element,r.styleSheets,"display"))return!1;var i=e,n=O(t.element,r.styleSheets,"visibility");return n&&(i="hidden"!==n),i}function _(t,e,r){var i=I(t,e,r);return 0!==t.element.childNodes.length&&(t.children.forEach((function(t){t.isVisible(i,r)&&(i=!0)})),i)}var H=function(){function t(){this.markers=[]}return t.prototype.addMarker=function(t){this.markers.push(t)},t.prototype.draw=function(t){return s(this,void 0,void 0,(function(){var e,r,i,n,a,s,l;return o(this,(function(o){switch(o.label){case 0:e=0,o.label=1;case 1:return e<this.markers.length?(r=this.markers[e],i=void 0,n=r.angle,a=r.anchor,s=Math.cos(n),l=Math.sin(n),i=t.pdf.Matrix(s,l,-l,s,a[0],a[1]),i=t.pdf.matrixMult(t.pdf.Matrix(t.attributeState.strokeWidth,0,0,t.attributeState.strokeWidth,0,0),i),i=t.pdf.matrixMult(i,t.transform),t.pdf.saveGraphicsState(),[4,t.refsHandler.getRendered(r.id,null,(function(e){return e.apply(t)}))]):[3,4];case 2:o.sent(),t.pdf.doFormObject(r.id,i),t.pdf.restoreGraphicsState(),o.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},t}(),D=function(t,e,r){this.id=t,this.anchor=e,this.angle=r};function q(t,e){var r;return(r=t&&t.toString().match(/^([\-0-9.]+)em$/))?parseFloat(r[1])*e:(r=t&&t.toString().match(/^([\-0-9.]+)(px|)$/))?parseFloat(r[1]):0}function V(t){return c[t]||"alphabetic"}function j(t){for(var e,r=[],i=/[+-]?(?:(?:\d+\.?\d*)|(?:\d*\.?\d+))(?:[eE][+-]?\d+)?/g;e=i.exec(t);)r.push(parseFloat(e[0]));return r}function R(t,e){if("transparent"===t){var r=new l("rgb(0,0,0)");return r.a=0,r}if("currentcolor"===t.toLowerCase())return e||new l("rgb(0,0,0)");var i=/\s*rgba\(((?:[^,\)]*,){3}[^,\)]*)\)\s*/.exec(t);if(i){var n=j(i[1]),a=new l("rgb("+n.slice(0,3).join(",")+")");return a.a=n[3],a}return new l(t)}var W=/[a-z0-9_-]/i,G=/[\s\t]/,U=function(t){for(var e,r,i=!0,n=0,a="",s=0,o=[];;){if(r=t[s],0===n){if(!r&&i)break;if(!r&&!i)throw new Error("Parse error");if('"'===r||"'"===r)e=r,n=1,i=!1;else if(G.test(r));else{if(!W.test(r))throw new Error("Parse error");n=3,i=!1,s--}}else if(1===n){if(!r)throw new Error("Parse Error");"\\"===r?n=2:r===e?(o.push(a),a="",n=4):a+=r}else if(2===n){if(r!==e&&"\\"!==r)throw new Error("Parse error");a+=r,n=1}else if(3===n){if(!r){o.push(a);break}if(W.test(r))a+=r;else if(","===r)o.push(a),a="",n=0;else{if(!G.test(r))throw new Error("Parse error");n=5}}else if(5===n){if(!r){o.push(a);break}if(W.test(r))a+=" "+r,n=3;else if(","===r)o.push(a),a="",n=0;else if(!G.test(r))throw new Error("Parse error")}else if(4===n){if(!r)break;if(","===r)n=0;else if(!G.test(r))throw new Error("Parse error")}s++}return o},z={"sans-serif":"helvetica",verdana:"helvetica",arial:"helvetica",fixed:"courier",monospace:"courier",terminal:"courier",serif:"times",cursive:"times",fantasy:"times"};var Y,X=(Y=r.version.split("."),2===parseFloat(Y[0])&&3===parseFloat(Y[1]));function Q(t,e){return X?400==e?"italic"==t?"italic":"normal":700==e&&"italic"!==t?"bold":t+""+e:400==e||"normal"===e?"italic"===t?"italic":"normal":700!=e&&"bold"!==e||"normal"!==t?(700==e?"bold":e)+""+t:"bold"}function $(t,e){if("none"===O(e.element,t.styleSheets,"display"))return[0,0,0,0];var r=[0,0,0,0];return e.children.forEach((function(e){var i=e.getBoundingBox(t);r=[Math.min(r[0],i[0]),Math.min(r[1],i[1]),Math.max(r[0]+r[2],i[0]+i[2])-Math.min(r[0],i[0]),Math.max(r[1]+r[3],i[1]+i[3])-Math.min(r[1],i[1])]})),r}function K(t,e){var r=parseFloat,i=r(t.getAttribute("x1"))||r(O(t,e.styleSheets,"x"))||r(O(t,e.styleSheets,"cx"))-r(O(t,e.styleSheets,"r"))||0,n=r(t.getAttribute("x2"))||i+r(O(t,e.styleSheets,"width"))||r(O(t,e.styleSheets,"cx"))+r(O(t,e.styleSheets,"r"))||0,a=r(t.getAttribute("y1"))||r(O(t,e.styleSheets,"y"))||r(O(t,e.styleSheets,"cy"))-r(O(t,e.styleSheets,"r"))||0,s=r(t.getAttribute("y2"))||a+r(O(t,e.styleSheets,"height"))||r(O(t,e.styleSheets,"cy"))+r(O(t,e.styleSheets,"r"))||0;return[Math.min(i,n),Math.min(a,s),Math.max(i,n)-Math.min(i,n),Math.max(a,s)-Math.min(a,s)]}function Z(t,e,r,i,n,a,s,o){void 0===o&&(o=!1);var l,u,h=e[0],f=e[1],c=e[2],p=e[3],d=n/c,g=a/p,m=t.getAttribute("preserveAspectRatio");if(m){var y=m.split(" ");"defer"===y[0]&&(y=y.slice(1)),l=y[0],u=y[1]||"meet"}else l="xMidYMid",u="meet";if("none"!==l&&("meet"===u?d=g=Math.min(d,g):"slice"===u&&(d=g=Math.max(d,g))),o)return s.pdf.Matrix(d,0,0,g,0,0);var v=r-h*d,b=i-f*g;l.indexOf("xMid")>=0?v+=(n-c*d)/2:l.indexOf("xMax")>=0&&(v+=n-c*d),l.indexOf("YMid")>=0?b+=(a-p*g)/2:l.indexOf("YMax")>=0&&(b+=a-p*g);var x=s.pdf.Matrix(1,0,0,1,v,b),S=s.pdf.Matrix(d,0,0,g,0,0);return s.pdf.matrixMult(S,x)}function J(t,e){if(!t||"none"===t)return e.pdf.unitMatrix;for(var r,i,n=/^[\s,]*matrix\(([^)]+)\)\s*/,a=/^[\s,]*translate\(([^)]+)\)\s*/,s=/^[\s,]*rotate\(([^)]+)\)\s*/,o=/^[\s,]*scale\(([^)]+)\)\s*/,l=/^[\s,]*skewX\(([^)]+)\)\s*/,u=/^[\s,]*skewY\(([^)]+)\)\s*/,h=e.pdf.unitMatrix;t.length>0&&t.length!==i;){i=t.length;var f=n.exec(t);if(f&&(r=j(f[1]),h=e.pdf.matrixMult(e.pdf.Matrix(r[0],r[1],r[2],r[3],r[4],r[5]),h),t=t.substr(f[0].length)),f=s.exec(t)){r=j(f[1]);var c=Math.PI*r[0]/180;if(h=e.pdf.matrixMult(e.pdf.Matrix(Math.cos(c),Math.sin(c),-Math.sin(c),Math.cos(c),0,0),h),r[1]||r[2]){var p=e.pdf.Matrix(1,0,0,1,r[1],r[2]),d=e.pdf.Matrix(1,0,0,1,-r[1],-r[2]);h=e.pdf.matrixMult(d,e.pdf.matrixMult(h,p))}t=t.substr(f[0].length)}(f=a.exec(t))&&(r=j(f[1]),h=e.pdf.matrixMult(e.pdf.Matrix(1,0,0,1,r[0],r[1]||0),h),t=t.substr(f[0].length)),(f=o.exec(t))&&((r=j(f[1]))[1]||(r[1]=r[0]),h=e.pdf.matrixMult(e.pdf.Matrix(r[0],0,0,r[1],0,0),h),t=t.substr(f[0].length)),(f=l.exec(t))&&(r=parseFloat(f[1]),r*=Math.PI/180,h=e.pdf.matrixMult(e.pdf.Matrix(1,0,Math.tan(r),1,0,0),h),t=t.substr(f[0].length)),(f=u.exec(t))&&(r=parseFloat(f[1]),r*=Math.PI/180,h=e.pdf.matrixMult(e.pdf.Matrix(1,Math.tan(r),0,1,0,0),h),t=t.substr(f[0].length))}return h}var tt=function(){function t(t,e){this.element=t,this.children=e,this.parent=null}return t.prototype.setParent=function(t){this.parent=t},t.prototype.getParent=function(){return this.parent},t.prototype.getBoundingBox=function(t){return"none"===O(this.element,t.styleSheets,"display")?[0,0,0,0]:this.getBoundingBoxCore(t)},t.prototype.computeNodeTransform=function(t){var e=this.computeNodeTransformCore(t),r=O(this.element,t.styleSheets,"transform");return r?t.pdf.matrixMult(e,J(r,t)):e},t}(),et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.render=function(t){return Promise.resolve()},e.prototype.getBoundingBoxCore=function(t){return[]},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e}(tt),rt=function(t){function r(e,r,i){var n=t.call(this,r,i)||this;return n.pdfGradientType=e,n.contextColor=void 0,n}return n(r,t),r.prototype.apply=function(t){return s(this,void 0,void 0,(function(){var r,i,n,a,s,l;return o(this,(function(o){return(r=this.element.getAttribute("id"))?(i=this.getStops(t.styleSheets),n=0,a=!1,i.forEach((function(t){var e=t.opacity;e&&1!==e&&(n+=e,a=!0)})),a&&(s=new e.GState({opacity:n/i.length})),l=new e.ShadingPattern(this.pdfGradientType,this.getCoordinates(),i,s),t.pdf.addShadingPattern(r,l),[2]):[2]}))}))},r.prototype.getStops=function(t){var e=this;if(this.stops)return this.stops;if(void 0===this.contextColor){this.contextColor=null;for(var i=this;i;){var n=O(i.element,t,"color");if(n){this.contextColor=R(n,null);break}i=i.getParent()}}var a=[];return this.children.forEach((function(i){if("stop"===i.element.tagName.toLowerCase()){var n=O(i.element,t,"color"),s=R(O(i.element,t,"stop-color")||"",n?R(n,null):e.contextColor),o=parseFloat(O(i.element,t,"stop-opacity")||"1");a.push({offset:r.parseGradientOffset(i.element.getAttribute("offset")||"0"),color:[s.r,s.g,s.b],opacity:o})}})),this.stops=a},r.prototype.getBoundingBoxCore=function(t){return K(this.element,t)},r.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},r.prototype.isVisible=function(t,e){return _(this,t,e)},r.parseGradientOffset=function(t){var e=parseFloat(t);return!isNaN(e)&&t.indexOf("%")>=0?e/100:e},r}(et),it=function(t){function e(e,r){return t.call(this,"axial",e,r)||this}return n(e,t),e.prototype.getCoordinates=function(){return[parseFloat(this.element.getAttribute("x1")||"0"),parseFloat(this.element.getAttribute("y1")||"0"),parseFloat(this.element.getAttribute("x2")||"1"),parseFloat(this.element.getAttribute("y2")||"0")]},e}(rt),nt=function(t){function e(e,r){return t.call(this,"radial",e,r)||this}return n(e,t),e.prototype.getCoordinates=function(){var t=this.element.getAttribute("cx"),e=this.element.getAttribute("cy"),r=this.element.getAttribute("fx"),i=this.element.getAttribute("fy");return[parseFloat(r||t||"0.5"),parseFloat(i||e||"0.5"),0,parseFloat(t||"0.5"),parseFloat(e||"0.5"),parseFloat(this.element.getAttribute("r")||"0.5")]},e}(rt),at=function(){function t(t,e){this.key=t,this.gradient=e}return t.prototype.getFillData=function(t,e){return s(this,void 0,void 0,(function(){var r,i,n;return o(this,(function(a){switch(a.label){case 0:return[4,e.refsHandler.getRendered(this.key,null,(function(t){return t.apply(new d(e.pdf,{refsHandler:e.refsHandler,textMeasure:e.textMeasure,styleSheets:e.styleSheets,viewport:e.viewport,svg2pdfParameters:e.svg2pdfParameters}))}))];case 1:return a.sent(),this.gradient.element.hasAttribute("gradientUnits")&&"objectboundingbox"!==this.gradient.element.getAttribute("gradientUnits").toLowerCase()?r=e.pdf.unitMatrix:(i=t.getBoundingBox(e),r=e.pdf.Matrix(i[2],0,0,i[3],i[0],i[1])),n=J(O(this.gradient.element,e.styleSheets,"gradientTransform","transform"),e),[2,{key:this.key,matrix:e.pdf.matrixMult(n,r)}]}}))}))},t}(),st=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return n(r,t),r.prototype.apply=function(t){return s(this,void 0,void 0,(function(){var r,i,n,a,s;return o(this,(function(o){switch(o.label){case 0:if(!(r=this.element.getAttribute("id")))return[2];i=this.getBoundingBox(t),n=new e.TilingPattern([i[0],i[1],i[0]+i[2],i[1]+i[3]],i[2],i[3]),t.pdf.beginTilingPattern(n),a=0,s=this.children,o.label=1;case 1:return a<s.length?[4,s[a].render(new d(t.pdf,{attributeState:t.attributeState,refsHandler:t.refsHandler,styleSheets:t.styleSheets,viewport:t.viewport,svg2pdfParameters:t.svg2pdfParameters}))]:[3,4];case 2:o.sent(),o.label=3;case 3:return a++,[3,1];case 4:return t.pdf.endTilingPattern(r,n),[2]}}))}))},r.prototype.getBoundingBoxCore=function(t){return K(this.element,t)},r.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},r.prototype.isVisible=function(t,e){return _(this,t,e)},r}(et),ot=function(){function t(t,e){this.key=t,this.pattern=e}return t.prototype.getFillData=function(t,e){return s(this,void 0,void 0,(function(){var r,i,n,a,s,l,u,h,f,c,p,g;return o(this,(function(o){switch(o.label){case 0:return[4,e.refsHandler.getRendered(this.key,null,(function(t){return t.apply(new d(e.pdf,{refsHandler:e.refsHandler,textMeasure:e.textMeasure,styleSheets:e.styleSheets,viewport:e.viewport,svg2pdfParameters:e.svg2pdfParameters}))}))];case 1:return o.sent(),r={key:this.key,boundingBox:void 0,xStep:0,yStep:0,matrix:void 0},n=e.pdf.unitMatrix,this.pattern.element.hasAttribute("patternUnits")&&"objectboundingbox"!==this.pattern.element.getAttribute("patternUnits").toLowerCase()||(i=t.getBoundingBox(e),n=e.pdf.Matrix(1,0,0,1,i[0],i[1]),s=this.pattern.getBoundingBox(e),l=s[0]*i[0]||0,u=s[1]*i[1]||0,h=s[2]*i[2]||0,f=s[3]*i[3]||0,r.boundingBox=[l,u,l+h,u+f],r.xStep=h,r.yStep=f),a=e.pdf.unitMatrix,this.pattern.element.hasAttribute("patternContentUnits")&&"objectboundingbox"===this.pattern.element.getAttribute("patternContentUnits").toLowerCase()&&(i||(i=t.getBoundingBox(e)),a=e.pdf.Matrix(i[2],0,0,i[3],0,0),s=r.boundingBox||this.pattern.getBoundingBox(e),l=s[0]/i[0]||0,u=s[1]/i[1]||0,h=s[2]/i[2]||0,f=s[3]/i[3]||0,r.boundingBox=[l,u,l+h,u+f],r.xStep=h,r.yStep=f),c=e.pdf.unitMatrix,(p=O(this.pattern.element,e.styleSheets,"patternTransform","transform"))&&(c=J(p,e)),g=a,g=e.pdf.matrixMult(g,n),g=e.pdf.matrixMult(g,c),g=e.pdf.matrixMult(g,e.transform),r.matrix=g,[2,r]}}))}))},t}();function lt(t,e){var r=f.exec(t);if(r){var i=r[1],n=e.refsHandler.get(i);return n&&(n instanceof it||n instanceof nt)?function(t,e,r){var i=e.getStops(r.styleSheets);if(0===i.length)return null;if(1===i.length){var n=i[0].color,a=new l;return a.ok=!0,a.r=n[0],a.g=n[1],a.b=n[2],a.a=i[0].opacity,new u(a)}return new at(t,e)}(i,n,e):n&&n instanceof st?new ot(i,n):new u(new l("rgb(0, 0, 0)"))}var a=R(t,e.attributeState.color);return a.ok?new u(a):null}function ut(t,e,r){var i=r||e.element,n=O(i,t.styleSheets,"color");if(n){var a=R(n,t.attributeState.color);a.ok?t.attributeState.color=a:t.attributeState.color=new l("rgb(0,0,0)")}var s=O(i,t.styleSheets,"visibility");s&&(t.attributeState.visibility=s);var o=O(i,t.styleSheets,"fill");o&&(t.attributeState.fill=lt(o,t));var h=O(i,t.styleSheets,"fill-opacity");h&&(t.attributeState.fillOpacity=parseFloat(h));var f=O(i,t.styleSheets,"stroke-opacity");f&&(t.attributeState.strokeOpacity=parseFloat(f));var c=O(i,t.styleSheets,"opacity");c&&(t.attributeState.opacity=parseFloat(c));var p=O(i,t.styleSheets,"stroke-width");void 0!==p&&""!==p&&(t.attributeState.strokeWidth=Math.abs(parseFloat(p)));var d=O(i,t.styleSheets,"stroke");if(d)if("none"===d)t.attributeState.stroke=null;else{var g=R(d,t.attributeState.color);g.ok&&(t.attributeState.stroke=new u(g))}var m=O(i,t.styleSheets,"stroke-linecap");m&&(t.attributeState.strokeLinecap=m);var y=O(i,t.styleSheets,"stroke-linejoin");y&&(t.attributeState.strokeLinejoin=y);var v=O(i,t.styleSheets,"stroke-dasharray");if(v){var b=parseInt(O(i,t.styleSheets,"stroke-dashoffset")||"0");t.attributeState.strokeDasharray=j(v),t.attributeState.strokeDashoffset=b}var x=O(i,t.styleSheets,"stroke-miterlimit");void 0!==x&&""!==x&&(t.attributeState.strokeMiterlimit=parseFloat(x));var S=i.getAttribute("xml:space");S&&(t.attributeState.xmlSpace=S);var w=O(i,t.styleSheets,"font-weight");w&&(t.attributeState.fontWeight=w);var k=O(i,t.styleSheets,"font-style");k&&(t.attributeState.fontStyle=k);var M=O(i,t.styleSheets,"font-family");if(M){var C=U(M);t.attributeState.fontFamily=function(t,e,r){var i=Q(t.fontStyle,t.fontWeight),n=r.pdf.getFontList(),a="";return e.some((function(t){var e=n[t];return e&&e.indexOf(i)>=0?(a=t,!0):(t=t.toLowerCase(),!!z.hasOwnProperty(t)&&(a=t,!0))}))||(a="times"),a}(t.attributeState,C,t)}var A=O(i,t.styleSheets,"font-size");if(A){var F=t.pdf.getFontSize();t.attributeState.fontSize=q(A,F)}var T=O(i,t.styleSheets,"vertical-align")||O(i,t.styleSheets,"alignment-baseline");if(T){var P=T.match(/(baseline|text-bottom|alphabetic|ideographic|middle|central|mathematical|text-top|bottom|center|top|hanging)/);P&&(t.attributeState.alignmentBaseline=P[0])}var B=O(i,t.styleSheets,"text-anchor");B&&(t.attributeState.textAnchor=B)}function ht(t,r,i){var n=1,a=1;n*=t.attributeState.fillOpacity,n*=t.attributeState.opacity,t.attributeState.fill instanceof u&&void 0!==t.attributeState.fill.color.a&&(n*=t.attributeState.fill.color.a),a*=t.attributeState.strokeOpacity,a*=t.attributeState.opacity,t.attributeState.stroke instanceof u&&void 0!==t.attributeState.stroke.color.a&&(a*=t.attributeState.stroke.color.a);var s,o,l=n<1,h=a<1;if(E(i,"use")?(l=!0,h=!0,n*=t.attributeState.fill?1:0,a*=t.attributeState.stroke?1:0):t.withinUse&&(t.attributeState.fill!==r.attributeState.fill?(l=!0,n*=t.attributeState.fill?1:0):l&&!t.attributeState.fill&&(n=0),t.attributeState.stroke!==r.attributeState.stroke?(h=!0,a*=t.attributeState.stroke?1:0):h&&!t.attributeState.stroke&&(a=0)),l||h){var f={};l&&(f.opacity=n),h&&(f["stroke-opacity"]=a),t.pdf.setGState(new e.GState(f))}if(t.attributeState.fill&&t.attributeState.fill!==r.attributeState.fill&&t.attributeState.fill instanceof u&&t.attributeState.fill.color.ok&&!E(i,"text")&&t.pdf.setFillColor(t.attributeState.fill.color.r,t.attributeState.fill.color.g,t.attributeState.fill.color.b),t.attributeState.strokeWidth!==r.attributeState.strokeWidth&&t.pdf.setLineWidth(t.attributeState.strokeWidth),t.attributeState.stroke!==r.attributeState.stroke&&t.attributeState.stroke instanceof u&&t.pdf.setDrawColor(t.attributeState.stroke.color.r,t.attributeState.stroke.color.g,t.attributeState.stroke.color.b),t.attributeState.strokeLinecap!==r.attributeState.strokeLinecap&&t.pdf.setLineCap(t.attributeState.strokeLinecap),t.attributeState.strokeLinejoin!==r.attributeState.strokeLinejoin&&t.pdf.setLineJoin(t.attributeState.strokeLinejoin),t.attributeState.strokeDasharray===r.attributeState.strokeDasharray&&t.attributeState.strokeDashoffset===r.attributeState.strokeDashoffset||!t.attributeState.strokeDasharray||t.pdf.setLineDashPattern(t.attributeState.strokeDasharray,t.attributeState.strokeDashoffset),t.attributeState.strokeMiterlimit!==r.attributeState.strokeMiterlimit&&t.pdf.setLineMiterLimit(t.attributeState.strokeMiterlimit),t.attributeState.fontFamily!==r.attributeState.fontFamily&&(s=z.hasOwnProperty(t.attributeState.fontFamily)?z[t.attributeState.fontFamily]:t.attributeState.fontFamily),t.attributeState.fill&&t.attributeState.fill!==r.attributeState.fill&&t.attributeState.fill instanceof u&&t.attributeState.fill.color.ok){var c=t.attributeState.fill.color;t.pdf.setTextColor(c.r,c.g,c.b)}t.attributeState.fontWeight===r.attributeState.fontWeight&&t.attributeState.fontStyle===r.attributeState.fontStyle||(o=Q(t.attributeState.fontStyle,t.attributeState.fontWeight)),void 0===s&&void 0===o||(void 0===s&&(s=z.hasOwnProperty(t.attributeState.fontFamily)?z[t.attributeState.fontFamily]:t.attributeState.fontFamily),t.pdf.setFont(s,o)),t.attributeState.fontSize!==r.attributeState.fontSize&&t.pdf.setFontSize(t.attributeState.fontSize*t.pdf.internal.scaleFactor)}function ft(t,e,r){var i=f.exec(t);if(i){var n=i[1];return r.refsHandler.get(n)||void 0}}function ct(t,e,r){return s(this,void 0,void 0,(function(){var i,n;return o(this,(function(a){switch(a.label){case 0:return i=r.clone(),e.element.hasAttribute("clipPathUnits")&&"objectboundingbox"===e.element.getAttribute("clipPathUnits").toLowerCase()&&(n=t.getBoundingBox(r),i.transform=r.pdf.matrixMult(r.pdf.Matrix(n[2],0,0,n[3],n[0],n[1]),r.transform)),[4,e.apply(i)];case 1:return a.sent(),[2]}}))}))}var pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.render=function(t){return s(this,void 0,void 0,(function(){var e,r,i,n;return o(this,(function(a){switch(a.label){case 0:return this.isVisible("hidden"!==t.attributeState.visibility,t)?((e=t.clone()).transform=e.pdf.matrixMult(this.computeNodeTransform(e),t.transform),ut(e,this),r=O(this.element,e.styleSheets,"clip-path"),(i=r&&"none"!==r)?(n=ft(r,0,e))?n.isVisible(!0,e)?(e.pdf.saveGraphicsState(),[4,ct(this,n,e)]):[3,2]:[3,4]:[3,5]):[2];case 1:return a.sent(),[3,3];case 2:return[2];case 3:return[3,5];case 4:i=!1,a.label=5;case 5:return e.withinClipPath||e.pdf.saveGraphicsState(),ht(e,t,this.element),[4,this.renderCore(e)];case 6:return a.sent(),e.withinClipPath||e.pdf.restoreGraphicsState(),i&&e.pdf.restoreGraphicsState(),[2]}}))}))},e}(tt),dt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(pt),gt=function(t){function e(e,r,i){var n=t.call(this,r,i)||this;return n.cachedPath=null,n.hasMarkers=e,n}return n(e,t),e.prototype.renderCore=function(t){return s(this,void 0,void 0,(function(){var e;return o(this,(function(r){switch(r.label){case 0:return null===(e=this.getCachedPath(t))||0===e.segments.length?[2]:(t.withinClipPath?e.transform(t.transform):t.pdf.setCurrentTransformationMatrix(t.transform),e.draw(t),[4,this.fillOrStroke(t)]);case 1:return r.sent(),this.hasMarkers?[4,this.drawMarkers(t,e)]:[3,3];case 2:r.sent(),r.label=3;case 3:return[2]}}))}))},e.prototype.getCachedPath=function(t){return this.cachedPath||(this.cachedPath=this.getPath(t))},e.prototype.drawMarkers=function(t,e){return s(this,void 0,void 0,(function(){return o(this,(function(r){switch(r.label){case 0:return[4,this.getMarkers(e,t).draw(t.clone({transform:t.pdf.unitMatrix}))];case 1:return r.sent(),[2]}}))}))},e.prototype.fillOrStroke=function(t){return s(this,void 0,void 0,(function(){var e,r,i,n,a;return o(this,(function(s){switch(s.label){case 0:return t.withinClipPath?[2]:(e=t.attributeState.fill,r=t.attributeState.stroke&&0!==t.attributeState.strokeWidth,e?[4,e.getFillData(this,t)]:[3,2]);case 1:return n=s.sent(),[3,3];case 2:n=void 0,s.label=3;case 3:return i=n,a="evenodd"===O(this.element,t.styleSheets,"fill-rule"),e&&r||t.withinUse?a?t.pdf.fillStrokeEvenOdd(i):t.pdf.fillStroke(i):e?a?t.pdf.fillEvenOdd(i):t.pdf.fill(i):r?t.pdf.stroke():t.pdf.discardPath(),[2]}}))}))},e.prototype.getBoundingBoxCore=function(t){var e=this.getCachedPath(t);if(!e)return[0,0,0,0];for(var r=Number.POSITIVE_INFINITY,i=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY,a=Number.NEGATIVE_INFINITY,s=0,o=0,l=0;l<e.segments.length;l++){var u=e.segments[l];(u instanceof P||u instanceof B||u instanceof N)&&(s=u.x,o=u.y),u instanceof N?(r=Math.min(r,s,u.x1,u.x2,u.x),n=Math.max(n,s,u.x1,u.x2,u.x),i=Math.min(i,o,u.y1,u.y2,u.y),a=Math.max(a,o,u.y1,u.y2,u.y)):(r=Math.min(r,s),n=Math.max(n,s),i=Math.min(i,o),a=Math.max(a,o))}return[r,i,n-r,a-i]},e.prototype.getMarkers=function(t,e){var r=O(this.element,e.styleSheets,"marker-start"),i=O(this.element,e.styleSheets,"marker-mid"),n=O(this.element,e.styleSheets,"marker-end"),a=new H;if(r||i||n){n&&(n=mt(n)),r&&(r=mt(r)),i&&(i=mt(i));for(var s=t.segments,o=[1,0],l=void 0,u=!1,h=[1,0],f=!1,c=function(t){var e=s[t],c=r&&(1===t||!(s[t]instanceof P)&&s[t-1]instanceof P);c&&s.forEach((function(e,r){if(!f&&e instanceof L&&r>t){var i=s[r-1];f=(i instanceof P||i instanceof B||i instanceof N)&&i}}));var p=n&&(t===s.length-1||!(s[t]instanceof P)&&s[t+1]instanceof P),d=i&&t>0&&!(1===t&&s[t-1]instanceof P),g=s[t-1]||null;if(g instanceof P||g instanceof B||g instanceof N){if(e instanceof N)c&&a.addMarker(new D(r,[g.x,g.y],w(f?[f.x,f.y]:[g.x,g.y],[e.x1,e.y1]))),p&&a.addMarker(new D(n,[e.x,e.y],w([e.x2,e.y2],[e.x,e.y]))),d&&(l=C([g.x,g.y],[e.x1,e.y1]),l=g instanceof P?l:M(A(o,l)),a.addMarker(new D(i,[g.x,g.y],Math.atan2(l[1],l[0])))),o=C([e.x2,e.y2],[e.x,e.y]);else if(e instanceof P||e instanceof B){if(l=C([g.x,g.y],[e.x,e.y]),c){var m=f?C([f.x,f.y],[e.x,e.y]):l;a.addMarker(new D(r,[g.x,g.y],Math.atan2(m[1],m[0])))}if(p&&a.addMarker(new D(n,[e.x,e.y],Math.atan2(l[1],l[0]))),d){m=e instanceof P?o:g instanceof P?l:M(A(o,l));a.addMarker(new D(i,[g.x,g.y],Math.atan2(m[1],m[0])))}o=l}else if(e instanceof L){if(l=C([g.x,g.y],[u.x,u.y]),d){m=g instanceof P?l:M(A(o,l));a.addMarker(new D(i,[g.x,g.y],Math.atan2(m[1],m[0])))}if(p){m=M(A(l,h));a.addMarker(new D(n,[u.x,u.y],Math.atan2(m[1],m[0])))}o=l}}else{u=e instanceof P&&e;var y=s[t+1];(y instanceof P||y instanceof B||y instanceof N)&&(h=C([u.x,u.y],[y.x,y.y]))}},p=0;p<s.length;p++)c(p)}return a},e}(dt);function mt(t){var e=f.exec(t);return e&&e[1]||void 0}var yt=function(t){function e(e,r){return t.call(this,!0,e,r)||this}return n(e,t),e.prototype.getPath=function(t){if(t.withinClipPath||null===t.attributeState.stroke)return null;var e=parseFloat(this.element.getAttribute("x1")||"0"),r=parseFloat(this.element.getAttribute("y1")||"0"),i=parseFloat(this.element.getAttribute("x2")||"0"),n=parseFloat(this.element.getAttribute("y2")||"0");return e||i||r||n?(new T).moveTo(e,r).lineTo(i,n):null},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.prototype.isVisible=function(t,e){return I(this,t,e)},e.prototype.fillOrStroke=function(e){return s(this,void 0,void 0,(function(){return o(this,(function(r){switch(r.label){case 0:return e.attributeState.fill=null,[4,t.prototype.fillOrStroke.call(this,e)];case 1:return r.sent(),[2]}}))}))},e}(gt),vt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.apply=function(t){return s(this,void 0,void 0,(function(){var e,r,i,n,a;return o(this,(function(s){switch(s.label){case 0:return this.isVisible("hidden"!==t.attributeState.visibility,t)?((e=t.clone()).transform=e.pdf.unitMatrix,ut(e,this),r=O(this.element,e.styleSheets,"clip-path"),r&&"none"!==r&&(i=ft(r,0,e))?i.isVisible(!0,e)?[4,ct(this,i,e)]:[3,2]:[3,3]):[2];case 1:return s.sent(),[3,3];case 2:return[2];case 3:ht(e,t,this.element),n=0,a=this.children,s.label=4;case 4:return n<a.length?[4,a[n].render(e)]:[3,7];case 5:s.sent(),s.label=6;case 6:return n++,[3,4];case 7:return[2]}}))}))},e.prototype.getBoundingBoxCore=function(t){return $(t,this)},e.prototype.isVisible=function(t,e){return _(this,t,e)},e.prototype.computeNodeTransformCore=function(t){var e=parseFloat(O(this.element,t.styleSheets,"x")||"0"),r=parseFloat(O(this.element,t.styleSheets,"y")||"0"),i=this.element.getAttribute("viewBox");if(i){var n=j(i),a=parseFloat(O(this.element,t.styleSheets,"width")||O(this.element.ownerSVGElement,t.styleSheets,"width")||i[2]),s=parseFloat(O(this.element,t.styleSheets,"height")||O(this.element.ownerSVGElement,t.styleSheets,"height")||i[3]);return Z(this.element,n,e,r,a,s,t)}return t.pdf.Matrix(1,0,0,1,e,r)},e}(et),bt=function(t,e){this.width=t,this.height=e},xt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.renderCore=function(t){return s(this,void 0,void 0,(function(){var r,i,n,a,s,l,u,h,f,c,p,g,m;return o(this,(function(o){switch(o.label){case 0:return r=parseFloat,(i=this.element.getAttribute("href")||this.element.getAttribute("xlink:href"))?(n=i.substring(1),a=t.refsHandler.get(n),s=E(a.element,"symbol,svg")&&a.element.hasAttribute("viewBox"),l=r(O(this.element,t.styleSheets,"x")||"0"),u=r(O(this.element,t.styleSheets,"y")||"0"),h=void 0,f=void 0,s?(h=r(O(this.element,t.styleSheets,"width")||O(a.element,t.styleSheets,"width")||"0"),f=r(O(this.element,t.styleSheets,"height")||O(a.element,t.styleSheets,"height")||"0"),l+=r(O(a.element,t.styleSheets,"x")||"0"),u+=r(O(a.element,t.styleSheets,"y")||"0"),p=j(a.element.getAttribute("viewBox")),c=Z(a.element,p,l,u,h,f,t)):c=t.pdf.Matrix(1,0,0,1,l,u),g=new d(t.pdf,{refsHandler:t.refsHandler,styleSheets:t.styleSheets,withinUse:!0,viewport:s?new bt(h,f):t.viewport,svg2pdfParameters:t.svg2pdfParameters}),m=t.attributeState.color,[4,t.refsHandler.getRendered(n,m,(function(t){return e.renderReferencedNode(t,n,m,g)}))]):[2];case 1:return o.sent(),t.pdf.saveGraphicsState(),t.pdf.setCurrentTransformationMatrix(t.transform),s&&"visible"!==O(a.element,t.styleSheets,"overflow")&&(t.pdf.rect(l,u,h,f),t.pdf.clip().discardPath()),t.pdf.doFormObject(t.refsHandler.generateKey(n,m),c),t.pdf.restoreGraphicsState(),[2]}}))}))},e.renderReferencedNode=function(t,e,r,i){return s(this,void 0,void 0,(function(){var n;return o(this,(function(a){switch(a.label){case 0:return n=[(n=t.getBoundingBox(i))[0]-.5*n[2],n[1]-.5*n[3],2*n[2],2*n[3]],i.attributeState.color=r,i.pdf.beginFormObject(n[0],n[1],n[2],n[3],i.pdf.unitMatrix),t instanceof vt?[4,t.apply(i)]:[3,2];case 1:return a.sent(),[3,4];case 2:return[4,t.render(i)];case 3:a.sent(),a.label=4;case 4:return i.pdf.endFormObject(i.refsHandler.generateKey(e,r)),[2]}}))}))},e.prototype.getBoundingBoxCore=function(t){return K(this.element,t)},e.prototype.isVisible=function(t,e){return I(this,t,e)},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e}(dt),St=function(t){function e(e,r){return t.call(this,!1,e,r)||this}return n(e,t),e.prototype.getPath=function(t){var e=parseFloat(O(this.element,t.styleSheets,"width")||"0"),r=parseFloat(O(this.element,t.styleSheets,"height")||"0");if(!isFinite(e)||e<=0||!isFinite(r)||r<=0)return null;var i=O(this.element,t.styleSheets,"rx"),n=O(this.element,t.styleSheets,"ry"),a=Math.min(parseFloat(i||n||"0"),.5*e),s=Math.min(parseFloat(n||i||"0"),.5*r),o=parseFloat(O(this.element,t.styleSheets,"x")||"0"),l=parseFloat(O(this.element,t.styleSheets,"y")||"0"),u=4/3*(Math.SQRT2-1);return 0===a&&0===s?(new T).moveTo(o,l).lineTo(o+e,l).lineTo(o+e,l+r).lineTo(o,l+r).close():(new T).moveTo(o+=a,l).lineTo(o+=e-2*a,l).curveTo(o+a*u,l,o+a,l+(s-s*u),o+=a,l+=s).lineTo(o,l+=r-2*s).curveTo(o,l+s*u,o-a*u,l+s,o-=a,l+=s).lineTo(o+=2*a-e,l).curveTo(o-a*u,l,o-a,l-s*u,o-=a,l-=s).lineTo(o,l+=2*s-r).curveTo(o,l-s*u,o+a*u,l-s,o+=a,l-=s).close()},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.prototype.isVisible=function(t,e){return I(this,t,e)},e}(gt),wt=function(t){function e(e,r){return t.call(this,!1,e,r)||this}return n(e,t),e.prototype.getPath=function(t){var e=this.getRx(t),r=this.getRy(t);if(!isFinite(e)||r<=0||!isFinite(r)||r<=0)return null;var i=parseFloat(O(this.element,t.styleSheets,"cx")||"0"),n=parseFloat(O(this.element,t.styleSheets,"cy")||"0"),a=4/3*(Math.SQRT2-1)*e,s=4/3*(Math.SQRT2-1)*r;return(new T).moveTo(i+e,n).curveTo(i+e,n-s,i+a,n-r,i,n-r).curveTo(i-a,n-r,i-e,n-s,i-e,n).curveTo(i-e,n+s,i-a,n+r,i,n+r).curveTo(i+a,n+r,i+e,n+s,i+e,n)},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.prototype.isVisible=function(t,e){return I(this,t,e)},e}(gt),kt=function(t){function e(e,r){return t.call(this,e,r)||this}return n(e,t),e.prototype.getRx=function(t){return parseFloat(O(this.element,t.styleSheets,"rx")||"0")},e.prototype.getRy=function(t){return parseFloat(O(this.element,t.styleSheets,"ry")||"0")},e}(wt);function Mt(t){var e="invisible";return t.fill&&t.stroke?e="fillThenStroke":t.fill?e="fill":t.stroke&&(e="stroke"),e}function Ct(t){return t.replace(/[\n\r]/g,"")}function At(t){return t.replace(/[\t]/g," ")}function Ft(t){return t.replace(/ +/g," ")}function Tt(t,e,r){switch(O(t,r.styleSheets,"text-transform")){case"uppercase":return e.toUpperCase();case"lowercase":return e.toLowerCase();default:return e}}var Pt=function(){function t(t,e,r,i){this.textNode=t,this.texts=[],this.textNodes=[],this.contexts=[],this.textAnchor=e,this.originX=r,this.originY=i,this.textMeasures=[]}return t.prototype.setX=function(t){this.originX=t},t.prototype.setY=function(t){this.originY=t},t.prototype.add=function(t,e,r){this.texts.push(e),this.textNodes.push(t),this.contexts.push(r)},t.prototype.rightTrimText=function(){for(var t=this.texts.length-1;t>=0;t--)if("default"===this.contexts[t].attributeState.xmlSpace&&(this.texts[t]=this.texts[t].replace(/\s+$/,"")),this.texts[t].match(/[^\s]/))return!1;return!0},t.prototype.measureText=function(t){for(var e=0;e<this.texts.length;e++)this.textMeasures.push({width:t.textMeasure.measureTextWidth(this.texts[e],this.contexts[e].attributeState),length:this.texts[e].length})},t.prototype.put=function(t,e){var r,i,n,a,s=[],o=[],l=[],u=this.originX,h=this.originY,f=u,c=u;for(r=0;r<this.textNodes.length;r++){i=this.textNodes[r],n=this.contexts[r],a=this.textMeasures[r]||{width:t.textMeasure.measureTextWidth(this.texts[r],this.contexts[r].attributeState),length:this.texts[r].length};var p=u,d=h;if("#text"!==i.nodeName&&!s.includes(i)){s.push(i);var g=i.getAttribute("dx");null!==g&&(p+=q(g,n.attributeState.fontSize));var m=i.getAttribute("dy");null!==m&&(d+=q(m,n.attributeState.fontSize))}o[r]=p,l[r]=d,u=p+a.width+a.length*e,h=d,f=Math.min(f,p),c=Math.max(c,u)}var y=0;switch(this.textAnchor){case"start":y=0;break;case"middle":y=(c-f)/2;break;case"end":y=c-f}for(r=0;r<this.textNodes.length;r++)if(i=this.textNodes[r],n=this.contexts[r],"#text"===i.nodeName||"hidden"!==n.attributeState.visibility){t.pdf.saveGraphicsState(),ht(n,t,i);var v=n.attributeState.alignmentBaseline,b=Mt(n.attributeState);t.pdf.text(this.texts[r],o[r]-y,l[r],{baseline:V(v),angle:t.transform,renderingMode:"fill"===b?void 0:b,charSpace:0===e?void 0:e}),t.pdf.restoreGraphicsState()}return[u,h]},t}(),Bt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.processTSpans=function(t,e,r,i,n,a){for(var s=r.pdf.getFontSize(),o=r.attributeState.xmlSpace,l=!0,u=!1,h=0;h<e.childNodes.length;h++){var f=e.childNodes[h];if(f.textContent){var c=f.textContent;if("#text"===f.nodeName){var p=Ct(c);p=At(p),"default"===o&&(p=Ft(p),l&&p.match(/^\s/)&&(u=!0),p.match(/[^\s]/)&&(l=!1),a.prevText.match(/\s$/)&&(p=p.replace(/^\s+/,"")));var d=Tt(e,p,r);n.add(e,d,r),a.prevText=c,a.prevContext=r}else if(E(f,"title"));else if(E(f,"tspan")){var g=f,m=g.getAttribute("x");if(null!==m){var y=q(m,s);n=new Pt(this,O(g,r.styleSheets,"text-anchor")||r.attributeState.textAnchor,y,0),i.push({type:"y",chunk:n})}var v=g.getAttribute("y");if(null!==v){var b=q(v,s);n=new Pt(this,O(g,r.styleSheets,"text-anchor")||r.attributeState.textAnchor,0,b),i.push({type:"x",chunk:n})}var x=r.clone();ut(x,t,g),this.processTSpans(t,g,x,i,n,a)}}}return u},e.prototype.renderCore=function(t){return s(this,void 0,void 0,(function(){var e,r,i,n,a,s,l,u,h,f,c,p,d,g,m,y,v,b,x,S,w,k,M;return o(this,(function(o){if(t.pdf.saveGraphicsState(),e=0,r=0,i=1,n=t.pdf.getFontSize(),a=q(this.element.getAttribute("x"),n),s=q(this.element.getAttribute("y"),n),l=q(this.element.getAttribute("dx"),n),u=q(this.element.getAttribute("dy"),n),h=parseFloat(this.element.getAttribute("textLength")||"0"),f=t.attributeState.visibility,0===this.element.childElementCount)c=this.element.textContent||"",p=function(t,e){return t=At(t=Ct(t)),"default"===e.xmlSpace&&(t=Ft(t=t.trim())),t}(c,t.attributeState),d=Tt(this.element,p,t),e=t.textMeasure.getTextOffset(d,t.attributeState),h>0&&(g=t.textMeasure.measureTextWidth(d,t.attributeState),"default"===t.attributeState.xmlSpace&&c.match(/^\s/)&&(i=0),r=(h-g)/(d.length-i)||0),"visible"===f&&(m=t.attributeState.alignmentBaseline,y=Mt(t.attributeState),t.pdf.text(d,a+l-e,s+u,{baseline:V(m),angle:t.transform,renderingMode:"fill"===y?void 0:y,charSpace:0===r?void 0:r}));else{for(v=[],b=new Pt(this,t.attributeState.textAnchor,a+l,s+u),v.push({type:"",chunk:b}),x=this.processTSpans(this,this.element,t,v,b,{prevText:" ",prevContext:t}),i=x?0:1,S=!0,w=v.length-1;w>=0;w--)S&&(S=v[w].chunk.rightTrimText());h>0&&(k=0,M=0,v.forEach((function(e){var r=e.chunk;r.measureText(t),r.textMeasures.forEach((function(t){var e=t.width,r=t.length;k+=e,M+=r}))})),r=(h-k)/(M-i)),v.reduce((function(e,i){var n=i.type,a=i.chunk;return"x"===n?a.setX(e[0]):"y"===n&&a.setY(e[1]),a.put(t,r)}),[0,0])}return t.pdf.restoreGraphicsState(),[2]}))}))},e.prototype.isVisible=function(t,e){return _(this,t,e)},e.prototype.getBoundingBoxCore=function(t){return K(this.element,t)},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e}(dt),Nt={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},Lt=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279];function Et(t){return t>=48&&t<=57}function Ot(t){return t>=48&&t<=57||43===t||45===t||46===t}function It(t){this.index=0,this.path=t,this.max=t.length,this.result=[],this.param=0,this.err="",this.segmentStart=0,this.data=[]}function _t(t){for(;t.index<t.max&&(10===(e=t.path.charCodeAt(t.index))||13===e||8232===e||8233===e||32===e||9===e||11===e||12===e||160===e||e>=5760&&Lt.indexOf(e)>=0);)t.index++;var e}function Ht(t){var e=t.path.charCodeAt(t.index);return 48===e?(t.param=0,void t.index++):49===e?(t.param=1,void t.index++):void(t.err="SvgPath: arc flag can be 0 or 1 only (at pos "+t.index+")")}function Dt(t){var e,r=t.index,i=r,n=t.max,a=!1,s=!1,o=!1,l=!1;if(i>=n)t.err="SvgPath: missed param (at pos "+i+")";else if(43!==(e=t.path.charCodeAt(i))&&45!==e||(e=++i<n?t.path.charCodeAt(i):0),Et(e)||46===e){if(46!==e){if(a=48===e,e=++i<n?t.path.charCodeAt(i):0,a&&i<n&&e&&Et(e))return void(t.err="SvgPath: numbers started with `0` such as `09` are illegal (at pos "+r+")");for(;i<n&&Et(t.path.charCodeAt(i));)i++,s=!0;e=i<n?t.path.charCodeAt(i):0}if(46===e){for(l=!0,i++;Et(t.path.charCodeAt(i));)i++,o=!0;e=i<n?t.path.charCodeAt(i):0}if(101===e||69===e){if(l&&!s&&!o)return void(t.err="SvgPath: invalid float exponent (at pos "+i+")");if(43!==(e=++i<n?t.path.charCodeAt(i):0)&&45!==e||i++,!(i<n&&Et(t.path.charCodeAt(i))))return void(t.err="SvgPath: invalid float exponent (at pos "+i+")");for(;i<n&&Et(t.path.charCodeAt(i));)i++}t.index=i,t.param=parseFloat(t.path.slice(r,i))+0}else t.err="SvgPath: param should start with 0..9 or `.` (at pos "+i+")"}function qt(t){var e,r;r=(e=t.path[t.segmentStart]).toLowerCase();var i=t.data;if("m"===r&&i.length>2&&(t.result.push([e,i[0],i[1]]),i=i.slice(2),r="l",e="m"===e?"l":"L"),"r"===r)t.result.push([e].concat(i));else for(;i.length>=Nt[r]&&(t.result.push([e].concat(i.splice(0,Nt[r]))),Nt[r]););}function Vt(t){var e,r,i,n,a,s=t.max;if(t.segmentStart=t.index,e=t.path.charCodeAt(t.index),r=97==(32|e),function(t){switch(32|t){case 109:case 122:case 108:case 104:case 118:case 99:case 115:case 113:case 116:case 97:case 114:return!0}return!1}(e))if(n=Nt[t.path[t.index].toLowerCase()],t.index++,_t(t),t.data=[],n){for(i=!1;;){for(a=n;a>0;a--){if(!r||3!==a&&4!==a?Dt(t):Ht(t),t.err.length)return;t.data.push(t.param),_t(t),i=!1,t.index<s&&44===t.path.charCodeAt(t.index)&&(t.index++,_t(t),i=!0)}if(!i){if(t.index>=t.max)break;if(!Ot(t.path.charCodeAt(t.index)))break}}qt(t)}else qt(t);else t.err="SvgPath: bad command "+t.path[t.index]+" (at pos "+t.index+")"}function jt(){if(!(this instanceof jt))return new jt;this.queue=[],this.cache=null}jt.prototype.matrix=function(t){return 1===t[0]&&0===t[1]&&0===t[2]&&1===t[3]&&0===t[4]&&0===t[5]||(this.cache=null,this.queue.push(t)),this},jt.prototype.translate=function(t,e){return 0===t&&0===e||(this.cache=null,this.queue.push([1,0,0,1,t,e])),this},jt.prototype.scale=function(t,e){return 1===t&&1===e||(this.cache=null,this.queue.push([t,0,0,e,0,0])),this},jt.prototype.rotate=function(t,e,r){var i,n,a;return 0!==t&&(this.translate(e,r),i=t*Math.PI/180,n=Math.cos(i),a=Math.sin(i),this.queue.push([n,a,-a,n,0,0]),this.cache=null,this.translate(-e,-r)),this},jt.prototype.skewX=function(t){return 0!==t&&(this.cache=null,this.queue.push([1,0,Math.tan(t*Math.PI/180),1,0,0])),this},jt.prototype.skewY=function(t){return 0!==t&&(this.cache=null,this.queue.push([1,Math.tan(t*Math.PI/180),0,1,0,0])),this},jt.prototype.toArray=function(){if(this.cache)return this.cache;if(!this.queue.length)return this.cache=[1,0,0,1,0,0],this.cache;if(this.cache=this.queue[0],1===this.queue.length)return this.cache;for(var t=1;t<this.queue.length;t++)this.cache=(e=this.cache,r=this.queue[t],[e[0]*r[0]+e[2]*r[1],e[1]*r[0]+e[3]*r[1],e[0]*r[2]+e[2]*r[3],e[1]*r[2]+e[3]*r[3],e[0]*r[4]+e[2]*r[5]+e[4],e[1]*r[4]+e[3]*r[5]+e[5]]);var e,r;return this.cache},jt.prototype.calc=function(t,e,r){var i;return this.queue.length?(this.cache||(this.cache=this.toArray()),[t*(i=this.cache)[0]+e*i[2]+(r?0:i[4]),t*i[1]+e*i[3]+(r?0:i[5])]):[t,e]};var Rt=jt,Wt={matrix:!0,scale:!0,rotate:!0,translate:!0,skewX:!0,skewY:!0},Gt=/\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/,Ut=/[\s,]+/,zt=2*Math.PI;function Yt(t,e,r,i){var n=t*r+e*i;return n>1&&(n=1),n<-1&&(n=-1),(t*i-e*r<0?-1:1)*Math.acos(n)}function Xt(t,e){var r=4/3*Math.tan(e/4),i=Math.cos(t),n=Math.sin(t),a=Math.cos(t+e),s=Math.sin(t+e);return[i,n,i-n*r,n+i*r,a+s*r,s-a*r,a,s]}var Qt=function(t,e,r,i,n,a,s,o,l){var u=Math.sin(l*zt/360),h=Math.cos(l*zt/360),f=h*(t-r)/2+u*(e-i)/2,c=-u*(t-r)/2+h*(e-i)/2;if(0===f&&0===c)return[];if(0===s||0===o)return[];s=Math.abs(s),o=Math.abs(o);var p=f*f/(s*s)+c*c/(o*o);p>1&&(s*=Math.sqrt(p),o*=Math.sqrt(p));var d=function(t,e,r,i,n,a,s,o,l,u){var h=u*(t-r)/2+l*(e-i)/2,f=-l*(t-r)/2+u*(e-i)/2,c=s*s,p=o*o,d=h*h,g=f*f,m=c*p-c*g-p*d;m<0&&(m=0),m/=c*g+p*d;var y=(m=Math.sqrt(m)*(n===a?-1:1))*s/o*f,v=m*-o/s*h,b=u*y-l*v+(t+r)/2,x=l*y+u*v+(e+i)/2,S=(h-y)/s,w=(f-v)/o,k=(-h-y)/s,M=(-f-v)/o,C=Yt(1,0,S,w),A=Yt(S,w,k,M);return 0===a&&A>0&&(A-=zt),1===a&&A<0&&(A+=zt),[b,x,C,A]}(t,e,r,i,n,a,s,o,u,h),g=[],m=d[2],y=d[3],v=Math.max(Math.ceil(Math.abs(y)/(zt/4)),1);y/=v;for(var b=0;b<v;b++)g.push(Xt(m,y)),m+=y;return g.map((function(t){for(var e=0;e<t.length;e+=2){var r=t[e+0],i=t[e+1],n=h*(r*=s)-u*(i*=o),a=u*r+h*i;t[e+0]=n+d[0],t[e+1]=a+d[1]}return t}))},$t=Math.PI/180;function Kt(t,e,r){if(!(this instanceof Kt))return new Kt(t,e,r);this.rx=t,this.ry=e,this.ax=r}Kt.prototype.transform=function(t){var e=Math.cos(this.ax*$t),r=Math.sin(this.ax*$t),i=[this.rx*(t[0]*e+t[2]*r),this.rx*(t[1]*e+t[3]*r),this.ry*(-t[0]*r+t[2]*e),this.ry*(-t[1]*r+t[3]*e)],n=i[0]*i[0]+i[2]*i[2],a=i[1]*i[1]+i[3]*i[3],s=((i[0]-i[3])*(i[0]-i[3])+(i[2]+i[1])*(i[2]+i[1]))*((i[0]+i[3])*(i[0]+i[3])+(i[2]-i[1])*(i[2]-i[1])),o=(n+a)/2;if(s<1e-10*o)return this.rx=this.ry=Math.sqrt(o),this.ax=0,this;var l=i[0]*i[1]+i[2]*i[3],u=o+(s=Math.sqrt(s))/2,h=o-s/2;return this.ax=Math.abs(l)<1e-10&&Math.abs(u-a)<1e-10?90:180*Math.atan(Math.abs(l)>Math.abs(u-a)?(u-n)/l:l/(u-a))/Math.PI,this.ax>=0?(this.rx=Math.sqrt(u),this.ry=Math.sqrt(h)):(this.ax+=90,this.rx=Math.sqrt(h),this.ry=Math.sqrt(u)),this},Kt.prototype.isDegenerate=function(){return this.rx<1e-10*this.ry||this.ry<1e-10*this.rx};var Zt=Kt;function Jt(t){if(!(this instanceof Jt))return new Jt(t);var e=function(t){var e=new It(t),r=e.max;for(_t(e);e.index<r&&!e.err.length;)Vt(e);return e.err.length?e.result=[]:e.result.length&&("mM".indexOf(e.result[0][0])<0?(e.err="SvgPath: string should start with `M` or `m`",e.result=[]):e.result[0][0]="M"),{err:e.err,segments:e.result}}(t);this.segments=e.segments,this.err=e.err,this.__stack=[]}Jt.from=function(t){if("string"==typeof t)return new Jt(t);if(t instanceof Jt){var e=new Jt("");return e.err=t.err,e.segments=t.segments.map((function(t){return t.slice()})),e.__stack=t.__stack.map((function(t){return Rt().matrix(t.toArray())})),e}throw new Error("SvgPath.from: invalid param type "+t)},Jt.prototype.__matrix=function(t){var e,r=this;t.queue.length&&this.iterate((function(i,n,a,s){var o,l,u,h;switch(i[0]){case"v":l=0===(o=t.calc(0,i[1],!0))[0]?["v",o[1]]:["l",o[0],o[1]];break;case"V":l=(o=t.calc(a,i[1],!1))[0]===t.calc(a,s,!1)[0]?["V",o[1]]:["L",o[0],o[1]];break;case"h":l=0===(o=t.calc(i[1],0,!0))[1]?["h",o[0]]:["l",o[0],o[1]];break;case"H":l=(o=t.calc(i[1],s,!1))[1]===t.calc(a,s,!1)[1]?["H",o[0]]:["L",o[0],o[1]];break;case"a":case"A":var f=t.toArray(),c=Zt(i[1],i[2],i[3]).transform(f);if(f[0]*f[3]-f[1]*f[2]<0&&(i[5]=i[5]?"0":"1"),o=t.calc(i[6],i[7],"a"===i[0]),"A"===i[0]&&i[6]===a&&i[7]===s||"a"===i[0]&&0===i[6]&&0===i[7]){l=["a"===i[0]?"l":"L",o[0],o[1]];break}l=c.isDegenerate()?["a"===i[0]?"l":"L",o[0],o[1]]:[i[0],c.rx,c.ry,c.ax,i[4],i[5],o[0],o[1]];break;case"m":h=n>0,l=["m",(o=t.calc(i[1],i[2],h))[0],o[1]];break;default:for(l=[u=i[0]],h=u.toLowerCase()===u,e=1;e<i.length;e+=2)o=t.calc(i[e],i[e+1],h),l.push(o[0],o[1])}r.segments[n]=l}),!0)},Jt.prototype.__evaluateStack=function(){var t,e;if(this.__stack.length){if(1===this.__stack.length)return this.__matrix(this.__stack[0]),void(this.__stack=[]);for(t=Rt(),e=this.__stack.length;--e>=0;)t.matrix(this.__stack[e].toArray());this.__matrix(t),this.__stack=[]}},Jt.prototype.toString=function(){var t="",e="",r=!1;this.__evaluateStack();for(var i=0,n=this.segments.length;i<n;i++){var a=this.segments[i],s=a[0];s!==e||"m"===s||"M"===s?("m"===s&&"z"===e&&(t+=" "),t+=s,r=!1):r=!0;for(var o=1;o<a.length;o++){var l=a[o];1===o?r&&l>=0&&(t+=" "):l>=0&&(t+=" "),t+=l}e=s}return t},Jt.prototype.translate=function(t,e){return this.__stack.push(Rt().translate(t,e||0)),this},Jt.prototype.scale=function(t,e){return this.__stack.push(Rt().scale(t,e||0===e?e:t)),this},Jt.prototype.rotate=function(t,e,r){return this.__stack.push(Rt().rotate(t,e||0,r||0)),this},Jt.prototype.skewX=function(t){return this.__stack.push(Rt().skewX(t)),this},Jt.prototype.skewY=function(t){return this.__stack.push(Rt().skewY(t)),this},Jt.prototype.matrix=function(t){return this.__stack.push(Rt().matrix(t)),this},Jt.prototype.transform=function(t){return t.trim()?(this.__stack.push(function(t){var e,r,i=new Rt;return t.split(Gt).forEach((function(t){if(t.length)if(void 0===Wt[t])switch(r=t.split(Ut).map((function(t){return+t||0})),e){case"matrix":return void(6===r.length&&i.matrix(r));case"scale":return void(1===r.length?i.scale(r[0],r[0]):2===r.length&&i.scale(r[0],r[1]));case"rotate":return void(1===r.length?i.rotate(r[0],0,0):3===r.length&&i.rotate(r[0],r[1],r[2]));case"translate":return void(1===r.length?i.translate(r[0],0):2===r.length&&i.translate(r[0],r[1]));case"skewX":return void(1===r.length&&i.skewX(r[0]));case"skewY":return void(1===r.length&&i.skewY(r[0]))}else e=t})),i}(t)),this):this},Jt.prototype.round=function(t){var e,r=0,i=0,n=0,a=0;return t=t||0,this.__evaluateStack(),this.segments.forEach((function(s){var o=s[0].toLowerCase()===s[0];switch(s[0]){case"H":case"h":return o&&(s[1]+=n),n=s[1]-s[1].toFixed(t),void(s[1]=+s[1].toFixed(t));case"V":case"v":return o&&(s[1]+=a),a=s[1]-s[1].toFixed(t),void(s[1]=+s[1].toFixed(t));case"Z":case"z":return n=r,void(a=i);case"M":case"m":return o&&(s[1]+=n,s[2]+=a),n=s[1]-s[1].toFixed(t),a=s[2]-s[2].toFixed(t),r=n,i=a,s[1]=+s[1].toFixed(t),void(s[2]=+s[2].toFixed(t));case"A":case"a":return o&&(s[6]+=n,s[7]+=a),n=s[6]-s[6].toFixed(t),a=s[7]-s[7].toFixed(t),s[1]=+s[1].toFixed(t),s[2]=+s[2].toFixed(t),s[3]=+s[3].toFixed(t+2),s[6]=+s[6].toFixed(t),void(s[7]=+s[7].toFixed(t));default:return e=s.length,o&&(s[e-2]+=n,s[e-1]+=a),n=s[e-2]-s[e-2].toFixed(t),a=s[e-1]-s[e-1].toFixed(t),void s.forEach((function(e,r){r&&(s[r]=+s[r].toFixed(t))}))}})),this},Jt.prototype.iterate=function(t,e){var r,i,n,a=this.segments,s={},o=!1,l=0,u=0,h=0,f=0;if(e||this.__evaluateStack(),a.forEach((function(e,r){var i=t(e,r,l,u);Array.isArray(i)&&(s[r]=i,o=!0);var n=e[0]===e[0].toLowerCase();switch(e[0]){case"m":case"M":return l=e[1]+(n?l:0),u=e[2]+(n?u:0),h=l,void(f=u);case"h":case"H":return void(l=e[1]+(n?l:0));case"v":case"V":return void(u=e[1]+(n?u:0));case"z":case"Z":return l=h,void(u=f);default:l=e[e.length-2]+(n?l:0),u=e[e.length-1]+(n?u:0)}})),!o)return this;for(n=[],r=0;r<a.length;r++)if(void 0!==s[r])for(i=0;i<s[r].length;i++)n.push(s[r][i]);else n.push(a[r]);return this.segments=n,this},Jt.prototype.abs=function(){return this.iterate((function(t,e,r,i){var n,a=t[0],s=a.toUpperCase();if(a!==s)switch(t[0]=s,a){case"v":return void(t[1]+=i);case"a":return t[6]+=r,void(t[7]+=i);default:for(n=1;n<t.length;n++)t[n]+=n%2?r:i}}),!0),this},Jt.prototype.rel=function(){return this.iterate((function(t,e,r,i){var n,a=t[0],s=a.toLowerCase();if(a!==s&&(0!==e||"M"!==a))switch(t[0]=s,a){case"V":return void(t[1]-=i);case"A":return t[6]-=r,void(t[7]-=i);default:for(n=1;n<t.length;n++)t[n]-=n%2?r:i}}),!0),this},Jt.prototype.unarc=function(){return this.iterate((function(t,e,r,i){var n,a,s,o=[],l=t[0];return"A"!==l&&"a"!==l?null:("a"===l?(a=r+t[6],s=i+t[7]):(a=t[6],s=t[7]),0===(n=Qt(r,i,a,s,t[4],t[5],t[1],t[2],t[3])).length?[["a"===t[0]?"l":"L",t[6],t[7]]]:(n.forEach((function(t){o.push(["C",t[2],t[3],t[4],t[5],t[6],t[7]])})),o))})),this},Jt.prototype.unshort=function(){var t,e,r,i,n,a=this.segments;return this.iterate((function(s,o,l,u){var h,f=s[0],c=f.toUpperCase();o&&("T"===c?(h="t"===f,"Q"===(r=a[o-1])[0]?(t=r[1]-l,e=r[2]-u):"q"===r[0]?(t=r[1]-r[3],e=r[2]-r[4]):(t=0,e=0),i=-t,n=-e,h||(i+=l,n+=u),a[o]=[h?"q":"Q",i,n,s[1],s[2]]):"S"===c&&(h="s"===f,"C"===(r=a[o-1])[0]?(t=r[3]-l,e=r[4]-u):"c"===r[0]?(t=r[3]-r[5],e=r[4]-r[6]):(t=0,e=0),i=-t,n=-e,h||(i+=l,n+=u),a[o]=[h?"c":"C",i,n,s[1],s[2],s[3],s[4]]))})),this};var te=Jt,ee=function(t){function e(e,r){return t.call(this,!0,e,r)||this}return n(e,t),e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.prototype.isVisible=function(t,e){return I(this,t,e)},e.prototype.getPath=function(t){var e,r,i=new te(O(this.element,t.styleSheets,"d")||"").unshort().unarc().abs(),n=new T;return i.iterate((function(t){switch(t[0]){case"M":n.moveTo(t[1],t[2]);break;case"L":n.lineTo(t[1],t[2]);break;case"H":n.lineTo(t[1],r);break;case"V":n.lineTo(e,t[1]);break;case"C":n.curveTo(t[1],t[2],t[3],t[4],t[5],t[6]);break;case"Q":var i=k([e,r],[t[1],t[2]]),a=k([t[3],t[4]],[t[1],t[2]]);n.curveTo(i[0],i[1],a[0],a[1],t[3],t[4]);break;case"Z":n.close()}switch(t[0]){case"M":case"L":e=t[1],r=t[2];break;case"H":e=t[1];break;case"V":r=t[1];break;case"C":e=t[5],r=t[6];break;case"Q":e=t[3],r=t[4]}})),n},e}(gt),re=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*\s*)$/i,ie=function(t){function e(r,i){var n=t.call(this,r,i)||this;return n.imageLoadingPromise=null,n.imageUrl=n.element.getAttribute("xlink:href")||n.element.getAttribute("href"),n.imageUrl&&(n.imageLoadingPromise=e.fetchImageData(n.imageUrl)),n}return n(e,t),e.prototype.renderCore=function(t){return s(this,void 0,void 0,(function(){var e,r,i,n,a,s,l,u,h,f,c,p;return o(this,(function(o){switch(o.label){case 0:return this.imageLoadingPromise?(t.pdf.setCurrentTransformationMatrix(t.transform),e=parseFloat(O(this.element,t.styleSheets,"width")||"0"),r=parseFloat(O(this.element,t.styleSheets,"height")||"0"),i=parseFloat(O(this.element,t.styleSheets,"x")||"0"),n=parseFloat(O(this.element,t.styleSheets,"y")||"0"),!isFinite(e)||e<=0||!isFinite(r)||r<=0?[2]:[4,this.imageLoadingPromise]):[2];case 1:return a=o.sent(),s=a.data,0!==(l=a.format).indexOf("svg")?[3,3]:(u=new DOMParser,h=u.parseFromString(s,"image/svg+xml").firstElementChild,(!(f=this.element.getAttribute("preserveAspectRatio"))||f.indexOf("defer")<0||!h.getAttribute("preserveAspectRatio"))&&h.setAttribute("preserveAspectRatio",f||""),h.setAttribute("x",String(i)),h.setAttribute("y",String(n)),h.setAttribute("width",String(e)),h.setAttribute("height",String(r)),[4,de(h,c={}).render(new d(t.pdf,{refsHandler:new S(c),styleSheets:t.styleSheets,viewport:new bt(e,r),svg2pdfParameters:t.svg2pdfParameters}))]);case 2:return o.sent(),[2];case 3:p="data:image/"+l+";base64,"+btoa(s);try{t.pdf.addImage(p,"",i,n,e,r)}catch(t){"object"==typeof console&&console.warn&&console.warn("Could not load image "+this.imageUrl+".\n"+t)}o.label=4;case 4:return[2]}}))}))},e.prototype.getBoundingBoxCore=function(t){return K(this.element,t)},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.prototype.isVisible=function(t,e){return I(this,t,e)},e.fetchImageData=function(t){return s(this,void 0,void 0,(function(){var r,i,n,a,s;return o(this,(function(o){switch(o.label){case 0:if(!(n=t.match(re)))return[3,1];if(a=n[2],"image"!==(s=a.split("/"))[0])throw new Error("Unsupported image URL: "+t);return i=s[1],r=n[5],r="base64"===n[4]?atob(r):decodeURIComponent(r),[3,3];case 1:return[4,e.fetchImage(t)];case 2:r=o.sent(),i=t.substring(t.lastIndexOf(".")+1),o.label=3;case 3:return[2,{data:r,format:i}]}}))}))},e.fetchImage=function(t){return new Promise((function(e,r){var i=new XMLHttpRequest;i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=function(){if(200!==i.status)throw new Error("Error "+i.status+": Failed to load image '"+t+"'");for(var r=new Uint8Array(i.response),n="",a=0;a<r.length;a++)n+=String.fromCharCode(r[a]);e(n)},i.onerror=r,i.onabort=r,i.send(null)}))},e.getMimeType=function(t){switch(t=t.toLowerCase()){case"jpg":case"jpeg":return"image/jpeg";default:return"image/"+t}},e}(dt),ne=function(t){function e(e,r,i){var n=t.call(this,!0,r,i)||this;return n.closed=e,n}return n(e,t),e.prototype.getPath=function(t){if(!this.element.hasAttribute("points")||""===this.element.getAttribute("points"))return null;var r=e.parsePointsString(this.element.getAttribute("points")),i=new T;if(r.length<1)return i;i.moveTo(r[0][0],r[0][1]);for(var n=1;n<r.length;n++)i.lineTo(r[n][0],r[n][1]);return this.closed&&i.close(),i},e.prototype.isVisible=function(t,e){return I(this,t,e)},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.parsePointsString=function(t){for(var e=j(t),r=[],i=0;i<e.length-1;i+=2){var n=e[i],a=e[i+1];r.push([n,a])}return r},e}(gt),ae=function(t){function e(e,r){return t.call(this,!0,e,r)||this}return n(e,t),e}(ne),se=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.render=function(t){return Promise.resolve()},e.prototype.getBoundingBoxCore=function(t){return[0,0,0,0]},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e.prototype.isVisible=function(t,e){return I(this,t,e)},e}(tt),oe=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return n(r,t),r.prototype.apply=function(t){return s(this,void 0,void 0,(function(){var r,i,n,a,s;return o(this,(function(o){switch(o.label){case 0:r=this.computeNodeTransform(t),i=this.getBoundingBox(t),t.pdf.beginFormObject(i[0],i[1],i[2],i[3],r),function(t){var r=t.attributeState,i=t.pdf,n=1,a=1;n*=r.fillOpacity,n*=r.opacity,r.fill instanceof u&&void 0!==r.fill.color.a&&(n*=r.fill.color.a),a*=r.strokeOpacity,a*=r.opacity,r.stroke instanceof u&&void 0!==r.stroke.color.a&&(a*=r.stroke.color.a);var s,o={};if(o.opacity=n,o["stroke-opacity"]=a,i.setGState(new e.GState(o)),r.fill&&r.fill instanceof u&&r.fill.color.ok?i.setFillColor(r.fill.color.r,r.fill.color.g,r.fill.color.b):i.setFillColor(0,0,0),i.setLineWidth(r.strokeWidth),r.stroke instanceof u?i.setDrawColor(r.stroke.color.r,r.stroke.color.g,r.stroke.color.b):i.setDrawColor(0,0,0),i.setLineCap(r.strokeLinecap),i.setLineJoin(r.strokeLinejoin),r.strokeDasharray?i.setLineDashPattern(r.strokeDasharray,r.strokeDashoffset):i.setLineDashPattern([],0),i.setLineMiterLimit(r.strokeMiterlimit),s=z.hasOwnProperty(r.fontFamily)?z[r.fontFamily]:r.fontFamily,r.fill&&r.fill instanceof u&&r.fill.color.ok){var l=r.fill.color;i.setTextColor(l.r,l.g,l.b)}else i.setTextColor(0,0,0);var h="";"bold"===r.fontWeight&&(h="bold"),"italic"===r.fontStyle&&(h+="italic"),""===h&&(h="normal"),void 0!==s||void 0!==h?(void 0===s&&(s=z.hasOwnProperty(r.fontFamily)?z[r.fontFamily]:r.fontFamily),i.setFont(s,h)):i.setFont("helvetica",h),i.setFontSize(r.fontSize*i.internal.scaleFactor)}(n=new d(t.pdf,{refsHandler:t.refsHandler,styleSheets:t.styleSheets,viewport:t.viewport,svg2pdfParameters:t.svg2pdfParameters})),a=0,s=this.children,o.label=1;case 1:return a<s.length?[4,s[a].render(n)]:[3,4];case 2:o.sent(),o.label=3;case 3:return a++,[3,1];case 4:return t.pdf.endFormObject(this.element.getAttribute("id")),[2]}}))}))},r.prototype.getBoundingBoxCore=function(t){var e,r=this.element.getAttribute("viewBox");return r&&(e=j(r)),[e&&e[0]||0,e&&e[1]||0,e&&e[2]||parseFloat(this.element.getAttribute("markerWidth")||"3"),e&&e[3]||parseFloat(this.element.getAttribute("markerHeight")||"3")]},r.prototype.computeNodeTransformCore=function(t){var e,r=parseFloat(this.element.getAttribute("refX")||"0"),i=parseFloat(this.element.getAttribute("refY")||"0"),n=this.element.getAttribute("viewBox");if(n){var a=j(n);e=Z(this.element,a,0,0,parseFloat(this.element.getAttribute("markerWidth")||"3"),parseFloat(this.element.getAttribute("markerHeight")||"3"),t,!0),e=t.pdf.matrixMult(t.pdf.Matrix(1,0,0,1,-r,-i),e)}else e=t.pdf.Matrix(1,0,0,1,-r,-i);return e},r.prototype.isVisible=function(t,e){return _(this,t,e)},r}(et),le=function(t){function e(e,r){return t.call(this,e,r)||this}return n(e,t),e.prototype.getR=function(t){var e;return null!==(e=this.r)&&void 0!==e?e:this.r=parseFloat(O(this.element,t.styleSheets,"r")||"0")},e.prototype.getRx=function(t){return this.getR(t)},e.prototype.getRy=function(t){return this.getR(t)},e}(wt),ue=function(t){function e(e,r){return t.call(this,!1,e,r)||this}return n(e,t),e}(ne),he=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.renderCore=function(t){return s(this,void 0,void 0,(function(){var e,r;return o(this,(function(i){switch(i.label){case 0:e=0,r=this.children,i.label=1;case 1:return e<r.length?[4,r[e].render(t)]:[3,4];case 2:i.sent(),i.label=3;case 3:return e++,[3,1];case 4:return[2]}}))}))},e.prototype.getBoundingBoxCore=function(t){return $(t,this)},e}(pt),fe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.isVisible=function(t,e){return _(this,t,e)},e.prototype.render=function(e){return s(this,void 0,void 0,(function(){var r,i,n,a,s;return o(this,(function(o){switch(o.label){case 0:return this.isVisible("hidden"!==e.attributeState.visibility,e)?(r=this.getX(e),i=this.getY(e),n=this.getWidth(e),a=this.getHeight(e),e.pdf.saveGraphicsState(),s=e.transform,this.element.hasAttribute("transform")&&(s=e.pdf.matrixMult(J(this.element.getAttribute("transform"),e),s)),e.pdf.setCurrentTransformationMatrix(s),e.withinUse||"visible"===O(this.element,e.styleSheets,"overflow")||e.pdf.rect(r,i,n,a).clip().discardPath(),[4,t.prototype.render.call(this,e.clone({transform:e.pdf.unitMatrix,viewport:e.withinUse?e.viewport:new bt(n,a)}))]):[2];case 1:return o.sent(),e.pdf.restoreGraphicsState(),[2]}}))}))},e.prototype.computeNodeTransform=function(t){return this.computeNodeTransformCore(t)},e.prototype.computeNodeTransformCore=function(t){if(t.withinUse)return t.pdf.unitMatrix;var e,r=this.getX(t),i=this.getY(t),n=this.getViewBox();if(n){var a=this.getWidth(t),s=this.getHeight(t);e=Z(this.element,n,r,i,a,s,t)}else e=t.pdf.Matrix(1,0,0,1,r,i);return e},e.prototype.getWidth=function(t){if(void 0!==this.width)return this.width;var e,r,i=t.svg2pdfParameters;if(this.isOutermostSvg(t))if(null!=i.width)e=i.width;else if(r=O(this.element,t.styleSheets,"width"))e=parseFloat(r);else{var n=this.getViewBox();if(n&&(null!=i.height||O(this.element,t.styleSheets,"height"))){var a=n[2]/n[3];e=this.getHeight(t)*a}else e=Math.min(300,t.viewport.width,2*t.viewport.height)}else e=(r=O(this.element,t.styleSheets,"width"))?parseFloat(r):t.viewport.width;return this.width=e},e.prototype.getHeight=function(t){if(void 0!==this.height)return this.height;var e,r,i=t.svg2pdfParameters;if(this.isOutermostSvg(t))if(null!=i.height)e=i.height;else if(r=O(this.element,t.styleSheets,"height"))e=parseFloat(r);else{var n=this.getViewBox();if(n){var a=n[2]/n[3];e=this.getWidth(t)/a}else e=Math.min(150,t.viewport.width/2,t.viewport.height)}else e=(r=O(this.element,t.styleSheets,"height"))?parseFloat(r):t.viewport.height;return this.height=e},e.prototype.getX=function(t){if(void 0!==this.x)return this.x;if(this.isOutermostSvg(t))return this.x=0;var e=O(this.element,t.styleSheets,"x");return this.x=e?parseFloat(e):0},e.prototype.getY=function(t){if(void 0!==this.y)return this.y;if(this.isOutermostSvg(t))return this.y=0;var e=O(this.element,t.styleSheets,"y");return this.y=e?parseFloat(e):0},e.prototype.getViewBox=function(){if(void 0!==this.viewBox)return this.viewBox;var t=this.element.getAttribute("viewBox");return this.viewBox=t?j(t):void 0},e.prototype.isOutermostSvg=function(t){return t.svg2pdfParameters.element===this.element},e}(he),ce=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.isVisible=function(t,e){return _(this,t,e)},e.prototype.computeNodeTransformCore=function(t){return t.pdf.unitMatrix},e}(he),pe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.apply=function(t){return s(this,void 0,void 0,(function(){var e,r,i;return o(this,(function(n){switch(n.label){case 0:if(!this.isVisible(!0,t))return[2];e=t.pdf.matrixMult(this.computeNodeTransform(t),t.transform),t.pdf.setCurrentTransformationMatrix(e),r=0,i=this.children,n.label=1;case 1:return r<i.length?[4,i[r].render(new d(t.pdf,{refsHandler:t.refsHandler,styleSheets:t.styleSheets,viewport:t.viewport,withinClipPath:!0,svg2pdfParameters:t.svg2pdfParameters}))]:[3,4];case 2:n.sent(),n.label=3;case 3:return r++,[3,1];case 4:return t.pdf.clip().discardPath(),t.pdf.setCurrentTransformationMatrix(e.inversed()),[2]}}))}))},e.prototype.getBoundingBoxCore=function(t){return $(t,this)},e.prototype.isVisible=function(t,e){return _(this,t,e)},e}(et);function de(t,e){var r,i=[];switch(function(t,e){for(var r=[],i=0;i<t.childNodes.length;i++){var n=t.childNodes[i];"#"!==n.nodeName.charAt(0)&&r.push(n)}for(i=0;i<r.length;i++)e(i,r[i])}(t,(function(t,r){return i.push(de(r,e))})),t.tagName.toLowerCase()){case"a":case"g":r=new ce(t,i);break;case"circle":r=new le(t,i);break;case"clippath":r=new pe(t,i);break;case"ellipse":r=new kt(t,i);break;case"lineargradient":r=new it(t,i);break;case"image":r=new ie(t,i);break;case"line":r=new yt(t,i);break;case"marker":r=new oe(t,i);break;case"path":r=new ee(t,i);break;case"pattern":r=new st(t,i);break;case"polygon":r=new ae(t,i);break;case"polyline":r=new ue(t,i);break;case"radialgradient":r=new nt(t,i);break;case"rect":r=new St(t,i);break;case"svg":r=new fe(t,i);break;case"symbol":r=new vt(t,i);break;case"text":r=new Bt(t,i);break;case"use":r=new xt(t,i);break;default:r=new se(t,i)}if(null!=e&&r.element.hasAttribute("id")){var n=x(r.element.id,{isIdentifier:!0});e[n]=e[n]||r}return r.children.forEach((function(t){return t.setParent(r)})),r}var ge=function(t){var e,r,i=t,n={a:0,b:0,c:0},a=[];return e=function(e,r){var s,o,l,u,h,f;if(e.test(i))for(o=0,l=(s=i.match(e)).length;o<l;o+=1)n[r]+=1,u=s[o],h=i.indexOf(u),f=u.length,a.push({selector:t.substr(h,f),type:r,index:h,length:f}),i=i.replace(u,Array(f+1).join(" "))},(r=function(t){var e,r,n,a;if(t.test(i))for(r=0,n=(e=i.match(t)).length;r<n;r+=1)a=e[r],i=i.replace(a,Array(a.length+1).join("A"))})(/\\[0-9A-Fa-f]{6}\s?/g),r(/\\[0-9A-Fa-f]{1,5}\s/g),r(/\\./g),function(){var t,e,r,n,a=/{[^]*/gm;if(a.test(i))for(e=0,r=(t=i.match(a)).length;e<r;e+=1)n=t[e],i=i.replace(n,Array(n.length+1).join(" "))}(),e(/(\[[^\]]+\])/g,"b"),e(/(#[^\#\s\+>~\.\[:\)]+)/g,"a"),e(/(\.[^\s\+>~\.\[:\)]+)/g,"b"),e(/(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,"c"),e(/(:(?!not|global|local)[\w-]+\([^\)]*\))/gi,"b"),e(/(:(?!not|global|local)[^\s\+>~\.\[:]+)/g,"b"),i=(i=(i=(i=(i=(i=i.replace(/[\*\s\+>~]/g," ")).replace(/[#\.]/g," ")).replace(/:not/g,"    ")).replace(/:local/g,"      ")).replace(/:global/g,"       ")).replace(/[\(\)]/g," "),e(/([^\s\+>~\.\[:]+)/g,"c"),a.sort((function(t,e){return t.index-e.index})),{selector:t,specificity:"0,"+n.a.toString()+","+n.b.toString()+","+n.c.toString(),specificityArray:[0,n.a,n.b,n.c],parts:a}},me=function(){function t(t,e){this.rootSvg=t,this.loadExternalSheets=e,this.styleSheets=[]}return t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return[4,this.collectStyleSheetTexts()];case 1:return t=e.sent(),this.parseCssSheets(t),[2]}}))}))},t.prototype.collectStyleSheetTexts=function(){return s(this,void 0,void 0,(function(){var e,r,i,n,a;return o(this,(function(s){switch(s.label){case 0:if(e=[],this.loadExternalSheets&&this.rootSvg.ownerDocument)for(n=0;n<this.rootSvg.ownerDocument.childNodes.length;n++)"xml-stylesheet"===(r=this.rootSvg.ownerDocument.childNodes[n]).nodeName&&"string"==typeof r.data&&e.push(t.loadSheet(r.data.match(/href=["'].*?["']/)[0].split("=")[1].slice(1,-1)));for(i=this.rootSvg.querySelectorAll("style,link"),n=0;n<i.length;n++)E(a=i[n],"style")?e.push(a.textContent):this.loadExternalSheets&&E(a,"link")&&"stylesheet"===a.getAttribute("rel")&&a.hasAttribute("href")&&e.push(t.loadSheet(a.getAttribute("href")));return[4,Promise.all(e)];case 1:return[2,s.sent().filter((function(t){return null!==t}))]}}))}))},t.prototype.parseCssSheets=function(e){for(var r=document.implementation.createHTMLDocument(""),i=0,n=e;i<n.length;i++){var a=n[i],s=r.createElement("style");s.textContent=a,r.body.appendChild(s);var o=s.sheet;if(o instanceof CSSStyleSheet){for(var l=o.cssRules.length-1;l>=0;l--){var u=o.cssRules[l];if(u instanceof CSSStyleRule){var h=u;if(h.selectorText.indexOf(",")>=0){o.deleteRule(l);for(var f=h.cssText.substring(h.selectorText.length),c=t.splitSelectorAtCommas(h.selectorText),p=0;p<c.length;p++)o.insertRule(c[p]+f,l+p)}}else o.deleteRule(l)}this.styleSheets.push(o)}}},t.splitSelectorAtCommas=function(t){for(var e,r=/,|["']/g,i=/[^\\]["]/g,n=/[^\\][']/g,a=[],s="initial",o=-1,l=i,u=0;u<t.length;)switch(s){case"initial":r.lastIndex=u,(e=r.exec(t))?(","===e[0]?(a.push(t.substring(o+1,r.lastIndex-1).trim()),o=r.lastIndex-1):(s="withinQuotes",l='"'===e[0]?i:n),u=r.lastIndex):(a.push(t.substring(o+1).trim()),u=t.length);break;case"withinQuotes":l.lastIndex=u,(e=l.exec(t))&&(u=l.lastIndex,s="initial")}return a},t.loadSheet=function(t){return new Promise((function(e,r){var i=new XMLHttpRequest;i.open("GET",t,!0),i.responseType="text",i.onload=function(){200!==i.status&&r(new Error("Error "+i.status+": Failed to load '"+t+"'")),e(i.responseText)},i.onerror=r,i.onabort=r,i.send(null)})).catch((function(){return null}))},t.prototype.getPropertyValue=function(t,e){for(var r=[],i=0,n=this.styleSheets;i<n.length;i++)for(var a=n[i],s=0;s<a.cssRules.length;s++){var o=a.cssRules[s];o.style.getPropertyValue(e)&&t.matches(o.selectorText)&&r.push(o)}if(0!==r.length){var l=function(t,r){var i=t.style.getPropertyPriority(e);return i!==r.style.getPropertyPriority(e)?"important"===i?1:-1:function(t,e){var r,i,n;if("string"==typeof t){if(-1!==t.indexOf(","))throw"Invalid CSS selector";r=ge(t).specificityArray}else{if(!Array.isArray(t))throw"Invalid CSS selector or specificity array";if(4!==t.filter((function(t){return"number"==typeof t})).length)throw"Invalid specificity array";r=t}if("string"==typeof e){if(-1!==e.indexOf(","))throw"Invalid CSS selector";i=ge(e).specificityArray}else{if(!Array.isArray(e))throw"Invalid CSS selector or specificity array";if(4!==e.filter((function(t){return"number"==typeof t})).length)throw"Invalid specificity array";i=e}for(n=0;n<4;n+=1){if(r[n]<i[n])return-1;if(r[n]>i[n])return 1}return 0}(t.selectorText,r.selectorText)};return r.reduce((function(t,e){return 1===l(t,e)?t:e})).style.getPropertyValue(e)||void 0}},t}();function ye(t,e,r){var i,n,l;return void 0===r&&(r={}),s(this,void 0,void 0,(function(){var s,u,h,f,c,p,g,m,y,v;return o(this,(function(o){switch(o.label){case 0:return s=null!==(i=r.x)&&void 0!==i?i:0,u=null!==(n=r.y)&&void 0!==n?n:0,h=null!==(l=r.loadExternalStyleSheets)&&void 0!==l&&l,c=new S(f={}),[4,(p=new me(t,h)).load()];case 1:return o.sent(),g=new bt(e.internal.pageSize.getWidth(),e.internal.pageSize.getHeight()),m=a(a({},r),{element:t}),y=new d(e,{refsHandler:c,styleSheets:p,viewport:g,svg2pdfParameters:m}),e.advancedAPI(),e.saveGraphicsState(),e.setCurrentTransformationMatrix(e.Matrix(1,0,0,1,s,u)),e.setLineWidth(y.attributeState.strokeWidth),v=y.attributeState.fill.color,e.setFillColor(v.r,v.g,v.b),e.setFont(y.attributeState.fontFamily),e.setFontSize(y.attributeState.fontSize*e.internal.scaleFactor),[4,de(t,f).render(y)];case 2:return o.sent(),e.restoreGraphicsState(),e.compatAPI(),y.textMeasure.cleanupTextMeasuring(),[2,e]}}))}))}e.jsPDF.API.svg=function(t,e){return void 0===e&&(e={}),ye(t,this,e)},t.svg2pdf=ye,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=svg2pdf.umd.min.js.map


/***/ }),

/***/ "./src/Common/DataObjects/Fraction.ts":
/*!********************************************!*\
  !*** ./src/Common/DataObjects/Fraction.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// TODO: Check the operators' names
// TODO: This class should probably be immutable?
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Fraction = void 0;
/**
 * A class representing mathematical fractions, which have a numerator and a denominator.
 */
class Fraction {
    /**
     * Returns the maximum of two fractions (does not clone)
     * @param f1
     * @param f2
     * @returns {Fraction}
     */
    static max(f1, f2) {
        if (f1.RealValue > f2.RealValue) {
            return f1;
        }
        else {
            return f2;
        }
    }
    static Equal(f1, f2) {
        return f1.wholeValue === f2.wholeValue && f1.Denominator === f2.Denominator && f1.Numerator === f2.Numerator;
    }
    /**
     * The same as Fraction.clone
     * @param fraction
     * @returns {Fraction}
     */
    static createFromFraction(fraction) {
        return new Fraction(fraction.numerator, fraction.denominator, fraction.wholeValue, false);
    }
    static plus(f1, f2) {
        const sum = f1.clone();
        sum.Add(f2);
        return sum;
    }
    static minus(f1, f2) {
        const sum = f1.clone();
        sum.Sub(f2);
        return sum;
    }
    static multiply(f1, f2) {
        return new Fraction((f1.wholeValue * f1.denominator + f1.numerator) * (f2.wholeValue * f2.denominator + f2.numerator), f1.denominator * f2.denominator);
    }
    static greatestCommonDenominator(a, b) {
        if (a === 0) {
            return b;
        }
        if (b === 1) {
            return 1;
        }
        while (Math.abs(b) > 1e-8) { // essentially b > 0, accounts for floating point inaccuracies (0.000...01)
            if (a > b) {
                a -= b;
            }
            else {
                b -= a;
            }
        }
        return Math.round(a); // prevent returning 4.000001 or something, though it doesn't happen for our samples
    }
    /**
     *
     * @param numerator
     * @param denominator
     * @param wholeValue - the integer number, needed for values greater than 1
     * @param simplify - If simplify is true, then the fraction is simplified
     * to make both the numerator and denominator coprime, and less than maximumAllowedNumber.
     */
    constructor(numerator = 0, denominator = 1, wholeValue = 0, simplify = true) {
        this.numerator = 0;
        this.denominator = 1;
        this.wholeValue = 0;
        this.numerator = numerator;
        this.denominator = denominator;
        this.wholeValue = wholeValue;
        if (simplify) {
            this.simplify();
        }
        this.setRealValue();
    }
    toString() {
        let result = this.numerator + "/" + this.denominator;
        if (this.wholeValue !== 0) {
            result = this.wholeValue + " " + result;
        }
        return result;
    }
    clone() {
        return new Fraction(this.numerator, this.denominator, this.wholeValue, false);
    }
    get Numerator() {
        return this.numerator;
    }
    set Numerator(value) {
        if (this.numerator !== value) {
            this.numerator = value;
            this.simplify();
            this.setRealValue();
        }
    }
    get Denominator() {
        return this.denominator;
    }
    set Denominator(value) {
        if (this.denominator !== value) {
            this.denominator = value;
            // don't simplify in case of a GraceNote (need it in order to set the right symbol)
            if (this.numerator !== 0) {
                this.simplify();
            }
            this.setRealValue();
        }
    }
    get WholeValue() {
        return this.wholeValue;
    }
    set WholeValue(value) {
        if (this.wholeValue !== value) {
            this.wholeValue = value;
            this.setRealValue();
        }
    }
    /**
     * Returns the unified numerator where the whole value will be expanded
     * with the denominator and added to the existing numerator.
     */
    GetExpandedNumerator() {
        return this.wholeValue * this.denominator + this.numerator;
    }
    calculateNumberOfNeededDots() {
        let num = 1;
        let product = 2;
        const expandedNumerator = this.GetExpandedNumerator();
        while (product < expandedNumerator) {
            num++;
            product = Math.pow(2, num);
        }
        return Math.min(3, num - 1);
    }
    IsNegative() {
        return this.realValue < 0;
    }
    get RealValue() {
        return this.realValue;
    }
    expand(expansionValue) {
        this.numerator *= expansionValue;
        this.denominator *= expansionValue;
        if (this.wholeValue !== 0) {
            this.numerator += this.wholeValue * this.denominator;
            this.wholeValue = 0;
        }
    }
    // public multiplyDenominatorWithFactor(factor: number): void {
    //   this.denominator *= factor;
    //   this.setRealValue();
    // }
    /**
     * Adds a Fraction to this Fraction.
     * Attention: This changes the already existing Fraction, which might be referenced elsewhere!
     * Use Fraction.plus() for creating a new Fraction object being the sum of two Fractions.
     * @param fraction the Fraction to add.
     */
    Add(fraction) {
        // normally should check if denominator or fraction.denominator is 0 but in our case
        // a zero denominator doesn't make sense
        this.numerator = (this.wholeValue * this.denominator + this.numerator) * fraction.denominator +
            (fraction.wholeValue * fraction.denominator + fraction.numerator) * this.denominator;
        this.denominator = this.denominator * fraction.denominator;
        this.wholeValue = 0;
        this.simplify();
        this.setRealValue();
        return this;
    }
    /**
     * Subtracts a Fraction from this Fraction.
     * Attention: This changes the already existing Fraction, which might be referenced elsewhere!
     * Use Fraction.minus() for creating a new Fraction object being the difference of two Fractions.
     * @param fraction the Fraction to subtract.
     */
    Sub(fraction) {
        // normally should check if denominator or fraction.denominator is 0 but in our case
        // a zero denominator doesn't make sense
        this.numerator = (this.wholeValue * this.denominator + this.numerator) * fraction.denominator -
            (fraction.wholeValue * fraction.denominator + fraction.numerator) * this.denominator;
        this.denominator = this.denominator * fraction.denominator;
        this.wholeValue = 0;
        this.simplify();
        this.setRealValue();
        return this;
    }
    /**
     * Brute Force quanization by searching incremental with the numerator until the denominator is
     * smaller/equal than the desired one.
     * @param maxAllowedDenominator
     */
    Quantize(maxAllowedDenominator) {
        if (this.denominator <= maxAllowedDenominator) {
            return this;
        }
        const upTestFraction = new Fraction(this.numerator + 1, this.denominator, this.wholeValue);
        while (upTestFraction.Denominator > maxAllowedDenominator) {
            upTestFraction.Numerator++;
        }
        if (this.numerator > this.denominator) {
            const downTestFraction = new Fraction(this.numerator - 1, this.denominator, this.wholeValue);
            while (downTestFraction.Denominator > maxAllowedDenominator) {
                downTestFraction.Numerator--;
            }
            if (downTestFraction.Denominator < upTestFraction.Denominator) {
                return downTestFraction;
            }
        }
        return upTestFraction;
    }
    Equals(obj) {
        return this.realValue === (obj === null || obj === void 0 ? void 0 : obj.realValue);
    }
    CompareTo(obj) {
        const diff = this.realValue - obj.realValue;
        // Return the sign of diff
        return diff ? diff < 0 ? -1 : 1 : 0;
    }
    lt(frac) {
        return this.realValue < frac.realValue;
    }
    lte(frac) {
        return this.realValue <= frac.realValue;
    }
    gt(frac) {
        return !this.lte(frac);
    }
    gte(frac) {
        return !this.lt(frac);
    }
    //public Equals(f: Fraction): boolean {
    //    if (ReferenceEquals(this, f))
    //        return true;
    //    if (ReferenceEquals(f, undefined))
    //        return false;
    //    return this.numerator * f.denominator === f.numerator * this.denominator;
    //}
    setRealValue() {
        this.realValue = this.wholeValue + this.numerator / this.denominator;
    }
    simplify() {
        // don't simplify in case of a GraceNote (need it in order to set the right symbol)
        if (this.numerator === 0) {
            this.denominator = 1;
            return;
        }
        // normally should check if denominator or fraction.denominator is 0 but in our case a zero denominator
        // doesn't make sense. Could probably be optimized
        const i = Fraction.greatestCommonDenominator(Math.abs(this.numerator), Math.abs(this.denominator));
        this.numerator /= i;
        this.denominator /= i;
        const whole = Math.floor(this.numerator / this.denominator);
        if (whole !== 0) {
            this.wholeValue += whole;
            this.numerator -= whole * this.denominator;
            if (this.numerator === 0) {
                this.denominator = 1;
            }
        }
        if (this.denominator > Fraction.maximumAllowedNumber) {
            const factor = this.denominator / Fraction.maximumAllowedNumber;
            this.numerator = Math.round(this.numerator / factor);
            this.denominator = Math.round(this.denominator / factor);
        }
        if (this.numerator > Fraction.maximumAllowedNumber) {
            const factor = this.numerator / Fraction.maximumAllowedNumber;
            this.numerator = Math.round(this.numerator / factor);
            this.denominator = Math.round(this.denominator / factor);
        }
    }
    isOnBeat(timeSignature) {
        const beatDistance = this.distanceFromBeat(timeSignature);
        return Math.abs(beatDistance) < Fraction.FloatInaccuracyTolerance;
    }
    distanceFromBeat(timeSignature) {
        const beatStep = new Fraction(1, timeSignature.Denominator);
        const distanceFromBeat = this.RealValue % beatStep.RealValue; // take modulo the beat value, e.g. 1/8 in a 3/8 time signature
        return distanceFromBeat;
    }
}
exports.Fraction = Fraction;
Fraction.maximumAllowedNumber = 46340; // sqrt(int.Max) --> signed int with 4 bytes (2^31)
Fraction.FloatInaccuracyTolerance = 0.0001; // inaccuracy allowed when comparing Fraction.RealValues, because of floating point inaccuracy


/***/ }),

/***/ "./src/Common/DataObjects/Matrix2D.ts":
/*!********************************************!*\
  !*** ./src/Common/DataObjects/Matrix2D.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Matrix2D = void 0;
const PointF2D_1 = __webpack_require__(/*! ./PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
class Matrix2D {
    constructor() {
        this.matrix = [];
        for (let i = 0; i < 2; i++) {
            this.matrix[i] = [];
            for (let j = 0; j < 2; j++) {
                this.matrix[i][j] = 0;
            }
        }
    }
    static getRotationMatrix(angle) {
        const rotation = new Matrix2D();
        const cos = Math.cos(angle);
        const sin = Math.sin(angle);
        rotation.matrix[0][0] = cos;
        rotation.matrix[0][1] = -sin;
        rotation.matrix[1][0] = sin;
        rotation.matrix[1][1] = cos;
        return rotation;
    }
    scalarMultiplication(scalar) {
        for (let i = 0; i < 2; i++) {
            for (let j = 0; j < 2; j++) {
                this.matrix[i][j] *= scalar;
            }
        }
    }
    getTransposeMatrix() {
        const transpose = new Matrix2D();
        for (let i = 0; i < 2; i++) {
            for (let j = 0; j < 2; j++) {
                transpose.matrix[i][j] = this.matrix[j][i];
            }
        }
        return transpose;
    }
    vectorMultiplication(point) {
        const result = new PointF2D_1.PointF2D();
        result.x = point.x * this.matrix[0][0] + point.y * this.matrix[0][1];
        result.y = point.x * this.matrix[1][0] + point.y * this.matrix[1][1];
        return result;
    }
}
exports.Matrix2D = Matrix2D;


/***/ }),

/***/ "./src/Common/DataObjects/MusicSheetErrors.ts":
/*!****************************************************!*\
  !*** ./src/Common/DataObjects/MusicSheetErrors.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// skeleton by Andrea
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSheetErrors = void 0;
class MusicSheetErrors {
    constructor() {
        this.measureErrors = {};
        this.errors = [];
        this.tempErrors = [];
    }
    finalizeMeasure(measureNumber) {
        let list = this.measureErrors[measureNumber];
        if (!list) {
            list = [];
        }
        this.measureErrors[measureNumber] = list.concat(this.tempErrors);
        this.tempErrors = [];
    }
    pushMeasureError(errorMsg) {
        this.tempErrors.push(errorMsg);
    }
    push(errorMsg) {
        this.errors.push(errorMsg);
    }
}
exports.MusicSheetErrors = MusicSheetErrors;


/***/ }),

/***/ "./src/Common/DataObjects/OSMDColor.ts":
/*!*********************************************!*\
  !*** ./src/Common/DataObjects/OSMDColor.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OSMDColor = void 0;
/**
 * Represents a color in RGBA
 */
class OSMDColor {
    /*constructor(alpha: number, red: number, green: number, blue: number) {
        this.alpha = alpha;
        this.red = red;
        this.green = green;
        this.blue = blue;
    }*/
    /*
     * Color names are based on the definitions at https://msdn.microsoft.com/de-de/library/aa358802(vs.85).aspx
     * ...but changed a bit by the famous Mc Overacre
     */
    constructor(red, green, blue) {
        this.alpha = 255;
        this.red = red;
        this.green = green;
        this.blue = blue;
    }
    static get Black() {
        return new OSMDColor(0, 0, 0);
    }
    static get DeepSkyBlue() {
        return new OSMDColor(0, 191, 255);
    }
    static get Green() {
        return new OSMDColor(20, 160, 20);
    }
    static get Magenta() {
        return new OSMDColor(255, 0, 255);
    }
    static get Orange() {
        return new OSMDColor(255, 128, 0);
    }
    static get Red() {
        return new OSMDColor(240, 20, 20);
    }
    static get Disabled() {
        return new OSMDColor(225, 225, 225);
    }
    static get DarkBlue() {
        return new OSMDColor(0, 0, 140);
    }
    // For debugging:
    static get Debug1() {
        return new OSMDColor(200, 0, 140);
    }
    static get Debug2() {
        return new OSMDColor(100, 100, 200);
    }
    static get Debug3() {
        return new OSMDColor(0, 50, 140);
    }
    toString() {
        return "rgb(" + this.red + "," + this.green + "," + this.blue + "," + this.alpha + ")";
    }
}
exports.OSMDColor = OSMDColor;


/***/ }),

/***/ "./src/Common/DataObjects/Pitch.ts":
/*!*****************************************!*\
  !*** ./src/Common/DataObjects/Pitch.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pitch = exports.AccidentalEnum = exports.NoteEnum = void 0;
// The value of the enum indicates the number of halftoneSteps from one note to the next
var NoteEnum;
(function (NoteEnum) {
    NoteEnum[NoteEnum["C"] = 0] = "C";
    NoteEnum[NoteEnum["D"] = 2] = "D";
    NoteEnum[NoteEnum["E"] = 4] = "E";
    NoteEnum[NoteEnum["F"] = 5] = "F";
    NoteEnum[NoteEnum["G"] = 7] = "G";
    NoteEnum[NoteEnum["A"] = 9] = "A";
    NoteEnum[NoteEnum["B"] = 11] = "B";
})(NoteEnum = exports.NoteEnum || (exports.NoteEnum = {}));
/** Describes Accidental types.
 * Do not use the number values of these enum members directly for calculation anymore.
 * To use these for pitch calculation, use pitch.AccidentalHalfTones()
 * or Pitch.HalfTonesFromAccidental(accidentalEnum).
 */
var AccidentalEnum;
(function (AccidentalEnum) {
    AccidentalEnum[AccidentalEnum["SHARP"] = 0] = "SHARP";
    AccidentalEnum[AccidentalEnum["FLAT"] = 1] = "FLAT";
    AccidentalEnum[AccidentalEnum["NONE"] = 2] = "NONE";
    AccidentalEnum[AccidentalEnum["NATURAL"] = 3] = "NATURAL";
    AccidentalEnum[AccidentalEnum["DOUBLESHARP"] = 4] = "DOUBLESHARP";
    AccidentalEnum[AccidentalEnum["DOUBLEFLAT"] = 5] = "DOUBLEFLAT";
    AccidentalEnum[AccidentalEnum["TRIPLESHARP"] = 6] = "TRIPLESHARP";
    AccidentalEnum[AccidentalEnum["TRIPLEFLAT"] = 7] = "TRIPLEFLAT";
    AccidentalEnum[AccidentalEnum["QUARTERTONESHARP"] = 8] = "QUARTERTONESHARP";
    AccidentalEnum[AccidentalEnum["QUARTERTONEFLAT"] = 9] = "QUARTERTONEFLAT";
    AccidentalEnum[AccidentalEnum["SLASHFLAT"] = 10] = "SLASHFLAT";
    AccidentalEnum[AccidentalEnum["THREEQUARTERSSHARP"] = 11] = "THREEQUARTERSSHARP";
    AccidentalEnum[AccidentalEnum["THREEQUARTERSFLAT"] = 12] = "THREEQUARTERSFLAT";
    AccidentalEnum[AccidentalEnum["SLASHQUARTERSHARP"] = 13] = "SLASHQUARTERSHARP";
    AccidentalEnum[AccidentalEnum["SLASHSHARP"] = 14] = "SLASHSHARP";
    AccidentalEnum[AccidentalEnum["DOUBLESLASHFLAT"] = 15] = "DOUBLESLASHFLAT";
    AccidentalEnum[AccidentalEnum["SORI"] = 16] = "SORI";
    AccidentalEnum[AccidentalEnum["KORON"] = 17] = "KORON";
})(AccidentalEnum = exports.AccidentalEnum || (exports.AccidentalEnum = {}));
// This class represents a musical note. The middle A (440 Hz) lies in the octave with the value 1.
class Pitch {
    static getNoteEnumString(note) {
        switch (note) {
            case NoteEnum.C:
                return "C";
            case NoteEnum.D:
                return "D";
            case NoteEnum.E:
                return "E";
            case NoteEnum.F:
                return "F";
            case NoteEnum.G:
                return "G";
            case NoteEnum.A:
                return "A";
            case NoteEnum.B:
                return "B";
            default:
                return "";
        }
    }
    /** Changes a note x lines/steps up (+) or down (-) from a NoteEnum on a staffline/keyboard (white keys).
     * E.g. Two lines down (-2) from a D is a B.
     * Two lines up from an A is a C.
     *   (e.g. in the treble/violin clef, going one line up: E -> F (semitone), F -> G (2 semitones)).
     * Returns new NoteEnum and the octave shift (e.g. -1 = new octave is one octave down). */
    static lineShiftFromNoteEnum(noteEnum, lines) {
        if (lines === 0) {
            return [noteEnum, 0];
        }
        const enums = Pitch.pitchEnumValues;
        const originalIndex = enums.indexOf(noteEnum);
        let octaveShift = 0;
        let newIndex = (originalIndex + lines) % enums.length; // modulo only handles positive overflow
        if (originalIndex + lines > enums.length - 1) {
            octaveShift = 1;
        }
        if (newIndex < 0) {
            newIndex = enums.length + newIndex; // handle underflow, e.g. - 1: enums.length + (-1) = last element
            octaveShift = -1;
        }
        return [enums[newIndex], octaveShift];
    }
    /**
     * @param the input pitch
     * @param the number of halftones to transpose with
     * @returns ret[0] = the transposed fundamental.
     * ret[1] = the octave shift (not the new octave!)
     * @constructor
     */
    static CalculateTransposedHalfTone(pitch, transpose) {
        const newHalfTone = pitch.fundamentalNote + pitch.AccidentalHalfTones + transpose;
        return Pitch.WrapAroundCheck(newHalfTone, 12);
    }
    /** Returns the fundamental note x (0 <= x <= 11, e.g. 0 = C) with octave change/overflow.
     * The halftone will be one of the values in the enum NoteEnum, converted to number here as we need numbers for calculation.
     */
    static WrapAroundCheck(value, limit) {
        // the following one-line solution produces the same result, but isn't faster for -128 <= value <=, and harder to understand.
        //   For very large (unrealistic) numbers it's much faster, see PR #1374.
        // return {overflow: Math.floor(value / limit) || 0 , halftone:(value % limit + limit) % limit || 0 };
        let overflow = 0;
        while (value < 0) {
            value += limit;
            overflow--; // octave change downwards
        }
        while (value >= limit) {
            value -= limit;
            overflow++; // octave change upwards
        }
        return { overflow: overflow, halftone: value };
    }
    //public static calcFrequency(pitch: Pitch): number;
    //public static calcFrequency(fractionalKey: number): number;
    static calcFrequency(obj) {
        let octaveSteps = 0;
        let halfToneSteps;
        if (obj instanceof Pitch) {
            // obj is a pitch
            const pitch = obj;
            octaveSteps = pitch.octave - 1;
            halfToneSteps = pitch.fundamentalNote - NoteEnum.A + pitch.AccidentalHalfTones;
        }
        else if (typeof obj === "number") {
            // obj is a fractional key
            const fractionalKey = obj;
            halfToneSteps = fractionalKey - 57.0;
        }
        // Return frequency:
        return 440.0 * Math.pow(2, octaveSteps) * Math.pow(2, halfToneSteps / 12.0);
    }
    static calcFractionalKey(frequency) {
        // Return half-tone frequency:
        return Math.log(frequency / 440.0) / Math.LN10 * Pitch.halftoneFactor + 57.0;
    }
    static fromFrequency(frequency) {
        const key = Pitch.calcFractionalKey(frequency) + 0.5;
        const octave = Math.floor(key / 12) - Pitch.octXmlDiff;
        const halftone = Math.floor(key) % 12;
        let fundamentalNote = halftone;
        let accidental = AccidentalEnum.NONE;
        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {
            fundamentalNote = (halftone - 1);
            accidental = AccidentalEnum.SHARP;
        }
        return new Pitch(fundamentalNote, octave, accidental);
    }
    static fromHalftone(halftone) {
        const octave = Math.floor(halftone / 12) - Pitch.octXmlDiff;
        const halftoneInOctave = halftone % 12;
        let fundamentalNote = halftoneInOctave;
        let accidental = AccidentalEnum.NONE;
        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {
            fundamentalNote = (halftoneInOctave - 1);
            accidental = AccidentalEnum.SHARP;
        }
        return new Pitch(fundamentalNote, octave, accidental);
    }
    static ceiling(halftone) {
        halftone = (halftone) % 12;
        let fundamentalNote = halftone;
        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {
            fundamentalNote = (halftone + 1);
        }
        return fundamentalNote;
    }
    static floor(halftone) {
        halftone = halftone % 12;
        let fundamentalNote = halftone;
        if (this.pitchEnumValues.indexOf(fundamentalNote) === -1) {
            fundamentalNote = (halftone - 1);
        }
        return fundamentalNote;
    }
    constructor(fundamentalNote, octave, accidental, accidentalXml = undefined, isRest = false) {
        this.accidental = AccidentalEnum.NONE;
        this.fundamentalNote = fundamentalNote;
        this.octave = octave;
        this.accidental = accidental;
        this.accidentalXml = accidentalXml;
        this.halfTone = (fundamentalNote) + (octave + Pitch.octXmlDiff) * 12 +
            Pitch.HalfTonesFromAccidental(accidental);
        if (!isRest) {
            this.frequency = Pitch.calcFrequency(this);
        }
    }
    /** Turns an AccidentalEnum into half tone steps for pitch calculation.
     *
     */
    static HalfTonesFromAccidental(accidental) {
        // about equal performance to hashmap/dictionary. could be turned into hashmap for convenience
        // switch is very slightly faster, but both are negligibly short anyways.
        switch (accidental) {
            // ordered from most to least common to improve average runtime
            case AccidentalEnum.NONE:
                return 0;
            case AccidentalEnum.SHARP:
                return 1;
            case AccidentalEnum.FLAT:
                return -1;
            case AccidentalEnum.NATURAL:
                return 0;
            case AccidentalEnum.DOUBLESHARP:
                return 2;
            case AccidentalEnum.DOUBLEFLAT:
                return -2;
            case AccidentalEnum.TRIPLESHARP: // very rare, in some classical pieces
                return 3;
            case AccidentalEnum.TRIPLEFLAT:
                return -3;
            case AccidentalEnum.QUARTERTONESHARP:
                return 0.5;
            case AccidentalEnum.QUARTERTONEFLAT:
                return -0.5;
            case AccidentalEnum.SLASHFLAT:
                return -0.51; // TODO currently necessary for quarter tone flat rendering after slash flat
            case AccidentalEnum.THREEQUARTERSSHARP:
                return 1.5;
            case AccidentalEnum.THREEQUARTERSFLAT:
                return -1.5;
            case AccidentalEnum.SLASHQUARTERSHARP:
                return 0.0013; // tmp for identification
            case AccidentalEnum.SLASHSHARP:
                return 0.0014; // tmp for identification
            case AccidentalEnum.DOUBLESLASHFLAT:
                return -0.0015; // tmp for identification
            case AccidentalEnum.SORI:
                return 0.0016; // tmp for identification
            case AccidentalEnum.KORON:
                return 0.0017; // tmp for identification
            default:
                throw new Error("Unhandled AccidentalEnum value");
            // return 0;
        }
    }
    static AccidentalFromHalfTones(halfTones) {
        switch (halfTones) {
            case 0:
                // for enharmonic change, we won't get a Natural accidental. Maybe there are edge cases though?
                return AccidentalEnum.NONE;
            case 1:
                return AccidentalEnum.SHARP;
            case -1:
                return AccidentalEnum.FLAT;
            case 2:
                return AccidentalEnum.DOUBLESHARP;
            case -2:
                return AccidentalEnum.DOUBLEFLAT;
            case 3:
                return AccidentalEnum.TRIPLESHARP;
            case -3:
                return AccidentalEnum.TRIPLEFLAT;
            case 0.5:
                return AccidentalEnum.QUARTERTONESHARP;
            case -0.5:
                return AccidentalEnum.QUARTERTONEFLAT;
            case 1.5:
                return AccidentalEnum.THREEQUARTERSSHARP;
            case -1.5:
                return AccidentalEnum.THREEQUARTERSFLAT;
            default:
                if (halfTones > 0 && halfTones < 1) {
                    return AccidentalEnum.QUARTERTONESHARP;
                }
                else if (halfTones < 0 && halfTones > -1) {
                    return AccidentalEnum.QUARTERTONEFLAT;
                }
                // potentially unhandled or broken accidental halfTone value
                return AccidentalEnum.QUARTERTONESHARP; // to signal unhandled value
        }
    }
    /**
     * Converts AccidentalEnum to a string which represents an accidental in VexFlow
     * Can also be useful in other cases, but has to match Vexflow accidental codes.
     * @param accidental
     * @returns {string} Vexflow Accidental code
     */
    static accidentalVexflow(accidental) {
        let acc;
        switch (accidental) {
            case AccidentalEnum.NATURAL:
                acc = "n";
                break;
            case AccidentalEnum.FLAT:
                acc = "b";
                break;
            case AccidentalEnum.SHARP:
                acc = "#";
                break;
            case AccidentalEnum.DOUBLESHARP:
                acc = "##";
                break;
            case AccidentalEnum.TRIPLESHARP:
                acc = "###";
                break;
            case AccidentalEnum.DOUBLEFLAT:
                acc = "bb";
                break;
            case AccidentalEnum.TRIPLEFLAT:
                acc = "bbs"; // there is no "bbb" in VexFlow yet, unfortunately.
                break;
            case AccidentalEnum.QUARTERTONESHARP:
                acc = "+";
                break;
            case AccidentalEnum.QUARTERTONEFLAT:
                acc = "d";
                break;
            case AccidentalEnum.SLASHFLAT:
                acc = "bs";
                break;
            case AccidentalEnum.THREEQUARTERSSHARP:
                acc = "++";
                break;
            case AccidentalEnum.THREEQUARTERSFLAT:
                acc = "db";
                break;
            case AccidentalEnum.SLASHQUARTERSHARP:
                acc = "+-";
                break;
            case AccidentalEnum.SLASHSHARP:
                acc = "++-";
                break;
            case AccidentalEnum.DOUBLESLASHFLAT:
                acc = "bss";
                break;
            case AccidentalEnum.SORI:
                acc = "o";
                break;
            case AccidentalEnum.KORON:
                acc = "k";
                break;
            default:
        }
        return acc;
    }
    get AccidentalHalfTones() {
        return Pitch.HalfTonesFromAccidental(this.accidental);
    }
    get Octave() {
        return this.octave;
    }
    get FundamentalNote() {
        return this.fundamentalNote;
    }
    get Accidental() {
        return this.accidental;
    }
    get AccidentalXml() {
        return this.accidentalXml;
    }
    get Frequency() {
        return this.frequency;
    }
    static get OctaveXmlDifference() {
        return Pitch.octXmlDiff;
    }
    getHalfTone() {
        return this.halfTone;
    }
    // This method returns a new Pitch transposed by the given factor
    getTransposedPitch(factor) {
        if (factor > 12) {
            throw new Error("rewrite this method to handle bigger octave changes or don't use is with bigger octave changes!");
        }
        if (factor > 0) {
            return this.getHigherPitchByTransposeFactor(factor);
        }
        if (factor < 0) {
            return this.getLowerPitchByTransposeFactor(-factor);
        }
        return this;
    }
    DoEnharmonicChange() {
        switch (this.accidental) {
            case AccidentalEnum.FLAT:
            case AccidentalEnum.DOUBLEFLAT:
                this.fundamentalNote = this.getPreviousFundamentalNote(this.fundamentalNote);
                this.accidental = Pitch.AccidentalFromHalfTones(this.halfTone - ((this.fundamentalNote) +
                    (this.octave + Pitch.octXmlDiff) * 12));
                break;
            case AccidentalEnum.SHARP:
            case AccidentalEnum.DOUBLESHARP:
                this.fundamentalNote = this.getNextFundamentalNote(this.fundamentalNote);
                this.accidental = Pitch.AccidentalFromHalfTones(this.halfTone - ((this.fundamentalNote) +
                    (this.octave + Pitch.octXmlDiff) * 12));
                break;
            default:
                return;
        }
    }
    ToString() {
        let accidentalString = Pitch.accidentalVexflow(this.accidental);
        if (!accidentalString) {
            accidentalString = "";
        }
        return "Key: " + Pitch.getNoteEnumString(this.fundamentalNote) + accidentalString +
            ", Note: " + this.fundamentalNote + ", octave: " + this.octave.toString();
    }
    OperatorEquals(p2) {
        const p1 = this;
        // if (ReferenceEquals(p1, p2)) {
        //     return true;
        // }
        if (!p1 || !p2) {
            return false;
        }
        return (p1.FundamentalNote === p2.FundamentalNote && p1.Octave === p2.Octave && p1.Accidental === p2.Accidental);
    }
    OperatorNotEqual(p2) {
        const p1 = this;
        return !(p1 === p2);
    }
    //These don't take into account accidentals! which isn't needed for our current purpose
    OperatorFundamentalGreaterThan(p2) {
        const p1 = this;
        if (p1.Octave === p2.Octave) {
            return p1.FundamentalNote > p2.FundamentalNote;
        }
        else {
            return p1.Octave > p2.Octave;
        }
    }
    OperatorFundamentalLessThan(p2) {
        const p1 = this;
        if (p1.Octave === p2.Octave) {
            return p1.FundamentalNote < p2.FundamentalNote;
        }
        else {
            return p1.Octave < p2.Octave;
        }
    }
    // This method returns a new Pitch factor-Halftones higher than the current Pitch
    getHigherPitchByTransposeFactor(factor) {
        const noteEnumIndex = Pitch.pitchEnumValues.indexOf(this.fundamentalNote);
        let newOctave = this.octave;
        let newNoteEnum;
        if (noteEnumIndex + factor > Pitch.pitchEnumValues.length - 1) {
            newNoteEnum = Pitch.pitchEnumValues[noteEnumIndex + factor - Pitch.pitchEnumValues.length];
            newOctave++;
        }
        else {
            newNoteEnum = Pitch.pitchEnumValues[noteEnumIndex + factor];
        }
        return new Pitch(newNoteEnum, newOctave, AccidentalEnum.NONE);
    }
    getLowerPitchByTransposeFactor(factor) {
        const noteEnumIndex = Pitch.pitchEnumValues.indexOf(this.fundamentalNote);
        let newOctave = this.octave;
        let newNoteEnum;
        if (noteEnumIndex - factor < 0) {
            newNoteEnum = Pitch.pitchEnumValues[Pitch.pitchEnumValues.length + noteEnumIndex - factor];
            newOctave--;
        }
        else {
            newNoteEnum = Pitch.pitchEnumValues[noteEnumIndex - factor];
        }
        return new Pitch(newNoteEnum, newOctave, AccidentalEnum.NONE);
    }
    getNextFundamentalNote(fundamental) {
        let i = Pitch.pitchEnumValues.indexOf(fundamental);
        i = (i + 1) % Pitch.pitchEnumValues.length;
        return Pitch.pitchEnumValues[i];
    }
    getPreviousFundamentalNote(fundamental) {
        const i = Pitch.pitchEnumValues.indexOf(fundamental);
        if (i > 0) {
            return Pitch.pitchEnumValues[i - 1];
        }
        else {
            return Pitch.pitchEnumValues[Pitch.pitchEnumValues.length - 1];
        }
    }
}
exports.Pitch = Pitch;
Pitch.pitchEnumValues = [
    NoteEnum.C, NoteEnum.D, NoteEnum.E, NoteEnum.F, NoteEnum.G, NoteEnum.A, NoteEnum.B,
];
Pitch.halftoneFactor = 12 / (Math.LN2 / Math.LN10);
Pitch.octXmlDiff = 3;


/***/ }),

/***/ "./src/Common/DataObjects/PointF2D.ts":
/*!********************************************!*\
  !*** ./src/Common/DataObjects/PointF2D.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PointF2D = void 0;
// Represent a point on a plane, with (x,y) coordinates
class PointF2D {
    constructor(x = 0, y = 0) {
        this.x = 0;
        this.y = 0;
        this.x = x;
        this.y = y;
    }
    static get Empty() {
        return new PointF2D();
    }
    static pointsAreEqual(p1, p2) {
        return (p1.x === p2.x && p1.y === p2.y);
    }
    ToString() {
        return "[" + this.x + ", " + this.y + "]";
    }
}
exports.PointF2D = PointF2D;


/***/ }),

/***/ "./src/Common/DataObjects/RectangleF2D.ts":
/*!************************************************!*\
  !*** ./src/Common/DataObjects/RectangleF2D.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RectangleF2D = void 0;
const SizeF2D_1 = __webpack_require__(/*! ./SizeF2D */ "./src/Common/DataObjects/SizeF2D.ts");
const PointF2D_1 = __webpack_require__(/*! ./PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
/**
 * Represent a rectangle on a plane
 */
class RectangleF2D {
    /**
     *
     * @param x
     * @param y
     * @param width
     * @param height
     */
    constructor(x, y, width, height) {
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    static createFromLocationAndSize(location, size) {
        return new RectangleF2D(location.x, location.y, size.width, size.height);
    }
    get Location() {
        return new PointF2D_1.PointF2D(this.x, this.y);
    }
    get Size() {
        return new SizeF2D_1.SizeF2D(this.width, this.height);
    }
}
exports.RectangleF2D = RectangleF2D;


/***/ }),

/***/ "./src/Common/DataObjects/SizeF2D.ts":
/*!*******************************************!*\
  !*** ./src/Common/DataObjects/SizeF2D.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SizeF2D = void 0;
/**
 * Represent the size of a 2D object, with (width, height)
 */
class SizeF2D {
    constructor(width = 0, height = 0) {
        this.width = width;
        this.height = height;
    }
}
exports.SizeF2D = SizeF2D;


/***/ }),

/***/ "./src/Common/DataObjects/index.ts":
/*!*****************************************!*\
  !*** ./src/Common/DataObjects/index.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./Fraction */ "./src/Common/DataObjects/Fraction.ts"), exports);
__exportStar(__webpack_require__(/*! ./Matrix2D */ "./src/Common/DataObjects/Matrix2D.ts"), exports);
__exportStar(__webpack_require__(/*! ./MusicSheetErrors */ "./src/Common/DataObjects/MusicSheetErrors.ts"), exports);
__exportStar(__webpack_require__(/*! ./OSMDColor */ "./src/Common/DataObjects/OSMDColor.ts"), exports);
__exportStar(__webpack_require__(/*! ./Pitch */ "./src/Common/DataObjects/Pitch.ts"), exports);
__exportStar(__webpack_require__(/*! ./PointF2D */ "./src/Common/DataObjects/PointF2D.ts"), exports);
__exportStar(__webpack_require__(/*! ./RectangleF2D */ "./src/Common/DataObjects/RectangleF2D.ts"), exports);
__exportStar(__webpack_require__(/*! ./SizeF2D */ "./src/Common/DataObjects/SizeF2D.ts"), exports);


/***/ }),

/***/ "./src/Common/Enums/FontStyles.ts":
/*!****************************************!*\
  !*** ./src/Common/Enums/FontStyles.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FontStyles = void 0;
/**
 * The styles available to write text on the music sheet
 */
var FontStyles;
(function (FontStyles) {
    FontStyles[FontStyles["Regular"] = 0] = "Regular";
    FontStyles[FontStyles["Bold"] = 1] = "Bold";
    FontStyles[FontStyles["Italic"] = 2] = "Italic";
    FontStyles[FontStyles["BoldItalic"] = 3] = "BoldItalic";
    FontStyles[FontStyles["Underlined"] = 4] = "Underlined";
})(FontStyles = exports.FontStyles || (exports.FontStyles = {}));


/***/ }),

/***/ "./src/Common/Enums/Fonts.ts":
/*!***********************************!*\
  !*** ./src/Common/Enums/Fonts.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Fonts = void 0;
/**
 * The fonts available for writing on the sheet music
 */
var Fonts;
(function (Fonts) {
    Fonts[Fonts["TimesNewRoman"] = 0] = "TimesNewRoman";
    Fonts[Fonts["Kokila"] = 1] = "Kokila";
})(Fonts = exports.Fonts || (exports.Fonts = {}));


/***/ }),

/***/ "./src/Common/Enums/TextAlignment.ts":
/*!*******************************************!*\
  !*** ./src/Common/Enums/TextAlignment.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextAlignment = exports.TextAlignmentEnum = void 0;
/**
 * The Alignment of a TextLabel.
 * Specifically the label's position coordinates within the Bounding Box.
 * For LeftBottom, the label's position is at the left bottom corner of its Bounding Box.
 * (used for example with title, composer, author, etc.)
 * (see Show Bounding Box For -> Labels in the local demo)
 */
var TextAlignmentEnum;
(function (TextAlignmentEnum) {
    TextAlignmentEnum[TextAlignmentEnum["LeftTop"] = 0] = "LeftTop";
    TextAlignmentEnum[TextAlignmentEnum["LeftCenter"] = 1] = "LeftCenter";
    TextAlignmentEnum[TextAlignmentEnum["LeftBottom"] = 2] = "LeftBottom";
    TextAlignmentEnum[TextAlignmentEnum["CenterTop"] = 3] = "CenterTop";
    TextAlignmentEnum[TextAlignmentEnum["CenterCenter"] = 4] = "CenterCenter";
    TextAlignmentEnum[TextAlignmentEnum["CenterBottom"] = 5] = "CenterBottom";
    TextAlignmentEnum[TextAlignmentEnum["RightTop"] = 6] = "RightTop";
    TextAlignmentEnum[TextAlignmentEnum["RightCenter"] = 7] = "RightCenter";
    TextAlignmentEnum[TextAlignmentEnum["RightBottom"] = 8] = "RightBottom";
})(TextAlignmentEnum = exports.TextAlignmentEnum || (exports.TextAlignmentEnum = {}));
/*
 * TODO this could be split into two alignments, e.g. <Left, Top> for LeftTop.
 * A function like IsLeft would be easier with the split.
 * On the other hand, accessing these values will be more complex
*/
class TextAlignment {
    static IsLeft(textAlignment) {
        return textAlignment === TextAlignmentEnum.LeftTop
            || textAlignment === TextAlignmentEnum.LeftCenter
            || textAlignment === TextAlignmentEnum.LeftBottom;
    }
    static IsCenterAligned(textAlignment) {
        return textAlignment === TextAlignmentEnum.CenterTop
            || textAlignment === TextAlignmentEnum.CenterCenter
            || textAlignment === TextAlignmentEnum.CenterBottom;
    }
    static IsRight(textAlignment) {
        return textAlignment === TextAlignmentEnum.RightTop
            || textAlignment === TextAlignmentEnum.RightCenter
            || textAlignment === TextAlignmentEnum.RightBottom;
    }
}
exports.TextAlignment = TextAlignment;


/***/ }),

/***/ "./src/Common/Enums/TieTypes.ts":
/*!**************************************!*\
  !*** ./src/Common/Enums/TieTypes.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TieTypes = void 0;
/**
 * The types of ties available
 */
var TieTypes;
(function (TieTypes) {
    TieTypes["SIMPLE"] = "";
    TieTypes["HAMMERON"] = "H";
    TieTypes["PULLOFF"] = "P";
    TieTypes["SLIDE"] = "S";
    TieTypes["TAPPING"] = "T";
})(TieTypes = exports.TieTypes || (exports.TieTypes = {}));


/***/ }),

/***/ "./src/Common/Enums/index.ts":
/*!***********************************!*\
  !*** ./src/Common/Enums/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./FontStyles */ "./src/Common/Enums/FontStyles.ts"), exports);
__exportStar(__webpack_require__(/*! ./Fonts */ "./src/Common/Enums/Fonts.ts"), exports);
__exportStar(__webpack_require__(/*! ./TextAlignment */ "./src/Common/Enums/TextAlignment.ts"), exports);
__exportStar(__webpack_require__(/*! ./TieTypes */ "./src/Common/Enums/TieTypes.ts"), exports);


/***/ }),

/***/ "./src/Common/FileIO/Mxl.ts":
/*!**********************************!*\
  !*** ./src/Common/FileIO/Mxl.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MXLHelper = void 0;
const Xml_1 = __webpack_require__(/*! ./Xml */ "./src/Common/FileIO/Xml.ts");
const jszip_1 = __importDefault(__webpack_require__(/*! jszip */ "./node_modules/jszip/dist/jszip.min.js"));
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
/**
 * Some helper methods to handle MXL files.
 */
class MXLHelper {
    /**
     *
     * @param data
     * @returns {Promise<IXmlElement>}
     * @constructor
     */
    static MXLtoIXmlElement(data) {
        // starting with jszip 3.4.0, JSZip.JSZip is not found,
        //    probably because of new possibly conflicting TypeScript definitions
        const zip = new jszip_1.default();
        // asynchronously load zip file and process it - with Promises
        const zipLoadedAsync = zip.loadAsync(data);
        const text = zipLoadedAsync.then((_) => {
            return zip.file("META-INF/container.xml").async("text");
        }, (err) => {
            throw err;
        });
        return text.then((content) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(content, "text/xml");
            const rootFile = doc.getElementsByTagName("rootfile")[0].getAttribute("full-path");
            return zip.file(rootFile).async("text");
        }, (err) => {
            throw err;
        }).then((content) => {
            const parser = new DOMParser();
            const xml = parser.parseFromString(content, "text/xml");
            const doc = new Xml_1.IXmlElement(xml.documentElement);
            return Promise.resolve(doc);
        }, (err) => {
            throw err;
        }).then((content) => {
            return content;
        }, (err) => {
            throw new Error("extractSheetFromMxl: " + err.message);
        });
    }
    static MXLtoXMLstring(data) {
        const zip = new jszip_1.default();
        // asynchronously load zip file and process it - with Promises
        return zip.loadAsync(data).then((_) => {
            return zip.file("META-INF/container.xml").async("text");
        }, (err) => {
            // log jszip error. for some reason this isn't done in OSMD where this method is used.
            loglevel_1.default.error(err);
            throw err;
        }).then((content) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(content, "text/xml");
            const rootFile = doc.getElementsByTagName("rootfile")[0].getAttribute("full-path");
            return zip.file(rootFile).async("text");
        }, (err) => {
            throw err;
        });
    }
}
exports.MXLHelper = MXLHelper;


/***/ }),

/***/ "./src/Common/FileIO/Xml.ts":
/*!**********************************!*\
  !*** ./src/Common/FileIO/Xml.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IXmlElement = void 0;
/**
 * Just a wrapper for an XML Element object.
 * It facilitates handling of XML elements by OSMD
 */
class IXmlElement {
    /**
     * Wraps 'elem' Element in a IXmlElement
     * @param elem
     */
    constructor(elem) {
        this.hasAttributes = false;
        if (!elem) {
            throw new Error("IXmlElement: expected Element, got undefined");
        }
        this.elem = elem;
        this.name = elem.nodeName.toLowerCase();
        if (elem.hasAttributes()) {
            this.hasAttributes = true;
            this.firstAttribute = elem.attributes[0];
        }
        this.hasElements = elem.hasChildNodes();
        // Look for a value
        if (elem.childNodes.length === 1 && elem.childNodes[0].nodeType === Node.TEXT_NODE) {
            this.value = elem.childNodes[0].nodeValue;
        }
        else {
            this.value = "";
        }
    }
    /**
     * Get the attribute with the given name
     * @param attributeName
     * @returns {Attr}
     */
    attribute(attributeName) {
        return this.elem.attributes.getNamedItem(attributeName);
    }
    /**
     * Get all attributes
     * @returns {IXmlAttribute[]}
     */
    attributes() {
        if (!this.attrs) {
            const attributes = this.elem.attributes;
            const attrs = [];
            for (let i = 0; i < attributes.length; i += 1) {
                attrs.push(attributes[i]);
            }
            this.attrs = attrs;
        }
        return this.attrs;
    }
    /**
     * Get the first child element with the given node name
     * @param elementName
     * @returns {IXmlElement}
     */
    element(elementName) {
        const nodes = this.elem.childNodes;
        for (let i = 0, length = nodes.length; i < length; i += 1) {
            const node = nodes[i];
            if (node.nodeType === Node.ELEMENT_NODE && node.nodeName.toLowerCase() === elementName) {
                return new IXmlElement(node);
            }
        }
    }
    /**
     * Get the children with the given node name (if given, otherwise all child elements)
     * @param nodeName
     * @returns {IXmlElement[]}
     */
    elements(nodeName) {
        const nodes = this.elem.childNodes;
        const ret = [];
        const nameUnset = !nodeName;
        if (!nameUnset) {
            nodeName = nodeName.toLowerCase();
        }
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeType === Node.ELEMENT_NODE &&
                (nameUnset || node.nodeName.toLowerCase() === nodeName)) {
                ret.push(new IXmlElement(node));
            }
        }
        return ret;
    }
    /**
     * Get the first child element with the given node name
     * with all the children of consequent child elements with the same node name.
     * for example two <notations> tags will be combined for better processing
     * @param elementName
     * @returns {IXmlElement}
     */
    combinedElement(elementName) {
        const nodes = this.elem.childNodes;
        if (nodes.length > 0) {
            let firstNode;
            for (let i = 0, length = nodes.length; i < length; i += 1) {
                const otherNode = nodes[i];
                if (otherNode.nodeType === Node.ELEMENT_NODE && otherNode.nodeName.toLowerCase() === elementName) {
                    if (firstNode) {
                        const childNodes = otherNode.childNodes;
                        for (let j = 0, numChildNodes = childNodes.length; j < numChildNodes; j += 1) {
                            const childNode = childNodes[j];
                            firstNode.appendChild(childNode.cloneNode(true));
                        }
                    }
                    else {
                        firstNode = otherNode;
                    }
                }
            }
            if (firstNode) {
                return new IXmlElement(firstNode);
            }
        }
    }
}
exports.IXmlElement = IXmlElement;


/***/ }),

/***/ "./src/Common/Strings/StringUtil.ts":
/*!******************************************!*\
  !*** ./src/Common/Strings/StringUtil.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StringUtil = void 0;
class StringUtil {
    static StringContainsSeparatedWord(str, wordRegExString, ignoreCase = false) {
        const regExp = new RegExp("( |^)" + wordRegExString + "([ .]|$)", ignoreCase ? "i" : undefined);
        return regExp.test(str);
    }
}
exports.StringUtil = StringUtil;


/***/ }),

/***/ "./src/MusicalScore/Exceptions.ts":
/*!****************************************!*\
  !*** ./src/MusicalScore/Exceptions.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InvalidEnumArgumentException = exports.ArgumentOutOfRangeException = exports.MusicSheetReadingException = void 0;
class MusicSheetReadingException {
    constructor(message, e) {
        //super(message);
        this.message = message;
        if (e) {
            this.message += " " + e.toString();
        }
    }
}
exports.MusicSheetReadingException = MusicSheetReadingException;
class ArgumentOutOfRangeException {
    constructor(message) {
        //super(message);
        this.message = message;
    }
}
exports.ArgumentOutOfRangeException = ArgumentOutOfRangeException;
class InvalidEnumArgumentException {
    constructor(message) {
        this.message = message;
    }
}
exports.InvalidEnumArgumentException = InvalidEnumArgumentException;


/***/ }),

/***/ "./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts":
/*!*******************************************************************!*\
  !*** ./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractGraphicalExpression = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
class AbstractGraphicalExpression extends GraphicalObject_1.GraphicalObject {
    constructor(parentStaffline, expression, measure) {
        super();
        this.expression = expression;
        this.parentMeasure = measure; // could be undefined!
        this.boundingBox = new BoundingBox_1.BoundingBox(this, parentStaffline.PositionAndShape);
        this.parentStaffLine = parentStaffline;
        this.parentStaffLine.AbstractExpressions.push(this);
        this.rules = parentStaffline.ParentMusicSystem.rules;
    }
    /** Graphical label of the expression if available */
    get Label() { return this.label; }
    /** Staffline where the expression is attached to */
    get ParentStaffLine() { return this.parentStaffLine; }
    get SourceExpression() { return this.expression; }
    get Placement() { return this.expression.Placement; }
}
exports.AbstractGraphicalExpression = AbstractGraphicalExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/AccidentalCalculator.ts":
/*!************************************************************!*\
  !*** ./src/MusicalScore/Graphical/AccidentalCalculator.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AccidentalCalculator = void 0;
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Pitch_2 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
// import { Dictionary } from "typescript-collections/dist/lib";
const MusicSheetCalculator_1 = __webpack_require__(/*! ./MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
/**
 * Compute the accidentals for notes according to the current key instruction
 */
class AccidentalCalculator {
    constructor() {
        this.keySignatureNoteAlterationsDict = new typescript_collections_1.Dictionary();
        this.currentAlterationsComparedToKeyInstructionList = [];
        this.currentInMeasureNoteAlterationsDict = new typescript_collections_1.Dictionary();
    }
    get ActiveKeyInstruction() {
        return this.activeKeyInstruction;
    }
    set ActiveKeyInstruction(value) {
        this.activeKeyInstruction = value;
        this.reactOnKeyInstructionChange();
    }
    /**
     * This method is called after each Measure
     * It clears the in-measure alterations dict for the next measure
     * and pre-loads with the alterations of the key signature
     */
    doCalculationsAtEndOfMeasure() {
        this.currentInMeasureNoteAlterationsDict.clear();
        this.currentAlterationsComparedToKeyInstructionList.clear();
        for (const key of this.keySignatureNoteAlterationsDict.keys()) {
            this.currentInMeasureNoteAlterationsDict.setValue(key, this.keySignatureNoteAlterationsDict.getValue(key));
        }
    }
    checkAccidental(graphicalNote, pitch) {
        if (!pitch) {
            return;
        }
        const pitchKey = pitch.FundamentalNote + pitch.Octave * 12;
        /*let pitchKeyGivenInMeasureDict: boolean = this.currentInMeasureNoteAlterationsDict.containsKey(pitchKey);
        if (
            (pitchKeyGivenInMeasureDict && this.currentInMeasureNoteAlterationsDict.getValue(pitchKey) !== pitch.Accidental)
            || (!pitchKeyGivenInMeasureDict && pitch.Accidental !== AccidentalEnum.NONE)
        ) {
            if (this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey) === -1) {
                this.currentAlterationsComparedToKeyInstructionList.push(pitchKey);
            }
            this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.Accidental);
            this.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);
        } else if (
            this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey) !== -1
            && ((pitchKeyGivenInMeasureDict && this.currentInMeasureNoteAlterationsDict.getValue(pitchKey) !== pitch.Accidental)
            || (!pitchKeyGivenInMeasureDict && pitch.Accidental === AccidentalEnum.NONE))
        ) {
            this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey), 1);
            this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.Accidental);
            this.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);
        }*/
        const isInCurrentAlterationsToKeyList = this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey) >= 0;
        if (this.currentInMeasureNoteAlterationsDict.containsKey(pitchKey)) {
            if (isInCurrentAlterationsToKeyList) {
                this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey), 1);
            }
            if (this.currentInMeasureNoteAlterationsDict.getValue(pitchKey) !== pitch.AccidentalHalfTones) {
                if (this.keySignatureNoteAlterationsDict.containsKey(pitchKey) &&
                    this.keySignatureNoteAlterationsDict.getValue(pitchKey) !== pitch.AccidentalHalfTones) {
                    this.currentAlterationsComparedToKeyInstructionList.push(pitchKey);
                    this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.AccidentalHalfTones);
                }
                else if (pitch.Accidental !== Pitch_1.AccidentalEnum.NONE) {
                    this.currentInMeasureNoteAlterationsDict.remove(pitchKey);
                }
                const inMeasureAlterationAccidental = this.currentInMeasureNoteAlterationsDict.getValue(pitchKey);
                if (pitch.Accidental === Pitch_1.AccidentalEnum.NONE) {
                    if (Math.abs(inMeasureAlterationAccidental) === 0.5) {
                        // fix to remember quartersharp and quarterflat and not make them natural on following notes
                        pitch = new Pitch_2.Pitch(pitch.FundamentalNote, pitch.Octave, Pitch_1.AccidentalEnum.NONE);
                    }
                    else {
                        // If an AccidentalEnum.NONE is given, it would not be rendered.
                        // We need here to convert to a AccidentalEnum.NATURAL:
                        pitch = new Pitch_2.Pitch(pitch.FundamentalNote, pitch.Octave, Pitch_1.AccidentalEnum.NATURAL);
                    }
                }
                if (this.isAlterAmbiguousAccidental(pitch.Accidental) && !pitch.AccidentalXml) {
                    return; // only display accidental if it was given as an accidental in the XML
                }
                MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);
            }
        }
        else { // pitchkey not in measure dict:
            if (pitch.Accidental !== Pitch_1.AccidentalEnum.NONE) {
                if (!isInCurrentAlterationsToKeyList) {
                    this.currentAlterationsComparedToKeyInstructionList.push(pitchKey);
                }
                this.currentInMeasureNoteAlterationsDict.setValue(pitchKey, pitch.AccidentalHalfTones);
                if (this.isAlterAmbiguousAccidental(pitch.Accidental) && !pitch.AccidentalXml) {
                    return;
                }
                MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);
            }
            else {
                if (isInCurrentAlterationsToKeyList) {
                    // we need here a AccidentalEnum.NATURAL now to get it rendered - AccidentalEnum.NONE would not be rendered
                    pitch = new Pitch_2.Pitch(pitch.FundamentalNote, pitch.Octave, Pitch_1.AccidentalEnum.NATURAL);
                    this.currentAlterationsComparedToKeyInstructionList.splice(this.currentAlterationsComparedToKeyInstructionList.indexOf(pitchKey), 1);
                    MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.addGraphicalAccidental(graphicalNote, pitch);
                }
            }
        }
    }
    isAlterAmbiguousAccidental(accidental) {
        return accidental === Pitch_1.AccidentalEnum.SLASHFLAT || accidental === Pitch_1.AccidentalEnum.QUARTERTONEFLAT;
    }
    reactOnKeyInstructionChange() {
        const noteEnums = this.activeKeyInstruction.AlteratedNotes;
        let keyAccidentalType;
        if (this.activeKeyInstruction.Key > 0) {
            keyAccidentalType = Pitch_1.AccidentalEnum.SHARP;
        }
        else {
            keyAccidentalType = Pitch_1.AccidentalEnum.FLAT;
        }
        this.keySignatureNoteAlterationsDict.clear();
        this.currentAlterationsComparedToKeyInstructionList.length = 0;
        for (let octave = -9; octave < 9; octave++) {
            for (let i = 0; i < noteEnums.length; i++) {
                this.keySignatureNoteAlterationsDict.setValue(noteEnums[i] + octave * 12, Pitch_2.Pitch.HalfTonesFromAccidental(keyAccidentalType));
            }
        }
        this.doCalculationsAtEndOfMeasure();
    }
}
exports.AccidentalCalculator = AccidentalCalculator;


/***/ }),

/***/ "./src/MusicalScore/Graphical/BoundingBox.ts":
/*!***************************************************!*\
  !*** ./src/MusicalScore/Graphical/BoundingBox.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColDirEnum = exports.BoundingBox = void 0;
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const SizeF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/SizeF2D */ "./src/Common/DataObjects/SizeF2D.ts");
const RectangleF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/RectangleF2D */ "./src/Common/DataObjects/RectangleF2D.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
/**
 * A bounding box delimits an area on the 2D plane.
 * @param dataObject Graphical object where the bounding box will be attached
 * @param parent Parent bounding box of an object in a higher hierarchy position
 * @param connectChildToParent Create a child to parent relationship too. Will be true by default
 */
class BoundingBox {
    /**
     * Create a bounding box
     * @param dataObject Graphical object where the bounding box will be attached
     * @param parent Parent bounding box of an object in a higher hierarchy position
     * @param isSymbol Defines the bounding box to be symbol thus not calculating its boundaries by itself. NOTE: Borders need to be set!
     */
    constructor(dataObject = undefined, parent = undefined, isSymbol = false) {
        this.isSymbol = false;
        this.relativePositionHasBeenSet = false;
        this.xBordersHaveBeenSet = false;
        this.yBordersHaveBeenSet = false;
        this.absolutePosition = new PointF2D_1.PointF2D();
        this.relativePosition = new PointF2D_1.PointF2D();
        this.size = new SizeF2D_1.SizeF2D();
        this.marginSize = new SizeF2D_1.SizeF2D();
        this.upperLeftCorner = new PointF2D_1.PointF2D();
        this.upperLeftMarginCorner = new PointF2D_1.PointF2D();
        this.borderLeft = 0;
        this.borderRight = 0;
        this.borderTop = 0;
        this.borderBottom = 0;
        this.borderMarginLeft = 0;
        this.borderMarginRight = 0;
        this.borderMarginTop = 0;
        this.borderMarginBottom = 0;
        this.childElements = [];
        this.parent = parent;
        this.dataObject = dataObject;
        this.isSymbol = isSymbol;
        this.xBordersHaveBeenSet = false;
        this.yBordersHaveBeenSet = false;
        if (parent) {
            this.Parent = parent;
        }
    }
    get RelativePositionHasBeenSet() {
        return this.relativePositionHasBeenSet;
    }
    get XBordersHaveBeenSet() {
        return this.xBordersHaveBeenSet;
    }
    set XBordersHaveBeenSet(value) {
        this.xBordersHaveBeenSet = value;
    }
    get YBordersHaveBeenSet() {
        return this.yBordersHaveBeenSet;
    }
    set YBordersHaveBeenSet(value) {
        this.yBordersHaveBeenSet = value;
    }
    get AbsolutePosition() {
        return this.absolutePosition;
    }
    set AbsolutePosition(value) {
        this.absolutePosition = value;
    }
    get RelativePosition() {
        return this.relativePosition;
    }
    set RelativePosition(value) {
        this.relativePosition = value;
        this.relativePositionHasBeenSet = true;
    }
    get Size() {
        return this.size;
    }
    set Size(value) {
        this.size = value;
    }
    get MarginSize() {
        return this.marginSize;
    }
    get UpperLeftCorner() {
        return this.upperLeftCorner;
    }
    get UpperLeftMarginCorner() {
        return this.upperLeftMarginCorner;
    }
    get BorderLeft() {
        return this.borderLeft;
    }
    set BorderLeft(value) {
        this.borderLeft = value;
        this.calculateRectangle();
    }
    get BorderRight() {
        return this.borderRight;
    }
    set BorderRight(value) {
        this.borderRight = value;
        this.calculateRectangle();
    }
    get BorderTop() {
        return this.borderTop;
    }
    set BorderTop(value) {
        this.borderTop = value;
        this.calculateRectangle();
    }
    get BorderBottom() {
        return this.borderBottom;
    }
    set BorderBottom(value) {
        this.borderBottom = value;
        this.calculateRectangle();
    }
    get BorderMarginLeft() {
        return this.borderMarginLeft > this.borderLeft ? this.borderLeft : this.borderMarginLeft;
    }
    set BorderMarginLeft(value) {
        this.borderMarginLeft = value;
        this.calculateMarginRectangle();
    }
    get BorderMarginRight() {
        return this.borderMarginRight < this.borderRight ? this.borderRight : this.borderMarginRight;
    }
    set BorderMarginRight(value) {
        this.borderMarginRight = value;
        this.calculateMarginRectangle();
    }
    get BorderMarginTop() {
        return this.borderMarginTop > this.borderTop ? this.borderTop : this.borderMarginTop;
    }
    set BorderMarginTop(value) {
        this.borderMarginTop = value;
        this.calculateMarginRectangle();
    }
    get BorderMarginBottom() {
        return this.borderMarginBottom < this.borderBottom ? this.borderBottom : this.borderMarginBottom;
    }
    set BorderMarginBottom(value) {
        this.borderMarginBottom = value;
        this.calculateMarginRectangle();
    }
    get BoundingRectangle() {
        return this.boundingRectangle;
    }
    get BoundingMarginRectangle() {
        return this.boundingMarginRectangle;
    }
    get ChildElements() {
        return this.childElements;
    }
    set ChildElements(value) {
        this.childElements = value;
    }
    get Parent() {
        return this.parent;
    }
    set Parent(value) {
        if (this.parent) {
            // remove from old parent
            const index = this.parent.ChildElements.indexOf(this, 0);
            if (index > -1) {
                this.parent.ChildElements.splice(index, 1);
            }
        }
        this.parent = value;
        // add to new parent
        if (this.parent.ChildElements.indexOf(this) > -1) {
            loglevel_1.default.error("BoundingBox of " + this.dataObject.constructor.name +
                " already in children list of " + this.parent.dataObject.constructor.name + "'s BoundingBox");
        }
        else {
            this.parent.ChildElements.push(this);
        }
    }
    get DataObject() {
        return this.dataObject;
    }
    /**
     * Get the center of a bounding box
     * @param boundingBox Bounding box to check
     */
    get Center() {
        return new PointF2D_1.PointF2D(this.RelativePosition.x + (this.BorderMarginRight + this.BorderMarginLeft), this.RelativePosition.y + (this.BorderMarginBottom + this.BorderMarginTop));
    }
    setAbsolutePositionFromParent() {
        if (this.parent) {
            this.absolutePosition.x = this.parent.AbsolutePosition.x + this.relativePosition.x;
            this.absolutePosition.y = this.parent.AbsolutePosition.y + this.relativePosition.y;
        }
        else {
            this.absolutePosition = this.relativePosition;
        }
    }
    /**
     * Calculate the the absolute position by adding up all relative positions of all parents (including the own rel. pos.)
     */
    calculateAbsolutePosition() {
        this.absolutePosition.x = this.relativePosition.x;
        this.absolutePosition.y = this.relativePosition.y;
        let parent = this.parent;
        while (parent) {
            this.absolutePosition.x += parent.relativePosition.x;
            this.absolutePosition.y += parent.relativePosition.y;
            parent = parent.parent;
        }
    }
    /**
     * This method calculates the Absolute Positions recursively
     */
    calculateAbsolutePositionsRecursiveWithoutTopelement() {
        this.absolutePosition.x = 0.0;
        this.absolutePosition.y = 0.0;
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const child = this.ChildElements[idx];
            child.calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);
        }
    }
    /**
     * This method calculates the Absolute Positions recursively
     * from the root element down to the leaf elements
     * @param x
     * @param y
     */
    calculateAbsolutePositionsRecursive(x, y) {
        this.absolutePosition.x = this.relativePosition.x + x;
        this.absolutePosition.y = this.relativePosition.y + y;
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const child = this.ChildElements[idx];
            child.calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);
        }
    }
    /**
     * calculates the absolute positions of all children of this boundingBox
     */
    calculateAbsolutePositionsOfChildren() {
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const child = this.ChildElements[idx];
            child.calculateAbsolutePositionsRecursive(this.absolutePosition.x, this.absolutePosition.y);
        }
    }
    /**
     * This method calculates the BoundingBoxes
     */
    calculateBoundingBox() {
        if (this.childElements.length === 0) {
            return;
        }
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const childElement = this.ChildElements[idx];
            childElement.calculateBoundingBox();
        }
        // initialize with max/min values
        let minLeft = Number.MAX_VALUE;
        let maxRight = Number.MIN_VALUE;
        let minTop = Number.MAX_VALUE;
        let maxBottom = Number.MIN_VALUE;
        let minMarginLeft = Number.MAX_VALUE;
        let maxMarginRight = Number.MIN_VALUE;
        let minMarginTop = Number.MAX_VALUE;
        let maxMarginBottom = Number.MIN_VALUE;
        // apart from symbol elements, where we initialize with the symbol's borders
        if (this.isSymbol) {
            minLeft = this.borderLeft;
            maxRight = this.borderRight;
            minTop = this.borderTop;
            maxBottom = this.borderBottom;
            minMarginLeft = this.borderMarginLeft;
            maxMarginRight = this.borderMarginRight;
            minMarginTop = this.borderMarginTop;
            maxMarginBottom = this.borderMarginBottom;
        }
        // ChildElements will have their borders calculated, so calculate current borders
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const childElement = this.ChildElements[idx];
            minLeft = Math.min(minLeft, childElement.relativePosition.x + childElement.borderLeft);
            maxRight = Math.max(maxRight, childElement.relativePosition.x + childElement.borderRight);
            minTop = Math.min(minTop, childElement.relativePosition.y + childElement.borderTop);
            maxBottom = Math.max(maxBottom, childElement.relativePosition.y + childElement.borderBottom);
            minMarginLeft = Math.min(minMarginLeft, childElement.relativePosition.x + childElement.borderMarginLeft);
            maxMarginRight = Math.max(maxMarginRight, childElement.relativePosition.x + childElement.borderMarginRight);
            minMarginTop = Math.min(minMarginTop, childElement.relativePosition.y + childElement.borderMarginTop);
            maxMarginBottom = Math.max(maxMarginBottom, childElement.relativePosition.y + childElement.borderMarginBottom);
        }
        // ChildElements will have their borders calculated, so calculate current borders
        this.borderLeft = minLeft;
        this.borderRight = maxRight;
        this.borderTop = minTop;
        this.borderBottom = maxBottom;
        this.borderMarginLeft = minMarginLeft;
        this.borderMarginRight = maxMarginRight;
        this.borderMarginTop = minMarginTop;
        this.borderMarginBottom = maxMarginBottom;
        this.calculateRectangle();
        this.calculateMarginRectangle();
        this.xBordersHaveBeenSet = true;
        this.yBordersHaveBeenSet = true;
    }
    calculateTopBottomBorders() {
        if (this.childElements.length === 0) {
            return;
        }
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const childElement = this.ChildElements[idx];
            childElement.calculateTopBottomBorders();
        }
        let minTop = Number.MAX_VALUE;
        let maxBottom = Number.MIN_VALUE;
        let minMarginTop = Number.MAX_VALUE;
        let maxMarginBottom = Number.MIN_VALUE;
        if (this.yBordersHaveBeenSet) {
            minTop = this.borderTop;
            maxBottom = this.borderBottom;
            minMarginTop = this.borderMarginTop;
            maxMarginBottom = this.borderMarginBottom;
        }
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const childElement = this.ChildElements[idx];
            minTop = Math.min(minTop, childElement.relativePosition.y + childElement.borderTop);
            maxBottom = Math.max(maxBottom, childElement.relativePosition.y + childElement.borderBottom);
            minMarginTop = Math.min(minMarginTop, childElement.relativePosition.y + childElement.borderMarginTop);
            maxMarginBottom = Math.max(maxMarginBottom, childElement.relativePosition.y + childElement.borderMarginBottom);
        }
        this.borderTop = minTop;
        this.borderBottom = maxBottom;
        this.borderMarginTop = minMarginTop;
        this.borderMarginBottom = maxMarginBottom;
        this.calculateRectangle();
        this.calculateMarginRectangle();
    }
    /**
     * This method computes the first non-overlapping position in the placementPsi Element for the current (this) positionAndShapeInfo
     * @param placementPsi
     * @param direction
     * @param position
     */
    computeNonOverlappingPositionWithMargin(placementPsi, direction, position) {
        this.RelativePosition = new PointF2D_1.PointF2D(position.x, position.y);
        this.setAbsolutePositionFromParent();
        let currentPosition = 0.0;
        let hasBeenMoved = false;
        do {
            switch (direction) {
                case ColDirEnum.Left:
                case ColDirEnum.Right:
                    currentPosition = this.relativePosition.x;
                    placementPsi.calculateMarginPositionAlongDirection(this, direction);
                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.x) > 0.001;
                    break;
                case ColDirEnum.Up:
                case ColDirEnum.Down:
                    currentPosition = this.relativePosition.y;
                    placementPsi.calculateMarginPositionAlongDirection(this, direction);
                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.y) > 0.001;
                    break;
                default:
                    throw new Exceptions_1.ArgumentOutOfRangeException("direction");
            }
        } while (hasBeenMoved);
    }
    /**
     * This method detects a collision (without margins)
     * @param psi
     * @returns {boolean}
     */
    collisionDetection(psi) {
        const overlapWidth = Math.min(this.AbsolutePosition.x + this.borderRight, psi.absolutePosition.x + psi.borderRight)
            - Math.max(this.AbsolutePosition.x + this.borderLeft, psi.absolutePosition.x + psi.borderLeft);
        const overlapHeight = Math.min(this.AbsolutePosition.y + this.borderBottom, psi.absolutePosition.y + psi.borderBottom)
            - Math.max(this.AbsolutePosition.y + this.borderTop, psi.absolutePosition.y + psi.borderTop);
        if (overlapWidth > 0 && overlapHeight > 0) {
            return true;
        }
        return false;
    }
    /**
     * This method checks if the given Psi's Margins lie inside the current Psi's Margins.
     * @param psi
     * @returns {boolean}
     */
    liesInsideBorders(psi) {
        const leftBorderInside = (this.AbsolutePosition.x + this.borderLeft) <= (psi.absolutePosition.x + psi.borderLeft)
            && (psi.absolutePosition.x + psi.borderLeft) <= (this.AbsolutePosition.x + this.borderRight);
        const rightBorderInside = (this.AbsolutePosition.x + this.borderLeft) <= (psi.absolutePosition.x + psi.borderRight)
            && (psi.absolutePosition.x + psi.borderRight) <= (this.AbsolutePosition.x + this.borderRight);
        if (leftBorderInside && rightBorderInside) {
            const topBorderInside = (this.AbsolutePosition.y + this.borderTop) <= (psi.absolutePosition.y + psi.borderTop)
                && (psi.absolutePosition.y + psi.borderTop) <= (this.AbsolutePosition.y + this.borderBottom);
            const bottomBorderInside = (this.AbsolutePosition.y + this.borderTop) <= (psi.absolutePosition.y + psi.borderBottom)
                && (psi.absolutePosition.y + psi.borderBottom) <= (this.AbsolutePosition.y + this.borderBottom);
            if (topBorderInside && bottomBorderInside) {
                return true;
            }
        }
        return false;
    }
    pointLiesInsideBorders(position) {
        const xInside = (this.AbsolutePosition.x + this.borderLeft) <= position.x && position.x <= (this.AbsolutePosition.x + this.borderRight);
        if (xInside) {
            const yInside = (this.AbsolutePosition.y + this.borderTop) <= position.y && position.y <= (this.AbsolutePosition.y + this.borderBottom);
            if (yInside) {
                return true;
            }
        }
        return false;
    }
    /**
     * This method detects a collision (margin-wide)
     * @param psi
     * @returns {boolean}
     */
    marginCollisionDetection(psi) {
        const overlapWidth = Math.min(this.AbsolutePosition.x + this.borderMarginRight, psi.absolutePosition.x + psi.borderMarginRight)
            - Math.max(this.AbsolutePosition.x + this.borderMarginLeft, psi.absolutePosition.x + psi.borderMarginLeft);
        const overlapHeight = Math.min(this.AbsolutePosition.y + this.borderMarginBottom, psi.absolutePosition.y + psi.borderMarginBottom)
            - Math.max(this.AbsolutePosition.y + this.borderMarginTop, psi.absolutePosition.y + psi.borderMarginTop);
        if (overlapWidth > 0 && overlapHeight > 0) {
            return true;
        }
        return false;
    }
    /**
     * This method checks if the given Psi's Margins lie inside the current Psi's Margins
     * @param psi
     * @returns {boolean}
     */
    liesInsideMargins(psi) {
        const leftMarginInside = (this.AbsolutePosition.x + this.borderMarginLeft) <= (psi.absolutePosition.x + psi.borderMarginLeft)
            && (psi.absolutePosition.x + psi.borderMarginLeft) <= (this.AbsolutePosition.x + this.borderMarginRight);
        const rightMarginInside = (this.AbsolutePosition.x + this.borderMarginLeft) <= (psi.absolutePosition.x + psi.borderMarginRight)
            && (psi.absolutePosition.x + psi.borderMarginRight) <= (this.AbsolutePosition.x + this.borderMarginRight);
        if (leftMarginInside && rightMarginInside) {
            const topMarginInside = (this.AbsolutePosition.y + this.borderMarginTop) <= (psi.absolutePosition.y + psi.borderMarginTop)
                && (psi.absolutePosition.y + psi.borderMarginTop) <= (this.AbsolutePosition.y + this.borderMarginBottom);
            const bottomMarginInside = (this.AbsolutePosition.y + this.borderMarginTop) <= (psi.absolutePosition.y + psi.borderMarginBottom)
                && (psi.absolutePosition.y + psi.borderMarginBottom) <= (this.AbsolutePosition.y + this.borderMarginBottom);
            if (topMarginInside && bottomMarginInside) {
                return true;
            }
        }
        return false;
    }
    pointLiesInsideMargins(position) {
        const xInside = (this.AbsolutePosition.x + this.borderMarginLeft) <= position.x
            && position.x <= (this.AbsolutePosition.x + this.borderMarginRight);
        if (xInside) {
            const yInside = (this.AbsolutePosition.y + this.borderMarginTop) <= position.y
                && position.y <= (this.AbsolutePosition.y + this.borderMarginBottom);
            if (yInside) {
                return true;
            }
        }
        return false;
    }
    /**
     * This method computes the first non-overlapping position in the placementPsi Element for the current (this) positionAndShapeInfo
     * @param placementPsi
     * @param direction
     * @param position
     */
    computeNonOverlappingPosition(placementPsi, direction, position) {
        this.RelativePosition = new PointF2D_1.PointF2D(position.x, position.y);
        this.setAbsolutePositionFromParent();
        let currentPosition = 0.0;
        let hasBeenMoved = false;
        do {
            switch (direction) {
                case ColDirEnum.Left:
                case ColDirEnum.Right:
                    currentPosition = this.relativePosition.x;
                    placementPsi.calculatePositionAlongDirection(this, direction);
                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.x) > 0.0001;
                    break;
                case ColDirEnum.Up:
                case ColDirEnum.Down:
                    currentPosition = this.relativePosition.y;
                    placementPsi.calculatePositionAlongDirection(this, direction);
                    hasBeenMoved = Math.abs(currentPosition - this.relativePosition.y) > 0.0001;
                    break;
                default:
                    throw new Exceptions_1.ArgumentOutOfRangeException("direction");
            }
        } while (hasBeenMoved); // as long as the element is moved
    }
    getClickedObjectOfType(clickPosition) {
        const obj = this.dataObject;
        if (this.pointLiesInsideBorders(clickPosition) && obj) {
            return obj;
        }
        for (let idx = 0, len = this.childElements.length; idx < len; ++idx) {
            const psi = this.childElements[idx];
            const innerObject = psi.getClickedObjectOfType(clickPosition);
            if (innerObject) {
                return innerObject;
            }
        }
        return undefined;
    }
    //Generics don't work like this in TS. Casting doesn't filter out objects.
    //instanceof doesn't work either with generic types. Hopefully instanceof becomes available at some point, for now we have to do annoyingly
    //specific implementations after calling this to filter the objects.
    getObjectsInRegion(region, liesInside = true, className = GraphicalObject_1.GraphicalObject.name) {
        let result = [];
        for (const child of this.childElements) {
            result = result.concat(child.getObjectsInRegion(region, liesInside, className));
        }
        //if (!result || result.length === 0) {
        // audioplayer: this.dataObject as T
        if (this.dataObject && this.dataObject.isInstanceOfClass(className)) {
            if (liesInside) {
                if (region.liesInsideBorders(this)) {
                    result.push(this.dataObject);
                }
            }
            else {
                if (region.collisionDetection(this)) {
                    result.push(this.dataObject);
                }
            }
            // FIXME Andrea: add here "return []"?
        }
        //}
        return result;
        //return this.childElements.SelectMany(psi => psi.getObjectsInRegion<T>(region, liesInside));
    }
    calculateRectangle() {
        this.upperLeftCorner = new PointF2D_1.PointF2D(this.BorderLeft, this.BorderTop);
        this.size = new SizeF2D_1.SizeF2D(this.BorderRight - this.BorderLeft, this.BorderBottom - this.BorderTop);
        this.boundingRectangle = RectangleF2D_1.RectangleF2D.createFromLocationAndSize(this.upperLeftCorner, this.size);
    }
    calculateMarginRectangle() {
        this.upperLeftMarginCorner = new PointF2D_1.PointF2D(this.BorderMarginLeft, this.BorderMarginTop);
        this.marginSize = new SizeF2D_1.SizeF2D(this.BorderMarginRight - this.BorderMarginLeft, this.BorderMarginBottom - this.BorderMarginTop);
        this.boundingMarginRectangle = RectangleF2D_1.RectangleF2D.createFromLocationAndSize(this.upperLeftMarginCorner, this.marginSize);
    }
    /**
     * This method calculates the margin border along the given direction so that no collision takes place along this direction
     * @param toBePlaced
     * @param direction
     */
    calculateMarginPositionAlongDirection(toBePlaced, direction) {
        // now this will be the "known" Element, about to get bigger with the toBePlaced
        // eg toBePlaced will always be in the PositionAndShape hierarchy a Child of this
        // example: this = StaffEntry, toBePlaced = Accidental
        // logical return
        if (this === toBePlaced) {
            return;
        }
        // check for collision only at symbols and return border
        if (this.isSymbol && this.marginCollisionDetection(toBePlaced)) {
            let shiftDistance = 0;
            switch (direction) {
                case ColDirEnum.Left:
                    shiftDistance = (this.absolutePosition.x + this.borderMarginLeft) - (toBePlaced.absolutePosition.x + toBePlaced.borderMarginRight);
                    toBePlaced.relativePosition.x += shiftDistance;
                    toBePlaced.absolutePosition.x += shiftDistance;
                    return;
                case ColDirEnum.Right:
                    shiftDistance = (this.absolutePosition.x + this.borderMarginRight) - (toBePlaced.absolutePosition.x + toBePlaced.borderMarginLeft);
                    toBePlaced.relativePosition.x += shiftDistance;
                    toBePlaced.absolutePosition.x += shiftDistance;
                    return;
                case ColDirEnum.Up:
                    shiftDistance = (this.absolutePosition.y + this.borderMarginTop) - (toBePlaced.absolutePosition.y + toBePlaced.borderMarginBottom);
                    toBePlaced.relativePosition.y += shiftDistance;
                    toBePlaced.absolutePosition.y += shiftDistance;
                    return;
                case ColDirEnum.Down:
                    shiftDistance = (this.absolutePosition.y + this.borderMarginBottom) - (toBePlaced.absolutePosition.y + toBePlaced.borderMarginTop);
                    toBePlaced.relativePosition.y += shiftDistance;
                    toBePlaced.absolutePosition.y += shiftDistance;
                    return;
                default:
                    throw new Exceptions_1.ArgumentOutOfRangeException("direction");
            }
        }
        // perform check for all children iteratively and return border from children symbols
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const childElement = this.ChildElements[idx];
            childElement.calculateMarginPositionAlongDirection(toBePlaced, direction);
        }
    }
    /**
     * This method calculates the border along the given direction so that no collision takes place along this direction
     * @param toBePlaced
     * @param direction
     */
    calculatePositionAlongDirection(toBePlaced, direction) {
        // now this will be the "known" Element, about to get bigger with the toBePlaced
        // eg toBePlaced will always be in the PositionAndShape hierarchy a Child of this
        // example: this = StaffEntry, toBePlaced = Accidental
        // logical return
        if (this === toBePlaced) {
            return;
        }
        // check for collision only at symbols and return border
        if (this.isSymbol && this.collisionDetection(toBePlaced)) {
            let shiftDistance;
            switch (direction) {
                case ColDirEnum.Left:
                    shiftDistance = (this.absolutePosition.x + this.borderLeft) - (toBePlaced.absolutePosition.x + toBePlaced.borderRight);
                    toBePlaced.relativePosition.x += shiftDistance;
                    toBePlaced.absolutePosition.x += shiftDistance;
                    return;
                case ColDirEnum.Right:
                    shiftDistance = (this.absolutePosition.x + this.borderRight) - (toBePlaced.absolutePosition.x + toBePlaced.borderLeft);
                    toBePlaced.relativePosition.x += shiftDistance;
                    toBePlaced.absolutePosition.x += shiftDistance;
                    return;
                case ColDirEnum.Up:
                    shiftDistance = (this.absolutePosition.y + this.borderTop) - (toBePlaced.absolutePosition.y + toBePlaced.borderBottom);
                    toBePlaced.relativePosition.y += shiftDistance;
                    toBePlaced.absolutePosition.y += shiftDistance;
                    return;
                case ColDirEnum.Down:
                    shiftDistance = (this.absolutePosition.y + this.borderBottom) - (toBePlaced.absolutePosition.y + toBePlaced.borderTop);
                    toBePlaced.relativePosition.y += shiftDistance;
                    toBePlaced.absolutePosition.y += shiftDistance;
                    return;
                default:
                    throw new Exceptions_1.ArgumentOutOfRangeException("direction");
            }
        }
        // perform check for all children iteratively and return border from children symbols
        for (let idx = 0, len = this.ChildElements.length; idx < len; ++idx) {
            const childElement = this.ChildElements[idx];
            childElement.calculatePositionAlongDirection(toBePlaced, direction);
        }
    }
}
exports.BoundingBox = BoundingBox;
var ColDirEnum;
(function (ColDirEnum) {
    ColDirEnum[ColDirEnum["Left"] = 0] = "Left";
    ColDirEnum[ColDirEnum["Right"] = 1] = "Right";
    ColDirEnum[ColDirEnum["Up"] = 2] = "Up";
    ColDirEnum[ColDirEnum["Down"] = 3] = "Down";
    ColDirEnum[ColDirEnum["NotYetDefined"] = 4] = "NotYetDefined";
})(ColDirEnum = exports.ColDirEnum || (exports.ColDirEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/Clickable.ts":
/*!*************************************************!*\
  !*** ./src/MusicalScore/Graphical/Clickable.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Clickable = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
class Clickable extends GraphicalObject_1.GraphicalObject {
}
exports.Clickable = Clickable;


/***/ }),

/***/ "./src/MusicalScore/Graphical/DrawingEnums.ts":
/*!****************************************************!*\
  !*** ./src/MusicalScore/Graphical/DrawingEnums.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AutoColorSet = exports.NoteState = exports.GraphicalLayers = exports.StyleSets = exports.OUTLINE_AND_FILL_STYLE_DICT = exports.OutlineAndFillStyleEnum = void 0;
// import * as Collections from "typescript-collections";
// import Collections = require("typescript-collections");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
/**
 * The supported styles to draw a rectangle on the music sheet
 */
var OutlineAndFillStyleEnum;
(function (OutlineAndFillStyleEnum) {
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["BaseWritingColor"] = 0] = "BaseWritingColor";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["FollowingCursor"] = 1] = "FollowingCursor";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["AlternativeFollowingCursor"] = 2] = "AlternativeFollowingCursor";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["PlaybackCursor"] = 3] = "PlaybackCursor";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Highlighted"] = 4] = "Highlighted";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["ErrorUnderlay"] = 5] = "ErrorUnderlay";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Selected"] = 6] = "Selected";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["SelectionSymbol"] = 7] = "SelectionSymbol";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["DebugColor1"] = 8] = "DebugColor1";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["DebugColor2"] = 9] = "DebugColor2";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["DebugColor3"] = 10] = "DebugColor3";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["SplitScreenDivision"] = 11] = "SplitScreenDivision";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["GreyTransparentOverlay"] = 12] = "GreyTransparentOverlay";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea1"] = 13] = "MarkedArea1";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea2"] = 14] = "MarkedArea2";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea3"] = 15] = "MarkedArea3";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea4"] = 16] = "MarkedArea4";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea5"] = 17] = "MarkedArea5";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea6"] = 18] = "MarkedArea6";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea7"] = 19] = "MarkedArea7";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea8"] = 20] = "MarkedArea8";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea9"] = 21] = "MarkedArea9";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["MarkedArea10"] = 22] = "MarkedArea10";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment1"] = 23] = "Comment1";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment2"] = 24] = "Comment2";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment3"] = 25] = "Comment3";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment4"] = 26] = "Comment4";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment5"] = 27] = "Comment5";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment6"] = 28] = "Comment6";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment7"] = 29] = "Comment7";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment8"] = 30] = "Comment8";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment9"] = 31] = "Comment9";
    OutlineAndFillStyleEnum[OutlineAndFillStyleEnum["Comment10"] = 32] = "Comment10";
})(OutlineAndFillStyleEnum = exports.OutlineAndFillStyleEnum || (exports.OutlineAndFillStyleEnum = {}));
exports.OUTLINE_AND_FILL_STYLE_DICT = new typescript_collections_1.Dictionary();
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.BaseWritingColor, "Thistle");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.FollowingCursor, "Aqua");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.AlternativeFollowingCursor, "Azure");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.PlaybackCursor, "Bisque");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Highlighted, "CadetBlue");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.ErrorUnderlay, "DarkBlue");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Selected, "DarkGoldenRod");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.SelectionSymbol, "BlanchedAlmond");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.DebugColor1, "Chartreuse");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.DebugColor2, "DarkGreen");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.DebugColor3, "DarkOrange");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.SplitScreenDivision, "FireBrick");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.GreyTransparentOverlay, "DarkSalmon");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea1, "DarkSeaGreen");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea2, "DarkOrchid");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea3, "Aquamarine");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea4, "DarkKhaki");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea5, "ForestGreen");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea6, "AliceBlue");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea7, "DeepPink");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea8, "Coral");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea9, "DarkOliveGreen");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.MarkedArea10, "Chocolate");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment1, "DodgerBlue");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment2, "Blue");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment3, "Beige");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment4, "Crimson");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment5, "Fuchsia");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment6, "Brown");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment7, "BlanchedAlmond");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment8, "CornflowerBlue");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment9, "Cornsilk");
exports.OUTLINE_AND_FILL_STYLE_DICT.setValue(OutlineAndFillStyleEnum.Comment10, "DarkGrey");
var StyleSets;
(function (StyleSets) {
    StyleSets[StyleSets["MarkedArea"] = 0] = "MarkedArea";
    StyleSets[StyleSets["Comment"] = 1] = "Comment";
})(StyleSets = exports.StyleSets || (exports.StyleSets = {}));
/**
 * The layers which one can draw on (not supported)
 */
var GraphicalLayers;
(function (GraphicalLayers) {
    GraphicalLayers[GraphicalLayers["Background"] = 0] = "Background";
    GraphicalLayers[GraphicalLayers["Highlight"] = 1] = "Highlight";
    GraphicalLayers[GraphicalLayers["MeasureError"] = 2] = "MeasureError";
    GraphicalLayers[GraphicalLayers["SelectionSymbol"] = 3] = "SelectionSymbol";
    GraphicalLayers[GraphicalLayers["Cursor"] = 4] = "Cursor";
    GraphicalLayers[GraphicalLayers["PSI_Debug"] = 5] = "PSI_Debug";
    GraphicalLayers[GraphicalLayers["Notes"] = 6] = "Notes";
    GraphicalLayers[GraphicalLayers["Comment"] = 7] = "Comment";
    GraphicalLayers[GraphicalLayers["Debug_above"] = 8] = "Debug_above";
})(GraphicalLayers = exports.GraphicalLayers || (exports.GraphicalLayers = {}));
var NoteState;
(function (NoteState) {
    NoteState[NoteState["Normal"] = 0] = "Normal";
    NoteState[NoteState["Selected"] = 1] = "Selected";
    NoteState[NoteState["Follow_Confirmed"] = 2] = "Follow_Confirmed";
    NoteState[NoteState["QFeedback_NotFound"] = 3] = "QFeedback_NotFound";
    NoteState[NoteState["QFeedback_OK"] = 4] = "QFeedback_OK";
    NoteState[NoteState["QFeedback_Perfect"] = 5] = "QFeedback_Perfect";
    NoteState[NoteState["Debug1"] = 6] = "Debug1";
    NoteState[NoteState["Debug2"] = 7] = "Debug2";
    NoteState[NoteState["Debug3"] = 8] = "Debug3";
})(NoteState = exports.NoteState || (exports.NoteState = {}));
var AutoColorSet;
(function (AutoColorSet) {
    /* different (boomwhacker-like) color set*/
    AutoColorSet["C"] = "#d82c6b";
    AutoColorSet["D"] = "#F89D15";
    AutoColorSet["E"] = "#FFE21A";
    AutoColorSet["F"] = "#4dbd5c";
    AutoColorSet["G"] = "#009D96";
    AutoColorSet["A"] = "#43469d";
    AutoColorSet["B"] = "#76429c";
    AutoColorSet["Rest"] = "#000000";
    // color set from MuseScore Color notehead plugin version 1.1 by Werner Schweer and others
    /*C = "#eeee00",
    D = "#9b30ff",
    E = "#ee9a00",
    F = "#8b4513",
    G = "#ff0000",
    A = "#1e90ff",
    B = "#00ff00"*/
})(AutoColorSet = exports.AutoColorSet || (exports.AutoColorSet = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/DrawingMode.ts":
/*!***************************************************!*\
  !*** ./src/MusicalScore/Graphical/DrawingMode.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PhonicScoreModes = exports.MusicSymbolDrawingStyle = exports.DrawingMode = void 0;
var DrawingMode;
(function (DrawingMode) {
    DrawingMode[DrawingMode["All"] = 0] = "All";
    DrawingMode[DrawingMode["NoOverlays"] = 1] = "NoOverlays";
    DrawingMode[DrawingMode["Leadsheet"] = 2] = "Leadsheet";
})(DrawingMode = exports.DrawingMode || (exports.DrawingMode = {}));
var MusicSymbolDrawingStyle;
(function (MusicSymbolDrawingStyle) {
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Normal"] = 0] = "Normal";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Disabled"] = 1] = "Disabled";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Selected"] = 2] = "Selected";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Clickable"] = 3] = "Clickable";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["PlaybackSymbols"] = 4] = "PlaybackSymbols";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["FollowSymbols"] = 5] = "FollowSymbols";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["QFeedbackNotFound"] = 6] = "QFeedbackNotFound";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["QFeedbackOk"] = 7] = "QFeedbackOk";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["QFeedbackPerfect"] = 8] = "QFeedbackPerfect";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Debug1"] = 9] = "Debug1";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Debug2"] = 10] = "Debug2";
    MusicSymbolDrawingStyle[MusicSymbolDrawingStyle["Debug3"] = 11] = "Debug3";
})(MusicSymbolDrawingStyle = exports.MusicSymbolDrawingStyle || (exports.MusicSymbolDrawingStyle = {}));
var PhonicScoreModes;
(function (PhonicScoreModes) {
    PhonicScoreModes[PhonicScoreModes["Following"] = 0] = "Following";
    PhonicScoreModes[PhonicScoreModes["Midi"] = 1] = "Midi";
    PhonicScoreModes[PhonicScoreModes["Manual"] = 2] = "Manual";
})(PhonicScoreModes = exports.PhonicScoreModes || (exports.PhonicScoreModes = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/DrawingParameters.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/Graphical/DrawingParameters.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DrawingParameters = exports.DrawingParametersEnum = exports.ColoringModes = void 0;
const EngravingRules_1 = __webpack_require__(/*! ./EngravingRules */ "./src/MusicalScore/Graphical/EngravingRules.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
var ColoringModes;
(function (ColoringModes) {
    ColoringModes[ColoringModes["XML"] = 0] = "XML";
    ColoringModes[ColoringModes["AutoColoring"] = 1] = "AutoColoring";
    ColoringModes[ColoringModes["CustomColorSet"] = 2] = "CustomColorSet";
})(ColoringModes = exports.ColoringModes || (exports.ColoringModes = {}));
var DrawingParametersEnum;
(function (DrawingParametersEnum) {
    DrawingParametersEnum["allon"] = "allon";
    DrawingParametersEnum["compact"] = "compact";
    DrawingParametersEnum["compacttight"] = "compacttight";
    DrawingParametersEnum["default"] = "default";
    DrawingParametersEnum["leadsheet"] = "leadsheet";
    DrawingParametersEnum["preview"] = "preview";
    DrawingParametersEnum["thumbnail"] = "thumbnail";
})(DrawingParametersEnum = exports.DrawingParametersEnum || (exports.DrawingParametersEnum = {}));
/** Internal drawing/rendering parameters and broad modes like compact and thumbnail. Overlap with EngravingRules. */
class DrawingParameters {
    constructor(drawingParameters = DrawingParametersEnum.default, rules) {
        this.drawCursors = true;
        this.drawTitle = true;
        this.drawSubtitle = true;
        this.drawLyricist = true;
        this.drawComposer = true;
        this.drawCopyright = false;
        this.drawCredits = true;
        this.drawPartNames = true;
        this.fingeringPosition = AbstractExpression_1.PlacementEnum.Left;
        /** Draw notes set to be invisible (print-object="no" in XML). */
        this.drawHiddenNotes = false;
        this.rules = rules;
        if (!this.rules) {
            this.rules = new EngravingRules_1.EngravingRules();
        }
        this.DrawingParametersEnum = drawingParameters;
    }
    /** Sets drawing parameters enum and changes settings flags accordingly. */
    set DrawingParametersEnum(drawingParametersEnum) {
        this.drawingParametersEnum = drawingParametersEnum;
        switch (drawingParametersEnum) {
            case DrawingParametersEnum.allon:
                this.setForAllOn();
                break;
            case DrawingParametersEnum.thumbnail:
                this.setForThumbnail();
                break;
            case DrawingParametersEnum.leadsheet:
                this.setForLeadsheet();
                break;
            case DrawingParametersEnum.compact:
                this.setForCompactMode();
                break;
            case DrawingParametersEnum.compacttight:
                this.setForCompactTightMode();
                break;
            case DrawingParametersEnum.default:
            default:
                this.setForDefault();
        }
    }
    get DrawingParametersEnum() {
        return this.drawingParametersEnum;
    }
    setForAllOn() {
        this.drawHighlights = true;
        this.drawErrors = true;
        this.drawSelectionStartSymbol = true;
        this.drawSelectionEndSymbol = true;
        this.drawCursors = true;
        this.drawActivitySymbols = true;
        this.drawScrollIndicator = true;
        this.drawComments = true;
        this.drawMarkedAreas = true;
        this.DrawTitle = true;
        this.DrawSubtitle = true;
        this.DrawComposer = true;
        this.DrawLyricist = true;
        this.drawCredits = true;
        this.DrawPartNames = true;
        this.drawHiddenNotes = true;
        this.rules.CompactMode = false;
    }
    setForDefault() {
        this.rules.loadDefaultValues(); // this is not ideal, but it's hard to reset compactTight mode properly
        this.setForAllOn();
        this.drawHiddenNotes = false;
    }
    setForThumbnail() {
        this.drawHighlights = false;
        this.drawErrors = false;
        this.drawSelectionStartSymbol = false;
        this.drawSelectionStartSymbol = false;
        this.drawCursors = false;
        this.drawActivitySymbols = false;
        this.drawScrollIndicator = false;
        this.drawComments = true;
        this.drawMarkedAreas = true;
        this.drawHiddenNotes = false;
    }
    setForCompactMode() {
        // this.setForDefault(); // this would reset all EngravingRules to default values.
        this.rules.CompactMode = true;
        this.DrawCredits = false; // sets DrawComposer, DrawTitle, DrawLyricist to false
        // this.DrawPartNames = true; // unnecessary
        this.drawHiddenNotes = false;
    }
    setForCompactTightMode() {
        this.setForCompactMode(); // also sets CompactMode = true
        this.DrawPartNames = false;
        this.rules.VoiceSpacingMultiplierVexflow = 0.65;
        this.rules.VoiceSpacingAddendVexflow = 2.0;
        // tight rendering mode, lower margins and safety distances between systems, staffs etc. may cause overlap.
        // these options can afterwards be finetuned by setting osmd.rules.BetweenStaffDistance for example
        this.rules.MinSkyBottomDistBetweenStaves = 1.0; // default 1.0. this can cause collisions with slurs and dynamics sometimes
        this.rules.MinSkyBottomDistBetweenSystems = 1.0; // default 5.0
        // note that this.rules === osmd.rules, since it's passed as a reference
        this.rules.BetweenStaffDistance = 2.5;
        this.rules.StaffDistance = 3.5;
        this.rules.MinimumDistanceBetweenSystems = 1;
        // this.rules.PageTopMargin = 0.0; // see this.rules.PageTopMarginNarrow used in compact mode
        this.rules.PageBottomMargin = 0.0;
        this.rules.PageLeftMargin = 2.0;
        this.rules.PageRightMargin = 2.0;
        // this.BetweenStaffDistance = 2.5 // etc needs to be set in OSMD.rules
        // this.StaffDistance = 3.5
        // this.MinimumDistanceBetweenSystems = 1
    }
    setForLeadsheet() {
        this.drawHighlights = false;
        this.drawErrors = false;
        this.drawSelectionStartSymbol = true;
        this.drawSelectionEndSymbol = true;
        this.drawCursors = true;
        this.drawActivitySymbols = false;
        this.drawScrollIndicator = true;
        this.drawComments = true;
        this.drawMarkedAreas = true;
    }
    //#region GETTER / SETTER
    get DrawCredits() {
        return this.drawCredits;
    }
    set DrawCredits(value) {
        this.drawCredits = value;
        this.DrawComposer = value;
        this.DrawTitle = value;
        this.DrawSubtitle = value;
        this.DrawLyricist = value;
        this.DrawCopyright = value;
    }
    // TODO these drawCredits settings are duplicate in drawingParameters and EngravingRules. Maybe we only need them in EngravingRules.
    // this sets the parameter in DrawingParameters, which in turn sets the parameter in EngravingRules.
    // see settings below that don't call drawingParameters for the immediate approach.
    // on the other hand, DrawingParameters has the added option of setting broad modes (e.g. compact), though they aren't that useful
    get DrawTitle() {
        return this.drawTitle;
    }
    /** Enable or disable drawing the Title of the piece. If disabled, will disable drawing Subtitle as well. */
    set DrawTitle(value) {
        this.drawTitle = value;
        this.rules.RenderTitle = value;
        if (!value) { // don't draw subtitle if title isn't drawn
            this.DrawSubtitle = false;
        }
    }
    get DrawSubtitle() {
        return this.drawSubtitle;
    }
    /** Enable or disable drawing the Subtitle of the piece. If enabled, will enable drawing Title as well. */
    set DrawSubtitle(value) {
        this.drawSubtitle = value;
        this.rules.RenderSubtitle = value;
        if (value) {
            this.DrawTitle = true; // if subtitle is drawn, title needs to be drawn as well
        }
    }
    get DrawComposer() {
        return this.drawComposer;
    }
    /** Enable or disable drawing a label for the Composer of the piece. */
    set DrawComposer(value) {
        this.drawComposer = value;
        this.rules.RenderComposer = value;
    }
    get DrawLyricist() {
        return this.drawLyricist;
    }
    set DrawLyricist(value) {
        this.drawLyricist = value;
        this.rules.RenderLyricist = value;
    }
    get DrawCopyright() {
        return this.drawCopyright;
    }
    set DrawCopyright(value) {
        this.drawCopyright = value;
        this.rules.RenderCopyright = value;
    }
    get DrawPartNames() {
        return this.drawPartNames;
    }
    set DrawPartNames(value) {
        this.drawPartNames = value;
        this.rules.RenderPartNames = value;
        if (!this.rules.RenderPartNames) {
            this.rules.RenderPartAbbreviations = false;
        }
    }
    get FingeringPosition() {
        return this.fingeringPosition;
    }
    set FingeringPosition(value) {
        this.fingeringPosition = value;
        this.rules.FingeringPosition = value;
    }
    get Rules() {
        return this.rules;
    }
    set Rules(value) {
        this.rules = value;
    }
}
exports.DrawingParameters = DrawingParameters;


/***/ }),

/***/ "./src/MusicalScore/Graphical/EngravingRules.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/Graphical/EngravingRules.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PageFormat = exports.EngravingRules = void 0;
const GraphicalMusicPage_1 = __webpack_require__(/*! ./GraphicalMusicPage */ "./src/MusicalScore/Graphical/GraphicalMusicPage.ts");
//import {MusicSymbol} from "./MusicSymbol";
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const OSMDOptions_1 = __webpack_require__(/*! ../../OpenSheetMusicDisplay/OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
const DrawingParameters_1 = __webpack_require__(/*! ./DrawingParameters */ "./src/MusicalScore/Graphical/DrawingParameters.ts");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
const Enums_1 = __webpack_require__(/*! ../../Common/Enums */ "./src/Common/Enums/index.ts");
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const ChordSymbolContainer_1 = __webpack_require__(/*! ../../MusicalScore/VoiceData/ChordSymbolContainer */ "./src/MusicalScore/VoiceData/ChordSymbolContainer.ts");
const GraphicalNote_1 = __webpack_require__(/*! ./GraphicalNote */ "./src/MusicalScore/Graphical/GraphicalNote.ts");
/** Rendering and Engraving options, more fine-grained than [[IOSMDOptions]].
 *  Not all of these options are meant to be modified by users of the library,
 *  full support is only given for [[IOSMDOptions]].
 *  Nevertheless, there are many useful options here,
 *  like Render* to (not) render certain elements (e.g. osmd.rules.RenderRehearsalMarks = false)
 */
class EngravingRules {
    constructor() {
        this.NoteDistances = [1.0, 1.0, 1.3, 1.6, 2.0, 2.5, 3.0, 4.0];
        this.NoteDistancesScalingFactors = [1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0, 128.0];
        this.DurationDistanceDict = {};
        this.DurationScalingDistanceDict = {};
        // this is basically a WeakMap, except we save the id in the Note instead of using a WeakMap.
        this.NoteToGraphicalNoteMapObjectCount = 0;
        this.loadDefaultValues();
    }
    loadDefaultValues() {
        // global variables
        this.SamplingUnit = EngravingRules.unit * 3;
        // Page Label Variables
        this.SheetTitleHeight = 4.0;
        this.SheetSubtitleHeight = 2.0;
        this.SheetMinimumDistanceBetweenTitleAndSubtitle = 1.0;
        this.SheetComposerHeight = 2.0;
        this.SheetAuthorHeight = 2.0;
        this.SheetCopyrightHeight = 1.5;
        this.SheetCopyrightMargin = 2.0;
        // Staff sizing Variables
        this.CompactMode = false;
        this.PagePlacementEnum = GraphicalMusicPage_1.PagePlacementEnum.Down;
        this.PageHeight = 100001.0;
        this.PageTopMargin = 5.0;
        this.PageTopMarginNarrow = 0.0; // for compact mode
        this.PageBottomMargin = 5.0;
        this.PageLeftMargin = 5.0;
        this.PageRightMargin = 5.0;
        this.TitleTopDistance = 5.0;
        this.TitleBottomDistance = 1.0;
        this.StaffDistance = 7.0;
        this.BetweenStaffDistance = 5.0;
        this.MinimumStaffLineDistance = 4.0;
        this.MinSkyBottomDistBetweenStaves = 1.0; // default. compacttight mode sets it to 1.0 (as well).
        // System Sizing and Label Variables
        this.StaffHeight = 4.0;
        this.TabStaffInterlineHeight = 1.1111;
        this.BetweenStaffLinesDistance = EngravingRules.unit;
        this.SystemLeftMargin = 0.0;
        this.SystemRightMargin = 0.0;
        this.SystemLabelsRightMargin = 2.0;
        this.SystemComposerDistance = 2.0;
        this.InstrumentLabelTextHeight = 2;
        this.MinimumDistanceBetweenSystems = 7.0;
        this.MinSkyBottomDistBetweenSystems = 5.0;
        this.LastSystemMaxScalingFactor = 1.4;
        // autoBeam options
        this.AutoBeamNotes = false;
        this.AutoBeamOptions = {
            beam_middle_rests_only: false,
            beam_rests: false,
            maintain_stem_directions: false
        };
        this.AutoBeamTabs = false;
        // Beam Sizing Variables
        this.BeamWidth = EngravingRules.unit / 2.0;
        this.BeamSpaceWidth = EngravingRules.unit / 3.0;
        this.BeamForwardLength = 1.25 * EngravingRules.unit;
        this.FlatBeams = false;
        this.FlatBeamOffset = 20;
        this.FlatBeamOffsetPerBeam = 10;
        // Beam Sizing Variables
        this.ClefLeftMargin = 0.5;
        this.ClefRightMargin = 0.75;
        this.PercussionOneLineCutoff = 3; // percussion parts with <3 unique note positions rendered on one line
        this.PercussionForceVoicesOneLineCutoff = 1;
        this.PercussionUseXMLDisplayStep = true;
        this.PercussionXMLDisplayStepNoteValueShift = 0;
        this.PercussionOneLineXMLDisplayStepOctaveOffset = 0;
        this.PercussionUseCajon2NoteSystem = false;
        this.BetweenKeySymbolsDistance = 0.2;
        this.KeyRightMargin = 0.75;
        this.RhythmRightMargin = 1.25;
        this.ShowRhythmAgainAfterPartEndOrFinalBarline = true;
        this.NewPartAndSystemAfterFinalBarline = false;
        this.InStaffClefScalingFactor = 0.8;
        this.DistanceBetweenNaturalAndSymbolWhenCancelling = 0.4;
        // Beam Sizing Variables
        this.NoteHelperLinesOffset = 0.25;
        this.MeasureLeftMargin = 0.7;
        this.MeasureRightMargin = 0.0;
        this.DistanceBetweenLastInstructionAndRepetitionBarline = 1.0;
        this.ArpeggioDistance = 0.6;
        // Stems Variables
        this.StaccatoShorteningFactor = 2;
        this.IdealStemLength = 3.0;
        this.StemNoteHeadBorderYOffset = 0.2;
        this.StemMargin = 0.2;
        this.StemMinLength = 2.5;
        this.StemMaxLength = 4.5;
        this.BeamSlopeMaxAngle = 10.0;
        this.StemMinAllowedDistanceBetweenNoteHeadAndBeamLine = 1.0;
        this.SetWantedStemDirectionByXml = true;
        // also see stemwidth further below
        // GraceNote Variables
        this.GraceNoteScalingFactor = 0.6;
        this.GraceNoteXOffset = 0.2;
        this.GraceNoteGroupXMargin = 0.0; // More than 0 leads to too much space in most cases.
        //  see test_end_clef_measure. only potential 'tight' case: test_graceslash_simple
        // Wedge Variables
        this.WedgeOpeningLength = 1.2;
        this.WedgeMeasureEndOpeningLength = 0.75;
        this.WedgeMeasureBeginOpeningLength = 0.75;
        this.WedgePlacementAboveY = -1.5;
        this.WedgePlacementBelowY = 1.5;
        this.WedgeHorizontalMargin = 0.6;
        this.WedgeVerticalMargin = 0.5;
        this.DistanceOffsetBetweenTwoHorizontallyCrossedWedges = 0.3;
        this.WedgeMinLength = 2.0;
        this.WedgeEndDistanceBetweenTimestampsFactor = 1.75;
        this.SoftAccentWedgePadding = 0.4;
        this.SoftAccentSizeFactor = 0.6;
        this.DistanceBetweenAdjacentDynamics = 0.75;
        // Tempo Variables
        this.TempoChangeMeasureValidity = 4;
        this.TempoContinousFactor = 0.7;
        // various
        this.StaccatoScalingFactor = 0.8;
        this.BetweenDotsDistance = 0.8;
        this.OrnamentAccidentalScalingFactor = 0.65;
        this.ChordSymbolTextHeight = 2.0;
        this.ChordSymbolTextAlignment = TextAlignment_1.TextAlignmentEnum.LeftBottom;
        this.ChordSymbolRelativeXOffset = -1.0;
        this.ChordSymbolExtraXShiftForShortChordSymbols = 0.3; // also see LyricsExtraXShiftForShortLyrics, same principle
        this.ChordSymbolExtraXShiftWidthThreshold = 2.0;
        this.ChordSymbolXSpacing = 1.0;
        this.ChordOverlapAllowedIntoNextMeasure = 0;
        this.ChordSymbolYOffset = 0.1;
        this.ChordSymbolYPadding = 0.0;
        this.ChordSymbolYAlignment = true;
        this.ChordSymbolYAlignmentScope = "staffline"; // "measure" or "staffline"
        this.ChordAccidentalTexts = new typescript_collections_1.Dictionary();
        this.resetChordAccidentalTexts(this.ChordAccidentalTexts, false);
        this.ChordSymbolLabelTexts = new typescript_collections_1.Dictionary();
        this.resetChordSymbolLabelTexts(this.ChordSymbolLabelTexts);
        this.CustomChords = [];
        this.resetChordNames();
        this.RepetitionSymbolsYOffset = 0;
        this.RepetitionEndInstructionXShiftAsPercentOfStaveWidth = 0.4; // 40%
        this.RehearsalMarkXOffsetDefault = 10; // avoid collision with metronome number
        this.RehearsalMarkXOffset = 0; // user defined
        this.RehearsalMarkXOffsetSystemStartMeasure = -20; // good test: Haydn Concertante
        this.RehearsalMarkYOffsetDefault = -15;
        this.RehearsalMarkYOffset = 0; // user defined
        this.RehearsalMarkFontSize = 10; // vexflow default: 12, too big with chord symbols
        // Tuplets, MeasureNumber and TupletNumber Labels
        this.MeasureNumberLabelHeight = 1.5 * EngravingRules.unit;
        this.MeasureNumberLabelOffset = 2;
        this.MeasureNumberLabelXOffset = -0.5;
        this.TupletsRatioed = false;
        this.TupletsBracketed = false;
        this.TripletsBracketed = false; // special setting for triplets, overrides tuplet setting (for triplets only)
        this.TupletsBracketedUseXMLValue = true;
        this.TupletNumberLabelHeight = 1.5 * EngravingRules.unit;
        this.TupletNumberYOffset = 0.5;
        this.TupletNumberLimitConsecutiveRepetitions = true;
        this.TupletNumberMaxConsecutiveRepetitions = 2;
        this.TupletNumberAlwaysDisableAfterFirstMax = true;
        this.LabelMarginBorderFactor = 0.1;
        this.TupletVerticalLineLength = 0.5;
        this.TupletNumbersInTabs = false; // disabled by default, nonstandard in tabs, at least how we show them in non-tabs.
        // Slur and Tie variables
        this.SlurPlacementFromXML = true;
        this.SlurPlacementAtStems = false;
        this.SlurPlacementUseSkyBottomLine = false;
        this.BezierCurveStepSize = 1000;
        this.calculateCurveParametersArrays();
        this.TieGhostObjectWidth = 0.75;
        this.TieYPositionOffsetFactor = 0.3;
        this.MinimumNeededXspaceForTieGhostObject = 1.0;
        this.TieHeightMinimum = 0.28;
        this.TieHeightMaximum = 1.2;
        this.TieHeightInterpolationK = 0.0288;
        this.TieHeightInterpolationD = 0.136;
        this.SlurNoteHeadYOffset = 0.5;
        this.SlurEndArticulationYOffset = 0.8;
        this.SlurStartArticulationYOffsetOfArticulation = 0.5;
        this.SlurStemXOffset = 0.3;
        this.SlurSlopeMaxAngle = 15.0;
        this.SlurTangentMinAngle = 30.0;
        this.SlurTangentMaxAngle = 80.0;
        this.SlurHeightFactor = 1; // 1 = 100% (standard height). 2 = 100% flattening of all slurs.
        this.SlurHeightFlattenLongSlursFactorByWidth = 0.24; // additional flattening for long slurs the longer they are.
        this.SlurHeightFlattenLongSlursFactorByAngle = 0.36; // when one of these factors is high, increasing the other has a very strong effect.
        this.SlurHeightFlattenLongSlursCutoffAngle = 47;
        this.SlurHeightFlattenLongSlursCutoffWidth = 16; // 15 ~ slur between measure's first notes in 4/4. 14 -> problem with test_slurs_highNotes
        this.SlursStartingAtSameStaffEntryYOffset = 0.8;
        //Maximum y difference between control points. Forces slurs to have less 'weight' either way in the x direction
        this.SlurMaximumYControlPointDistance = undefined;
        // Glissandi
        this.GlissandoNoteOffset = 0.5;
        this.GlissandoStafflineStartMinimumWidth = 1;
        this.GlissandoStafflineStartYDistanceToNote = 0.8; // just crossing the line above/below end note. should be similar to tab slide angle.
        this.GlissandoStafflineEndOffset = 1;
        this.GlissandoDefaultWidth = 0.1;
        // Repetitions
        this.RepetitionAllowFirstMeasureBeginningRepeatBarline = true;
        this.RepetitionEndingLabelHeight = 2.0;
        this.RepetitionEndingLabelXOffset = 0.5;
        this.RepetitionEndingLabelYOffset = 0.3;
        this.RepetitionEndingLineYLowerOffset = 0.5;
        this.RepetitionEndingLineYUpperOffset = 0.3;
        this.VoltaOffset = 2.5;
        // Lyrics
        this.LyricsAlignmentStandard = TextAlignment_1.TextAlignmentEnum.LeftBottom; // CenterBottom and LeftBottom tested, spacing-optimized
        this.LyricsHeight = 2.0; // actually size of lyrics
        this.LyricsYOffsetToStaffHeight = 0.0; // distance between lyrics and staff. could partly be even lower/dynamic
        this.LyricsYMarginToBottomLine = 0.2;
        this.LyricsExtraXShiftForShortLyrics = 0.5; // also see ChordSymbolExtraXShiftForShortChordSymbols, same principle
        this.LyricsExtraXShiftForShortLyricsWidthThreshold = 1.4; // width of '+': 1.12, 'II': 1.33 (benefits from x-shift), 'III': 1.99 (doesn't benefit)
        this.LyricsUseXPaddingForShortNotes = true;
        this.LyricsXPaddingFactorForLongLyrics = 0.8;
        this.LyricsXPaddingWidthThreshold = 3.3;
        this.VerticalBetweenLyricsDistance = 0.5;
        this.HorizontalBetweenLyricsDistance = 0.2;
        this.BetweenSyllableMaximumDistance = 10.0;
        this.BetweenSyllableMinimumDistance = 0.5; // + 1.0 for CenterAlignment added in lyrics spacing
        this.LyricOverlapAllowedIntoNextMeasure = 3.4; // optimal for dashed last lyric, see Land der Berge
        this.MinimumDistanceBetweenDashes = 10;
        this.MaximumLyricsElongationFactor = 2.5;
        // expressions variables
        this.TempoYSpacing = 0.5; // note this is correlated with MetronomeMarkYShift: one-sided change can cause collisions
        this.InstantaneousTempoTextHeight = 2.3;
        this.ContinuousDynamicTextHeight = 2.3;
        this.MoodTextHeight = 2.3;
        this.UnknownTextHeight = 2.0;
        this.ContinuousTempoTextHeight = 2.3;
        this.DynamicExpressionMaxDistance = 2;
        this.DynamicExpressionSpacer = 0.5;
        this.IgnoreRepeatedDynamics = false;
        // Line Widths
        this.VexFlowDefaultNotationFontScale = 39; // scales notes, including rests. default value 39 in Vexflow.
        this.VexFlowDefaultTabFontScale = 39;
        this.TremoloStrokeScale = 1;
        this.TremoloYSpacingScale = 1;
        this.TremoloBuzzRollThickness = 0.25;
        this.StemWidth = 0.15; // originally 0.13. vexflow default 0.15. should probably be adjusted when increasing vexFlowDefaultNotationFontScale,
        this.StaffLineWidth = 0.10; // originally 0.12, but this will be pixels in Vexflow (*10).
        this.StaffLineColor = undefined; // if undefined, vexflow default (grey). not a width, but affects visual line clarity.
        this.LedgerLineWidth = 1; // vexflow units (pixels). if not undefined, the vexflow default will be overwritten
        this.LedgerLineStrokeStyle = undefined; // if not undefined, the vexflow default will be overwritten
        this.LedgerLineColorDefault = "#000000"; // black, previously grey by default
        this.WedgeLineWidth = 0.12;
        this.TupletLineWidth = 0.12;
        this.LyricUnderscoreLineWidth = 0.12;
        this.SystemThinLineWidth = 0.12;
        this.SystemBoldLineWidth = EngravingRules.unit / 2.0;
        this.SystemRepetitionEndingLineWidth = 0.12;
        this.SystemDotWidth = EngravingRules.unit / 2.0;
        this.DistanceBetweenVerticalSystemLines = 0.35;
        this.DistanceBetweenDotAndLine = 0.7;
        this.RepeatEndStartPadding = 2.0; // set to 0.0 to restore old padding/width with :||: measures
        this.OctaveShiftLineWidth = 0.12;
        this.OctaveShiftVerticalLineLength = EngravingRules.unit;
        this.GraceLineWidth = this.StaffLineWidth * this.GraceNoteScalingFactor;
        this.MultipleRestMeasureDefaultWidth = 4;
        this.MultipleRestMeasureAddKeySignature = true;
        this.FixedMeasureWidth = false;
        this.FixedMeasureWidthFixedValue = undefined; // only set to a number x if the width should be always x
        this.FixedMeasureWidthUseForPickupMeasures = false;
        // Line Widths
        this.MinimumCrossedBeamDifferenceMargin = 0.0001;
        // Canvas is limited to 32767 in most browsers, though SVG isn't.
        this.SheetMaximumWidth = 32767;
        // xSpacing Variables
        this.VoiceSpacingMultiplierVexflow = 0.85;
        this.VoiceSpacingAddendVexflow = 3.0;
        this.PickupMeasureWidthMultiplier = 1.0;
        this.PickupMeasureRepetitionSpacing = 0.8;
        this.PickupMeasureSpacingSingleNoteAddend = 1.6;
        this.DisplacedNoteMargin = 0.1;
        this.MinNoteDistance = 2.0;
        this.SubMeasureXSpacingThreshold = 35;
        this.MeasureDynamicsMaxScalingFactor = 2.5;
        this.WholeRestXShiftVexflow = -1.5; // VexFlow draws rest notes too far to the right
        this.MetronomeMarksDrawn = true;
        this.MetronomeMarkXShift = -6; // our unit, is taken * unitInPixels
        this.MetronomeMarkYShift = -1.0; // note this is correlated with TempoYSpacing: one-sided change can cause collisions
        this.SoftmaxFactorVexFlow = 15; // only applies to Vexflow 3.x. 15 seems like the sweet spot. Vexflow default is 100.
        // if too high, score gets too big, especially half notes. with half note quarter quarter, the quarters get squeezed.
        // if too low, smaller notes aren't positioned correctly.
        this.StaggerSameWholeNotes = true;
        // Render options (whether to render specific or invisible elements)
        this.AlignRests = OSMDOptions_1.AlignRestOption.Never; // 0 = false, 1 = true, 2 = auto
        this.RestCollisionYPadding = 0.0; // 1.0 = half distance between staff lines (e.g. E to F). will be rounded to whole numbers.
        this.FillEmptyMeasuresWithWholeRest = OSMDOptions_1.FillEmptyMeasuresWithWholeRests.No;
        this.ArpeggiosGoAcrossVoices = false; // safe option, as otherwise arpeggios will always go across all voices in Vexflow, which is often unwanted
        this.RenderArpeggios = true;
        this.RenderSlurs = true;
        this.RenderGlissandi = true;
        this.ColoringMode = DrawingParameters_1.ColoringModes.XML;
        this.ColoringEnabled = true;
        this.ColorStemsLikeNoteheads = false;
        this.ColorBeams = true;
        this.ColorFlags = true;
        this.applyDefaultColorMusic("#000000"); // black. undefined is only black if a note's color hasn't been changed before.
        this.DefaultColorCursor = "#33e02f"; // green
        this.DefaultFontFamily = "Times New Roman"; // what OSMD was initially optimized for
        this.DefaultFontStyle = Enums_1.FontStyles.Regular;
        this.DefaultVexFlowNoteFont = "gonville"; // was the default vexflow font up to vexflow 1.2.93, now it's Bravura, which is more cursive/bold
        this.MaxMeasureToDrawIndex = Number.MAX_VALUE;
        this.MinMeasureToDrawIndex = 0;
        this.MaxSystemToDrawNumber = Number.MAX_VALUE;
        this.MaxPageToDrawNumber = Number.MAX_VALUE;
        this.RenderComposer = true;
        this.RenderTitle = true;
        this.RenderSubtitle = true;
        this.RenderLyricist = true;
        this.RenderCopyright = false;
        this.RenderPartNames = true;
        this.RenderPartAbbreviations = true;
        this.RenderFingerings = true;
        this.RenderMeasureNumbers = true;
        this.RenderMeasureNumbersOnlyAtSystemStart = false;
        this.UseXMLMeasureNumbers = true;
        this.RenderLyrics = true;
        this.RenderChordSymbols = true;
        this.RenderMultipleRestMeasures = true;
        this.AutoGenerateMultipleRestMeasuresFromRestMeasures = true;
        this.RenderRehearsalMarks = true;
        this.RenderClefsAtBeginningOfStaffline = true;
        this.RenderKeySignatures = true;
        this.RenderTimeSignatures = true;
        this.RenderPedals = true;
        this.ArticulationPlacementFromXML = true;
        this.BreathMarkDistance = 0.8;
        this.FingeringPosition = AbstractExpression_1.PlacementEnum.AboveOrBelow; // AboveOrBelow = correct bounding boxes
        this.FingeringPositionFromXML = true;
        this.FingeringPositionGrace = AbstractExpression_1.PlacementEnum.Left;
        this.FingeringInsideStafflines = false;
        this.FingeringLabelFontHeight = 1.7;
        this.FingeringOffsetX = 0.0;
        this.FingeringOffsetY = 0.0;
        this.FingeringPaddingY = -0.2;
        this.FingeringTextSize = 1.5;
        this.RenderStringNumbersClassical = true;
        this.StringNumberOffsetY = 0.0;
        this.NewSystemAtXMLNewSystemAttribute = false;
        this.NewPageAtXMLNewPageAttribute = false;
        this.NewSystemAtXMLNewPageAttribute = false;
        this.RestoreCursorAfterRerender = true;
        this.StretchLastSystemLine = false;
        this.IgnoreBracketsWords = true;
        this.PlaceWordsInsideStafflineFromXml = false;
        this.PlaceWordsInsideStafflineYOffset = 0.9;
        // this.PositionMarcatoCloseToNote = true;
        this.PageFormat = PageFormat.UndefinedPageFormat; // default: undefined / 'infinite' height page, using the canvas'/container's width and height
        this.PageBackgroundColor = undefined; // default: transparent. half-transparent white: #FFFFFF88"
        this.RenderSingleHorizontalStaffline = false;
        this.SpacingBetweenTextLines = 0;
        this.NoteToGraphicalNoteMap = new typescript_collections_1.Dictionary();
        this.NoteToGraphicalNoteMapObjectCount = 0;
        this.SkyBottomLineBatchMinMeasures = 5;
        this.SkyBottomLineWebGLMinMeasures = 80;
        this.AlwaysSetPreferredSkyBottomLineBackendAutomatically = true;
        this.DisableWebGLInFirefox = true;
        this.DisableWebGLInSafariAndIOS = true;
        this.setPreferredSkyBottomLineBackendAutomatically();
        // this.populateDictionaries(); // these values aren't used currently
        try {
            this.MaxInstructionsConstValue = this.ClefLeftMargin + this.ClefRightMargin + this.KeyRightMargin + this.RhythmRightMargin + 11;
            //if (FontInfo.Info) {
            //    this.maxInstructionsConstValue += FontInfo.Info.getBoundingBox(MusicSymbol.G_CLEF).width
            //        + FontInfo.Info.getBoundingBox(MusicSymbol.FOUR).width
            //        + 7 * FontInfo.Info.getBoundingBox(MusicSymbol.SHARP).width;
            //}
        }
        catch (ex) {
            loglevel_1.default.info("EngravingRules()", ex);
        }
    }
    setPreferredSkyBottomLineBackendAutomatically(numberOfGraphicalMeasures = -1) {
        var _a, _b, _c, _d;
        let vendor = "";
        let userAgent = "";
        if (typeof globalThis === "object") { // it looks like globalThis can be undefined and cause build issues in es2017 (e.g. Android API 28), see #1299
            vendor = (_b = (_a = globalThis.navigator) === null || _a === void 0 ? void 0 : _a.vendor) !== null && _b !== void 0 ? _b : "";
            userAgent = (_d = (_c = globalThis.navigator) === null || _c === void 0 ? void 0 : _c.userAgent) !== null && _d !== void 0 ? _d : "";
        }
        let alwaysUsePlain = false;
        if (this.DisableWebGLInSafariAndIOS && (/apple/i).test(vendor)) { // doesn't apply to Chrome on MacOS
            alwaysUsePlain = true;
        }
        else if (this.DisableWebGLInFirefox && userAgent.includes("Firefox")) {
            alwaysUsePlain = true;
        }
        // In Safari (/iOS) and Firefox, the plain version is always faster (currently, Safari 15).
        //   WebGL is faster for large scores in Chrome and Edge (both Chromium based). See #1158
        this.PreferredSkyBottomLineBatchCalculatorBackend = OSMDOptions_1.SkyBottomLineBatchCalculatorBackendType.Plain;
        if (!alwaysUsePlain) {
            if (numberOfGraphicalMeasures >= this.SkyBottomLineWebGLMinMeasures) {
                this.PreferredSkyBottomLineBatchCalculatorBackend = OSMDOptions_1.SkyBottomLineBatchCalculatorBackendType.WebGL;
            }
        }
    }
    /** Makes it so that all musical elements (including key/time signature)
     *  are colored with the given color by default,
     *  unless an element has a different color set (e.g. VoiceEntry.StemColor).
     */
    applyDefaultColorMusic(color) {
        this.DefaultColorMusic = color;
        this.DefaultColorNotehead = color;
        this.DefaultColorRest = color;
        this.DefaultColorStem = color;
        this.DefaultColorLabel = color;
        this.DefaultColorLyrics = color;
        this.DefaultColorTitle = color;
        this.LedgerLineColorDefault = color;
    }
    addGraphicalNoteToNoteMap(note, graphicalNote) {
        note.NoteToGraphicalNoteObjectId = this.NoteToGraphicalNoteMapObjectCount;
        this.NoteToGraphicalNoteMap.setValue(note.NoteToGraphicalNoteObjectId, graphicalNote);
        this.NoteToGraphicalNoteMapObjectCount++;
    }
    /** Returns the GraphicalNote corresponding to (its) note. Also used by Cursor.GNotesUnderCursor().
     *  We don't want to save a GraphicalNote reference in Note, see Note.NoteToGraphicalNoteObjectId.
     */
    GNote(note) {
        return GraphicalNote_1.GraphicalNote.FromNote(note, this);
    }
    /** This should be done before a new sheet is loaded, not each re-render (otherwise the map would end empty). */
    clearMusicSheetObjects() {
        this.NoteToGraphicalNoteMap = new typescript_collections_1.Dictionary();
        this.NoteToGraphicalNoteMapObjectCount = 0;
    }
    resetChordAccidentalTexts(chordAccidentalTexts, useChordAccidentalsUnicode) {
        chordAccidentalTexts.setValue(Pitch_1.AccidentalEnum.SHARP, useChordAccidentalsUnicode ? "♯" : "#");
        chordAccidentalTexts.setValue(Pitch_1.AccidentalEnum.FLAT, useChordAccidentalsUnicode ? "♭" : "b");
        chordAccidentalTexts.setValue(Pitch_1.AccidentalEnum.DOUBLEFLAT, useChordAccidentalsUnicode ? "𝄫" : "bb");
        chordAccidentalTexts.setValue(Pitch_1.AccidentalEnum.DOUBLESHARP, useChordAccidentalsUnicode ? "𝄪" : "x");
    }
    setChordSymbolLabelText(key, value) {
        this.ChordSymbolLabelTexts.setValue(key, value);
    }
    resetChordSymbolLabelTexts(chordtexts) {
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.minor, "m");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.augmented, "aug");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.diminished, "dim");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.dominant, "7");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.majorseventh, "maj7");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.minorseventh, "m7");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.diminishedseventh, "dim7");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.augmentedseventh, "aug7");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.halfdiminished, `m7${this.ChordAccidentalTexts.getValue(Pitch_1.AccidentalEnum.FLAT)}5`);
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.majorminor, "m(maj7)");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.majorsixth, "maj6");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.minorsixth, "m6");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.dominantninth, "9");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.majorninth, "maj9");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.minorninth, "m9");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.dominant11th, "11");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.major11th, "maj11");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.minor11th, "m11");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.dominant13th, "13");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.major13th, "maj13");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.minor13th, "m13");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.suspendedsecond, "sus2");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.suspendedfourth, "sus4");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.power, "5");
        chordtexts.setValue(ChordSymbolContainer_1.ChordSymbolEnum.none, "N.C.");
        return chordtexts;
    }
    addChordName(altName, chordKindText, adds, alts, subs) {
        if (ChordSymbolContainer_1.ChordSymbolEnum[chordKindText] !== undefined) {
            const degrees = {
                adds,
                alts,
                subs,
            };
            this.CustomChords.push(ChordSymbolContainer_1.CustomChord.createCustomChord(altName, ChordSymbolContainer_1.ChordSymbolEnum[chordKindText], degrees));
        }
    }
    renameChord(altName, newAltName) {
        ChordSymbolContainer_1.CustomChord.renameCustomChord(altName, newAltName, this.CustomChords);
    }
    resetChordNames() {
        const sharp = this.ChordAccidentalTexts.getValue(Pitch_1.AccidentalEnum.SHARP);
        const flat = this.ChordAccidentalTexts.getValue(Pitch_1.AccidentalEnum.FLAT);
        // addChordName(alternateName, chordKindText, adds, alters, subtracts)
        this.addChordName("alt", "major", [`${sharp}5`, `${flat}9`, `${sharp}9`], [`${flat}5`], []);
        this.addChordName("7alt", "dominant", [`${sharp}5`, `${flat}9`, `${sharp}9`], [`${flat}5`], []);
        this.addChordName("7sus4", "dominant", ["4"], [], ["3"]);
        this.addChordName("7sus4", "suspendedfourth", ["7"], [], []);
        this.addChordName("9sus4", "dominantninth", ["4"], [], ["3"]);
        this.addChordName("9sus4", "suspendedfourth", ["9"], [], []);
        this.addChordName("11sus4", "dominant11th", ["4"], [], ["3"]);
        this.addChordName("11sus4", "suspendedfourth", ["11"], [], []);
        this.addChordName("13sus4", "dominant13th", ["4"], [], ["3"]);
        this.addChordName("13sus4", "suspendedfourth", ["13"], [], []);
        this.addChordName("7sus2", "dominant", ["2"], [], ["3"]);
        this.addChordName("7sus2", "suspendedsecond", ["7"], [], []);
        this.addChordName(`m7${flat}5`, "minorseventh", [], [`${flat}5`], []);
        this.addChordName("9sus2", "dominantninth", ["2"], [], ["3"]);
        this.addChordName("9sus2", "suspendedsecond", ["9"], [], []);
        this.addChordName("11sus2", "dominant11th", ["2"], [], ["3"]);
        this.addChordName("11sus2", "suspendedsecond", ["11"], [], []);
        this.addChordName("13sus2", "dominant13th", ["2"], [], ["3"]);
        this.addChordName("13sus2", "suspendedsecond", ["13"], [], []);
        this.addChordName("m(maj9)", "majorminor", ["9"], [], []);
        this.addChordName("m(maj11)", "majorminor", ["11"], [], []);
        this.addChordName("m(maj13)", "majorminor", ["13"], [], []);
        this.addChordName("69", "majorsixth", ["9"], [], []);
        this.addChordName("mi69", "minorsixth", ["9"], [], []);
    }
    /**
     * This method maps NoteDurations to Distances and DistancesScalingFactors.
     */
    // private populateDictionaries(): void {
    //     for (let i: number = 0; i < this.NoteDistances.length; i++) {
    //         switch (i) {
    //             case 0:
    //                 this.DurationDistanceDict[0.015625] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[0.015625] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 1:
    //                 this.DurationDistanceDict[0.03125] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[0.03125] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 2:
    //                 this.DurationDistanceDict[0.0625] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[0.0625] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 3:
    //                 this.DurationDistanceDict[0.125] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[0.125] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 4:
    //                 this.DurationDistanceDict[0.25] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[0.25] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 5:
    //                 this.DurationDistanceDict[0.5] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[0.5] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 6:
    //                 this.DurationDistanceDict[1.0] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[1.0] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             case 7:
    //                 this.DurationDistanceDict[2.0] = this.NoteDistances[i];
    //                 this.DurationScalingDistanceDict[2.0] = this.NoteDistancesScalingFactors[i];
    //                 break;
    //             default:
    //                 // FIXME
    //         }
    //     }
    // }
    /**
     * Calculate Curve-independend factors, to be used later in the Slur- and TieCurvePoints calculation
     */
    calculateCurveParametersArrays() {
        this.TPower3 = new Array(this.BezierCurveStepSize);
        this.OneMinusTPower3 = new Array(this.BezierCurveStepSize);
        this.FactorOne = new Array(this.BezierCurveStepSize);
        this.FactorTwo = new Array(this.BezierCurveStepSize);
        for (let i = 0; i < this.BezierCurveStepSize; i++) {
            const t = i / this.BezierCurveStepSize;
            this.TPower3[i] = Math.pow(t, 3);
            this.OneMinusTPower3[i] = Math.pow((1 - t), 3);
            this.FactorOne[i] = 3 * Math.pow((1 - t), 2) * t;
            this.FactorTwo[i] = 3 * (1 - t) * Math.pow(t, 2);
        }
    }
}
exports.EngravingRules = EngravingRules;
/** A unit of distance. 1.0 is the distance between lines of a stave for OSMD, which is 10 pixels in Vexflow. */
EngravingRules.unit = 1.0;
// TODO maybe this should be moved to OSMDOptions. Also see OpenSheetMusicDisplay.PageFormatStandards
class PageFormat {
    constructor(width, height, idString = "noIdStringGiven") {
        this.width = width;
        this.height = height;
        this.idString = idString;
    }
    get aspectRatio() {
        if (!this.IsUndefined) {
            return this.width / this.height;
        }
        else {
            return 0; // infinite page height
        }
    }
    /** Undefined page format: use default page format. */
    get IsUndefined() {
        return this.width === undefined || this.height === undefined || this.height === 0 || this.width === 0;
    }
    static get UndefinedPageFormat() {
        return new PageFormat(0, 0);
    }
    Equals(otherPageFormat) {
        if (!otherPageFormat) {
            return false;
        }
        return otherPageFormat.width === this.width && otherPageFormat.height === this.height;
    }
}
exports.PageFormat = PageFormat;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalChordSymbolContainer.ts":
/*!*********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalChordSymbolContainer.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalChordSymbolContainer = void 0;
const Label_1 = __webpack_require__(/*! ../Label */ "./src/MusicalScore/Label.ts");
const GraphicalLabel_1 = __webpack_require__(/*! ./GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const ChordSymbolContainer_1 = __webpack_require__(/*! ../VoiceData/ChordSymbolContainer */ "./src/MusicalScore/VoiceData/ChordSymbolContainer.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
class GraphicalChordSymbolContainer extends GraphicalObject_1.GraphicalObject {
    constructor(chordSymbolContainer, parent, textHeight, keyInstruction, transposeHalftones, rules) {
        super();
        this.chordSymbolContainer = chordSymbolContainer;
        this.boundingBox = new BoundingBox_1.BoundingBox(this, parent);
        this.rules = rules;
        this.calculateLabel(textHeight, transposeHalftones, keyInstruction);
    }
    get GetChordSymbolContainer() {
        return this.chordSymbolContainer;
    }
    get GraphicalLabel() {
        return this.graphicalLabel;
    }
    calculateLabel(textHeight, transposeHalftones, keyInstruction) {
        const text = ChordSymbolContainer_1.ChordSymbolContainer.calculateChordText(this.chordSymbolContainer, transposeHalftones, keyInstruction);
        this.graphicalLabel = new GraphicalLabel_1.GraphicalLabel(new Label_1.Label(text), textHeight, this.rules.ChordSymbolTextAlignment, this.rules, this.boundingBox);
        this.graphicalLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(this.rules.ChordSymbolRelativeXOffset, 0.0);
        this.graphicalLabel.Label.colorDefault = this.rules.DefaultColorChordSymbol;
    }
}
exports.GraphicalChordSymbolContainer = GraphicalChordSymbolContainer;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalContinuousDynamicExpression.ts":
/*!****************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalContinuousDynamicExpression.ts ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalContinuousDynamicExpression = void 0;
const GraphicalLine_1 = __webpack_require__(/*! ./GraphicalLine */ "./src/MusicalScore/Graphical/GraphicalLine.ts");
const ContinuousDynamicExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const AbstractGraphicalExpression_1 = __webpack_require__(/*! ./AbstractGraphicalExpression */ "./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
/**
 * This class prepares the graphical elements for a continuous expression. It calculates the wedges and
 * wrappings if they are split over system breaks.
 */
class GraphicalContinuousDynamicExpression extends AbstractGraphicalExpression_1.AbstractGraphicalExpression {
    /**
     * Create a new instance of the GraphicalContinuousDynamicExpression
     * @param continuousDynamic The continuous dynamic instruction read via ExpressionReader
     * @param staffLine The staffline where the expression is attached
     */
    constructor(continuousDynamic, staffLine, measure) {
        super(staffLine, continuousDynamic, measure);
        /** Holds the line objects that can be drawn via implementation */
        this.lines = [];
        this.isSplittedPart = false;
        this.notToBeRemoved = false;
    }
    //#region Getter / Setter
    /** The graphical measure where the parent continuous dynamic expression starts */
    get StartMeasure() { return this.startMeasure; }
    set StartMeasure(value) { this.startMeasure = value; }
    /** The graphical measure where the parent continuous dynamic expression ends */
    get EndMeasure() { return this.endMeasure; }
    set EndMeasure(value) { this.endMeasure = value; }
    /** The staff lin where the graphical dynamic expressions ends */
    get EndStaffLine() { return this.endMeasure ? this.endMeasure.ParentStaffLine : undefined; }
    /**  Is true if this continuous expression is a wedge, that reaches over a system border and needs to be split into two. */
    get IsSplittedPart() { return this.isSplittedPart; }
    set IsSplittedPart(value) { this.isSplittedPart = value; }
    /**  Is true if the dynamic is not a symbol but a text instruction. E.g. "decrescendo" */
    get IsVerbal() { return this.ContinuousDynamic.Label && this.ContinuousDynamic.Label.length > 0; }
    /** True if this expression should not be removed if re-rendered */
    get NotToBeRemoved() { return this.notToBeRemoved; }
    set NotToBeRemoved(value) { this.notToBeRemoved = value; }
    /** Holds the line objects that can be drawn via implementation */
    get Lines() { return this.lines; }
    get ContinuousDynamic() { return this.SourceExpression; }
    //#endregion
    //#region Public methods
    updateSkyBottomLine() {
        var _a;
        // update Sky-BottomLine
        const skyBottomLineCalculator = this.parentStaffLine.SkyBottomLineCalculator;
        const left = this.IsVerbal ? this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginLeft : 0;
        const right = this.IsVerbal ? this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginRight : 0;
        if (!this.IsSoftAccent && !this.IsVerbal && this.lines.length < 2) {
            loglevel_1.default.warn("Not enough lines for SkyBottomLine calculation");
        }
        if (!this.IsVerbal) {
            if (this.ContinuousDynamic.DynamicType !== ContinuousDynamicExpression_1.ContDynamicEnum.crescendo &&
                this.ContinuousDynamic.DynamicType !== ContinuousDynamicExpression_1.ContDynamicEnum.diminuendo) {
                // for now there is only crescendo or decrescendo anyways, but this will catch errors when we add new types in the future
                loglevel_1.default.warn("GraphicalContinuousDynamicExpression.updateSkyBottomLine(): " +
                    "unhandled continuous dynamic type. start measure: " + ((_a = this.startMeasure) === null || _a === void 0 ? void 0 : _a.MeasureNumber));
            }
        }
        switch (this.Placement) {
            case AbstractExpression_1.PlacementEnum.Above:
                if (this.IsSoftAccent) {
                    skyBottomLineCalculator.updateSkyLineWithWedge(this.lines[0].Start, this.lines[0].End);
                    skyBottomLineCalculator.updateSkyLineWithWedge(this.lines[2].End, this.lines[2].Start);
                    skyBottomLineCalculator.updateSkyLineWithLine(this.lines[0].End, this.lines[2].End, this.lines[0].End.y);
                }
                else if (!this.IsVerbal) {
                    if (this.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.crescendo) {
                        skyBottomLineCalculator.updateSkyLineWithWedge(this.lines[0].Start, this.lines[0].End);
                    }
                    else if (this.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.diminuendo) {
                        skyBottomLineCalculator.updateSkyLineWithWedge(this.lines[0].End, this.lines[0].Start);
                    } // else covered with the log.warn above
                }
                else {
                    const yValue = this.label.PositionAndShape.BorderMarginTop + this.label.PositionAndShape.RelativePosition.y;
                    skyBottomLineCalculator.updateSkyLineInRange(left, right, yValue);
                }
                break;
            case AbstractExpression_1.PlacementEnum.Below:
                if (!this.IsVerbal) {
                    // console.log(`id: ${this.parentStaffLine.ParentStaff.Id}`);
                    if (this.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.crescendo) {
                        skyBottomLineCalculator.updateBottomLineWithWedge(this.lines[1].Start, this.lines[1].End);
                    }
                    else if (this.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.diminuendo) {
                        skyBottomLineCalculator.updateBottomLineWithWedge(this.lines[1].End, this.lines[1].Start);
                    } // else covered with the log.warn above
                }
                else {
                    const yValue = this.label.PositionAndShape.BorderMarginBottom + this.label.PositionAndShape.RelativePosition.y;
                    skyBottomLineCalculator.updateBottomLineInRange(left, right, yValue);
                }
                break;
            default:
                loglevel_1.default.error("Placement for GraphicalContinuousDynamicExpression is unknown");
        }
    }
    /**
     * Calculate crescendo lines for (full).
     * @param startX left most starting point
     * @param endX right mist ending point
     * @param y y placement
     * @param wedgeOpeningLength length of the opening
     * @param wedgeLineWidth line width of the wedge
     */
    createCrescendoLines(startX, endX, y, wedgeOpeningLength = this.rules.WedgeOpeningLength, wedgeLineWidth = this.rules.WedgeLineWidth) {
        const lineStart = new PointF2D_1.PointF2D(startX, y);
        const upperLineEnd = new PointF2D_1.PointF2D(endX, y - wedgeOpeningLength / 2);
        const lowerLineEnd = new PointF2D_1.PointF2D(endX, y + wedgeOpeningLength / 2);
        this.addWedgeLines(lineStart, upperLineEnd, lowerLineEnd, wedgeLineWidth);
    }
    /**
     * Calculate crescendo lines for system break (first part).
     * @param startX left most starting point
     * @param endX right mist ending point
     * @param y y placement
     * @param wedgeMeasureEndOpeningLength length of opening at measure end
     * @param wedgeOpeningLength length of the opening
     * @param wedgeLineWidth line width of the wedge
     */
    createFirstHalfCrescendoLines(startX, endX, y, wedgeMeasureEndOpeningLength = this.rules.WedgeMeasureEndOpeningLength, wedgeLineWidth = this.rules.WedgeLineWidth) {
        const lineStart = new PointF2D_1.PointF2D(startX, y);
        const upperLineEnd = new PointF2D_1.PointF2D(endX, y - wedgeMeasureEndOpeningLength / 2);
        const lowerLineEnd = new PointF2D_1.PointF2D(endX, y + wedgeMeasureEndOpeningLength / 2);
        this.addWedgeLines(lineStart, upperLineEnd, lowerLineEnd, wedgeLineWidth);
    }
    /**
     * Calculate crescendo lines for system break (second part).
     * @param startX left most starting point
     * @param endX right mist ending point
     * @param y y placement
     * @param wedgeMeasureBeginOpeningLength length of opening at measure start
     * @param wedgeOpeningLength length of the opening
     * @param wedgeLineWidth line width of the wedge
     */
    createSecondHalfCrescendoLines(startX, endX, y, wedgeMeasureBeginOpeningLength = this.rules.WedgeMeasureBeginOpeningLength, wedgeOpeningLength = this.rules.WedgeOpeningLength, wedgeLineWidth = this.rules.WedgeLineWidth) {
        const upperLineStart = new PointF2D_1.PointF2D(startX, y - wedgeMeasureBeginOpeningLength / 2);
        const lowerLineStart = new PointF2D_1.PointF2D(startX, y + wedgeMeasureBeginOpeningLength / 2);
        const upperLineEnd = new PointF2D_1.PointF2D(endX, y - wedgeOpeningLength / 2);
        const lowerLineEnd = new PointF2D_1.PointF2D(endX, y + wedgeOpeningLength / 2);
        this.addDoubleLines(upperLineStart, upperLineEnd, lowerLineStart, lowerLineEnd, wedgeLineWidth);
    }
    /**
     * This method recalculates the Crescendo Lines (for all cases).
     * @param startX left most starting point
     * @param endX right most ending point
     * @param y y placement
     */
    recalculateCrescendoLines(startX, endX, y) {
        const isSecondHalfSplit = Math.abs(this.lines[0].Start.y - this.lines[1].Start.y) > 0.0001;
        this.lines.clear();
        if (isSecondHalfSplit) {
            this.createSecondHalfCrescendoLines(startX, endX, y);
        }
        else if (this.isSplittedPart) {
            this.createFirstHalfCrescendoLines(startX, endX, y);
        }
        else {
            this.createCrescendoLines(startX, endX, y);
        }
    }
    /**
     * Calculate diminuendo lines for system break (full).
     * @param startX left most starting point
     * @param endX right mist ending point
     * @param y y placement
     * @param wedgeOpeningLength length of the opening
     * @param wedgeLineWidth line width of the wedge
     */
    createDiminuendoLines(startX, endX, y, wedgeOpeningLength = this.rules.WedgeOpeningLength, wedgeLineWidth = this.rules.WedgeLineWidth) {
        const upperWedgeStart = new PointF2D_1.PointF2D(startX, y - wedgeOpeningLength / 2);
        const lowerWedgeStart = new PointF2D_1.PointF2D(startX, y + wedgeOpeningLength / 2);
        const wedgeEnd = new PointF2D_1.PointF2D(endX, y);
        this.addWedgeLines(wedgeEnd, upperWedgeStart, lowerWedgeStart, wedgeLineWidth);
    }
    /**
     * Calculate diminuendo lines for system break (first part).
     * @param startX left most starting point
     * @param endX right mist ending point
     * @param y y placement
     * @param wedgeOpeningLength length of the opening
     * @param wedgeMeasureEndOpeningLength length of opening at measure end
     * @param wedgeLineWidth line width of the wedge
     */
    createFirstHalfDiminuendoLines(startX, endX, y, wedgeOpeningLength = this.rules.WedgeOpeningLength, wedgeMeasureEndOpeningLength = this.rules.WedgeMeasureEndOpeningLength, wedgeLineWidth = this.rules.WedgeLineWidth) {
        const upperLineStart = new PointF2D_1.PointF2D(startX, y - wedgeOpeningLength / 2);
        const lowerLineStart = new PointF2D_1.PointF2D(startX, y + wedgeOpeningLength / 2);
        const upperLineEnd = new PointF2D_1.PointF2D(endX, y - wedgeMeasureEndOpeningLength / 2);
        const lowerLineEnd = new PointF2D_1.PointF2D(endX, y + wedgeMeasureEndOpeningLength / 2);
        this.addDoubleLines(upperLineStart, upperLineEnd, lowerLineStart, lowerLineEnd, wedgeLineWidth);
    }
    /**
     * Calculate diminuendo lines for system break (second part).
     * @param startX left most starting point
     * @param endX right mist ending point
     * @param y y placement
     * @param wedgeMeasureBeginOpeningLength length of opening at measure start
     * @param wedgeLineWidth line width of the wedge
     */
    createSecondHalfDiminuendoLines(startX, endX, y, wedgeMeasureBeginOpeningLength = this.rules.WedgeMeasureBeginOpeningLength, wedgeLineWidth = this.rules.WedgeLineWidth) {
        const upperLineStart = new PointF2D_1.PointF2D(startX, y - wedgeMeasureBeginOpeningLength / 2);
        const lowerLineStart = new PointF2D_1.PointF2D(startX, y + wedgeMeasureBeginOpeningLength / 2);
        const lineEnd = new PointF2D_1.PointF2D(endX, y);
        this.addWedgeLines(lineEnd, upperLineStart, lowerLineStart, wedgeLineWidth);
    }
    /**
     * This method recalculates the diminuendo lines (for all cases).
     * @param startX left most starting point
     * @param endX right most ending point
     * @param y y placement
     */
    recalculateDiminuendoLines(startX, endX, yPosition) {
        const isFirstHalfSplit = Math.abs(this.lines[0].End.y - this.lines[1].End.y) > 0.0001;
        this.lines.clear();
        if (isFirstHalfSplit) {
            this.createFirstHalfDiminuendoLines(startX, endX, yPosition);
        }
        else if (this.isSplittedPart) {
            this.createSecondHalfDiminuendoLines(startX, endX, yPosition);
        }
        else {
            this.createDiminuendoLines(startX, endX, yPosition);
        }
    }
    /**
     * Calculate the BoundingBox (as a box around the Wedge).
     */
    calcPsi() {
        if (this.IsVerbal) {
            this.PositionAndShape.calculateBoundingBox();
            return;
        }
        this.PositionAndShape.RelativePosition = this.lines[0].Start;
        this.PositionAndShape.BorderMarginTop = this.lines[0].End.y - this.lines[0].Start.y;
        this.PositionAndShape.BorderMarginBottom = this.lines[1].End.y - this.lines[1].Start.y;
        this.PositionAndShape.Center.y = (this.PositionAndShape.BorderMarginTop + this.PositionAndShape.BorderMarginBottom) / 2;
        // TODO is the center position correct? it wasn't set before, important for AlignmentManager.alignDynamicExpressions()
        // console.log(`relative y, center y: ${this.PositionAndShape.RelativePosition.y},${this.PositionAndShape.Center.y})`);
        if (this.IsSoftAccent) {
            this.PositionAndShape.BorderMarginLeft = 0;
            this.PositionAndShape.BorderMarginRight = this.lines[3].Start.x - this.lines[0].Start.x;
        }
        else if (this.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.crescendo) {
            this.PositionAndShape.BorderMarginLeft = 0;
            this.PositionAndShape.BorderMarginRight = this.lines[0].End.x - this.lines[0].Start.x;
        }
        else {
            this.PositionAndShape.BorderMarginLeft = this.lines[0].End.x - this.lines[0].Start.x;
            this.PositionAndShape.BorderMarginRight = 0;
        }
    }
    /**
     * Clear Lines
     */
    cleanUp() {
        this.lines.clear();
    }
    /**
     * Shift wedge in y position
     * @param shift Number to shift
     */
    shiftYPosition(shift) {
        if (this.IsVerbal) {
            this.PositionAndShape.RelativePosition.y += shift;
            this.PositionAndShape.calculateBoundingBox();
        }
        else {
            this.lines[0].Start.y += shift;
            this.lines[0].End.y += shift;
            this.lines[1].End.y += shift;
        }
    }
    squeeze(value) {
        // Verbal expressions are not squeezable and squeezing below the width is also not possible
        if (this.IsVerbal) {
            return;
        }
        const width = Math.abs(this.lines[0].End.x - this.lines[0].Start.x);
        if (width < Math.abs(value)) {
            return;
        }
        if (this.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.crescendo) {
            if (value > 0) {
                this.lines[0].Start.x += value;
            }
            else {
                this.lines[0].End.x += value;
                this.lines[1].End.x += value;
            }
        }
        else {
            if (value < 0) {
                this.lines[0].Start.x += value;
            }
            else {
                this.lines[0].End.x += value;
                this.lines[1].End.x += value;
            }
        }
        this.calcPsi();
    }
    //#endregion
    //#region Private methods
    /**
     * Create lines from points and add them to the memory
     * @param wedgePoint start of the expression
     * @param upperWedgeEnd end of the upper line
     * @param lowerWedgeEnd end of lower line
     * @param wedgeLineWidth line width
     */
    addWedgeLines(wedgePoint, upperWedgeEnd, lowerWedgeEnd, wedgeLineWidth) {
        const upperLine = new GraphicalLine_1.GraphicalLine(wedgePoint, upperWedgeEnd, wedgeLineWidth);
        const lowerLine = new GraphicalLine_1.GraphicalLine(wedgePoint, lowerWedgeEnd, wedgeLineWidth);
        if (this.rules.DefaultColorMusic) {
            upperLine.colorHex = this.rules.DefaultColorMusic;
            lowerLine.colorHex = this.rules.DefaultColorMusic;
        }
        this.lines.push(upperLine);
        this.lines.push(lowerLine);
    }
    /**
     * Create top and bottom lines for continuing wedges
     * @param upperLineStart start of the upper line
     * @param upperLineEnd end of the upper line
     * @param lowerLineStart start of the lower line
     * @param lowerLineEnd end of lower line
     * @param wedgeLineWidth line width
     */
    addDoubleLines(upperLineStart, upperLineEnd, lowerLineStart, lowerLineEnd, wedgeLineWidth) {
        const upperLine = new GraphicalLine_1.GraphicalLine(upperLineStart, upperLineEnd, wedgeLineWidth);
        const lowerLine = new GraphicalLine_1.GraphicalLine(lowerLineStart, lowerLineEnd, wedgeLineWidth);
        if (this.rules.DefaultColorMusic) {
            upperLine.colorHex = this.rules.DefaultColorMusic;
            lowerLine.colorHex = this.rules.DefaultColorMusic;
        }
        this.lines.push(upperLine);
        this.lines.push(lowerLine);
    }
}
exports.GraphicalContinuousDynamicExpression = GraphicalContinuousDynamicExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalCurve.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalCurve.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalCurve = void 0;
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
class GraphicalCurve {
    // Pre-calculate Curve-independend factors, to be used later in the Slur- and TieCurvePoints calculation.
    constructor() {
        GraphicalCurve.tPow3 = new Array(GraphicalCurve.bezierCurveStepSize);
        GraphicalCurve.oneMinusTPow3 = new Array(GraphicalCurve.bezierCurveStepSize);
        GraphicalCurve.bezierFactorOne = new Array(GraphicalCurve.bezierCurveStepSize);
        GraphicalCurve.bezierFactorTwo = new Array(GraphicalCurve.bezierCurveStepSize);
        for (let i = 0; i < GraphicalCurve.bezierCurveStepSize; i++) {
            const t = i / GraphicalCurve.bezierCurveStepSize;
            GraphicalCurve.tPow3[i] = Math.pow(t, 3);
            GraphicalCurve.oneMinusTPow3[i] = Math.pow((1 - t), 3);
            GraphicalCurve.bezierFactorOne[i] = 3 * Math.pow((1 - t), 2) * t;
            GraphicalCurve.bezierFactorTwo[i] = 3 * (1 - t) * Math.pow(t, 2);
        }
    }
    /**
     *
     * @param relativePosition
     */
    calculateCurvePointAtIndex(relativePosition) {
        const index = Math.round(relativePosition * GraphicalCurve.bezierCurveStepSize);
        if (index < 0 || index >= GraphicalCurve.bezierCurveStepSize) {
            return new PointF2D_1.PointF2D();
        }
        return new PointF2D_1.PointF2D((GraphicalCurve.oneMinusTPow3[index] * this.bezierStartPt.x
            + GraphicalCurve.bezierFactorOne[index] * this.bezierStartControlPt.x
            + GraphicalCurve.bezierFactorTwo[index] * this.bezierEndControlPt.x
            + GraphicalCurve.tPow3[index] * this.bezierEndPt.x), (GraphicalCurve.oneMinusTPow3[index] * this.bezierStartPt.y
            + GraphicalCurve.bezierFactorOne[index] * this.bezierStartControlPt.y
            + GraphicalCurve.bezierFactorTwo[index] * this.bezierEndControlPt.y + GraphicalCurve.tPow3[index] * this.bezierEndPt.y));
    }
}
exports.GraphicalCurve = GraphicalCurve;
GraphicalCurve.bezierCurveStepSize = 1000;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalGlissando.ts":
/*!**********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalGlissando.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalGlissando = void 0;
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const GraphicalLine_1 = __webpack_require__(/*! ./GraphicalLine */ "./src/MusicalScore/Graphical/GraphicalLine.ts");
class GraphicalGlissando {
    constructor(glissando) {
        this.Glissando = glissando;
        this.staffEntries = [];
    }
    calculateLine(rules) {
        const startStaffEntry = this.staffEntries[0];
        const endStaffEntry = this.staffEntries[this.staffEntries.length - 1];
        // where the line (not the graphicalObject) starts and ends (could belong to another StaffLine)
        const glissStartNote = startStaffEntry.findGraphicalNoteFromNote(this.Glissando.StartNote);
        // if (!slurStartNote && this.graceStart) {
        //     slurStartNote = startStaffEntry.findGraphicalNoteFromGraceNote(this.Glissando.StartNote);
        // }
        // if (!slurStartNote) {
        //     slurStartNote = startStaffEntry.findEndTieGraphicalNoteFromNoteWithStartingSlur(this.Glissando.StartNote, this.slur);
        // }
        const glissEndNote = endStaffEntry.findGraphicalNoteFromNote(this.Glissando.EndNote);
        // if (!slurEndNote && this.graceEnd) {
        //     slurEndNote = endStaffEntry.findGraphicalNoteFromGraceNote(this.Glissando.EndNote);
        // }
        if (!glissStartNote && !glissEndNote) {
            return; // otherwise causes error. TODO investigate, shouldn't happen. (M4_G_L19)
        }
        const staffLine = startStaffEntry.parentMeasure.ParentStaffLine;
        let startX;
        let endX;
        let startY;
        let endY;
        if (glissStartNote && startStaffEntry.parentMeasure.ParentStaffLine === this.StaffLine) {
            // must be relative to StaffLine
            startX = glissStartNote.PositionAndShape.RelativePosition.x + glissStartNote.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x
                + glissStartNote.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x
                + rules.GlissandoNoteOffset;
            //const glissStartVE: GraphicalVoiceEntry = glissStartNote.parentVoiceEntry;
            //startY = glissStartVE.PositionAndShape.RelativePosition.y + glissStartVE.PositionAndShape.BorderTop / 2;
            // startY = glissStartNote.PositionAndShape.RelativePosition.y - glissStartNote.PositionAndShape.Size.height / 2;
            startY = glissStartNote.PositionAndShape.AbsolutePosition.y;
            // unfortunately we need to take the AbsolutePosition, as the RelativePosition is imprecise (to the notehead). Maybe that could be fixed.
        }
        else {
            startX = endStaffEntry.parentMeasure.beginInstructionsWidth - 0.4;
            // startY: above/below note
            const sign = this.Glissando.Direction === BoundingBox_1.ColDirEnum.Down ? -1 : 1;
            startY = glissEndNote.PositionAndShape.AbsolutePosition.y + sign * rules.GlissandoStafflineStartYDistanceToNote;
            // default: one line above/below end note. could also be 0.5 lines like for tab slide
        }
        if (glissEndNote && endStaffEntry.parentMeasure.ParentStaffLine === this.StaffLine) {
            endX = glissEndNote.PositionAndShape.RelativePosition.x + glissEndNote.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x
                + glissEndNote.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x
                - 0.5 - rules.GlissandoNoteOffset; // -0.5: width of notehead. glissEndNote.x seems to be center of notehead.
            if (startX > endX) { // e.g. when beginInstructionsWidth too big at start of staffline, bigger than note startX
                startX = endX - rules.GlissandoStafflineStartMinimumWidth;
            }
            //const glissEndVe: GraphicalVoiceEntry = glissEndNote.parentVoiceEntry;
            //endY = glissEndVe.PositionAndShape.RelativePosition.y + glissEndVe.PositionAndShape.BorderTop;
            endY = glissEndNote.PositionAndShape.AbsolutePosition.y;
        }
        else {
            if (staffLine.Measures.last().parentSourceMeasure.HasEndLine) {
                return;
                // TODO inquire how this can happen: start of glissando at end of last measure. maybe faulty xml? or about slur/slide indices?
            }
            endX = staffLine.PositionAndShape.Size.width;
            if (endX - startX > rules.GlissandoStafflineEndOffset) {
                startX = endX - rules.GlissandoStafflineEndOffset;
            } // else: don't try to set a potentially bigger offset for a note very close to the staffline end
            // endY: above/below note
            const sign = this.Glissando.Direction === BoundingBox_1.ColDirEnum.Down ? 1 : -1;
            endY = glissStartNote.PositionAndShape.AbsolutePosition.y + sign * rules.GlissandoStafflineStartYDistanceToNote;
        }
        const start = new PointF2D_1.PointF2D(startX, startY);
        const end = new PointF2D_1.PointF2D(endX, endY);
        if (this.Width === undefined) {
            this.Width = rules.GlissandoDefaultWidth;
        }
        this.Line = new GraphicalLine_1.GraphicalLine(start, end, this.Width);
    }
}
exports.GraphicalGlissando = GraphicalGlissando;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalInstantaneousDynamicExpression.ts":
/*!*******************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalInstantaneousDynamicExpression.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalInstantaneousDynamicExpression = void 0;
const AbstractGraphicalExpression_1 = __webpack_require__(/*! ./AbstractGraphicalExpression */ "./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class GraphicalInstantaneousDynamicExpression extends AbstractGraphicalExpression_1.AbstractGraphicalExpression {
    constructor(instantaneousDynamic, staffLine, measure) {
        super(staffLine, instantaneousDynamic, measure.parentSourceMeasure);
        this.mInstantaneousDynamicExpression = instantaneousDynamic;
        this.mMeasure = measure;
    }
    updateSkyBottomLine() {
        const skyBottomLineCalculator = this.parentStaffLine.SkyBottomLineCalculator;
        const left = this.PositionAndShape.RelativePosition.x + this.PositionAndShape.BorderMarginLeft;
        const right = this.PositionAndShape.RelativePosition.x + this.PositionAndShape.BorderMarginRight;
        let yValue = 0;
        switch (this.Placement) {
            case AbstractExpression_1.PlacementEnum.Above:
                yValue = this.PositionAndShape.RelativePosition.y + this.PositionAndShape.BorderMarginTop;
                skyBottomLineCalculator.updateSkyLineInRange(left, right, yValue);
                break;
            case AbstractExpression_1.PlacementEnum.Below:
                yValue = this.PositionAndShape.RelativePosition.y + this.PositionAndShape.BorderMarginBottom;
                skyBottomLineCalculator.updateBottomLineInRange(left, right, yValue);
                break;
            default:
                loglevel_1.default.error("Placement for GraphicalInstantaneousDynamicExpression is unknown");
        }
    }
}
exports.GraphicalInstantaneousDynamicExpression = GraphicalInstantaneousDynamicExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalInstantaneousTempoExpression.ts":
/*!*****************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalInstantaneousTempoExpression.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalInstantaneousTempoExpression = void 0;
const AbstractGraphicalExpression_1 = __webpack_require__(/*! ./AbstractGraphicalExpression */ "./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts");
class GraphicalInstantaneousTempoExpression extends AbstractGraphicalExpression_1.AbstractGraphicalExpression {
    constructor(tempoExpresssion, label) {
        super(label.PositionAndShape.Parent.DataObject, tempoExpresssion, tempoExpresssion.parentMeasure);
        this.label = label;
    }
    get GraphicalLabel() {
        return this.label;
    }
    updateSkyBottomLine() {
        // Not implemented
    }
}
exports.GraphicalInstantaneousTempoExpression = GraphicalInstantaneousTempoExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalLabel.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalLabel.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalLabel = void 0;
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const Clickable_1 = __webpack_require__(/*! ./Clickable */ "./src/MusicalScore/Graphical/Clickable.ts");
const MusicSheetCalculator_1 = __webpack_require__(/*! ./MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
/**
 * The graphical counterpart of a Label
 */
class GraphicalLabel extends Clickable_1.Clickable {
    /**
     * Creates a new GraphicalLabel from a Label
     * @param label  label object containing text
     * @param textHeight Height of text
     * @param alignment Alignement like left, right, top, ...
     * @param parent Parent Bounding Box where the label is attached to
     */
    constructor(label, textHeight, alignment, rules, parent = undefined) {
        super();
        /** Read-only informational variable only set once by lyrics centering algorithm. */
        this.CenteringXShift = 0;
        this.label = label;
        this.boundingBox = new BoundingBox_1.BoundingBox(this, parent);
        this.label.fontHeight = textHeight;
        this.label.textAlignment = alignment;
        this.rules = rules;
    }
    get Label() {
        return this.label;
    }
    toString() {
        return `${this.label.text} (${this.boundingBox.RelativePosition.x},${this.boundingBox.RelativePosition.y})`;
    }
    /**
     * Calculate GraphicalLabel's Borders according to its Alignment
     * Create also the text-lines and their offsets here
     */
    setLabelPositionAndShapeBorders() {
        var _a, _b;
        if (this.Label.text.trim() === "") {
            return;
        }
        this.TextLines = [];
        const labelMarginBorderFactor = (_b = (_a = this.rules) === null || _a === void 0 ? void 0 : _a.LabelMarginBorderFactor) !== null && _b !== void 0 ? _b : 0.1;
        const lines = this.Label.text.split(/[\n\r]+/g);
        const numOfLines = lines.length;
        let maxWidth = 0;
        for (let i = 0; i < numOfLines; i++) {
            const line = lines[i].trim();
            const widthToHeightRatio = MusicSheetCalculator_1.MusicSheetCalculator.TextMeasurer.computeTextWidthToHeightRatio(line, this.Label.font, this.Label.fontStyle, this.label.fontFamily);
            const currWidth = this.Label.fontHeight * widthToHeightRatio;
            maxWidth = Math.max(maxWidth, currWidth);
            // here push only text and width of the text:
            this.TextLines.push({ text: line, xOffset: 0, width: currWidth });
        }
        // maxWidth is calculated ->
        // now also set the x-offsets:
        for (const line of this.TextLines) {
            let xOffset = 0;
            switch (this.Label.textAlignment) {
                case TextAlignment_1.TextAlignmentEnum.RightBottom:
                case TextAlignment_1.TextAlignmentEnum.RightCenter:
                case TextAlignment_1.TextAlignmentEnum.RightTop:
                    xOffset = maxWidth - line.width;
                    break;
                case TextAlignment_1.TextAlignmentEnum.CenterBottom:
                case TextAlignment_1.TextAlignmentEnum.CenterCenter:
                case TextAlignment_1.TextAlignmentEnum.CenterTop:
                    xOffset = (maxWidth - line.width) / 2;
                    break;
                default:
                    break;
            }
            line.xOffset = xOffset;
        }
        let height = this.Label.fontHeight * numOfLines;
        if (this.rules.SpacingBetweenTextLines > 0 && this.TextLines.length > 1) {
            height += (this.rules.SpacingBetweenTextLines * numOfLines) / 10;
        }
        const bbox = this.PositionAndShape;
        switch (this.Label.textAlignment) {
            case TextAlignment_1.TextAlignmentEnum.CenterBottom:
                bbox.BorderTop = -height;
                bbox.BorderLeft = -maxWidth / 2;
                bbox.BorderBottom = 0;
                bbox.BorderRight = maxWidth / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.CenterCenter:
                bbox.BorderTop = -height / 2;
                bbox.BorderLeft = -maxWidth / 2;
                bbox.BorderBottom = height / 2;
                bbox.BorderRight = maxWidth / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.CenterTop:
                bbox.BorderTop = 0;
                bbox.BorderLeft = -maxWidth / 2;
                bbox.BorderBottom = height;
                bbox.BorderRight = maxWidth / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.LeftBottom:
                bbox.BorderTop = -height;
                bbox.BorderLeft = 0;
                bbox.BorderBottom = 0;
                bbox.BorderRight = maxWidth;
                break;
            case TextAlignment_1.TextAlignmentEnum.LeftCenter:
                bbox.BorderTop = -height / 2;
                bbox.BorderLeft = 0;
                bbox.BorderBottom = height / 2;
                bbox.BorderRight = maxWidth;
                break;
            case TextAlignment_1.TextAlignmentEnum.LeftTop:
                bbox.BorderTop = 0;
                bbox.BorderLeft = 0;
                bbox.BorderBottom = height;
                bbox.BorderRight = maxWidth;
                break;
            case TextAlignment_1.TextAlignmentEnum.RightBottom:
                bbox.BorderTop = -height;
                bbox.BorderLeft = -maxWidth;
                bbox.BorderBottom = 0;
                bbox.BorderRight = 0;
                break;
            case TextAlignment_1.TextAlignmentEnum.RightCenter:
                bbox.BorderTop = -height / 2;
                bbox.BorderLeft = -maxWidth;
                bbox.BorderBottom = height / 2;
                bbox.BorderRight = 0;
                break;
            case TextAlignment_1.TextAlignmentEnum.RightTop:
                bbox.BorderTop = 0;
                bbox.BorderLeft = -maxWidth;
                bbox.BorderBottom = height;
                bbox.BorderRight = 0;
                break;
            default:
        }
        bbox.BorderMarginTop = bbox.BorderTop - height * labelMarginBorderFactor;
        bbox.BorderMarginLeft = bbox.BorderLeft - height * labelMarginBorderFactor;
        bbox.BorderMarginBottom = bbox.BorderBottom + height * labelMarginBorderFactor;
        bbox.BorderMarginRight = bbox.BorderRight + height * labelMarginBorderFactor;
    }
}
exports.GraphicalLabel = GraphicalLabel;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalLine.ts":
/*!*****************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalLine.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalLine = void 0;
const DrawingEnums_1 = __webpack_require__(/*! ./DrawingEnums */ "./src/MusicalScore/Graphical/DrawingEnums.ts");
class GraphicalLine {
    constructor(start, end, width = 0, styleEnum = DrawingEnums_1.OutlineAndFillStyleEnum.BaseWritingColor, colorHex = undefined) {
        this.start = start;
        this.end = end;
        this.width = width;
        this.styleId = styleEnum;
        this.colorHex = colorHex;
    }
    get Start() {
        return this.start;
    }
    set Start(value) {
        this.start = value;
    }
    get End() {
        return this.end;
    }
    set End(value) {
        this.end = value;
    }
    get Width() {
        return this.width;
    }
    set Width(value) {
        this.width = value;
    }
}
exports.GraphicalLine = GraphicalLine;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalLyricEntry.ts":
/*!***********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalLyricEntry.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalLyricEntry = void 0;
const GraphicalLabel_1 = __webpack_require__(/*! ./GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const Label_1 = __webpack_require__(/*! ../Label */ "./src/MusicalScore/Label.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
/**
 * The graphical counterpart of a [[LyricsEntry]]
 */
class GraphicalLyricEntry {
    constructor(lyricsEntry, graphicalStaffEntry, lyricsHeight, staffHeight) {
        this.lyricsEntry = lyricsEntry;
        this.graphicalStaffEntry = graphicalStaffEntry;
        const lyricsTextAlignment = graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules.LyricsAlignmentStandard;
        // for small notes with long text, use center alignment
        // TODO use this, fix center+left alignment combination spacing
        if (lyricsEntry.Text.length >= 4
            && lyricsEntry.Parent.Notes[0].Length.Denominator > 4
            && lyricsTextAlignment === TextAlignment_1.TextAlignmentEnum.LeftBottom) {
            // lyricsTextAlignment = TextAlignmentAndPlacement.CenterBottom;
        }
        const label = new Label_1.Label(lyricsEntry.Text);
        const rules = this.graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules;
        this.graphicalLabel = new GraphicalLabel_1.GraphicalLabel(label, lyricsHeight, lyricsTextAlignment, rules, graphicalStaffEntry.PositionAndShape);
        this.graphicalLabel.Label.colorDefault = rules.DefaultColorLyrics; // if undefined, no change. saves an if check
        this.graphicalLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0, staffHeight);
        this.graphicalLabel.setLabelPositionAndShapeBorders(); // needed to have Size.width
        if (this.graphicalLabel.PositionAndShape.Size.width < rules.LyricsExtraXShiftForShortLyricsWidthThreshold) {
            this.graphicalLabel.PositionAndShape.RelativePosition.x += rules.LyricsExtraXShiftForShortLyrics;
            this.graphicalLabel.CenteringXShift = rules.LyricsExtraXShiftForShortLyrics;
        }
        if (lyricsTextAlignment === TextAlignment_1.TextAlignmentEnum.LeftBottom) {
            this.graphicalLabel.PositionAndShape.RelativePosition.x -= 1; // make lyrics optically left-aligned
        }
    }
    hasDashFromLyricWord() {
        if (!this.ParentLyricWord) {
            return false;
        }
        const lyricWordIndex = this.ParentLyricWord.GraphicalLyricsEntries.indexOf(this);
        return this.ParentLyricWord.GraphicalLyricsEntries.length > 1 && lyricWordIndex < this.ParentLyricWord.GraphicalLyricsEntries.length - 1;
    }
    get LyricsEntry() {
        return this.lyricsEntry;
    }
    get ParentLyricWord() {
        return this.graphicalLyricWord;
    }
    set ParentLyricWord(value) {
        this.graphicalLyricWord = value;
    }
    get GraphicalLabel() {
        return this.graphicalLabel;
    }
    set GraphicalLabel(value) {
        this.graphicalLabel = value;
    }
    get StaffEntryParent() {
        return this.graphicalStaffEntry;
    }
    set StaffEntryParent(value) {
        this.graphicalStaffEntry = value;
    }
}
exports.GraphicalLyricEntry = GraphicalLyricEntry;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalLyricWord.ts":
/*!**********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalLyricWord.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalLyricWord = void 0;
/**
 * The graphical counterpart of a [[LyricWord]]
 */
class GraphicalLyricWord {
    constructor(lyricWord) {
        this.graphicalLyricsEntries = [];
        this.lyricWord = lyricWord;
        this.initialize();
    }
    get GetLyricWord() {
        return this.lyricWord;
    }
    get GraphicalLyricsEntries() {
        return this.graphicalLyricsEntries;
    }
    set GraphicalLyricsEntries(value) {
        this.graphicalLyricsEntries = value;
    }
    isFilled() {
        for (let i = 0; i < this.graphicalLyricsEntries.length; i++) {
            if (!this.graphicalLyricsEntries[i]) {
                return false;
            }
        }
        return true;
    }
    initialize() {
        // FIXME: This is actually not needed in Javascript as we have dynamic memory allication?
        for (let i = 0; i < this.lyricWord.Syllables.length; i++) {
            this.graphicalLyricsEntries.push(undefined);
        }
    }
}
exports.GraphicalLyricWord = GraphicalLyricWord;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalMeasure.ts":
/*!********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalMeasure.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalMeasure = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
/**
 * Represents a measure in the music sheet (one measure in one staff line)
 */
class GraphicalMeasure extends GraphicalObject_1.GraphicalObject {
    constructor(staff = undefined, parentSourceMeasure = undefined, staffLine = undefined) {
        super();
        /**
         * Whether or not this measure is nothing but rest(s).
         * Also see SourceMeasure.allRests, which is not the same, because a source measure can have multiple staffs/graphicalMeasures.
         */
        this.hasOnlyRests = false;
        this.measureNumber = -1;
        this.ShowTimeSignature = true;
        this.ShowKeySignature = true;
        this.parentStaff = staff;
        this.parentSourceMeasure = parentSourceMeasure;
        this.parentStaffLine = staffLine;
        if (staffLine) {
            this.parentStaff = staffLine.ParentStaff;
            this.PositionAndShape = new BoundingBox_1.BoundingBox(this, staffLine.PositionAndShape);
        }
        else {
            this.PositionAndShape = new BoundingBox_1.BoundingBox(this);
        }
        this.PositionAndShape.BorderBottom = 4;
        if (this.parentSourceMeasure) {
            this.measureNumber = this.parentSourceMeasure.MeasureNumber;
        }
        this.staffEntries = [];
    }
    get ParentStaff() {
        return this.parentStaff;
    }
    get ParentMusicSystem() {
        return this.parentMusicSystem;
    }
    set ParentMusicSystem(value) {
        this.parentMusicSystem = value;
    }
    get MeasureNumber() {
        return this.measureNumber;
    }
    get FirstInstructionStaffEntry() {
        return this.firstInstructionStaffEntry;
    }
    set FirstInstructionStaffEntry(value) {
        this.firstInstructionStaffEntry = value;
    }
    get LastInstructionStaffEntry() {
        return this.lastInstructionStaffEntry;
    }
    set LastInstructionStaffEntry(value) {
        this.lastInstructionStaffEntry = value;
    }
    get ParentStaffLine() {
        return this.parentStaffLine;
    }
    set ParentStaffLine(value) {
        this.parentStaffLine = value;
        if (this.parentStaffLine) {
            this.PositionAndShape.Parent = this.parentStaffLine.PositionAndShape;
        }
    }
    /**
     * Reset all the geometric values and parameters of this measure and put it in an initialized state.
     * This is needed to evaluate a measure a second time by system builder.
     */
    resetLayout() {
        throw new Error("not implemented");
    }
    /**
     * Return the x-width of a given measure line.
     * @param line
     */
    getLineWidth(line) {
        throw new Error("not implemented");
    }
    /**
     * Add the given clef to the begin of the measure.
     * This has to update/increase BeginInstructionsWidth.
     * @param clef
     */
    addClefAtBegin(clef) {
        throw new Error("not implemented");
    }
    /**
     * Add the given key to the begin of the measure.
     * This has to update/increase BeginInstructionsWidth.
     * @param currentKey - The new valid key.
     * @param previousKey - The old cancelled key. Needed to show which accidentals are not valid any more.
     * @param currentClef - The valid clef. Needed to put the accidentals on the right y-positions.
     */
    addKeyAtBegin(currentKey, previousKey, currentClef) {
        throw new Error("not implemented");
    }
    /**
     * Add the given rhythm to the begin of the measure.
     * This has to update/increase BeginInstructionsWidth.
     * @param rhythm
     */
    addRhythmAtBegin(rhythm) {
        throw new Error("not implemented");
    }
    /**
     * Add the given clef to the end of the measure.
     * This has to update/increase EndInstructionsWidth.
     * @param clef
     */
    addClefAtEnd(clef, visible = true) {
        throw new Error("not implemented");
    }
    /**
     * Set the x-position relative to the staffline (y-Position is always 0 relative to the staffline).
     * @param xPos
     */
    setPositionInStaffline(xPos) {
        this.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(xPos, 0);
    }
    /**
     * Set the overall x-width of the measure.
     * @param width
     */
    setWidth(width) {
        this.PositionAndShape.BorderRight = width;
    }
    /**
     * This method is called after the StaffEntriesScaleFactor has been set.
     * Here the final x-positions of the staff entries have to be set.
     * (multiply the minimal positions with the scaling factor, considering the BeginInstructionsWidth).
     */
    layoutSymbols() {
        throw new Error("not implemented");
    }
    findGraphicalStaffEntryFromTimestamp(relativeTimestamp) {
        var _a;
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            if ((_a = graphicalStaffEntry.relInMeasureTimestamp) === null || _a === void 0 ? void 0 : _a.Equals(relativeTimestamp)) {
                return graphicalStaffEntry;
            }
        }
        return undefined;
    }
    /**
     * Iterate from start to end and find the [[GraphicalStaffEntry]] with the same absolute timestamp.
     * @param absoluteTimestamp
     * @returns {any}
     */
    findGraphicalStaffEntryFromVerticalContainerTimestamp(absoluteTimestamp) {
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            if (graphicalStaffEntry.sourceStaffEntry.VerticalContainerParent.getAbsoluteTimestamp().Equals(absoluteTimestamp)) {
                return graphicalStaffEntry;
            }
        }
        return undefined;
    }
    /**
     * Check if the all the [[GraphicalMeasure]]'s [[StaffEntry]]s (their minimum Length) have the same duration with the [[SourceMeasure]].
     * @returns {boolean}
     */
    hasSameDurationWithSourceMeasureParent() {
        const duration = new Fraction_1.Fraction(0, 1);
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            duration.Add(graphicalStaffEntry.findStaffEntryMinNoteLength());
        }
        return duration.Equals(this.parentSourceMeasure.Duration);
    }
    /**
     * Check a whole [[Measure]] for the presence of multiple Voices (used for Stem direction).
     * @returns {boolean}
     */
    hasMultipleVoices() {
        if (this.staffEntries.length === 0) {
            return false;
        }
        const voices = [];
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const staffEntry = this.staffEntries[idx];
            for (let idx2 = 0, len2 = staffEntry.sourceStaffEntry.VoiceEntries.length; idx2 < len2; ++idx2) {
                const voiceEntry = staffEntry.sourceStaffEntry.VoiceEntries[idx2];
                if (voices.indexOf(voiceEntry.ParentVoice) < 0) {
                    voices.push(voiceEntry.ParentVoice);
                }
            }
        }
        if (voices.length > 1) {
            return true;
        }
        return false;
    }
    isVisible() {
        return this.ParentStaff.ParentInstrument.Visible;
    }
    getGraphicalMeasureDurationFromStaffEntries() {
        let duration = new Fraction_1.Fraction(0, 1);
        const voices = [];
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            for (let idx2 = 0, len2 = graphicalStaffEntry.sourceStaffEntry.VoiceEntries.length; idx2 < len2; ++idx2) {
                const voiceEntry = graphicalStaffEntry.sourceStaffEntry.VoiceEntries[idx2];
                if (voices.indexOf(voiceEntry.ParentVoice) < 0) {
                    voices.push(voiceEntry.ParentVoice);
                }
            }
        }
        for (let idx = 0, len = voices.length; idx < len; ++idx) {
            const voice = voices[idx];
            const voiceDuration = new Fraction_1.Fraction(0, 1);
            for (const graphicalStaffEntry of this.staffEntries) {
                for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
                    if (gve.parentVoiceEntry.ParentVoice === voice && gve.notes.length > 0) {
                        voiceDuration.Add(gve.notes[0].graphicalNoteLength);
                    }
                }
            }
            if (duration.lt(voiceDuration)) {
                duration = Fraction_1.Fraction.createFromFraction(voiceDuration);
            }
        }
        return duration;
    }
    addGraphicalStaffEntry(graphicalStaffEntry) {
        this.staffEntries.push(graphicalStaffEntry);
    }
    /**
     * Add a [[StaffEntry]] (along with its [[BoundingBox]]) to the current Measure.
     * @param staffEntry
     */
    addGraphicalStaffEntryAtTimestamp(staffEntry) {
        if (staffEntry) {
            if (this.staffEntries.length === 0 || this.staffEntries[this.staffEntries.length - 1].relInMeasureTimestamp.lt(staffEntry.relInMeasureTimestamp)) {
                this.staffEntries.push(staffEntry);
            }
            else {
                for (let i = this.staffEntries.length - 1; i >= 0; i--) {
                    if (this.staffEntries[i].relInMeasureTimestamp.lt(staffEntry.relInMeasureTimestamp)) {
                        this.staffEntries.splice(i + 1, 0, staffEntry);
                        break;
                    }
                    if (i === 0) {
                        this.staffEntries.splice(i, 0, staffEntry);
                    }
                }
            }
        }
    }
    isPianoRightHand() {
        return this.isUpperStaffOfInstrument();
    }
    isPianoLeftHand() {
        return this.isLowerStaffOfInstrument();
    }
    isUpperStaffOfInstrument() {
        if (this.parentStaff.ParentInstrument.Staves.length === 1) {
            return true;
        }
        return this.ParentStaff === this.parentStaff.ParentInstrument.Staves[0];
    }
    isLowerStaffOfInstrument() {
        if (this.parentStaff.ParentInstrument.Staves.length === 1) {
            return false; // technically this could be true as well, but we want this to be treated as upper and not return the same value.
            // e.g. for a violin, fingerings should go above.
        }
        return this.ParentStaff === this.ParentStaff.ParentInstrument.Staves.last();
    }
    beginsWithLineRepetition() {
        const sourceMeasure = this.parentSourceMeasure;
        if (!sourceMeasure) {
            return false;
        }
        return sourceMeasure.beginsWithLineRepetition();
    }
    /**
     * Check if this Measure is a Repetition Ending.
     * @returns {boolean}
     */
    endsWithLineRepetition() {
        const sourceMeasure = this.parentSourceMeasure;
        if (!sourceMeasure) {
            return false;
        }
        return sourceMeasure.endsWithLineRepetition();
    }
    /**
     * Check if a Repetition starts at the next Measure.
     * @returns {boolean}
     */
    beginsWithWordRepetition() {
        const sourceMeasure = this.parentSourceMeasure;
        if (!sourceMeasure) {
            return false;
        }
        return sourceMeasure.beginsWithWordRepetition();
    }
    /**
     * Check if this Measure is a Repetition Ending.
     */
    endsWithWordRepetition() {
        const sourceMeasure = this.parentSourceMeasure;
        if (!sourceMeasure) {
            return false;
        }
        return sourceMeasure.endsWithWordRepetition();
    }
    getTransposedHalftones() {
        const transposeHalftones = this.parentStaff.ParentInstrument.GetMusicSheet.Transpose +
            this.parentStaff.ParentInstrument.Transpose;
        // if (!transposeHalftones) {
        //     transposeHalftones = this.parentStaff.ParentInstrument.Transpose;
        // }
        return transposeHalftones;
    }
}
exports.GraphicalMeasure = GraphicalMeasure;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalMusicPage.ts":
/*!**********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalMusicPage.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PagePlacementEnum = exports.GraphicalMusicPage = void 0;
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
class GraphicalMusicPage extends GraphicalObject_1.GraphicalObject {
    constructor(parent) {
        super();
        this.musicSystems = [];
        this.labels = [];
        this.parent = parent;
        this.boundingBox = new BoundingBox_1.BoundingBox(this, undefined);
    }
    get MusicSystems() {
        return this.musicSystems;
    }
    set MusicSystems(value) {
        this.musicSystems = value;
    }
    get Labels() {
        return this.labels;
    }
    set Labels(value) {
        this.labels = value;
    }
    get Parent() {
        return this.parent;
    }
    set Parent(value) {
        this.parent = value;
    }
    get PageNumber() {
        return this.pageNumber;
    }
    set PageNumber(value) {
        this.pageNumber = value;
    }
    /**
     * This method calculates the absolute Position of each GraphicalMusicPage according to a given placement
     * @param pageIndex
     * @param rules
     * @returns {PointF2D}
     */
    setMusicPageAbsolutePosition(pageIndex, rules) {
        return new PointF2D_1.PointF2D(0.0, 0.0);
        // use this code if pages are rendered on only one canvas:
        // if (rules.PagePlacement === PagePlacementEnum.Down) {
        //     return new PointF2D(0.0, pageIndex * rules.PageHeight);
        // } else if (rules.PagePlacement === PagePlacementEnum.Right) {
        //     return new PointF2D(pageIndex * this.parent.ParentMusicSheet.pageWidth, 0.0);
        // } else {
        //     // placement RightDown
        //     if (pageIndex % 2 === 0) {
        //         if (pageIndex === 0) {
        //             return new PointF2D(0.0, pageIndex * rules.PageHeight);
        //         } else {
        //             return new PointF2D(0.0, (pageIndex - 1) * rules.PageHeight);
        //         }
        //     } else {
        //         if (pageIndex === 1) {
        //             return new PointF2D(this.parent.ParentMusicSheet.pageWidth, (pageIndex - 1) * rules.PageHeight);
        //         } else {
        //             return new PointF2D(this.parent.ParentMusicSheet.pageWidth, (pageIndex - 2) * rules.PageHeight);
        //         }
        //     }
        // }
    }
}
exports.GraphicalMusicPage = GraphicalMusicPage;
var PagePlacementEnum;
(function (PagePlacementEnum) {
    PagePlacementEnum[PagePlacementEnum["Down"] = 0] = "Down";
    PagePlacementEnum[PagePlacementEnum["Right"] = 1] = "Right";
    PagePlacementEnum[PagePlacementEnum["RightDown"] = 2] = "RightDown";
})(PagePlacementEnum = exports.PagePlacementEnum || (exports.PagePlacementEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalMusicSheet.ts":
/*!***********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalMusicSheet.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SystemImageProperties = exports.GraphicalMusicSheet = void 0;
const VerticalGraphicalStaffEntryContainer_1 = __webpack_require__(/*! ./VerticalGraphicalStaffEntryContainer */ "./src/MusicalScore/Graphical/VerticalGraphicalStaffEntryContainer.ts");
const GraphicalLine_1 = __webpack_require__(/*! ./GraphicalLine */ "./src/MusicalScore/Graphical/GraphicalLine.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const ClefInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const KeyInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
//import { Dictionary } from "typescript-collections"; // unused for now
const CollectionUtil_1 = __webpack_require__(/*! ../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
const GraphicalVoiceEntry_1 = __webpack_require__(/*! ./GraphicalVoiceEntry */ "./src/MusicalScore/Graphical/GraphicalVoiceEntry.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
// import { VexFlowMusicSheetDrawer } from "./VexFlow/VexFlowMusicSheetDrawer";
// import { SvgVexFlowBackend } from "./VexFlow/SvgVexFlowBackend"; // causes build problem with npm start
/**
 * The graphical counterpart of a [[MusicSheet]]
 */
class GraphicalMusicSheet {
    constructor(musicSheet, calculator) {
        this.musicPages = [];
        /** measures (i,j) where i is the measure number and j the staff index (e.g. staff indices 0, 1 for two piano parts) */
        this.measureList = [];
        this.verticalGraphicalStaffEntryContainers = [];
        this.cursors = [];
        this.leadSheet = false;
        this.musicSheet = musicSheet;
        this.numberOfStaves = this.musicSheet.Staves.length;
        this.calculator = calculator;
        this.calculator.initialize(this);
    }
    get ParentMusicSheet() {
        return this.musicSheet;
    }
    get GetCalculator() {
        return this.calculator;
    }
    get MusicPages() {
        return this.musicPages;
    }
    set MusicPages(value) {
        this.musicPages = value;
    }
    //public get FontInfo(): FontInfo {
    //    return this.fontInfo;
    //}
    get MeasureList() {
        return this.measureList;
    }
    set MeasureList(value) {
        this.measureList = value;
    }
    get VerticalGraphicalStaffEntryContainers() {
        return this.verticalGraphicalStaffEntryContainers;
    }
    set VerticalGraphicalStaffEntryContainers(value) {
        this.verticalGraphicalStaffEntryContainers = value;
    }
    get Title() {
        return this.title;
    }
    set Title(value) {
        this.title = value;
    }
    get Subtitle() {
        return this.subtitle;
    }
    set Subtitle(value) {
        this.subtitle = value;
    }
    get Composer() {
        return this.composer;
    }
    set Composer(value) {
        this.composer = value;
    }
    get Lyricist() {
        return this.lyricist;
    }
    set Lyricist(value) {
        this.lyricist = value;
    }
    get Copyright() {
        return this.copyright;
    }
    set Copyright(value) {
        this.copyright = value;
    }
    get Cursors() {
        return this.cursors;
    }
    get SelectionStartSymbol() {
        return this.selectionStartSymbol;
    }
    get SelectionEndSymbol() {
        return this.selectionEndSymbol;
    }
    get MinAllowedSystemWidth() {
        return this.minAllowedSystemWidth;
    }
    set MinAllowedSystemWidth(value) {
        this.minAllowedSystemWidth = value;
    }
    // public get SystemImages(): Dictionary<MusicSystem, SystemImageProperties> {
    //     return this.systemImages;
    // }
    get NumberOfStaves() {
        return this.numberOfStaves;
    }
    get LeadSheet() {
        return this.leadSheet;
    }
    set LeadSheet(value) {
        this.leadSheet = value;
    }
    /**
     * Calculate the Absolute Positions from the Relative Positions.
     * @param graphicalMusicSheet
     */
    static transformRelativeToAbsolutePosition(graphicalMusicSheet) {
        for (let i = 0; i < graphicalMusicSheet.MusicPages.length; i++) {
            const pageAbsolute = graphicalMusicSheet.MusicPages[i].setMusicPageAbsolutePosition(i, graphicalMusicSheet.ParentMusicSheet.Rules);
            const page = graphicalMusicSheet.MusicPages[i];
            page.PositionAndShape.calculateAbsolutePositionsRecursive(pageAbsolute.x, pageAbsolute.y);
        }
    }
    Initialize() {
        this.verticalGraphicalStaffEntryContainers = [];
        this.musicPages = [];
        this.measureList = [];
    }
    reCalculate() {
        this.calculator.calculate();
    }
    // unused method
    // public prepare(): void {
    //     this.calculator.prepareGraphicalMusicSheet();
    // }
    EnforceRedrawOfMusicSystems() {
        for (let idx = 0, len = this.musicPages.length; idx < len; ++idx) {
            const graphicalMusicPage = this.musicPages[idx];
            for (let idx2 = 0, len2 = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {
                const musicSystem = graphicalMusicPage.MusicSystems[idx2];
                musicSystem.needsToBeRedrawn = true;
            }
        }
    }
    getClickedObject(positionOnMusicSheet) {
        for (let idx = 0, len = this.MusicPages.length; idx < len; ++idx) {
            const graphicalMusicPage = this.MusicPages[idx];
            return graphicalMusicPage.PositionAndShape.getClickedObjectOfType(positionOnMusicSheet);
        }
        return undefined;
    }
    findGraphicalMeasure(measureIndex, staffIndex) {
        var _a;
        // note the cursor calls this with measureIndex 1 (measure 2) when advancing beyond the end of a 1-measure piece
        for (let i = measureIndex; i >= 0; i--) {
            const gMeasure = (_a = this.measureList[i]) === null || _a === void 0 ? void 0 : _a[staffIndex];
            if (gMeasure) {
                return gMeasure;
            }
            // else look backwards (previous measures). this is only really valid for MultipleRestMeasures of course.
        }
        return undefined; // shouldn't happen
    }
    /**
     * Search the MeasureList for a certain GraphicalStaffEntry with the given SourceStaffEntry,
     * at a certain verticalIndex (eg a corresponding Staff), starting at a specific horizontalIndex (eg specific GraphicalMeasure).
     * @param staffIndex
     * @param measureIndex
     * @param sourceStaffEntry
     * @returns {any}
     */
    findGraphicalStaffEntryFromMeasureList(staffIndex, measureIndex, sourceStaffEntry) {
        for (let i = measureIndex; i < this.measureList.length; i++) {
            const graphicalMeasure = this.measureList[i][staffIndex];
            if (!graphicalMeasure) {
                continue;
            }
            for (let idx = 0, len = graphicalMeasure.staffEntries.length; idx < len; ++idx) {
                const graphicalStaffEntry = graphicalMeasure.staffEntries[idx];
                if (graphicalStaffEntry.sourceStaffEntry === sourceStaffEntry) {
                    return graphicalStaffEntry;
                }
            }
        }
        return undefined;
    }
    /**
     * Return the next (to the right) not null GraphicalStaffEntry from a given Index.
     * @param staffIndex
     * @param measureIndex
     * @param graphicalStaffEntry
     * @returns {any}
     */
    findNextGraphicalStaffEntry(staffIndex, measureIndex, graphicalStaffEntry) {
        const graphicalMeasure = graphicalStaffEntry.parentMeasure;
        const graphicalStaffEntryIndex = graphicalMeasure.staffEntries.indexOf(graphicalStaffEntry);
        if (graphicalStaffEntryIndex < graphicalMeasure.staffEntries.length - 1) {
            return graphicalMeasure.staffEntries[graphicalStaffEntryIndex + 1];
        }
        else if (measureIndex < this.measureList.length - 1) {
            const nextMeasure = this.measureList[measureIndex + 1][staffIndex];
            if (nextMeasure.staffEntries.length > 0) {
                return nextMeasure.staffEntries[0];
            }
        }
        return undefined;
    }
    getFirstVisibleMeasuresListFromIndices(start, end) {
        const graphicalMeasures = [];
        const numberOfStaves = this.measureList[0].length;
        for (let i = start; i <= end; i++) {
            for (let j = 0; j < numberOfStaves; j++) {
                if (this.measureList[i][j].isVisible()) {
                    graphicalMeasures.push(this.measureList[i][j]);
                    break;
                }
            }
        }
        return graphicalMeasures;
    }
    orderMeasuresByStaffLine(measures) {
        const orderedMeasures = [];
        let mList = [];
        orderedMeasures.push(mList);
        for (let i = 0; i < measures.length; i++) {
            if (i === 0) {
                mList.push(measures[0]);
            }
            else {
                if (measures[i].ParentStaffLine === measures[i - 1].ParentStaffLine) {
                    mList.push(measures[i]);
                }
                else {
                    if (orderedMeasures.indexOf(mList) === -1) {
                        orderedMeasures.push(mList);
                    }
                    mList = [];
                    orderedMeasures.push(mList);
                    mList.push(measures[i]);
                }
            }
        }
        return orderedMeasures;
    }
    /**
     * Return the active Clefs at the start of the first SourceMeasure.
     * @returns {ClefInstruction[]}
     */
    initializeActiveClefs() {
        const activeClefs = [];
        const firstSourceMeasure = this.musicSheet.getFirstSourceMeasure();
        if (firstSourceMeasure) {
            for (let i = 0; i < firstSourceMeasure.CompleteNumberOfStaves; i++) {
                let clef = new ClefInstruction_1.ClefInstruction();
                if (firstSourceMeasure.FirstInstructionsStaffEntries[i]) {
                    for (let idx = 0, len = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions.length; idx < len; ++idx) {
                        const abstractNotationInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions[idx];
                        if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                            clef = abstractNotationInstruction;
                        }
                    }
                }
                activeClefs.push(clef);
            }
        }
        return activeClefs;
    }
    GetMainKey() {
        const firstSourceMeasure = this.musicSheet.getFirstSourceMeasure();
        if (firstSourceMeasure) {
            for (let i = 0; i < firstSourceMeasure.CompleteNumberOfStaves; i++) {
                for (let idx = 0, len = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions.length; idx < len; ++idx) {
                    const abstractNotationInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions[idx];
                    if (abstractNotationInstruction instanceof KeyInstruction_1.KeyInstruction) {
                        return abstractNotationInstruction;
                    }
                }
            }
        }
        return undefined;
    }
    /**
     * Create the VerticalContainer and adds it to the List at the correct Timestamp position.
     * @param timestamp
     * @returns {any}
     */
    getOrCreateVerticalContainer(timestamp) {
        if (this.verticalGraphicalStaffEntryContainers.length === 0 ||
            (CollectionUtil_1.CollectionUtil.getLastElement(this.verticalGraphicalStaffEntryContainers).AbsoluteTimestamp).lt(timestamp)) {
            const verticalGraphicalStaffEntryContainer = new VerticalGraphicalStaffEntryContainer_1.VerticalGraphicalStaffEntryContainer(this.numberOfStaves, timestamp);
            this.verticalGraphicalStaffEntryContainers.push(verticalGraphicalStaffEntryContainer);
            return verticalGraphicalStaffEntryContainer;
        }
        for (let i = this.verticalGraphicalStaffEntryContainers.length - 1; i >= 0; i--) {
            if (this.verticalGraphicalStaffEntryContainers[i].AbsoluteTimestamp.lt(timestamp)) {
                const verticalGraphicalStaffEntryContainer = new VerticalGraphicalStaffEntryContainer_1.VerticalGraphicalStaffEntryContainer(this.numberOfStaves, timestamp);
                this.verticalGraphicalStaffEntryContainers.splice(i + 1, 0, verticalGraphicalStaffEntryContainer);
                return verticalGraphicalStaffEntryContainer;
            }
            if (this.verticalGraphicalStaffEntryContainers[i].AbsoluteTimestamp.Equals(timestamp)) {
                return this.verticalGraphicalStaffEntryContainers[i];
            }
        }
        return undefined;
    }
    /**
     * Does a binary search on the container list and returns the VerticalContainer with the given Timestamp.
     * The search begins at startIndex, if given.
     * If the timestamp cannot be found, null is returned.
     * @param timestamp - The timestamp for which the container shall be found.
     * @param startIndex - The index from which the search starts in the container list.
     * @returns {any}
     * @constructor
     */
    GetVerticalContainerFromTimestamp(timestamp, startIndex = 0) {
        const index = CollectionUtil_1.CollectionUtil.binarySearch(this.verticalGraphicalStaffEntryContainers, new VerticalGraphicalStaffEntryContainer_1.VerticalGraphicalStaffEntryContainer(0, timestamp), VerticalGraphicalStaffEntryContainer_1.VerticalGraphicalStaffEntryContainer.compareByTimestamp, startIndex);
        if (index >= 0) {
            return this.verticalGraphicalStaffEntryContainers[index];
        }
        return undefined;
    }
    /**
     * Perform a binary search for the absolute given Timestamp in all the GraphicalVerticalContainers.
     * @param musicTimestamp
     * @returns {number}
     * @constructor
     */
    GetInterpolatedIndexInVerticalContainers(musicTimestamp) {
        const containers = this.verticalGraphicalStaffEntryContainers;
        let leftIndex = 0;
        let rightIndex = containers.length - 1;
        let leftTS = undefined;
        let rightTS = undefined;
        if (musicTimestamp.lte(containers[containers.length - 1].AbsoluteTimestamp)) {
            while (rightIndex - leftIndex > 1) {
                const middleIndex = Math.floor((rightIndex + leftIndex) / 2);
                if (containers[leftIndex].AbsoluteTimestamp.Equals(musicTimestamp)) {
                    rightIndex = leftIndex;
                    break;
                }
                else if (containers[rightIndex].AbsoluteTimestamp.Equals(musicTimestamp)) {
                    leftIndex = rightIndex;
                    break;
                }
                else if (containers[middleIndex].AbsoluteTimestamp.Equals(musicTimestamp)) {
                    return this.verticalGraphicalStaffEntryContainers.indexOf(containers[middleIndex]);
                }
                else if (musicTimestamp.lt(containers[middleIndex].AbsoluteTimestamp)) {
                    rightIndex = middleIndex;
                }
                else {
                    leftIndex = middleIndex;
                }
            }
            // no interpolation needed
            if (leftIndex === rightIndex) {
                return this.verticalGraphicalStaffEntryContainers.indexOf(containers[leftIndex]);
            }
            leftTS = containers[leftIndex].AbsoluteTimestamp;
            rightTS = containers[rightIndex].AbsoluteTimestamp;
        }
        else {
            leftTS = containers[containers.length - 1].AbsoluteTimestamp;
            rightTS = Fraction_1.Fraction.plus(this.getLongestStaffEntryDuration(containers.length - 1), leftTS);
            rightIndex = containers.length;
        }
        const diff = rightTS.RealValue - leftTS.RealValue;
        const diffTS = rightTS.RealValue - musicTimestamp.RealValue;
        // estimate the interpolated index
        const foundIndex = rightIndex - (diffTS / diff);
        return Math.min(foundIndex, this.verticalGraphicalStaffEntryContainers.length);
    }
    /**
     * Get a List with the indices of all the visible GraphicalMeasures and calculates their
     * corresponding indices in the first SourceMeasure, taking into account Instruments with multiple Staves.
     * @param visibleMeasures
     * @returns {number[]}
     */
    getVisibleStavesIndicesFromSourceMeasure(visibleMeasures) {
        const visibleInstruments = [];
        const visibleStavesIndices = [];
        for (let idx = 0, len = visibleMeasures.length; idx < len; ++idx) {
            const graphicalMeasure = visibleMeasures[idx];
            const instrument = graphicalMeasure.ParentStaff.ParentInstrument;
            if (visibleInstruments.indexOf(instrument) === -1) {
                visibleInstruments.push(instrument);
            }
        }
        for (let idx = 0, len = visibleInstruments.length; idx < len; ++idx) {
            const instrument = visibleInstruments[idx];
            const index = this.musicSheet.getGlobalStaffIndexOfFirstStaff(instrument);
            for (let j = 0; j < instrument.Staves.length; j++) {
                visibleStavesIndices.push(index + j);
            }
        }
        return visibleStavesIndices;
    }
    /**
     * Returns the GraphicalMeasure with the given SourceMeasure as Parent at the given staff index.
     * @param sourceMeasure
     * @param staffIndex
     * @returns {any}
     */
    getGraphicalMeasureFromSourceMeasureAndIndex(sourceMeasure, staffIndex) {
        var _a;
        for (let i = 0; i < this.measureList.length; i++) {
            if (((_a = this.measureList[i][0]) === null || _a === void 0 ? void 0 : _a.parentSourceMeasure) === sourceMeasure) {
                return this.measureList[i][staffIndex];
            }
        }
        return undefined;
    }
    getLastGraphicalMeasureFromIndex(staffIndex, lastRendered = true) {
        let measureIndex = this.measureList.length - 1;
        if (lastRendered) {
            measureIndex = Math.min(measureIndex, this.musicSheet.Rules.MaxMeasureToDrawIndex);
        }
        return this.measureList[measureIndex][staffIndex];
    }
    getMeasureIndex(graphicalMeasure, measureIndex, inListIndex) {
        measureIndex = 0;
        inListIndex = 0;
        for (; measureIndex < this.measureList.length; measureIndex++) {
            for (let idx = 0, len = this.measureList[measureIndex].length; idx < len; ++idx) {
                const measure = this.measureList[measureIndex][idx];
                if (measure === graphicalMeasure) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Generic method to find graphical objects on the sheet at a given location.
     * @param clickPosition Position in units where we are searching on the sheet
     * @param className String representation of the class we want to find. Must extend GraphicalObject
     * @param startSearchArea The area in units around our point to look for our graphical object, default 5
     * @param maxSearchArea The max area we want to search around our point
     * @param searchAreaIncrement The amount we expand our search area for each iteration that we don't find an object of the given type
     * @param shouldBeIncludedTest A callback that determines if the object should be included in our results- return false for no, true for yes
     */
    GetNearestGraphicalObject(clickPosition, className = GraphicalObject_1.GraphicalObject.name, startSearchArea = 5, maxSearchArea = 20, searchAreaIncrement = 5, shouldBeIncludedTest = undefined) {
        const foundEntries = [];
        //Loop until we find some, or our search area is out of bounds
        while (foundEntries.length === 0 && startSearchArea <= maxSearchArea) {
            //Prepare search area
            const region = new BoundingBox_1.BoundingBox(undefined);
            region.BorderLeft = clickPosition.x - startSearchArea;
            region.BorderTop = clickPosition.y - startSearchArea;
            region.BorderRight = clickPosition.x + startSearchArea;
            region.BorderBottom = clickPosition.y + startSearchArea;
            region.AbsolutePosition = new PointF2D_1.PointF2D(clickPosition.x, clickPosition.y);
            region.calculateAbsolutePosition();
            //Loop through music pages
            for (let idx = 0, len = this.MusicPages.length; idx < len; ++idx) {
                const graphicalMusicPage = this.MusicPages[idx];
                const entries = graphicalMusicPage.PositionAndShape.getObjectsInRegion(region, false, className);
                //If we have no entries on this page, skip to next (if exists)
                if (!entries || entries.length === 0) {
                    continue;
                }
                else {
                    //Otherwise test all our entries if applicable, store on our found list
                    for (let idx2 = 0, len2 = entries.length; idx2 < len2; ++idx2) {
                        if (!shouldBeIncludedTest) {
                            foundEntries.push(entries[idx2]);
                        }
                        else if (shouldBeIncludedTest(entries[idx2])) {
                            foundEntries.push(entries[idx2]);
                        }
                    }
                }
            }
            //Expand search area, we haven't found anything yet
            startSearchArea += searchAreaIncrement;
        }
        // Get closest entry
        let closest = undefined;
        for (let idx = 0, len = foundEntries.length; idx < len; ++idx) {
            const object = foundEntries[idx];
            if (closest === undefined) {
                closest = object;
            }
            else {
                const deltaNew = this.CalculateDistance(object.PositionAndShape.AbsolutePosition, clickPosition);
                const deltaOld = this.CalculateDistance(closest.PositionAndShape.AbsolutePosition, clickPosition);
                if (deltaNew < deltaOld) {
                    closest = object;
                }
            }
        }
        if (closest) {
            return closest;
        }
        return undefined;
    }
    GetNearestVoiceEntry(clickPosition) {
        return this.GetNearestGraphicalObject(clickPosition, GraphicalVoiceEntry_1.GraphicalVoiceEntry.name, 5, 20, 5, (object) => { var _a; return ((_a = object.parentStaffEntry) === null || _a === void 0 ? void 0 : _a.relInMeasureTimestamp) !== undefined; });
    }
    GetNearestNote(clickPosition, maxClickDist) {
        const nearestVoiceEntry = this.GetNearestVoiceEntry(clickPosition);
        if (!nearestVoiceEntry) {
            return undefined;
        }
        let closestNote;
        let closestDist = Number.MAX_SAFE_INTEGER;
        // debug: show position in sheet. line starts from the click position, until clickposition.x + 2
        // (this.drawer as any).DrawOverlayLine( // as VexFlowMusicSheetDrawer
        //     clickPosition,
        //     new PointF2D(clickPosition.x + 2, clickPosition.y),
        //     this.MusicPages[0]);
        for (const note of nearestVoiceEntry.notes) {
            const posY = note.PositionAndShape.AbsolutePosition.y;
            const distX = Math.abs(note.PositionAndShape.AbsolutePosition.x - clickPosition.x);
            const distY = Math.abs(posY - clickPosition.y);
            // console.log("note: " + note.sourceNote.Pitch.ToString());
            if (distX + distY < closestDist) {
                closestNote = note;
                closestDist = distX + distY;
            }
        }
        return closestNote;
    }
    domToSvg(point) {
        return this.domToSvgTransform(point, true);
    }
    svgToDom(point) {
        return this.domToSvgTransform(point, false);
    }
    svgToOsmd(point) {
        const pt = new PointF2D_1.PointF2D(point.x, point.y);
        pt.x /= 10; // unitInPixels would need to be imported from VexFlowMusicSheetDrawer
        pt.y /= 10;
        return pt;
    }
    // TODO move to VexFlowMusicSheetDrawer? better fit for imports
    domToSvgTransform(point, inverse) {
        const svgBackend = this.drawer.Backends[0]; // as SvgVexFlowBackend;
        // TODO importing SvgVexFlowBackend here causes build problems. Importing VexFlowMusicSheetDrawer seems to be fine, but unnecessary.
        // if (!(svgBackend instanceof SvgVexFlowBackend)) {
        //     return undefined;
        // }
        const svg = svgBackend.getSvgElement();
        const pt = svg.createSVGPoint();
        pt.x = point.x;
        pt.y = point.y;
        let transformMatrix = svg.getScreenCTM();
        if (inverse) {
            transformMatrix = transformMatrix.inverse();
        }
        const sp = pt.matrixTransform(transformMatrix);
        return new PointF2D_1.PointF2D(sp.x, sp.y);
    }
    GetClickableLabel(clickPosition) {
        const initialSearchAreaX = 4;
        const initialSearchAreaY = 4;
        // Prepare search area
        const region = new BoundingBox_1.BoundingBox();
        region.BorderLeft = clickPosition.x - initialSearchAreaX;
        region.BorderTop = clickPosition.y - initialSearchAreaY;
        region.BorderRight = clickPosition.x + initialSearchAreaX;
        region.BorderBottom = clickPosition.y + initialSearchAreaY;
        region.AbsolutePosition = new PointF2D_1.PointF2D(0, 0);
        for (let idx = 0, len = this.MusicPages.length; idx < len; ++idx) {
            const graphicalMusicPage = this.MusicPages[idx];
            const entries = graphicalMusicPage.PositionAndShape.getObjectsInRegion(region);
            if (entries.length !== 1) {
                continue;
            }
            else {
                for (let idx2 = 0, len2 = entries.length; idx2 < len2; ++idx2) {
                    const clickedLabel = entries[idx2];
                    return clickedLabel;
                }
            }
        }
        return undefined;
    }
    GetNearestStaffEntry(clickPosition) {
        const initialSearchArea = 10;
        const foundEntries = [];
        // Prepare search area
        const region = new BoundingBox_1.BoundingBox(undefined);
        region.BorderLeft = clickPosition.x - initialSearchArea;
        region.BorderTop = clickPosition.y - initialSearchArea;
        region.BorderRight = clickPosition.x + initialSearchArea;
        region.BorderBottom = clickPosition.y + initialSearchArea;
        region.AbsolutePosition = new PointF2D_1.PointF2D(0, 0);
        // Search for StaffEntries in region
        for (let idx = 0, len = this.MusicPages.length; idx < len; ++idx) {
            const graphicalMusicPage = this.MusicPages[idx];
            const entries = graphicalMusicPage.PositionAndShape.getObjectsInRegion(region, false);
            if (!entries || entries.length === 0) {
                continue;
            }
            else {
                for (let idx2 = 0, len2 = entries.length; idx2 < len2; ++idx2) {
                    const gse = entries[idx2];
                    foundEntries.push(gse);
                }
            }
        }
        // Get closest entry
        let closest = undefined;
        for (let idx = 0, len = foundEntries.length; idx < len; ++idx) {
            const gse = foundEntries[idx];
            if (closest === undefined) {
                closest = gse;
            }
            else {
                if (!gse.relInMeasureTimestamp) {
                    continue;
                }
                const deltaNew = this.CalculateDistance(gse.PositionAndShape.AbsolutePosition, clickPosition);
                const deltaOld = this.CalculateDistance(closest.PositionAndShape.AbsolutePosition, clickPosition);
                if (deltaNew < deltaOld) {
                    closest = gse;
                }
            }
        }
        if (closest) {
            return closest;
        }
        // TODO No staff entry was found. Feedback?
        // throw new ArgumentException("No staff entry found");
        return undefined;
    }
    GetPossibleCommentAnchor(clickPosition) {
        const entry = this.GetNearestStaffEntry(clickPosition);
        if (!entry) {
            return undefined;
        }
        return entry.sourceStaffEntry;
    }
    getClickedObjectOfType(positionOnMusicSheet) {
        for (let idx = 0, len = this.musicPages.length; idx < len; ++idx) {
            const page = this.musicPages[idx];
            const o = page.PositionAndShape.getClickedObjectOfType(positionOnMusicSheet);
            if (o) {
                return o;
            }
        }
        return undefined;
    }
    tryGetTimestampFromPosition(positionOnMusicSheet) {
        const entry = this.getClickedObjectOfType(positionOnMusicSheet);
        if (!entry) {
            return undefined;
        }
        return entry.getAbsoluteTimestamp();
    }
    tryGetClickableLabel(positionOnMusicSheet) {
        try {
            return this.GetClickableLabel(positionOnMusicSheet);
        }
        catch (ex) {
            loglevel_1.default.info("GraphicalMusicSheet.tryGetClickableObject", "positionOnMusicSheet: " + positionOnMusicSheet, ex);
        }
        return undefined;
    }
    tryGetTimeStampFromPosition(positionOnMusicSheet) {
        try {
            const entry = this.GetNearestStaffEntry(positionOnMusicSheet);
            if (!entry) {
                return undefined;
            }
            return entry.getAbsoluteTimestamp();
        }
        catch (ex) {
            loglevel_1.default.info("GraphicalMusicSheet.tryGetTimeStampFromPosition", "positionOnMusicSheet: " + positionOnMusicSheet, ex);
        }
        return undefined;
    }
    /**
     * Get visible staffentry for the container given by the index.
     * @param index
     * @returns {GraphicalStaffEntry}
     */
    getStaffEntry(index) {
        const container = this.VerticalGraphicalStaffEntryContainers[index];
        let staffEntry = undefined;
        try {
            for (let idx = 0, len = container.StaffEntries.length; idx < len; ++idx) {
                const entry = container.StaffEntries[idx];
                if (!entry || !entry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {
                    continue;
                }
                if (!staffEntry) {
                    staffEntry = entry;
                }
                else if (entry.PositionAndShape && staffEntry.PositionAndShape) {
                    if (staffEntry.PositionAndShape.RelativePosition.x > entry.PositionAndShape.RelativePosition.x) {
                        staffEntry = entry;
                    }
                }
            }
        }
        catch (ex) {
            loglevel_1.default.info("GraphicalMusicSheet.getStaffEntry", ex);
        }
        return staffEntry;
    }
    /**
     * Returns the index of the closest previous (earlier) vertical container which has at least some visible staff entry, with respect to the given index.
     * @param index
     * @returns {number}
     * @constructor
     */
    GetPreviousVisibleContainerIndex(index) {
        for (let i = index - 1; i >= 0; i--) {
            const entries = this.verticalGraphicalStaffEntryContainers[i].StaffEntries;
            for (let idx = 0, len = entries.length; idx < len; ++idx) {
                const entry = entries[idx];
                if (entry && entry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {
                    return i;
                }
            }
        }
        return -1;
    }
    /**
     * Returns the index of the closest next (later) vertical container which has at least some visible staff entry, with respect to the given index.
     * @param index
     * @returns {number}
     * @constructor
     */
    GetNextVisibleContainerIndex(index) {
        for (let i = index + 1; i < this.verticalGraphicalStaffEntryContainers.length; ++i) {
            const entries = this.verticalGraphicalStaffEntryContainers[i].StaffEntries;
            for (let idx = 0, len = entries.length; idx < len; ++idx) {
                const entry = entries[idx];
                if (entry && entry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {
                    return i;
                }
            }
        }
        return -1;
    }
    findClosestLeftStaffEntry(fractionalIndex, searchOnlyVisibleEntries) {
        let foundEntry = undefined;
        let leftIndex = Math.floor(fractionalIndex);
        leftIndex = Math.min(this.VerticalGraphicalStaffEntryContainers.length - 1, leftIndex);
        for (let i = leftIndex; i >= 0; i--) {
            foundEntry = this.getStaffEntry(i);
            if (foundEntry) {
                if (searchOnlyVisibleEntries) {
                    if (foundEntry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {
                        return foundEntry;
                    }
                }
                else {
                    return foundEntry;
                }
            }
        }
        return undefined;
    }
    findClosestRightStaffEntry(fractionalIndex, returnOnlyVisibleEntries) {
        let foundEntry = undefined;
        const rightIndex = Math.max(0, Math.ceil(fractionalIndex));
        for (let i = rightIndex; i < this.VerticalGraphicalStaffEntryContainers.length; i++) {
            foundEntry = this.getStaffEntry(i);
            if (foundEntry) {
                if (returnOnlyVisibleEntries) {
                    if (foundEntry.sourceStaffEntry.ParentStaff.ParentInstrument.Visible) {
                        return foundEntry;
                    }
                }
                else {
                    return foundEntry;
                }
            }
        }
        return undefined;
    }
    calculateCursorLineAtTimestamp(musicTimestamp, styleEnum) {
        const result = this.calculateXPositionFromTimestamp(musicTimestamp);
        const xPos = result[0];
        const correspondingMusicSystem = result[1];
        if (!correspondingMusicSystem || correspondingMusicSystem.StaffLines.length === 0) {
            return undefined;
        }
        const yCoordinate = correspondingMusicSystem.PositionAndShape.AbsolutePosition.y;
        const height = CollectionUtil_1.CollectionUtil.last(correspondingMusicSystem.StaffLines).PositionAndShape.RelativePosition.y + 4;
        return new GraphicalLine_1.GraphicalLine(new PointF2D_1.PointF2D(xPos, yCoordinate), new PointF2D_1.PointF2D(xPos, yCoordinate + height), 3, styleEnum);
    }
    calculateXPositionFromTimestamp(timeStamp) {
        var _a, _b, _c, _d;
        let currentMusicSystem = undefined;
        const fractionalIndex = this.GetInterpolatedIndexInVerticalContainers(timeStamp);
        const previousStaffEntry = this.findClosestLeftStaffEntry(fractionalIndex, true);
        const nextStaffEntry = this.findClosestRightStaffEntry(fractionalIndex, true);
        const currentTimeStamp = timeStamp.RealValue;
        if (!previousStaffEntry && !nextStaffEntry) {
            return [0, undefined];
        }
        let previousStaffEntryMusicSystem = undefined;
        if (previousStaffEntry) {
            // TODO sometimes one of these ParentStaffLine is undefined, either fix this or handle it here
            previousStaffEntryMusicSystem = (_a = previousStaffEntry.parentMeasure.ParentStaffLine) === null || _a === void 0 ? void 0 : _a.ParentMusicSystem;
        }
        else {
            previousStaffEntryMusicSystem = (_b = nextStaffEntry.parentMeasure.ParentStaffLine) === null || _b === void 0 ? void 0 : _b.ParentMusicSystem;
        }
        let nextStaffEntryMusicSystem = undefined;
        if (nextStaffEntry) {
            nextStaffEntryMusicSystem = (_c = nextStaffEntry.parentMeasure.ParentStaffLine) === null || _c === void 0 ? void 0 : _c.ParentMusicSystem;
        }
        else {
            nextStaffEntryMusicSystem = (_d = previousStaffEntry.parentMeasure.ParentStaffLine) === null || _d === void 0 ? void 0 : _d.ParentMusicSystem;
        }
        if (previousStaffEntryMusicSystem === nextStaffEntryMusicSystem) {
            currentMusicSystem = previousStaffEntryMusicSystem;
            let fraction;
            let previousStaffEntryPositionX;
            let nextStaffEntryPositionX;
            if (!previousStaffEntry) {
                previousStaffEntryPositionX = nextStaffEntryPositionX = nextStaffEntry.PositionAndShape.AbsolutePosition.x;
                fraction = 0;
            }
            else if (!nextStaffEntry) {
                previousStaffEntryPositionX = previousStaffEntry.PositionAndShape.AbsolutePosition.x;
                nextStaffEntryPositionX = currentMusicSystem.GetRightBorderAbsoluteXPosition();
                const sm = previousStaffEntry.parentMeasure.parentSourceMeasure;
                fraction = (currentTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue) / (Fraction_1.Fraction.plus(sm.AbsoluteTimestamp, sm.Duration).RealValue - previousStaffEntry.getAbsoluteTimestamp().RealValue);
            }
            else {
                previousStaffEntryPositionX = previousStaffEntry.PositionAndShape.AbsolutePosition.x;
                nextStaffEntryPositionX = nextStaffEntry.PositionAndShape.AbsolutePosition.x;
                if (previousStaffEntry === nextStaffEntry) {
                    fraction = 0;
                }
                else {
                    fraction = (currentTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue) /
                        (nextStaffEntry.getAbsoluteTimestamp().RealValue - previousStaffEntry.getAbsoluteTimestamp().RealValue);
                }
            }
            fraction = Math.min(1, Math.max(0, fraction));
            const interpolatedXPosition = previousStaffEntryPositionX + fraction * (nextStaffEntryPositionX - previousStaffEntryPositionX);
            return [interpolatedXPosition, currentMusicSystem];
        }
        else {
            const nextSystemLeftBorderTimeStamp = nextStaffEntry.parentMeasure.parentSourceMeasure.AbsoluteTimestamp.RealValue;
            let fraction;
            let interpolatedXPosition;
            if (currentTimeStamp < nextSystemLeftBorderTimeStamp) {
                currentMusicSystem = previousStaffEntryMusicSystem;
                const previousStaffEntryPositionX = previousStaffEntry.PositionAndShape.AbsolutePosition.x;
                const previousSystemRightBorderX = currentMusicSystem.GetRightBorderAbsoluteXPosition();
                fraction = (currentTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue) /
                    (nextSystemLeftBorderTimeStamp - previousStaffEntry.getAbsoluteTimestamp().RealValue);
                fraction = Math.min(1, Math.max(0, fraction));
                interpolatedXPosition = previousStaffEntryPositionX + fraction * (previousSystemRightBorderX - previousStaffEntryPositionX);
            }
            else {
                currentMusicSystem = nextStaffEntryMusicSystem;
                const nextStaffEntryPositionX = nextStaffEntry.PositionAndShape.AbsolutePosition.x;
                const nextSystemLeftBorderX = currentMusicSystem.GetLeftBorderAbsoluteXPosition();
                fraction = (currentTimeStamp - nextSystemLeftBorderTimeStamp) /
                    (nextStaffEntry.getAbsoluteTimestamp().RealValue - nextSystemLeftBorderTimeStamp);
                fraction = Math.min(1, Math.max(0, fraction));
                interpolatedXPosition = nextSystemLeftBorderX + fraction * (nextStaffEntryPositionX - nextSystemLeftBorderX);
            }
            return [interpolatedXPosition, currentMusicSystem];
        }
    }
    GetNumberOfVisibleInstruments() {
        let visibleInstrumentCount = 0;
        for (let idx = 0, len = this.musicSheet.Instruments.length; idx < len; ++idx) {
            const instrument = this.musicSheet.Instruments[idx];
            if (instrument.Visible === true) {
                visibleInstrumentCount++;
            }
        }
        return visibleInstrumentCount;
    }
    GetNumberOfFollowedInstruments() {
        let followedInstrumentCount = 0;
        for (let idx = 0, len = this.musicSheet.Instruments.length; idx < len; ++idx) {
            const instrument = this.musicSheet.Instruments[idx];
            if (instrument.Following === true) {
                followedInstrumentCount++;
            }
        }
        return followedInstrumentCount;
    }
    /*public GetGraphicalFromSourceMeasure(sourceMeasure: SourceMeasure): GraphicalMeasure[] {
        return this.sourceToGraphicalMeasureLinks.getValue(sourceMeasure); // TODO gets wrong measure because sourceMeasure is not a valid key
    }*/
    GetGraphicalFromSourceStaffEntry(sourceStaffEntry) {
        var _a;
        if (!((_a = sourceStaffEntry.VerticalContainerParent.ParentMeasure) === null || _a === void 0 ? void 0 : _a.VerticalMeasureList)) {
            return undefined;
        }
        const graphicalMeasure = sourceStaffEntry.VerticalContainerParent.ParentMeasure.VerticalMeasureList[sourceStaffEntry.ParentStaff.idInMusicSheet];
        return graphicalMeasure === null || graphicalMeasure === void 0 ? void 0 : graphicalMeasure.findGraphicalStaffEntryFromTimestamp(sourceStaffEntry.Timestamp);
    }
    CalculateDistance(pt1, pt2) {
        const deltaX = pt1.x - pt2.x;
        const deltaY = pt1.y - pt2.y;
        return (deltaX * deltaX) + (deltaY * deltaY);
    }
    /**
     * Return the longest StaffEntry duration from a GraphicalVerticalContainer.
     * @param index the index of the vertical container
     * @returns {Fraction}
     */
    getLongestStaffEntryDuration(index) {
        let maxLength = new Fraction_1.Fraction(0, 1);
        for (const graphicalStaffEntry of this.verticalGraphicalStaffEntryContainers[index].StaffEntries) {
            if (!graphicalStaffEntry) {
                continue;
            }
            const maxLengthInStaffEntry = graphicalStaffEntry.findStaffEntryMaxNoteLength();
            if (maxLength.lt(maxLengthInStaffEntry)) {
                maxLength = maxLengthInStaffEntry;
            }
        }
        return maxLength;
    }
}
exports.GraphicalMusicSheet = GraphicalMusicSheet;
class SystemImageProperties {
}
exports.SystemImageProperties = SystemImageProperties;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalNote.ts":
/*!*****************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalNote.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalNote = void 0;
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const MusicSheetCalculator_1 = __webpack_require__(/*! ./MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
/**
 * The graphical counterpart of a [[Note]]
 */
class GraphicalNote extends GraphicalObject_1.GraphicalObject {
    constructor(note, parent, rules, graphicalNoteLength = undefined) {
        super();
        this.DrawnAccidental = Pitch_1.AccidentalEnum.NONE;
        this.lineShift = 0;
        this.sourceNote = note;
        this.parentVoiceEntry = parent;
        this.PositionAndShape = new BoundingBox_1.BoundingBox(this, parent.PositionAndShape);
        if (graphicalNoteLength) {
            this.graphicalNoteLength = graphicalNoteLength;
        }
        else {
            this.graphicalNoteLength = note.Length;
        }
        this.numberOfDots = this.calculateNumberOfNeededDots(this.graphicalNoteLength);
        this.rules = rules;
        this.rules.addGraphicalNoteToNoteMap(note, this);
    }
    Transpose(keyInstruction, activeClef, halfTones, octaveEnum) {
        let transposedPitch = this.sourceNote.Pitch;
        if (MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator) {
            transposedPitch = MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator.transposePitch(this.sourceNote.Pitch, keyInstruction, halfTones);
        }
        return transposedPitch;
    }
    /**
     * Return the number of dots needed to represent the given fraction.
     * @param fraction
     * @returns {number}
     */
    calculateNumberOfNeededDots(fraction) {
        if (!this.sourceNote || !this.sourceNote.NoteTuplet) {
            return fraction.calculateNumberOfNeededDots();
        }
        return 0;
    }
    get ParentMusicPage() {
        return this.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentMusicSystem.Parent;
    }
    /** Get a GraphicalNote from a Note. Use osmd.rules as the second parameter (instance reference).
     *  Also more easily available via osmd.rules.GNote(note). */
    static FromNote(note, rules) {
        return rules.NoteToGraphicalNoteMap.getValue(note.NoteToGraphicalNoteObjectId);
    }
}
exports.GraphicalNote = GraphicalNote;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalObject.ts":
/*!*******************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalObject.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalObject = void 0;
const AClassHierarchyTrackable_1 = __webpack_require__(/*! ../Interfaces/AClassHierarchyTrackable */ "./src/MusicalScore/Interfaces/AClassHierarchyTrackable.ts");
class GraphicalObject extends AClassHierarchyTrackable_1.AClassHierarchyTrackable {
    get PositionAndShape() {
        return this.boundingBox;
    }
    set PositionAndShape(value) {
        this.boundingBox = value;
    }
}
exports.GraphicalObject = GraphicalObject;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalOctaveShift.ts":
/*!************************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalOctaveShift.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalOctaveShift = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const OctaveShift_1 = __webpack_require__(/*! ../VoiceData/Expressions/ContinuousExpressions/OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const MusicSymbol_1 = __webpack_require__(/*! ./MusicSymbol */ "./src/MusicalScore/Graphical/MusicSymbol.ts");
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
/**
 * The graphical counterpart of an [[OctaveShift]]
 */
class GraphicalOctaveShift extends GraphicalObject_1.GraphicalObject {
    constructor(octaveShift, parent) {
        super();
        this.getOctaveShift = octaveShift;
        this.setSymbol();
        // ToDo: set the size again due to the given symbol...
        //this.PositionAndShape = new BoundingBox(parent, this.octaveSymbol, this);
        this.PositionAndShape = new BoundingBox_1.BoundingBox(this, parent);
    }
    setSymbol() {
        switch (this.getOctaveShift.Type) {
            case OctaveShift_1.OctaveEnum.VA8:
                this.octaveSymbol = MusicSymbol_1.MusicSymbol.VA8;
                break;
            case OctaveShift_1.OctaveEnum.VB8:
                this.octaveSymbol = MusicSymbol_1.MusicSymbol.VB8;
                break;
            case OctaveShift_1.OctaveEnum.MA15:
                this.octaveSymbol = MusicSymbol_1.MusicSymbol.MA15;
                break;
            case OctaveShift_1.OctaveEnum.MB15:
                this.octaveSymbol = MusicSymbol_1.MusicSymbol.MB15;
                break;
            default:
                throw new Exceptions_1.ArgumentOutOfRangeException("");
        }
    }
}
exports.GraphicalOctaveShift = GraphicalOctaveShift;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalPedal.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalPedal.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalPedal = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const MusicSymbol_1 = __webpack_require__(/*! ./MusicSymbol */ "./src/MusicalScore/Graphical/MusicSymbol.ts");
/**
 * The graphical counterpart of an [[Pedal]]
 */
class GraphicalPedal extends GraphicalObject_1.GraphicalObject {
    constructor(pedal, parent) {
        super();
        this.getPedal = pedal;
        this.setSymbol();
        this.PositionAndShape = new BoundingBox_1.BoundingBox(this, parent);
    }
    setSymbol() {
        if (!this.getPedal.IsLine && this.getPedal.IsSign) {
            this.pedalSymbol = MusicSymbol_1.MusicSymbol.PEDAL_SYMBOL;
        }
        else if (this.getPedal.IsLine && this.getPedal.IsSign) {
            this.pedalSymbol = MusicSymbol_1.MusicSymbol.PEDAL_MIXED;
        }
        else { //Bracket is default
            this.pedalSymbol = MusicSymbol_1.MusicSymbol.PEDAL_BRACKET;
        }
    }
}
exports.GraphicalPedal = GraphicalPedal;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalSlur.ts":
/*!*****************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalSlur.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalSlur = void 0;
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const GraphicalCurve_1 = __webpack_require__(/*! ./GraphicalCurve */ "./src/MusicalScore/Graphical/GraphicalCurve.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const Matrix2D_1 = __webpack_require__(/*! ../../Common/DataObjects/Matrix2D */ "./src/Common/DataObjects/Matrix2D.ts");
const LinkedVoice_1 = __webpack_require__(/*! ../VoiceData/LinkedVoice */ "./src/MusicalScore/VoiceData/LinkedVoice.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const VoiceEntry_1 = __webpack_require__(/*! ../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
class GraphicalSlur extends GraphicalCurve_1.GraphicalCurve {
    // private intersection: PointF2D;
    constructor(slur, rules) {
        super();
        this.staffEntries = [];
        this.slur = slur;
        this.rules = rules;
    }
    /**
     * Compares the timespan of two Graphical Slurs
     * @param x
     * @param y
     */
    static Compare(x, y) {
        if (x.staffEntries.length < 1) { // x.staffEntries[i] can return undefined in Beethoven Moonlight Sonata sample
            return -1;
        }
        else if (y.staffEntries.length < 1) {
            return 1;
        }
        const xTimestampSpan = Fraction_1.Fraction.minus(x.staffEntries[x.staffEntries.length - 1].getAbsoluteTimestamp(), x.staffEntries[0].getAbsoluteTimestamp());
        const yTimestampSpan = Fraction_1.Fraction.minus(y.staffEntries[y.staffEntries.length - 1].getAbsoluteTimestamp(), y.staffEntries[0].getAbsoluteTimestamp());
        if (xTimestampSpan.RealValue > yTimestampSpan.RealValue) {
            return 1;
        }
        if (yTimestampSpan.RealValue > xTimestampSpan.RealValue) {
            return -1;
        }
        return 0;
    }
    /**
     *
     * @param rules
     */
    calculateCurve(rules) {
        // single GraphicalSlur means a single Curve, eg each GraphicalSlurObject is meant to be on the same StaffLine
        // a Slur can span more than one GraphicalSlurObjects
        const startStaffEntry = this.staffEntries[0];
        const endStaffEntry = this.staffEntries[this.staffEntries.length - 1];
        // where the Slur (not the graphicalObject) starts and ends (could belong to another StaffLine)
        let slurStartNote = startStaffEntry.findGraphicalNoteFromNote(this.slur.StartNote);
        if (!slurStartNote && this.graceStart) {
            slurStartNote = startStaffEntry.findGraphicalNoteFromGraceNote(this.slur.StartNote);
        }
        if (!slurStartNote) {
            slurStartNote = startStaffEntry.findEndTieGraphicalNoteFromNoteWithStartingSlur(this.slur.StartNote, this.slur);
        }
        let slurEndNote = endStaffEntry.findGraphicalNoteFromNote(this.slur.EndNote);
        if (!slurEndNote && this.graceEnd) {
            slurEndNote = endStaffEntry.findGraphicalNoteFromGraceNote(this.slur.EndNote);
        }
        const staffLine = startStaffEntry.parentMeasure.ParentStaffLine;
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        this.calculatePlacement(skyBottomLineCalculator, staffLine);
        // the Start- and End Reference Points for the Sky-BottomLine
        const startEndPoints = this.calculateStartAndEnd(slurStartNote, slurEndNote, staffLine, rules, skyBottomLineCalculator);
        const startX = startEndPoints.startX;
        const endX = startEndPoints.endX;
        let startY = startEndPoints.startY;
        let endY = startEndPoints.endY;
        const minAngle = rules.SlurTangentMinAngle;
        const maxAngle = rules.SlurTangentMaxAngle;
        let points;
        if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
            startY -= rules.SlurNoteHeadYOffset;
            endY -= rules.SlurNoteHeadYOffset;
            const startUpperRight = new PointF2D_1.PointF2D(this.staffEntries[0].parentMeasure.PositionAndShape.RelativePosition.x
                + this.staffEntries[0].PositionAndShape.RelativePosition.x, startY);
            if (slurStartNote) {
                startUpperRight.x += this.staffEntries[0].PositionAndShape.BorderRight;
            }
            else {
                // continuing Slur from previous StaffLine - must start after last Instruction of first Measure
                startUpperRight.x = this.staffEntries[0].parentMeasure.beginInstructionsWidth;
            }
            // must also add the GraceStaffEntry's ParentStaffEntry Position
            if (this.graceStart) {
                startUpperRight.x += endStaffEntry.PositionAndShape.RelativePosition.x;
            }
            const endUpperLeft = new PointF2D_1.PointF2D(this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x
                + this.staffEntries[this.staffEntries.length - 1].PositionAndShape.RelativePosition.x, endY);
            if (slurEndNote) {
                endUpperLeft.x += this.staffEntries[this.staffEntries.length - 1].PositionAndShape.BorderLeft;
            }
            else {
                // Slur continues to next StaffLine - must reach the end of current StaffLine
                endUpperLeft.x = this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x
                    + this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.Size.width;
            }
            // must also add the GraceStaffEntry's ParentStaffEntry Position
            if (this.graceEnd) {
                endUpperLeft.x += endStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;
            }
            // SkyLinePointsList between firstStaffEntry startUpperRightPoint and lastStaffentry endUpperLeftPoint
            points = this.calculateTopPoints(startUpperRight, endUpperLeft, staffLine, skyBottomLineCalculator);
            if (points.length === 0) {
                const pointF = new PointF2D_1.PointF2D((endUpperLeft.x - startUpperRight.x) / 2 + startUpperRight.x, (endUpperLeft.y - startUpperRight.y) / 2 + startUpperRight.y);
                points.push(pointF);
            }
            // Angle between original x-Axis and Line from Start-Point to End-Point
            const startEndLineAngleRadians = (Math.atan((endY - startY) / (endX - startX)));
            // translate origin at Start (positiveY from Bottom to Top => change sign for Y)
            const start2 = new PointF2D_1.PointF2D(0, 0);
            let end2 = new PointF2D_1.PointF2D(endX - startX, -(endY - startY));
            // and Rotate at new Origin startEndLineAngle degrees
            // clockwise/counterclockwise Rotation
            // after Rotation end2.Y must be 0
            // Inverse of RotationMatrix = TransposeMatrix of RotationMatrix
            const rotationMatrix = Matrix2D_1.Matrix2D.getRotationMatrix(startEndLineAngleRadians);
            const transposeMatrix = rotationMatrix.getTransposeMatrix();
            end2 = rotationMatrix.vectorMultiplication(end2);
            const transformedPoints = this.calculateTranslatedAndRotatedPointListAbove(points, startX, startY, rotationMatrix);
            // calculate tangent Lines maximum Slopes between StartPoint and EndPoint to all Points in SkyLine
            // and tangent Lines characteristica
            const startLineSlope = this.calculateMaxLeftSlope(transformedPoints, start2, end2);
            const endLineSlope = this.calculateMaxRightSlope(transformedPoints, start2, end2);
            const startLineD = start2.y - start2.x * startLineSlope;
            const endLineD = end2.y - end2.x * endLineSlope;
            // calculate IntersectionPoint of the 2 Lines
            // if same Slope, then Point.X between Start and End and Point.Y fixed
            const intersectionPoint = new PointF2D_1.PointF2D();
            let sameSlope = false;
            if (Math.abs(Math.abs(startLineSlope) - Math.abs(endLineSlope)) < 0.0001) {
                intersectionPoint.x = end2.x / 2;
                intersectionPoint.y = 0;
                sameSlope = true;
            }
            else {
                intersectionPoint.x = (endLineD - startLineD) / (startLineSlope - endLineSlope);
                intersectionPoint.y = startLineSlope * intersectionPoint.x + startLineD;
            }
            // calculate HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)
            // and the X-distance from StartPoint to EndPoint
            const heightWidthRatio = this.calculateHeightWidthRatio(end2.x, transformedPoints);
            // Shift start- or endPoint and corresponding controlPoint away from note, if needed:
            // e.g. if there is a close object creating a high slope, better shift it away to reduce the slope:
            // idea is to compare the half heightWidthRatio of the bounding box of the skyline points with the slope (which is also a ratio: k/1)
            // if the slope is greater than the half heightWidthRatio (which will 99% be the case),
            // then add a y-offset to reduce the slope to the same value as the half heightWidthRatio of the bounding box
            const startYOffset = 0;
            const endYOffset = 0;
            /*if (Math.abs(heightWidthRatio) > 0.001) {
                // 1. start side:
                const startSlopeRatio: number = Math.abs(startLineSlope / (heightWidthRatio * 2));
                const maxLeftYOffset: number = Math.abs(startLineSlope);
                startYOffset = Math.max(0, maxLeftYOffset * (Math.min(10, startSlopeRatio - 1) / 10));
                // slope has to be adapted now due to the y-offset:
                startLineSlope -= startYOffset;

                // 2. end side:
                const endSlopeRatio: number = Math.abs(endLineSlope / (heightWidthRatio * 2));
                const maxRightYOffset: number = Math.abs(endLineSlope);
                endYOffset = Math.max(0, maxRightYOffset * (Math.min(10, endSlopeRatio - 1) / 10));
                // slope has to be adapted now due to the y-offset:
                endLineSlope += endYOffset;
            }*/
            // calculate tangent Lines Angles
            // (using the calculated Slopes and the Ratio from the IntersectionPoint's distance to the MaxPoint in the SkyLine)
            let startAngle = minAngle;
            let endAngle = -minAngle;
            // if the calculated Slopes (start and end) are equal, then Angles have fixed values
            if (!sameSlope) {
                const result = this.calculateAngles(minAngle, startLineSlope, endLineSlope, maxAngle);
                startAngle = result.startAngle;
                endAngle = result.endAngle;
            }
            // calculate Curve's Control Points
            const controlPoints = this.calculateControlPoints(end2.x, startAngle, endAngle, transformedPoints, heightWidthRatio, startY, endY);
            let startControlPoint = controlPoints.startControlPoint;
            let endControlPoint = controlPoints.endControlPoint;
            // transform ControlPoints to original Coordinate System
            // (rotate back and translate back)
            startControlPoint = transposeMatrix.vectorMultiplication(startControlPoint);
            startControlPoint.x += startX;
            startControlPoint.y = -startControlPoint.y + startY;
            endControlPoint = transposeMatrix.vectorMultiplication(endControlPoint);
            endControlPoint.x += startX;
            endControlPoint.y = -endControlPoint.y + startY;
            // middleControlPoint.x = (startControlPoint.x + endControlPoint.x) / 2;
            // middleControlPoint.y = (startControlPoint.y + endControlPoint.y) / 2 + 1.0;
            /* for DEBUG only */
            // this.intersection = transposeMatrix.vectorMultiplication(intersectionPoint);
            // this.intersection.x += startX;
            // this.intersection.y = -this.intersection.y + startY;
            /* for DEBUG only */
            // set private members
            this.bezierStartPt = new PointF2D_1.PointF2D(startX, startY - startYOffset);
            this.bezierStartControlPt = new PointF2D_1.PointF2D(startControlPoint.x, startControlPoint.y - startYOffset);
            this.bezierEndControlPt = new PointF2D_1.PointF2D(endControlPoint.x, endControlPoint.y - endYOffset);
            this.bezierEndPt = new PointF2D_1.PointF2D(endX, endY - endYOffset);
            // calculate slur Curvepoints and update Skyline
            const length = staffLine.SkyLine.length;
            const startIndex = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierStartPt.x, length);
            const endIndex = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierEndPt.x, length);
            const distance = this.bezierEndPt.x - this.bezierStartPt.x;
            const samplingUnit = skyBottomLineCalculator.SamplingUnit;
            for (let i = startIndex; i < endIndex; i++) {
                // get the right distance ratio and index on the curve
                const diff = i / samplingUnit - this.bezierStartPt.x;
                const curvePoint = this.calculateCurvePointAtIndex(Math.abs(diff) / distance);
                // update left- and rightIndex for better accuracy
                let index = skyBottomLineCalculator.getLeftIndexForPointX(curvePoint.x, length);
                // update SkyLine with final slur curve:
                if (index >= startIndex) {
                    staffLine.SkyLine[index] = Math.min(staffLine.SkyLine[index], curvePoint.y);
                }
                index++;
                if (index < length) {
                    staffLine.SkyLine[index] = Math.min(staffLine.SkyLine[index], curvePoint.y);
                }
            }
        }
        else {
            startY += rules.SlurNoteHeadYOffset;
            endY += rules.SlurNoteHeadYOffset;
            // firstStaffEntry startLowerRightPoint and lastStaffentry endLowerLeftPoint
            const startLowerRight = new PointF2D_1.PointF2D(this.staffEntries[0].parentMeasure.PositionAndShape.RelativePosition.x
                + this.staffEntries[0].PositionAndShape.RelativePosition.x, startY);
            if (slurStartNote) {
                startLowerRight.x += this.staffEntries[0].PositionAndShape.BorderRight;
            }
            else {
                // continuing Slur from previous StaffLine - must start after last Instruction of first Measure
                startLowerRight.x = this.staffEntries[0].parentMeasure.beginInstructionsWidth;
            }
            // must also add the GraceStaffEntry's ParentStaffEntry Position
            if (this.graceStart) {
                startLowerRight.x += endStaffEntry.PositionAndShape.RelativePosition.x;
            }
            const endLowerLeft = new PointF2D_1.PointF2D(this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x
                + this.staffEntries[this.staffEntries.length - 1].PositionAndShape.RelativePosition.x, endY);
            if (slurEndNote) {
                endLowerLeft.x += this.staffEntries[this.staffEntries.length - 1].PositionAndShape.BorderLeft;
            }
            else {
                // Slur continues to next StaffLine - must reach the end of current StaffLine
                endLowerLeft.x = this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.RelativePosition.x
                    + this.staffEntries[this.staffEntries.length - 1].parentMeasure.PositionAndShape.Size.width;
            }
            // must also add the GraceStaffEntry's ParentStaffEntry Position
            if (this.graceEnd) {
                endLowerLeft.x += endStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;
            }
            // BottomLinePointsList between firstStaffEntry startLowerRightPoint and lastStaffentry endLowerLeftPoint
            points = this.calculateBottomPoints(startLowerRight, endLowerLeft, staffLine, skyBottomLineCalculator);
            if (points.length === 0) {
                const pointF = new PointF2D_1.PointF2D((endLowerLeft.x - startLowerRight.x) / 2 + startLowerRight.x, (endLowerLeft.y - startLowerRight.y) / 2 + startLowerRight.y);
                points.push(pointF);
            }
            // Angle between original x-Axis and Line from Start-Point to End-Point
            const startEndLineAngleRadians = Math.atan((endY - startY) / (endX - startX));
            // translate origin at Start
            const start2 = new PointF2D_1.PointF2D(0, 0);
            let end2 = new PointF2D_1.PointF2D(endX - startX, endY - startY);
            // and Rotate at new Origin startEndLineAngle degrees
            // clockwise/counterclockwise Rotation
            // after Rotation end2.Y must be 0
            // Inverse of RotationMatrix = TransposeMatrix of RotationMatrix
            const rotationMatrix = Matrix2D_1.Matrix2D.getRotationMatrix(-startEndLineAngleRadians);
            const transposeMatrix = rotationMatrix.getTransposeMatrix();
            end2 = rotationMatrix.vectorMultiplication(end2);
            const transformedPoints = this.calculateTranslatedAndRotatedPointListBelow(points, startX, startY, rotationMatrix);
            // calculate tangent Lines maximum Slopes between StartPoint and EndPoint to all Points in BottomLine
            // and tangent Lines characteristica
            const startLineSlope = this.calculateMaxLeftSlope(transformedPoints, start2, end2);
            const endLineSlope = this.calculateMaxRightSlope(transformedPoints, start2, end2);
            const startLineD = start2.y - start2.x * startLineSlope;
            const endLineD = end2.y - end2.x * endLineSlope;
            // calculate IntersectionPoint of the 2 Lines
            // if same Slope, then Point.X between Start and End and Point.Y fixed
            const intersectionPoint = new PointF2D_1.PointF2D();
            let sameSlope = false;
            if (Math.abs(Math.abs(startLineSlope) - Math.abs(endLineSlope)) < 0.0001) {
                intersectionPoint.x = end2.x / 2;
                intersectionPoint.y = 0;
                sameSlope = true;
            }
            else {
                intersectionPoint.x = (endLineD - startLineD) / (startLineSlope - endLineSlope);
                intersectionPoint.y = startLineSlope * intersectionPoint.x + startLineD;
            }
            // calculate HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)
            // and the X-distance from StartPoint to EndPoint
            const heightWidthRatio = this.calculateHeightWidthRatio(end2.x, transformedPoints);
            // Shift start- or endPoint and corresponding controlPoint away from note, if needed:
            // e.g. if there is a close object creating a high slope, better shift it away to reduce the slope:
            // idea is to compare the half heightWidthRatio of the bounding box of the skyline points with the slope (which is also a ratio: k/1)
            // if the slope is greater than the half heightWidthRatio (which will 99% be the case),
            // then add a y-offset to reduce the slope to the same value as the half heightWidthRatio of the bounding box
            const startYOffset = 0;
            const endYOffset = 0;
            /*if (Math.abs(heightWidthRatio) > 0.001) {
                // 1. start side:
                const startSlopeRatio: number = Math.abs(startLineSlope / (heightWidthRatio * 2));
                const maxLeftYOffset: number = Math.abs(startLineSlope);
                startYOffset = Math.max(0, maxLeftYOffset * (Math.min(10, startSlopeRatio - 1) / 10));
                // slope has to be adapted now due to the y-offset:
                startLineSlope -= startYOffset;
                // 2. end side:
                const endSlopeRatio: number = Math.abs(endLineSlope / (heightWidthRatio * 2));
                const maxRightYOffset: number = Math.abs(endLineSlope);
                endYOffset = Math.max(0, maxRightYOffset * (Math.min(10, endSlopeRatio - 1) / 10));
                // slope has to be adapted now due to the y-offset:
                endLineSlope += endYOffset;
            } */
            // calculate tangent Lines Angles
            // (using the calculated Slopes and the Ratio from the IntersectionPoint's distance to the MaxPoint in the SkyLine)
            let startAngle = minAngle;
            let endAngle = -minAngle;
            // if the calculated Slopes (start and end) are equal, then Angles have fixed values
            if (!sameSlope) {
                const result = this.calculateAngles(minAngle, startLineSlope, endLineSlope, maxAngle);
                startAngle = result.startAngle;
                endAngle = result.endAngle;
            }
            // calculate Curve's Control Points
            const controlPoints = this.calculateControlPoints(end2.x, startAngle, endAngle, transformedPoints, heightWidthRatio, startY, endY);
            let startControlPoint = controlPoints.startControlPoint;
            let endControlPoint = controlPoints.endControlPoint;
            // transform ControlPoints to original Coordinate System
            // (rotate back and translate back)
            startControlPoint = transposeMatrix.vectorMultiplication(startControlPoint);
            startControlPoint.x += startX;
            startControlPoint.y += startY;
            endControlPoint = transposeMatrix.vectorMultiplication(endControlPoint);
            endControlPoint.x += startX;
            endControlPoint.y += startY;
            // set private members
            this.bezierStartPt = new PointF2D_1.PointF2D(startX, startY + startYOffset);
            this.bezierStartControlPt = new PointF2D_1.PointF2D(startControlPoint.x, startControlPoint.y + startYOffset);
            this.bezierEndControlPt = new PointF2D_1.PointF2D(endControlPoint.x, endControlPoint.y + endYOffset);
            this.bezierEndPt = new PointF2D_1.PointF2D(endX, endY + endYOffset);
            /* for DEBUG only */
            // this.intersection = transposeMatrix.vectorMultiplication(intersectionPoint);
            // this.intersection.x += startX;
            // this.intersection.y += startY;
            /* for DEBUG only */
            // calculate CurvePoints
            const length = staffLine.BottomLine.length;
            const startIndex = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierStartPt.x, length);
            const endIndex = skyBottomLineCalculator.getLeftIndexForPointX(this.bezierEndPt.x, length);
            const distance = this.bezierEndPt.x - this.bezierStartPt.x;
            const samplingUnit = skyBottomLineCalculator.SamplingUnit;
            for (let i = startIndex; i < endIndex; i++) {
                // get the right distance ratio and index on the curve
                const diff = i / samplingUnit - this.bezierStartPt.x;
                const curvePoint = this.calculateCurvePointAtIndex(Math.abs(diff) / distance);
                // update start- and endIndex for better accuracy
                let index = skyBottomLineCalculator.getLeftIndexForPointX(curvePoint.x, length);
                // update BottomLine with final slur curve:
                if (index >= startIndex) {
                    staffLine.BottomLine[index] = Math.max(staffLine.BottomLine[index], curvePoint.y);
                }
                index++;
                if (index < length) {
                    staffLine.BottomLine[index] = Math.max(staffLine.BottomLine[index], curvePoint.y);
                }
            }
        }
    }
    /**
     * This method calculates the Start and End Positions of the Slur Curve.
     * @param slurStartNote
     * @param slurEndNote
     * @param staffLine
     * @param startX
     * @param startY
     * @param endX
     * @param endY
     * @param rules
     * @param skyBottomLineCalculator
     */
    calculateStartAndEnd(slurStartNote, slurEndNote, staffLine, rules, skyBottomLineCalculator) {
        let startX = 0;
        let startY = 0;
        let endX = 0;
        let endY = 0;
        if (slurStartNote) {
            // must be relative to StaffLine
            startX = slurStartNote.PositionAndShape.RelativePosition.x + slurStartNote.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x
                + slurStartNote.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;
            // If Slur starts on a Gracenote
            if (this.graceStart) {
                startX += slurStartNote.parentVoiceEntry.parentStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;
            }
            //const first: GraphicalNote = slurStartNote.parentVoiceEntry.notes[0];
            // Determine Start/End Point coordinates with the VoiceEntry of the Start/EndNote of the slur
            const slurStartVE = slurStartNote.parentVoiceEntry;
            if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
                startY = slurStartVE.PositionAndShape.RelativePosition.y + slurStartVE.PositionAndShape.BorderTop;
                if (this.rules.SlurPlacementUseSkyBottomLine) {
                    startY = Math.min(endY, slurStartVE.parentStaffEntry.getSkylineMin());
                    // for (const articulation of slurStartVE.parentVoiceEntry.Articulations) {
                    //     if (articulation.placement === PlacementEnum.Above) {
                    //         startY -= this.rules.SlurEndArticulationYOffset;
                    //         break;
                    //     }
                    // }
                }
            }
            else {
                startY = slurStartVE.PositionAndShape.RelativePosition.y + slurStartVE.PositionAndShape.BorderBottom;
                if (this.rules.SlurPlacementUseSkyBottomLine) {
                    startY = Math.max(endY, slurStartVE.parentStaffEntry.getBottomlineMax());
                }
                // for (const articulation of slurStartVE.parentVoiceEntry.Articulations) {
                //     if (articulation.placement === PlacementEnum.Below) {
                //         startY += 1;
                //         break;
                //     }
                // }
            }
            // If the stem points towards the starting point of the slur, shift the slur by a small amount to start (approximately) at the x-position
            // of the notehead. Note: an exact calculation using the position of the note is too complicate for the payoff
            if (slurStartVE.parentVoiceEntry.StemDirection === VoiceEntry_1.StemDirectionType.Down && this.placement === AbstractExpression_1.PlacementEnum.Below) {
                startX -= 0.5;
            }
            if (slurStartVE.parentVoiceEntry.StemDirection === VoiceEntry_1.StemDirectionType.Up && this.placement === AbstractExpression_1.PlacementEnum.Above) {
                startX += 0.5;
            }
            // if (first.NoteStem && first.NoteStem.Direction === StemEnum.StemUp && this.placement === PlacementEnum.Above) {
            //     startX += first.NoteStem.PositionAndShape.RelativePosition.x;
            //     startY = skyBottomLineCalculator.getSkyLineMinAtPoint(staffLine, startX);
            // } else {
            //     const last: GraphicalNote = <GraphicalNote>slurStartNote[slurEndNote.parentVoiceEntry.notes.length - 1];
            //     if (last.NoteStem && last.NoteStem.Direction === StemEnum.StemDown && this.placement === PlacementEnum.Below) {
            //         startX += last.NoteStem.PositionAndShape.RelativePosition.x;
            //         startY = skyBottomLineCalculator.getBottomLineMaxAtPoint(staffLine, startX);
            //     } else {
            //     }
            // }
        }
        else {
            startX = 0;
        }
        if (slurEndNote) {
            endX = slurEndNote.PositionAndShape.RelativePosition.x + slurEndNote.parentVoiceEntry.parentStaffEntry.PositionAndShape.RelativePosition.x
                + slurEndNote.parentVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;
            // If Slur ends in a Gracenote
            if (this.graceEnd) {
                endX += slurEndNote.parentVoiceEntry.parentStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;
            }
            const slurEndVE = slurEndNote.parentVoiceEntry;
            // check for articulation -> shift end y (slur further outward)
            //   this should not be necessary for the start note, and for accents (>) it's even counter productive there
            //   TODO alternatively, we could fix the bounding box of the note to include the ornament, but that seems tricky
            let articulationPlacement; // whether there's an articulation and where
            for (const articulation of slurEndVE.parentVoiceEntry.Articulations) {
                articulationPlacement = articulation.placement;
                if (articulation.placement === AbstractExpression_1.PlacementEnum.NotYetDefined) {
                    for (const modifier of slurEndNote.vfnote[0].modifiers) {
                        if (modifier.getCategory() === VF.Articulation.CATEGORY) {
                            if (modifier.position === VF.Modifier.Position.ABOVE) {
                                articulation.placement = AbstractExpression_1.PlacementEnum.Above;
                                articulationPlacement = AbstractExpression_1.PlacementEnum.Above;
                            }
                            else if (modifier.position === VF.Modifier.Position.BELOW) {
                                articulation.placement = AbstractExpression_1.PlacementEnum.Below;
                                articulationPlacement = AbstractExpression_1.PlacementEnum.Below;
                            }
                            break;
                        }
                    }
                }
            }
            if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
                endY = slurEndVE.PositionAndShape.RelativePosition.y + slurEndVE.PositionAndShape.BorderTop;
                if (this.rules.SlurPlacementUseSkyBottomLine) {
                    endY = Math.min(endY, slurEndVE.parentStaffEntry.getSkylineMin());
                }
                if (articulationPlacement === AbstractExpression_1.PlacementEnum.Above) {
                    endY -= this.rules.SlurEndArticulationYOffset;
                }
            }
            else {
                endY = slurEndVE.PositionAndShape.RelativePosition.y + slurEndVE.PositionAndShape.BorderBottom;
                if (this.rules.SlurPlacementUseSkyBottomLine) {
                    endY = Math.max(endY, slurEndVE.parentStaffEntry.getBottomlineMax());
                }
                if (articulationPlacement === AbstractExpression_1.PlacementEnum.Below) {
                    endY += this.rules.SlurEndArticulationYOffset;
                }
            }
            // If the stem points towards the endpoint of the slur, shift the slur by a small amount to start (approximately) at the x-position
            // of the notehead. Note: an exact calculation using the position of the note is too complicate for the payoff
            if (slurEndVE.parentVoiceEntry.StemDirection === VoiceEntry_1.StemDirectionType.Down && this.placement === AbstractExpression_1.PlacementEnum.Below) {
                endX -= 0.5;
            }
            if (slurEndVE.parentVoiceEntry.StemDirection === VoiceEntry_1.StemDirectionType.Up && this.placement === AbstractExpression_1.PlacementEnum.Above) {
                endX += 0.5;
            }
            // const first: GraphicalNote = <GraphicalNote>slurEndNote.parentVoiceEntry.notes[0];
            // if (first.NoteStem && first.NoteStem.Direction === StemEnum.StemUp && this.placement === PlacementEnum.Above) {
            //     endX += first.NoteStem.PositionAndShape.RelativePosition.x;
            //     endY = skyBottomLineCalculator.getSkyLineMinAtPoint(staffLine, endX);
            // } else {
            //     const last: GraphicalNote = <GraphicalNote>slurEndNote.parentVoiceEntry.notes[slurEndNote.parentVoiceEntry.notes.length - 1];
            //     if (last.NoteStem && last.NoteStem.Direction === StemEnum.StemDown && this.placement === PlacementEnum.Below) {
            //         endX += last.NoteStem.PositionAndShape.RelativePosition.x;
            //         endY = skyBottomLineCalculator.getBottomLineMaxAtPoint(staffLine, endX);
            //     } else {
            //         if (this.placement === PlacementEnum.Above) {
            //             const highestNote: GraphicalNote = last;
            //             endY = highestNote.PositionAndShape.RelativePosition.y;
            //             if (highestNote.NoteHead) {
            //                 endY += highestNote.NoteHead.PositionAndShape.BorderMarginTop;
            //             } else { endY += highestNote.PositionAndShape.BorderTop; }
            //         } else {
            //             const lowestNote: GraphicalNote = first;
            //             endY = lowestNote.parentVoiceEntry
            //             lowestNote.PositionAndShape.RelativePosition.y;
            //             if (lowestNote.NoteHead) {
            //                 endY += lowestNote.NoteHead.PositionAndShape.BorderMarginBottom;
            //             } else { endY += lowestNote.PositionAndShape.BorderBottom; }
            //         }
            //     }
            // }
        }
        else {
            endX = staffLine.PositionAndShape.Size.width;
        }
        // if GraphicalSlur breaks over System, then the end/start of the curve is at the corresponding height with the known start/end
        if (!slurStartNote && !slurEndNote) {
            startY = -1.5;
            endY = -1.5;
        }
        if (!slurStartNote) {
            if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
                startY = endY - 1;
            }
            else {
                startY = endY + 1;
            }
        }
        if (!slurEndNote) {
            if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
                endY = startY - 1;
            }
            else {
                endY = startY + 1;
            }
        }
        // if two slurs start/end at the same GraphicalNote, then the second gets an offset
        if (this.slur.startNoteHasMoreStartingSlurs() && this.slur.isSlurLonger()) {
            if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
                startY -= rules.SlursStartingAtSameStaffEntryYOffset;
            }
            else {
                startY += rules.SlursStartingAtSameStaffEntryYOffset;
            }
        }
        if (this.slur.endNoteHasMoreEndingSlurs() && this.slur.isSlurLonger()) {
            if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
                endY -= rules.SlursStartingAtSameStaffEntryYOffset;
            }
            else {
                endY += rules.SlursStartingAtSameStaffEntryYOffset;
            }
        }
        if (this.placement === AbstractExpression_1.PlacementEnum.Above) {
            startY = Math.min(startY, 1.5);
            endY = Math.min(endY, 1.5);
        }
        else {
            startY = Math.max(startY, staffLine.StaffHeight - 1.5);
            endY = Math.max(endY, staffLine.StaffHeight - 1.5);
        }
        return { startX, startY, endX, endY };
    }
    /**
     * This method calculates the placement of the Curve.
     * @param skyBottomLineCalculator
     * @param staffLine
     */
    calculatePlacement(skyBottomLineCalculator, staffLine) {
        // old version: when lyrics are given place above:
        // if ( !this.slur.StartNote.ParentVoiceEntry.LyricsEntries.isEmpty || (this.slur.EndNote
        //                                     && !this.slur.EndNote.ParentVoiceEntry.LyricsEntries.isEmpty) ) {
        //     this.placement = PlacementEnum.Above;
        //     return;
        // }
        if (this.rules.SlurPlacementFromXML && this.slur.PlacementXml !== AbstractExpression_1.PlacementEnum.NotYetDefined) {
            this.placement = this.slur.PlacementXml;
            return;
        }
        // if any StaffEntry belongs to a Measure with multiple Voices, than
        // if Slur's Start- or End-Note belongs to a LinkedVoice Below else Above
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            if (graphicalStaffEntry.parentMeasure.hasMultipleVoices()) {
                if (this.slur.StartNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice_1.LinkedVoice ||
                    this.slur.EndNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice_1.LinkedVoice) {
                    this.placement = AbstractExpression_1.PlacementEnum.Below;
                }
                else {
                    this.placement = AbstractExpression_1.PlacementEnum.Above;
                }
                return;
            }
        }
        // when lyrics are given place above:
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            if (graphicalStaffEntry.LyricsEntries.length > 0) {
                this.placement = AbstractExpression_1.PlacementEnum.Above;
                return;
            }
        }
        const startStaffEntry = this.staffEntries[0];
        const endStaffEntry = this.staffEntries[this.staffEntries.length - 1];
        // single Voice, opposite to StemDirection
        // here should only be one voiceEntry, so we can take graphicalVoiceEntries[0]:
        const startStemDirection = startStaffEntry.graphicalVoiceEntries[0].parentVoiceEntry.StemDirection;
        const endStemDirection = endStaffEntry.graphicalVoiceEntries[0].parentVoiceEntry.StemDirection;
        if (startStemDirection ===
            endStemDirection) {
            this.placement = (startStemDirection === VoiceEntry_1.StemDirectionType.Up) ? AbstractExpression_1.PlacementEnum.Below : AbstractExpression_1.PlacementEnum.Above;
            if (this.rules.SlurPlacementAtStems) {
                this.placement = (startStemDirection === VoiceEntry_1.StemDirectionType.Up) ? AbstractExpression_1.PlacementEnum.Above : AbstractExpression_1.PlacementEnum.Below;
            }
        }
        else {
            // Placement at the side with the minimum border
            let sX = startStaffEntry.PositionAndShape.BorderLeft + startStaffEntry.PositionAndShape.RelativePosition.x
                + startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;
            let eX = endStaffEntry.PositionAndShape.BorderRight + endStaffEntry.PositionAndShape.RelativePosition.x
                + endStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;
            if (this.graceStart) {
                sX += endStaffEntry.PositionAndShape.RelativePosition.x;
            }
            if (this.graceEnd) {
                eX += endStaffEntry.staffEntryParent.PositionAndShape.RelativePosition.x;
            }
            // get SkyBottomLine borders
            const minAbove = skyBottomLineCalculator.getSkyLineMinInRange(sX, eX) * -1;
            const maxBelow = skyBottomLineCalculator.getBottomLineMaxInRange(sX, eX) - staffLine.StaffHeight;
            if (maxBelow > minAbove) {
                this.placement = AbstractExpression_1.PlacementEnum.Above;
            }
            else {
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
        }
    }
    /**
     * This method calculates the Points between Start- and EndPoint (case above).
     * @param start
     * @param end
     * @param staffLine
     * @param skyBottomLineCalculator
     */
    calculateTopPoints(start, end, staffLine, skyBottomLineCalculator) {
        const points = [];
        let startIndex = skyBottomLineCalculator.getRightIndexForPointX(start.x, staffLine.SkyLine.length);
        let endIndex = skyBottomLineCalculator.getLeftIndexForPointX(end.x, staffLine.SkyLine.length);
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (endIndex >= staffLine.SkyLine.length) {
            endIndex = staffLine.SkyLine.length - 1;
        }
        for (let i = startIndex; i < endIndex; i++) {
            const skylineValue = staffLine.SkyLine[i];
            // ignore default value (= 0) which is upper border of staffline
            if (skylineValue !== 0) {
                const point = new PointF2D_1.PointF2D((0.5 + i) / skyBottomLineCalculator.SamplingUnit, skylineValue);
                points.push(point);
            }
        }
        return points;
    }
    /**
     * This method calculates the Points between Start- and EndPoint (case below).
     * @param start
     * @param end
     * @param staffLine
     * @param skyBottomLineCalculator
     */
    calculateBottomPoints(start, end, staffLine, skyBottomLineCalculator) {
        const points = [];
        // get BottomLine indices
        let startIndex = skyBottomLineCalculator.getRightIndexForPointX(start.x, staffLine.BottomLine.length);
        let endIndex = skyBottomLineCalculator.getLeftIndexForPointX(end.x, staffLine.BottomLine.length);
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (endIndex >= staffLine.BottomLine.length) {
            endIndex = staffLine.BottomLine.length - 1;
        }
        for (let i = startIndex; i < endIndex; i++) {
            const bottomLineValue = staffLine.BottomLine[i];
            // ignore default value (= 4) which is lower border of staffline
            if (bottomLineValue !== 0) {
                const point = new PointF2D_1.PointF2D((0.5 + i) / skyBottomLineCalculator.SamplingUnit, bottomLineValue);
                points.push(point);
            }
        }
        return points;
    }
    /**
     * This method calculates the maximum slope between StartPoint and BetweenPoints.
     * @param points
     * @param start
     * @param end
     */
    calculateMaxLeftSlope(points, start, end) {
        let slope = -Number.MAX_VALUE;
        const x = start.x;
        const y = start.y;
        for (let i = 0; i < points.length; i++) {
            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {
                continue;
            }
            slope = Math.max(slope, (points[i].y - y) / (points[i].x - x));
        }
        // in case all Points don't have a meaningful value or the slope between Start- and EndPoint is just bigger
        slope = Math.max(slope, Math.abs(end.y - y) / (end.x - x));
        //limit to 80 degrees
        slope = Math.min(slope, 5.6713);
        return slope;
    }
    /**
     * This method calculates the maximum slope between EndPoint and BetweenPoints.
     * @param points
     * @param start
     * @param end
     */
    calculateMaxRightSlope(points, start, end) {
        let slope = Number.MAX_VALUE;
        const x = end.x;
        const y = end.y;
        for (let i = 0; i < points.length; i++) {
            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {
                continue;
            }
            slope = Math.min(slope, (y - points[i].y) / (x - points[i].x));
        }
        // in case no Point has a meaningful value or the slope between Start- and EndPoint is just smaller
        slope = Math.min(slope, (y - start.y) / (x - start.x));
        //limit to 80 degrees
        slope = Math.max(slope, -5.6713);
        return slope;
    }
    /**
     * This method returns the maximum (meaningful) points.Y.
     * @param points
     */
    getPointListMaxY(points) {
        let max = -Number.MAX_VALUE;
        for (let idx = 0, len = points.length; idx < len; ++idx) {
            const point = points[idx];
            if (Math.abs(point.y - (-Number.MAX_VALUE)) < 0.0001 || Math.abs(point.y - Number.MAX_VALUE) < 0.0001) {
                continue;
            }
            max = Math.max(max, point.y);
        }
        return max;
    }
    /**
     * This method calculates the translated and rotated PointsList (case above).
     * @param points
     * @param startX
     * @param startY
     * @param rotationMatrix
     */
    calculateTranslatedAndRotatedPointListAbove(points, startX, startY, rotationMatrix) {
        const transformedPoints = [];
        for (let i = 0; i < points.length; i++) {
            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {
                continue;
            }
            let point = new PointF2D_1.PointF2D(points[i].x - startX, -(points[i].y - startY));
            point = rotationMatrix.vectorMultiplication(point);
            transformedPoints.push(point);
        }
        return transformedPoints;
    }
    /**
     * This method calculates the translated and rotated PointsList (case below).
     * @param points
     * @param startX
     * @param startY
     * @param rotationMatrix
     */
    calculateTranslatedAndRotatedPointListBelow(points, startX, startY, rotationMatrix) {
        const transformedPoints = [];
        for (let i = 0; i < points.length; i++) {
            if (Math.abs(points[i].y - Number.MAX_VALUE) < 0.0001 || Math.abs(points[i].y - (-Number.MAX_VALUE)) < 0.0001) {
                continue;
            }
            let point = new PointF2D_1.PointF2D(points[i].x - startX, points[i].y - startY);
            point = rotationMatrix.vectorMultiplication(point);
            transformedPoints.push(point);
        }
        return transformedPoints;
    }
    /**
     * This method calculates the HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)
     * and the X-distance from StartPoint to EndPoint.
     * @param endX
     * @param points
     */
    calculateHeightWidthRatio(endX, points) {
        if (points.length === 0) {
            return 0;
        }
        // in case of negative points
        const max = Math.max(0, this.getPointListMaxY(points));
        return max / endX;
    }
    /**
     * This method calculates the 2 ControlPoints of the SlurCurve.
     * @param endX
     * @param startAngle
     * @param endAngle
     * @param points
     */
    calculateControlPoints(endX, startAngle, endAngle, points, heightWidthRatio, startY, endY) {
        let heightFactor = this.rules.SlurHeightFactor;
        let widthFlattenFactor = 1;
        const cutoffAngle = this.rules.SlurHeightFlattenLongSlursCutoffAngle;
        const cutoffWidth = this.rules.SlurHeightFlattenLongSlursCutoffWidth;
        // console.log("width: " + endX);
        if (startAngle > cutoffAngle && endX > cutoffWidth) { // steep and wide slurs
            // console.log("steep angle: " + startAngle);
            widthFlattenFactor += endX / 70 * this.rules.SlurHeightFlattenLongSlursFactorByWidth; // double flattening for width = 70, factorByWidth = 1
            widthFlattenFactor *= 1 + (startAngle / 30 * this.rules.SlurHeightFlattenLongSlursFactorByAngle); // flatten more for higher angles.
            // TODO use sin or cos instead of startAngle directly
            heightFactor /= widthFlattenFactor; // flatten long slurs more
        }
        // TODO also offer a widthFlattenFactor for smaller slurs?
        // debug:
        // const measureNumber: number = this.staffEntries[0].parentMeasure.MeasureNumber; // debug
        // if (measureNumber === 10) {
        //     console.log("endX: " + endX);
        //     console.log("widthFlattenFactor: " + widthFlattenFactor);
        //     console.log("heightFactor: " + heightFactor);
        //     console.log("startAngle: " + startAngle);
        //     console.log("heightWidthRatio: " + heightWidthRatio);
        // }
        // calculate HeightWidthRatio between the MaxYpoint (from the points between StartPoint and EndPoint)
        // and the X-distance from StartPoint to EndPoint
        // use this HeightWidthRatio to get a "normalized" Factor (based on tested parameters)
        // this Factor denotes the Length of the TangentLine of the Curve (a proportion of the X-distance from StartPoint to EndPoint)
        // finally from this Length and the calculated Angles we get the coordinates of the Control Points
        const factorStart = Math.min(0.5, Math.max(0.1, 1.7 * startAngle / 80 * heightFactor * Math.pow(Math.max(heightWidthRatio, 0.05), 0.4)));
        const factorEnd = Math.min(0.5, Math.max(0.1, 1.7 * (-endAngle) / 80 * heightFactor * Math.pow(Math.max(heightWidthRatio, 0.05), 0.4)));
        const startControlPoint = new PointF2D_1.PointF2D();
        startControlPoint.x = endX * factorStart * Math.cos(startAngle * GraphicalSlur.degreesToRadiansFactor);
        startControlPoint.y = endX * factorStart * Math.sin(startAngle * GraphicalSlur.degreesToRadiansFactor);
        const endControlPoint = new PointF2D_1.PointF2D();
        endControlPoint.x = endX - (endX * factorEnd * Math.cos(endAngle * GraphicalSlur.degreesToRadiansFactor));
        endControlPoint.y = -(endX * factorEnd * Math.sin(endAngle * GraphicalSlur.degreesToRadiansFactor));
        //Soften the slur in a "brute-force" way
        let controlPointYDiff = startControlPoint.y - endControlPoint.y;
        while (this.rules.SlurMaximumYControlPointDistance &&
            Math.abs(controlPointYDiff) > this.rules.SlurMaximumYControlPointDistance) {
            if (controlPointYDiff < 0) {
                startControlPoint.y += 1;
                endControlPoint.y -= 1;
            }
            else {
                startControlPoint.y -= 1;
                endControlPoint.y += 1;
            }
            controlPointYDiff = startControlPoint.y - endControlPoint.y;
        }
        return { startControlPoint: startControlPoint, endControlPoint: endControlPoint };
    }
    /**
     * This method calculates the angles for the Curve's Tangent Lines.
     * @param leftAngle
     * @param rightAngle
     * @param startLineSlope
     * @param endLineSlope
     * @param maxAngle
     */
    calculateAngles(minAngle, startLineSlope, endLineSlope, maxAngle) {
        // calculate Angles from the calculated Slopes, adding also a given angle
        const angle = 20;
        let calculatedStartAngle = Math.atan(startLineSlope) / GraphicalSlur.degreesToRadiansFactor;
        if (startLineSlope > 0) {
            calculatedStartAngle += angle;
        }
        else {
            calculatedStartAngle -= angle;
        }
        let calculatedEndAngle = Math.atan(endLineSlope) / GraphicalSlur.degreesToRadiansFactor;
        if (endLineSlope < 0) {
            calculatedEndAngle -= angle;
        }
        else {
            calculatedEndAngle += angle;
        }
        // +/- 80 is the max/min allowed Angle
        const leftAngle = Math.min(Math.max(minAngle, calculatedStartAngle), maxAngle);
        const rightAngle = Math.max(Math.min(-minAngle, calculatedEndAngle), -maxAngle);
        return { "startAngle": leftAngle, "endAngle": rightAngle };
    }
}
exports.GraphicalSlur = GraphicalSlur;
GraphicalSlur.degreesToRadiansFactor = Math.PI / 180;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalStaffEntry.ts":
/*!***********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalStaffEntry.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalStaffEntry = void 0;
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const CollectionUtil_1 = __webpack_require__(/*! ../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
const MusicSheetCalculator_1 = __webpack_require__(/*! ./MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
/**
 * The graphical counterpart of a [[SourceStaffEntry]].
 */
class GraphicalStaffEntry extends GraphicalObject_1.GraphicalObject {
    constructor(parentMeasure, sourceStaffEntry = undefined, staffEntryParent = undefined) {
        super();
        this.graphicalChordContainers = [];
        this.tabStaffEntry = undefined;
        this.MaxAccidentals = 0;
        this.graphicalInstructions = [];
        this.ties = [];
        this.graphicalTies = [];
        this.lyricsEntries = [];
        this.parentMeasure = parentMeasure;
        this.graphicalVoiceEntries = [];
        this.sourceStaffEntry = sourceStaffEntry;
        if (staffEntryParent) {
            this.staffEntryParent = staffEntryParent;
            this.parentVerticalContainer = staffEntryParent.parentVerticalContainer;
            this.PositionAndShape = new BoundingBox_1.BoundingBox(this, staffEntryParent.PositionAndShape);
        }
        else {
            this.PositionAndShape = new BoundingBox_1.BoundingBox(this, parentMeasure.PositionAndShape);
        }
        if (sourceStaffEntry) {
            this.relInMeasureTimestamp = sourceStaffEntry.Timestamp;
        }
        this.FingeringEntries = [];
    }
    get GraphicalInstructions() {
        return this.graphicalInstructions;
    }
    get GraphicalTies() {
        return this.graphicalTies;
    }
    get LyricsEntries() {
        return this.lyricsEntries;
    }
    set LyricsEntries(value) {
        this.lyricsEntries = value;
    }
    /**
     * Calculate the absolute Timestamp.
     * @returns {Fraction}
     */
    getAbsoluteTimestamp() {
        const result = this.parentMeasure.parentSourceMeasure.AbsoluteTimestamp.clone();
        if (this.relInMeasureTimestamp) {
            result.Add(this.relInMeasureTimestamp);
        }
        return result;
    }
    /**
     * Search through all the GraphicalNotes to find the suitable one for a TieEndNote.
     * @param tieNote
     * @returns {any}
     */
    findTieGraphicalNoteFromNote(tieNote) {
        for (const gve of this.graphicalVoiceEntries) {
            for (const graphicalNote of gve.notes) {
                const note = graphicalNote.sourceNote;
                if (!note.isRest()
                    && note.Pitch.FundamentalNote === tieNote.Pitch.FundamentalNote
                    && note.Pitch.Octave === tieNote.Pitch.Octave
                    && note.getAbsoluteTimestamp().Equals(tieNote.getAbsoluteTimestamp())) {
                    return graphicalNote;
                }
            }
        }
        return undefined;
    }
    /**
     * Search through all [[GraphicalNote]]s to find the suitable one for an StartSlurNote (that 's also an EndTieNote).
     * @param tieNote
     * @param slur
     * @returns {any}
     */
    findEndTieGraphicalNoteFromNoteWithStartingSlur(tieNote, slur) {
        if (!tieNote) {
            return undefined;
        }
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.parentVoiceEntry !== tieNote.ParentVoiceEntry) {
                continue;
            }
            for (const graphicalNote of gve.notes) {
                const note = graphicalNote.sourceNote;
                if (note.NoteTie && note.NoteSlurs.indexOf(slur) !== -1) {
                    return graphicalNote;
                }
            }
        }
        return undefined;
    }
    findGraphicalNoteFromGraceNote(graceNote) {
        if (!graceNote) {
            return undefined;
        }
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.parentVoiceEntry !== graceNote.ParentVoiceEntry) {
                continue;
            }
            for (const graphicalNote of gve.notes) {
                if (graphicalNote.sourceNote === graceNote) {
                    return graphicalNote;
                }
            }
        }
        return undefined;
    }
    findGraphicalNoteFromNote(note) {
        if (!note) {
            return undefined;
        }
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.parentVoiceEntry !== note.ParentVoiceEntry) {
                continue;
            }
            for (const graphicalNote of gve.notes) {
                if (graphicalNote.sourceNote === note && this.getAbsoluteTimestamp().Equals(note.getAbsoluteTimestamp())) {
                    return graphicalNote;
                }
            }
        }
        return undefined;
    }
    getGraphicalNoteDurationFromVoice(voice) {
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.parentVoiceEntry.ParentVoice !== voice) {
                continue;
            }
            return gve.notes[0].graphicalNoteLength;
        }
        return new Fraction_1.Fraction(0, 1);
    }
    /**
     * Find the [[StaffEntry]]'s [[GraphicalNote]]s that correspond to the given [[VoiceEntry]]'s [[Note]]s.
     * @param voiceEntry
     * @returns {any}
     */
    findVoiceEntryGraphicalNotes(voiceEntry) {
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.parentVoiceEntry === voiceEntry) {
                return gve.notes;
            }
        }
        return undefined;
    }
    /**
     * Check if the given [[VoiceEntry]] is part of the [[StaffEntry]]'s Linked [[VoiceEntry]].
     * @param voiceEntry
     * @returns {boolean}
     */
    isVoiceEntryPartOfLinkedVoiceEntry(voiceEntry) {
        if (this.sourceStaffEntry.Link) {
            for (let idx = 0, len = this.sourceStaffEntry.Link.LinkStaffEntries.length; idx < len; ++idx) {
                const sEntry = this.sourceStaffEntry.Link.LinkStaffEntries[idx];
                if (sEntry.VoiceEntries.indexOf(voiceEntry) !== -1 && sEntry !== this.sourceStaffEntry) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Return the [[StaffEntry]]'s Minimum NoteLength.
     * @returns {Fraction}
     */
    findStaffEntryMinNoteLength() {
        let minLength = new Fraction_1.Fraction(Number.MAX_VALUE, 1);
        for (const gve of this.graphicalVoiceEntries) {
            for (const graphicalNote of gve.notes) {
                const calNoteLen = graphicalNote.graphicalNoteLength;
                if (calNoteLen.lt(minLength) && calNoteLen.GetExpandedNumerator() > 0) {
                    minLength = calNoteLen;
                }
            }
        }
        return minLength;
    }
    findStaffEntryMaxNoteLength() {
        let maxLength = new Fraction_1.Fraction(0, 1);
        for (const gve of this.graphicalVoiceEntries) {
            for (const graphicalNote of gve.notes) {
                const calNoteLen = graphicalNote.graphicalNoteLength;
                if (maxLength.lt(calNoteLen) && calNoteLen.GetExpandedNumerator() > 0) {
                    maxLength = calNoteLen;
                }
            }
        }
        return maxLength;
    }
    /**
     * Find or creates the list of [[GraphicalNote]]s in case of a [[VoiceEntry]] (not from TiedNote).
     * @param voiceEntry
     * @returns {GraphicalNote[]}
     */
    findOrCreateGraphicalVoiceEntry(voiceEntry) {
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.parentVoiceEntry === voiceEntry) {
                return gve;
            }
        }
        // if not found in list, create new one and add to list:
        const graphicalVoiceEntry = MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.createVoiceEntry(voiceEntry, this);
        this.graphicalVoiceEntries.push(graphicalVoiceEntry);
        return graphicalVoiceEntry;
    }
    /**
     * Find or creates the list of [[GraphicalNote]]s in case of a TiedNote.
     * @param graphicalNote
     * @returns {GraphicalNote[]}
     */
    findOrCreateGraphicalVoiceEntryFromGraphicalNote(graphicalNote) {
        for (const gve of this.graphicalVoiceEntries) {
            if (gve === graphicalNote.parentVoiceEntry) {
                return gve;
            }
        }
        // if not found in list, create new one and add to list:
        const graphicalVoiceEntry = MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.createVoiceEntry(graphicalNote.sourceNote.ParentVoiceEntry, this);
        this.graphicalVoiceEntries.push(graphicalVoiceEntry);
        return graphicalVoiceEntry;
    }
    /**
     * Insert the [[GraphicalNote]] to the correct index of the [[GraphicalNote]]s list,
     * so that the order of the [[GraphicalNote]]'s in the list corresponds to the [[VoiceEntry]]'s [[Note]]s order.
     * (needed when adding Tie-EndNotes).
     * @param graphicalNotes
     * @param graphicalNote
     */
    addGraphicalNoteToListAtCorrectYPosition(gve, graphicalNote) {
        const graphicalNotes = gve.notes;
        if (graphicalNotes.length === 0 ||
            graphicalNote.PositionAndShape.RelativePosition.y < CollectionUtil_1.CollectionUtil.last(graphicalNotes).PositionAndShape.RelativePosition.y) {
            graphicalNotes.push(graphicalNote);
        }
        else {
            for (let i = graphicalNotes.length - 1; i >= 0; i--) {
                if (graphicalNotes[i].PositionAndShape.RelativePosition.y > graphicalNote.PositionAndShape.RelativePosition.y) {
                    graphicalNotes.splice(i + 1, 0, graphicalNote);
                    break;
                }
                if (i === 0) {
                    graphicalNotes.splice(0, 0, graphicalNote);
                    break;
                }
            }
        }
    }
    /**
     * Returns true if this staff entry has only rests
     */
    hasOnlyRests() {
        const hasOnlyRests = true;
        for (const gve of this.graphicalVoiceEntries) {
            for (const graphicalNote of gve.notes) {
                const note = graphicalNote.sourceNote;
                if (!note.isRest()) {
                    return false;
                }
            }
        }
        return hasOnlyRests;
    }
    getSkylineMin() {
        var _a;
        const skybottomcalculator = (_a = this.parentMeasure) === null || _a === void 0 ? void 0 : _a.ParentStaffLine.SkyBottomLineCalculator;
        if (!skybottomcalculator) {
            return undefined;
        }
        const [start, end] = this.getAbsoluteStartAndEnd();
        return skybottomcalculator.getSkyLineMinInRange(start, end);
    }
    /** Highest Y around the staff entry and notes in OSMD units (pixels / 10). Note that negative y is up. */
    getHighestYAtEntry() {
        const baseY = this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.y;
        return baseY + this.getSkylineMin();
    }
    /** Lowest Y around the staff entry and notes in OSMD units (pixels / 10). Note that positive y is down. */
    getLowestYAtEntry() {
        const baseY = this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.y;
        return baseY + this.getBottomlineMax();
    }
    getBottomlineMax() {
        var _a;
        const skybottomcalculator = (_a = this.parentMeasure) === null || _a === void 0 ? void 0 : _a.ParentStaffLine.SkyBottomLineCalculator;
        if (!skybottomcalculator) {
            return undefined;
        }
        const [start, end] = this.getAbsoluteStartAndEnd();
        return skybottomcalculator.getBottomLineMaxInRange(start, end);
    }
    getAbsoluteStartAndEnd() {
        let start = this.PositionAndShape.AbsolutePosition.x;
        start -= this.parentMeasure.ParentStaffLine.PositionAndShape.AbsolutePosition.x;
        const end = start + this.PositionAndShape.Size.width;
        return [start, end];
    }
}
exports.GraphicalStaffEntry = GraphicalStaffEntry;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalTie.ts":
/*!****************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalTie.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalTie = void 0;
/**
 * The graphical counterpart of a [[Tie]].
 */
class GraphicalTie {
    constructor(tie, start = undefined, end = undefined) {
        this.tie = tie;
        this.startNote = start;
        this.endNote = end;
    }
    get SVGElement() {
        return this.vfTie.getAttribute("el");
    }
    get GetTie() {
        return this.tie;
    }
    get StartNote() {
        return this.startNote;
    }
    get Tie() {
        return this.tie;
    }
    set StartNote(value) {
        this.startNote = value;
    }
    get EndNote() {
        return this.endNote;
    }
    set EndNote(value) {
        this.endNote = value;
    }
}
exports.GraphicalTie = GraphicalTie;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalUnknownExpression.ts":
/*!******************************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalUnknownExpression.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalUnknownExpression = void 0;
const AbstractGraphicalExpression_1 = __webpack_require__(/*! ./AbstractGraphicalExpression */ "./src/MusicalScore/Graphical/AbstractGraphicalExpression.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class GraphicalUnknownExpression extends AbstractGraphicalExpression_1.AbstractGraphicalExpression {
    constructor(staffLine, label, placement, measure, sourceMultiExpression = undefined) {
        super(staffLine, new AbstractExpression_1.AbstractExpression(placement), measure);
        this.label = label;
        this.sourceMultiExpression = sourceMultiExpression;
    }
    updateSkyBottomLine() {
        // update Sky-BottomLine
        const skyBottomLineCalculator = this.parentStaffLine.SkyBottomLineCalculator;
        const left = this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginLeft;
        const right = this.label.PositionAndShape.RelativePosition.x + this.label.PositionAndShape.BorderMarginRight;
        switch (this.Placement) {
            case AbstractExpression_1.PlacementEnum.Above:
                const yValueAbove = this.label.PositionAndShape.BorderMarginTop + this.label.PositionAndShape.RelativePosition.y;
                skyBottomLineCalculator.updateSkyLineInRange(left, right, yValueAbove);
                break;
            case AbstractExpression_1.PlacementEnum.Below:
                const yValueBelow = this.label.PositionAndShape.BorderMarginBottom + this.label.PositionAndShape.RelativePosition.y;
                skyBottomLineCalculator.updateBottomLineInRange(left, right, yValueBelow);
                break;
            default:
                loglevel_1.default.error("Placement for GraphicalUnknownExpression is unknown");
        }
    }
}
exports.GraphicalUnknownExpression = GraphicalUnknownExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/GraphicalVoiceEntry.ts":
/*!***********************************************************!*\
  !*** ./src/MusicalScore/Graphical/GraphicalVoiceEntry.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GraphicalVoiceEntry = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const EngravingRules_1 = __webpack_require__(/*! ./EngravingRules */ "./src/MusicalScore/Graphical/EngravingRules.ts");
/**
 * The graphical counterpart of a [[VoiceEntry]].
 */
class GraphicalVoiceEntry extends GraphicalObject_1.GraphicalObject {
    constructor(parentVoiceEntry, parentStaffEntry, rules) {
        super();
        this.parentVoiceEntry = parentVoiceEntry;
        this.parentStaffEntry = parentStaffEntry;
        this.PositionAndShape = new BoundingBox_1.BoundingBox(this, parentStaffEntry ? parentStaffEntry.PositionAndShape : undefined, true);
        this.notes = [];
        if (rules) {
            this.rules = rules;
        }
        else {
            this.rules = parentStaffEntry ?
                parentStaffEntry.parentMeasure.parentSourceMeasure.Rules : new EngravingRules_1.EngravingRules();
        }
    }
    /** Sort this entry's notes by pitch.
     * Notes need to be sorted for Vexflow StaveNote creation.
     * Note that Vexflow needs the reverse order, see VexFlowConverter.StaveNote().
     */
    sort() {
        this.notes.sort((a, b) => {
            var _a, _b, _c, _d;
            return ((_b = (_a = b.sourceNote.Pitch) === null || _a === void 0 ? void 0 : _a.getHalfTone()) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = a.sourceNote.Pitch) === null || _c === void 0 ? void 0 : _c.getHalfTone()) !== null && _d !== void 0 ? _d : 0);
        });
        // note that this is the reverse order of what vexflow needs
        return this.notes;
    }
    /** Sort notes for vexflow (bottom to top), which needs them in the reverse order OSMD likes to have them.
     *  Note that sort() and reverse() replace the array in place,
     *  so to avoid changing the array one could copy it first, see sortedNotesCopyForVexflow() (commented),
     *  though copying the array is also unnecessary (time+memory) for now.
     */
    sortForVexflow() {
        this.notes.sort((a, b) => {
            var _a, _b, _c;
            return ((_b = (_a = a.sourceNote.Pitch) === null || _a === void 0 ? void 0 : _a.getHalfTone()) !== null && _b !== void 0 ? _b : 0) - ((_c = b.sourceNote.Pitch.getHalfTone()) !== null && _c !== void 0 ? _c : 0);
        });
        return this.notes;
    }
    // probably unnecessary, can just go through the array in reverse
    // public sortedNotesCopyForVexflow(): GraphicalNote[] {
    //     // we need a copy since sort replaces the array (in place sorting)
    //     let sortedArray = Array.from(this.notes.sort());
    //     sortedArray.reverse();
    //     return sortedArray;
    // }
    /** (Re-)color notes and stems
     */
    color() {
        // override
    }
}
exports.GraphicalVoiceEntry = GraphicalVoiceEntry;


/***/ }),

/***/ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts":
/*!************************************************************!*\
  !*** ./src/MusicalScore/Graphical/MusicSheetCalculator.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSheetCalculator = void 0;
const GraphicalMusicSheet_1 = __webpack_require__(/*! ./GraphicalMusicSheet */ "./src/MusicalScore/Graphical/GraphicalMusicSheet.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const Note_1 = __webpack_require__(/*! ../VoiceData/Note */ "./src/MusicalScore/VoiceData/Note.ts");
const ClefInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const OctaveShift_1 = __webpack_require__(/*! ../VoiceData/Expressions/ContinuousExpressions/OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts");
const VoiceEntry_1 = __webpack_require__(/*! ../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const MusicSystemBuilder_1 = __webpack_require__(/*! ./MusicSystemBuilder */ "./src/MusicalScore/Graphical/MusicSystemBuilder.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const SourceStaffEntry_1 = __webpack_require__(/*! ../VoiceData/SourceStaffEntry */ "./src/MusicalScore/VoiceData/SourceStaffEntry.ts");
const GraphicalLabel_1 = __webpack_require__(/*! ./GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const KeyInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const LinkedVoice_1 = __webpack_require__(/*! ../VoiceData/LinkedVoice */ "./src/MusicalScore/VoiceData/LinkedVoice.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const OctaveShiftParams_1 = __webpack_require__(/*! ./OctaveShiftParams */ "./src/MusicalScore/Graphical/OctaveShiftParams.ts");
const AccidentalCalculator_1 = __webpack_require__(/*! ./AccidentalCalculator */ "./src/MusicalScore/Graphical/AccidentalCalculator.ts");
const ClefInstruction_2 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
const GraphicalLine_1 = __webpack_require__(/*! ./GraphicalLine */ "./src/MusicalScore/Graphical/GraphicalLine.ts");
const Label_1 = __webpack_require__(/*! ../Label */ "./src/MusicalScore/Label.ts");
const VerticalSourceStaffEntryContainer_1 = __webpack_require__(/*! ../VoiceData/VerticalSourceStaffEntryContainer */ "./src/MusicalScore/VoiceData/VerticalSourceStaffEntryContainer.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const GraphicalInstantaneousTempoExpression_1 = __webpack_require__(/*! ./GraphicalInstantaneousTempoExpression */ "./src/MusicalScore/Graphical/GraphicalInstantaneousTempoExpression.ts");
const InstantaneousTempoExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/InstantaneousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts");
const ContinuousTempoExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts");
const ContinuousDynamicExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts");
const GraphicalContinuousDynamicExpression_1 = __webpack_require__(/*! ./GraphicalContinuousDynamicExpression */ "./src/MusicalScore/Graphical/GraphicalContinuousDynamicExpression.ts");
const OSMDOptions_1 = __webpack_require__(/*! ../../OpenSheetMusicDisplay/OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
const GraphicalUnknownExpression_1 = __webpack_require__(/*! ./GraphicalUnknownExpression */ "./src/MusicalScore/Graphical/GraphicalUnknownExpression.ts");
const Voice_1 = __webpack_require__(/*! ../VoiceData/Voice */ "./src/MusicalScore/VoiceData/Voice.ts");
/**
 * Class used to do all the calculations in a MusicSheet, which in the end populates a GraphicalMusicSheet.
 */
class MusicSheetCalculator {
    constructor() {
        this.staffEntriesWithGraphicalTies = [];
        this.staffEntriesWithOrnaments = [];
        this.staffEntriesWithChordSymbols = [];
        this.staffLinesWithLyricWords = [];
        this.graphicalLyricWords = [];
        this.abstractNotImplementedErrorMessage = "abstract, not implemented";
        //So we can track shared notes bounding boxes to avoid collision + skyline issues
        this.dynamicExpressionMap = new Map();
    }
    static get TextMeasurer() {
        return MusicSheetCalculator.textMeasurer;
    }
    static set TextMeasurer(value) {
        MusicSheetCalculator.textMeasurer = value;
    }
    get leadSheet() {
        return this.graphicalMusicSheet.LeadSheet;
    }
    static setMeasuresMinStaffEntriesWidth(measures, minimumStaffEntriesWidth) {
        for (let idx = 0, len = measures.length; idx < len; ++idx) {
            const measure = measures[idx];
            if (measure) {
                measure.minimumStaffEntriesWidth = minimumStaffEntriesWidth;
            }
        }
    }
    initialize(graphicalMusicSheet) {
        this.graphicalMusicSheet = graphicalMusicSheet;
        this.rules = graphicalMusicSheet.ParentMusicSheet.Rules;
        this.rules.clearMusicSheetObjects();
        this.prepareGraphicalMusicSheet();
        //this.calculate();
    }
    /**
     * Build the 2D [[GraphicalMeasure]] list needed for the [[MusicSheetCalculator]].
     * Internally it creates [[GraphicalMeasure]]s, [[GraphicalStaffEntry]]'s and [[GraphicalNote]]s.
     */
    prepareGraphicalMusicSheet() {
        // Clear the stored system images dict - all systems have to be redrawn.
        // Not necessary now. TODO Check
        // this.graphicalMusicSheet.SystemImages.length = 0;
        const musicSheet = this.graphicalMusicSheet.ParentMusicSheet;
        this.staffEntriesWithGraphicalTies = [];
        this.staffEntriesWithOrnaments = [];
        this.staffEntriesWithChordSymbols = [];
        this.staffLinesWithLyricWords = [];
        // this.staffLinesWithGraphicalExpressions = [];
        this.graphicalMusicSheet.Initialize();
        const measureList = this.graphicalMusicSheet.MeasureList;
        // one AccidentalCalculator for each Staff (regardless of Instrument)
        const accidentalCalculators = this.createAccidentalCalculators();
        // List of Active ClefInstructions
        const activeClefs = this.graphicalMusicSheet.initializeActiveClefs();
        // LyricWord - GraphicalLyricWord Lists
        const lyricWords = [];
        const completeNumberOfStaves = musicSheet.getCompleteNumberOfStaves();
        // Octave Shifts List
        const openOctaveShifts = [];
        // TieList - timestampsArray
        for (let i = 0; i < completeNumberOfStaves; i++) {
            openOctaveShifts.push(undefined);
        }
        // go through all SourceMeasures (taking into account normal SourceMusicParts and Repetitions)
        for (let idx = 0, len = musicSheet.SourceMeasures.length; idx < len; ++idx) {
            const sourceMeasure = musicSheet.SourceMeasures[idx];
            const graphicalMeasures = this.createGraphicalMeasuresForSourceMeasure(sourceMeasure, accidentalCalculators, lyricWords, openOctaveShifts, activeClefs);
            measureList.push(graphicalMeasures);
            if (sourceMeasure.multipleRestMeasures > 0 && this.rules.RenderMultipleRestMeasures) {
                // multiRest given in XML, skip the next measures included
                sourceMeasure.isReducedToMultiRest = true;
                sourceMeasure.multipleRestMeasureNumber = 1;
                const measuresToSkip = sourceMeasure.multipleRestMeasures - 1;
                // console.log(`skipping ${measuresToSkip} measures for measure #${sourceMeasure.MeasureNumber}.`);
                idx += measuresToSkip;
                for (let idx2 = 1; idx2 <= measuresToSkip; idx2++) {
                    const nextMeasureIndex = musicSheet.SourceMeasures.indexOf(sourceMeasure) + idx2;
                    // note that if there are pickup measures in the sheet, the measure index is not MeasureNumber - 1.
                    //   (if first measure in the sheet is a pickup measure, its index and measure number will be 0)
                    if (nextMeasureIndex >= musicSheet.SourceMeasures.length) {
                        break; // shouldn't happen, but for safety.
                    }
                    const nextSourceMeasure = musicSheet.SourceMeasures[nextMeasureIndex];
                    // TODO handle the case that a measure after the first multiple rest measure can't be reduced
                    nextSourceMeasure.multipleRestMeasureNumber = idx2 + 1;
                    nextSourceMeasure.isReducedToMultiRest = true;
                    measureList.push([undefined]);
                    // TODO we could push an object here or push nothing entirely,
                    //   but then the index doesn't correspond to measure numbers anymore.
                }
            }
        }
        if (this.rules.AutoGenerateMultipleRestMeasuresFromRestMeasures && this.rules.RenderMultipleRestMeasures) {
            //track number of multirests
            let beginMultiRestMeasure = undefined;
            let multiRestCount = 0;
            //go through all source measures again. Need to calc auto-multi-rests
            for (let idx = 0, len = musicSheet.SourceMeasures.length; idx < len; ++idx) {
                const sourceMeasure = musicSheet.SourceMeasures[idx];
                // console.log(sourceMeasure.MeasureNumber + " can be reduced: " + sourceMeasure.canBeReducedToMultiRest());
                if (!sourceMeasure.isReducedToMultiRest && sourceMeasure.canBeReducedToMultiRest()) {
                    //we've already been initialized, we are in the midst of a multirest sequence
                    if (multiRestCount > 0) {
                        beginMultiRestMeasure.isReducedToMultiRest = true;
                        beginMultiRestMeasure.multipleRestMeasureNumber = 1;
                        multiRestCount++;
                        sourceMeasure.multipleRestMeasureNumber = multiRestCount;
                        sourceMeasure.isReducedToMultiRest = true;
                        //clear out these measures. We know now that we are in multirest mode
                        for (let idx2 = 0; idx2 < measureList[idx].length; idx2++) {
                            measureList[idx][idx2] = undefined;
                        }
                    }
                    else { //else this is the (potential) beginning
                        beginMultiRestMeasure = sourceMeasure;
                        multiRestCount = 1;
                    }
                }
                else { //not multirest measure
                    if (multiRestCount > 1) { //Actual multirest sequence just happened. Process
                        beginMultiRestMeasure.multipleRestMeasures = multiRestCount;
                        //regen graphical measures for this source measure
                        const graphicalMeasures = this.createGraphicalMeasuresForSourceMeasure(beginMultiRestMeasure, accidentalCalculators, lyricWords, openOctaveShifts, activeClefs);
                        measureList[beginMultiRestMeasure.measureListIndex] = graphicalMeasures;
                        multiRestCount = 0;
                        beginMultiRestMeasure = undefined;
                    }
                    else { //had a potential multirest sequence, but didn't pan out. only one measure was rests
                        multiRestCount = 0;
                        beginMultiRestMeasure = undefined;
                    }
                }
            }
            //If we reached the end of the sheet and have pending multirest measure, process
            if (multiRestCount > 1) {
                beginMultiRestMeasure.multipleRestMeasures = multiRestCount;
                beginMultiRestMeasure.isReducedToMultiRest = true;
                //regen graphical measures for this source measure
                const graphicalMeasures = this.createGraphicalMeasuresForSourceMeasure(beginMultiRestMeasure, accidentalCalculators, lyricWords, openOctaveShifts, activeClefs);
                measureList[beginMultiRestMeasure.measureListIndex] = graphicalMeasures;
                multiRestCount = 0;
                beginMultiRestMeasure = undefined;
            }
        }
        const staffIsPercussionArray = activeClefs.map(clef => (clef.ClefType === ClefInstruction_1.ClefEnum.percussion));
        this.handleStaffEntries(staffIsPercussionArray);
        this.calculateVerticalContainersList();
        this.setIndicesToVerticalGraphicalContainers();
    }
    /**
     * The main method for the Calculator.
     */
    calculate() {
        this.musicSystems = [];
        this.clearSystemsAndMeasures();
        // delete graphicalObjects (currently: ties) that will be recalculated, newly create GraphicalObjects streching over a single StaffEntry
        this.clearRecreatedObjects();
        // this.graphicalMusicSheet.initializeActiveClefs(); // could have been changed since last render?
        this.createGraphicalTies();
        // calculate SheetLabelBoundingBoxes
        this.calculateSheetLabelBoundingBoxes();
        this.calculateXLayout(this.graphicalMusicSheet, this.maxInstrNameLabelLength());
        // create List<MusicPage>
        this.graphicalMusicSheet.MusicPages.length = 0;
        // create new MusicSystems and StaffLines (as many as necessary) and populate them with Measures from measureList
        this.calculateMusicSystems();
        // Add some white space at the end of the piece:
        //this.graphicalMusicSheet.MusicPages[0].PositionAndShape.BorderMarginBottom += 9;
        // transform Relative to Absolute Positions
        //This is called for each measure in calculate music systems (calculateLines -> calculateSkyBottomLines)
        GraphicalMusicSheet_1.GraphicalMusicSheet.transformRelativeToAbsolutePosition(this.graphicalMusicSheet);
    }
    calculateXLayout(graphicalMusicSheet, maxInstrNameLabelLength) {
        // for each inner List in big Measure List calculate new Positions for the StaffEntries
        // and adjust Measures sizes
        // calculate max measure length for maximum zoom in.
        var _a;
        // let minLength: number = 0; // currently unused
        // const maxInstructionsLength: number = this.rules.MaxInstructionsConstValue;
        if (this.graphicalMusicSheet.MeasureList.length > 0) {
            /** list of vertically ordered measures belonging to one bar */
            let measures = this.graphicalMusicSheet.MeasureList[0];
            let minimumStaffEntriesWidth = this.calculateMeasureXLayout(measures);
            minimumStaffEntriesWidth = this.calculateMeasureWidthFromStaffEntries(measures, minimumStaffEntriesWidth);
            MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, minimumStaffEntriesWidth);
            // minLength = minimumStaffEntriesWidth * 1.2 + maxInstrNameLabelLength + maxInstructionsLength;
            let maxWidth = 0;
            for (let i = 0; i < this.graphicalMusicSheet.MeasureList.length; i++) {
                measures = this.graphicalMusicSheet.MeasureList[i];
                minimumStaffEntriesWidth = this.calculateMeasureXLayout(measures);
                minimumStaffEntriesWidth = this.calculateMeasureWidthFromStaffEntries(measures, minimumStaffEntriesWidth);
                if (minimumStaffEntriesWidth > maxWidth) {
                    maxWidth = minimumStaffEntriesWidth;
                }
                //console.log(`min width for measure ${measures[0].MeasureNumber}: ${minimumStaffEntriesWidth}`);
                MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, minimumStaffEntriesWidth);
                // minLength = Math.max(minLength, minimumStaffEntriesWidth * 1.2 + maxInstructionsLength);
            }
            if (this.rules.FixedMeasureWidth) {
                // experimental: use the same measure width for all measures
                //   here we take the maximum measure width for now,
                //   otherwise Vexflow's layout can get completely messed up and place everything on top of each other,
                //   if it gets less width than it says it needs as a minimum for a measure. (formatter.preCalculateMinTotalWidth)
                let targetWidth = maxWidth;
                if (this.rules.FixedMeasureWidthFixedValue) {
                    targetWidth = this.rules.FixedMeasureWidthFixedValue;
                }
                for (let i = 0; i < this.graphicalMusicSheet.MeasureList.length; i++) {
                    measures = this.graphicalMusicSheet.MeasureList[i];
                    if (!this.rules.FixedMeasureWidthUseForPickupMeasures && ((_a = measures[0]) === null || _a === void 0 ? void 0 : _a.parentSourceMeasure.ImplicitMeasure)) {
                        // note that measures[0] is undefined for multi-measure rests
                        continue;
                    }
                    MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, targetWidth);
                }
            }
        }
        // this.graphicalMusicSheet.MinAllowedSystemWidth = minLength; // currently unused
    }
    calculateMeasureWidthFromStaffEntries(measuresVertical, oldMinimumStaffEntriesWidth) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    formatMeasures() {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Calculates the x layout of the staff entries within the staff measures belonging to one source measure.
     * All staff entries are x-aligned throughout all the measures.
     * @param measures - The minimum required x width of the source measure
     */
    calculateMeasureXLayout(measures) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Called for every source measure when generating the list of staff measures for it.
     */
    initGraphicalMeasuresCreation() {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    handleBeam(graphicalNote, beam, openBeams) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Check if the tied graphical note belongs to any beams or tuplets and react accordingly.
     * @param tiedGraphicalNote
     * @param beams
     * @param activeClef
     * @param octaveShiftValue
     * @param graphicalStaffEntry
     * @param duration
     * @param openTie
     * @param isLastTieNote
     */
    handleTiedGraphicalNote(tiedGraphicalNote, beams, activeClef, octaveShiftValue, graphicalStaffEntry, duration, openTie, isLastTieNote) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    handleVoiceEntryLyrics(voiceEntry, graphicalStaffEntry, openLyricWords) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    handleVoiceEntryOrnaments(ornamentContainer, voiceEntry, graphicalStaffEntry) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    handleVoiceEntryArticulations(articulations, voiceEntry, staffEntry) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Adds a technical instruction at the given staff entry.
     * @param technicalInstructions
     * @param voiceEntry
     * @param staffEntry
     */
    handleVoiceEntryTechnicalInstructions(technicalInstructions, voiceEntry, staffEntry) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    handleTuplet(graphicalNote, tuplet, openTuplets) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    layoutVoiceEntry(voiceEntry, graphicalNotes, graphicalStaffEntry, hasPitchedNote) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    layoutStaffEntry(graphicalStaffEntry) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    createGraphicalTie(tie, startGse, endGse, startNote, endNote) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    updateStaffLineBorders(staffLine) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Iterate through all Measures and calculates the MeasureNumberLabels.
     * @param musicSystem
     */
    calculateMeasureNumberPlacement(musicSystem) {
        const staffLine = musicSystem.StaffLines[0];
        if (!staffLine || !staffLine.Measures[0]) {
            loglevel_1.default.warn("calculateMeasureNumberPlacement: measure undefined for system.Id " + musicSystem.Id);
            return; // TODO apparently happens in script sometimes (mp #70)
        }
        let previousMeasureNumber = staffLine.Measures[0].MeasureNumber;
        let labelOffsetX = 0;
        for (let i = 0; i < staffLine.Measures.length; i++) {
            const measure = staffLine.Measures[i];
            let skip = this.rules.RenderMeasureNumbersOnlyAtSystemStart && i > 1;
            if (i === 1 && staffLine.Measures[0].parentSourceMeasure.ImplicitMeasure) {
                skip = false; // if the first measure (i=0) is a pickup measure, we shouldn't skip measure number 1 (i=1)
            }
            if (skip) {
                return; // no more measures number labels need to be rendered for this system, so we can just return instead of continue.
            }
            if (measure.MeasureNumber === 0 || measure.MeasureNumber === 1) {
                previousMeasureNumber = measure.MeasureNumber;
                // for the first measure, this label still needs to be created. Afterwards, this variable will hold the previous label's measure number.
            }
            if (measure !== staffLine.Measures[0] && this.rules.MeasureNumberLabelXOffset) {
                labelOffsetX = this.rules.MeasureNumberLabelXOffset;
            }
            else {
                labelOffsetX = 0; // don't offset label for first measure in staffline
            }
            const isFirstMeasureAndNotPrintedOne = this.rules.UseXMLMeasureNumbers &&
                measure.MeasureNumber === 1 && measure.parentSourceMeasure.getPrintedMeasureNumber() !== 1;
            if ((measure.MeasureNumber === previousMeasureNumber ||
                measure.MeasureNumber >= previousMeasureNumber + this.rules.MeasureNumberLabelOffset) &&
                !measure.parentSourceMeasure.ImplicitMeasure ||
                isFirstMeasureAndNotPrintedOne) {
                if (measure.MeasureNumber !== 1 ||
                    (measure.MeasureNumber === 1 && measure !== staffLine.Measures[0]) ||
                    isFirstMeasureAndNotPrintedOne) {
                    this.calculateSingleMeasureNumberPlacement(measure, staffLine, musicSystem, labelOffsetX);
                }
                previousMeasureNumber = measure.MeasureNumber;
            }
        }
    }
    /// <summary>
    /// This method calculates a single MeasureNumberLabel and adds it to the graphical label list of the music system
    /// </summary>
    /// <param name="measure"></param>
    /// <param name="staffLine"></param>
    /// <param name="musicSystem"></param>
    calculateSingleMeasureNumberPlacement(measure, staffLine, musicSystem, labelOffsetX = 0) {
        const labelNumber = measure.parentSourceMeasure.getPrintedMeasureNumber().toString();
        const label = new Label_1.Label(labelNumber);
        // maybe give rules as argument instead of just setting fontStyle and maybe other settings manually afterwards
        const graphicalLabel = new GraphicalLabel_1.GraphicalLabel(label, this.rules.MeasureNumberLabelHeight, TextAlignment_1.TextAlignmentEnum.LeftBottom, this.rules);
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        // calculate LabelBoundingBox and set PSI parent
        graphicalLabel.setLabelPositionAndShapeBorders();
        graphicalLabel.PositionAndShape.Parent = musicSystem.PositionAndShape;
        // calculate relative Position
        const relativeX = staffLine.PositionAndShape.RelativePosition.x +
            measure.PositionAndShape.RelativePosition.x - graphicalLabel.PositionAndShape.BorderMarginLeft +
            labelOffsetX;
        let relativeY;
        // and the corresponding SkyLine indices
        let start = relativeX;
        let end = relativeX - graphicalLabel.PositionAndShape.BorderLeft + graphicalLabel.PositionAndShape.BorderRight;
        start -= staffLine.PositionAndShape.RelativePosition.x;
        end -= staffLine.PositionAndShape.RelativePosition.x;
        // correct for hypersensitive collision checks, notes having skyline extend too far to left and right
        const startCollisionCheck = start + 0.5;
        const endCollisionCheck = end - 0.5;
        // get the minimum corresponding SkyLine value
        const skyLineMinValue = skyBottomLineCalculator.getSkyLineMinInRange(startCollisionCheck, endCollisionCheck);
        if (measure === staffLine.Measures[0]) {
            // must take into account possible MusicSystem Brackets
            let minBracketTopBorder = 0;
            if (musicSystem.GroupBrackets.length > 0) {
                for (const groupBracket of musicSystem.GroupBrackets) {
                    minBracketTopBorder = Math.min(minBracketTopBorder, groupBracket.PositionAndShape.BorderTop);
                }
            }
            else if (measure.ParentStaff.ParentInstrument.Parent) { // Parent InstrumentalGroup
                // note that GroupBracket creation is currently done after measure number creation, so we have to check it indirectly.
                minBracketTopBorder = -1;
            }
            relativeY = Math.min(skyLineMinValue, minBracketTopBorder);
        }
        else {
            relativeY = skyLineMinValue;
        }
        relativeY = Math.min(0, relativeY);
        graphicalLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(relativeX, relativeY);
        musicSystem.MeasureNumberLabels.push(graphicalLabel);
    }
    //So we can apply slurs first, then do these
    calculateMeasureNumberSkyline(musicSystem) {
        const staffLine = musicSystem.StaffLines[0];
        for (const measureNumberLabel of musicSystem.MeasureNumberLabels) {
            // and the corresponding SkyLine indices
            let start = measureNumberLabel.PositionAndShape.RelativePosition.x;
            let end = start - measureNumberLabel.PositionAndShape.BorderLeft + measureNumberLabel.PositionAndShape.BorderRight;
            start -= staffLine.PositionAndShape.RelativePosition.x;
            end -= staffLine.PositionAndShape.RelativePosition.x;
            staffLine.SkyBottomLineCalculator.updateSkyLineInRange(start, end, measureNumberLabel.PositionAndShape.RelativePosition.y + measureNumberLabel.PositionAndShape.BorderMarginTop);
        }
    }
    /**
     * Calculate the shape (Bézier curve) for this tie.
     * @param tie
     * @param tieIsAtSystemBreak
     */
    layoutGraphicalTie(tie, tieIsAtSystemBreak, isTab) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Calculate the Lyrics YPositions for a single [[StaffLine]].
     * @param staffLine
     * @param lyricVersesNumber
     */
    calculateSingleStaffLineLyricsPosition(staffLine, lyricVersesNumber) {
        let numberOfVerses = 0;
        let lyricsStartYPosition = this.rules.StaffHeight; // Add offset to prevent collision
        const relevantVerseNumbers = new Map();
        const lyricsStaffEntriesList = [];
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        // first find maximum Ycoordinate for the whole StaffLine
        let len = staffLine.Measures.length;
        for (let idx = 0; idx < len; ++idx) {
            const measure = staffLine.Measures[idx];
            const measureRelativePosition = measure.PositionAndShape.RelativePosition;
            const len2 = measure.staffEntries.length;
            for (let idx2 = 0; idx2 < len2; ++idx2) {
                const staffEntry = measure.staffEntries[idx2];
                // Collect relevant verse numbers
                const len3 = staffEntry.LyricsEntries.length;
                for (let idx3 = 0; idx3 < len3; ++idx3) {
                    const lyricsEntry = staffEntry.LyricsEntries[idx3].LyricsEntry;
                    relevantVerseNumbers[lyricsEntry.VerseNumber] = lyricsEntry.IsChorus;
                }
                if (len3 > 0) {
                    lyricsStaffEntriesList.push(staffEntry);
                    numberOfVerses = Math.max(numberOfVerses, staffEntry.LyricsEntries.length);
                    // Position of Staffentry relative to StaffLine
                    const staffEntryPositionX = staffEntry.PositionAndShape.RelativePosition.x +
                        measureRelativePosition.x;
                    let minMarginLeft = Number.MAX_VALUE;
                    let maxMarginRight = Number.MIN_VALUE;
                    // if more than one LyricEntry in StaffEntry, find minMarginLeft, maxMarginRight of all corresponding Labels
                    for (let i = 0; i < staffEntry.LyricsEntries.length; i++) {
                        const lyricsEntryLabel = staffEntry.LyricsEntries[i].GraphicalLabel;
                        minMarginLeft = Math.min(minMarginLeft, staffEntryPositionX + lyricsEntryLabel.PositionAndShape.BorderMarginLeft);
                        maxMarginRight = Math.max(maxMarginRight, staffEntryPositionX + lyricsEntryLabel.PositionAndShape.BorderMarginRight);
                    }
                    // check BottomLine in this range and take the maximum between the two values
                    const bottomLineMax = skyBottomLineCalculator.getBottomLineMaxInRange(minMarginLeft, maxMarginRight);
                    lyricsStartYPosition = Math.max(lyricsStartYPosition, bottomLineMax + this.rules.LyricsYMarginToBottomLine);
                }
            }
        }
        let maxPosition = 0;
        // iterate again through the Staffentries with LyricEntries
        len = lyricsStaffEntriesList.length;
        for (const staffEntry of lyricsStaffEntriesList) {
            // Filter verse numbers
            const filteredLyricVersesNumber = [];
            let isChorus = true;
            for (let i = 0; i < staffEntry.LyricsEntries.length; i++) {
                isChorus && (isChorus = staffEntry.LyricsEntries[i].LyricsEntry.IsChorus);
            }
            for (const lyricVerseNumber of lyricVersesNumber) {
                if (relevantVerseNumbers[lyricVerseNumber] === isChorus) {
                    filteredLyricVersesNumber.push(lyricVerseNumber);
                }
            }
            // set LyricEntryLabel RelativePosition
            for (let i = 0; i < staffEntry.LyricsEntries.length; i++) {
                const lyricEntry = staffEntry.LyricsEntries[i];
                const lyricsEntryLabel = lyricEntry.GraphicalLabel;
                // read the verseNumber and get index of this number in the sorted LyricVerseNumbersList of Instrument
                // eg verseNumbers: 2,3,4,6 => 1,2,3,4
                const verseNumber = lyricEntry.LyricsEntry.VerseNumber;
                const sortedLyricVerseNumberIndex = filteredLyricVersesNumber.indexOf(verseNumber);
                const firstPosition = lyricsStartYPosition + this.rules.LyricsHeight + this.rules.VerticalBetweenLyricsDistance +
                    this.rules.LyricsYOffsetToStaffHeight;
                // Y-position calculated according to aforementioned mapping
                let position = firstPosition + (this.rules.VerticalBetweenLyricsDistance + this.rules.LyricsHeight) * sortedLyricVerseNumberIndex;
                if (this.leadSheet) {
                    position = 3.4 + (this.rules.VerticalBetweenLyricsDistance + this.rules.LyricsHeight) * (sortedLyricVerseNumberIndex);
                }
                const previousRelativeX = lyricsEntryLabel.PositionAndShape.RelativePosition.x;
                lyricsEntryLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(previousRelativeX, position);
                lyricsEntryLabel.Label.fontStyle = lyricEntry.LyricsEntry.FontStyle;
                maxPosition = Math.max(maxPosition, position);
            }
        }
        // update BottomLine (on the whole StaffLine's length)
        if (lyricsStaffEntriesList.length > 0) {
            const endX = staffLine.PositionAndShape.Size.width;
            let startX = lyricsStaffEntriesList[0].PositionAndShape.RelativePosition.x +
                lyricsStaffEntriesList[0].PositionAndShape.BorderMarginLeft +
                lyricsStaffEntriesList[0].parentMeasure.PositionAndShape.RelativePosition.x;
            startX = startX > endX ? endX : startX;
            skyBottomLineCalculator.updateBottomLineInRange(startX, endX, maxPosition);
        }
        return lyricsStaffEntriesList;
    }
    /**
     * calculates the dashes of lyric words and the extending underscore lines of syllables sung on more than one note.
     * @param lyricsStaffEntries
     */
    calculateLyricsExtendsAndDashes(lyricsStaffEntries) {
        // iterate again to create now the extend lines and dashes for words
        for (let idx = 0, len = lyricsStaffEntries.length; idx < len; ++idx) {
            const staffEntry = lyricsStaffEntries[idx];
            // set LyricEntryLabel RelativePosition
            for (let i = 0; i < staffEntry.LyricsEntries.length; i++) {
                const lyricEntry = staffEntry.LyricsEntries[i];
                // calculate LyricWord's Dashes and underscoreLine
                if (lyricEntry.ParentLyricWord &&
                    lyricEntry.ParentLyricWord.GraphicalLyricsEntries[lyricEntry.ParentLyricWord.GraphicalLyricsEntries.length - 1] !== lyricEntry) {
                    this.calculateSingleLyricWord(lyricEntry);
                }
                // calculate the underscore line extend if needed
                if (lyricEntry.LyricsEntry.extend) {
                    this.calculateLyricExtend(lyricEntry);
                }
            }
        }
    }
    /**
     * Calculate a single OctaveShift for a [[MultiExpression]].
     * @param sourceMeasure
     * @param multiExpression
     * @param measureIndex
     * @param staffIndex
     */
    calculateSingleOctaveShift(sourceMeasure, multiExpression, measureIndex, staffIndex) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Calculate all the textual [[RepetitionInstruction]]s (e.g. dal segno) for a single [[SourceMeasure]].
     * @param repetitionInstruction
     * @param measureIndex
     */
    calculateWordRepetitionInstruction(repetitionInstruction, measureIndex) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    /**
     * Calculate all the Mood and Unknown Expressions for a single [[MultiExpression]].
     * @param multiExpression
     * @param measureIndex
     * @param staffIndex
     */
    calculateMoodAndUnknownExpression(multiExpression, measureIndex, staffIndex) {
        var _a, _b;
        // calculate absolute Timestamp
        const absoluteTimestamp = multiExpression.AbsoluteTimestamp;
        const measures = this.graphicalMusicSheet.MeasureList[measureIndex];
        let relative = new PointF2D_1.PointF2D();
        const defaultYXml = (_a = multiExpression.UnknownList[0]) === null || _a === void 0 ? void 0 : _a.defaultYXml;
        if ((multiExpression.MoodList.length > 0) || (multiExpression.UnknownList.length > 0)) {
            let combinedExprString = "";
            for (let idx = 0, len = multiExpression.EntriesList.length; idx < len; ++idx) {
                const entry = multiExpression.EntriesList[idx];
                if (entry.prefix !== "") {
                    if (combinedExprString === "") {
                        combinedExprString += entry.prefix;
                    }
                    else {
                        combinedExprString += " " + entry.prefix;
                    }
                }
                if (combinedExprString === "") {
                    combinedExprString += entry.label;
                }
                else {
                    combinedExprString += " " + entry.label;
                }
            }
            const staffLine = measures[staffIndex].ParentStaffLine;
            if (!staffLine) {
                loglevel_1.default.debug("MusicSheetCalculator.calculateMoodAndUnknownExpression: staffLine undefined. Returning.");
                return;
            }
            relative = this.getRelativePositionInStaffLineFromTimestamp(absoluteTimestamp, staffIndex, staffLine, staffLine === null || staffLine === void 0 ? void 0 : staffLine.isPartOfMultiStaffInstrument());
            if (Math.abs(relative.x - 0) < 0.0001) {
                relative.x = measures[staffIndex].beginInstructionsWidth + this.rules.RhythmRightMargin;
            }
            const fontHeight = this.rules.UnknownTextHeight;
            const placement = multiExpression.getPlacementOfFirstEntry();
            const graphLabel = this.calculateLabel(staffLine, relative, combinedExprString, multiExpression.getFontstyleOfFirstEntry(), placement, fontHeight);
            if (this.rules.PlaceWordsInsideStafflineFromXml) {
                if (defaultYXml < 0 && defaultYXml > -50) { // within staffline
                    let newY = defaultYXml / 10; // OSMD units
                    newY += this.rules.PlaceWordsInsideStafflineYOffset;
                    graphLabel.PositionAndShape.RelativePosition.y = newY;
                }
            }
            const gue = new GraphicalUnknownExpression_1.GraphicalUnknownExpression(staffLine, graphLabel, placement, (_b = measures[staffIndex]) === null || _b === void 0 ? void 0 : _b.parentSourceMeasure, multiExpression);
            //    multiExpression); // TODO would be nice to hand over and save reference to original expression,
            //                         but MultiExpression is not an AbstractExpression.
            staffLine.AbstractExpressions.push(gue);
        }
    }
    /**
     * Delete all Objects that must be recalculated.
     * If graphicalMusicSheet.reCalculate has been called, then this method will be called to reset or remove all flexible
     * graphical music symbols (e.g. Ornaments, Lyrics, Slurs) graphicalMusicSheet will have MusicPages, they will have MusicSystems etc...
     */
    clearRecreatedObjects() {
        // Clear StaffEntries with GraphicalTies
        for (let idx = 0, len = this.staffEntriesWithGraphicalTies.length; idx < len; ++idx) {
            const staffEntriesWithGraphicalTie = this.staffEntriesWithGraphicalTies[idx];
            staffEntriesWithGraphicalTie.GraphicalTies.length = 0;
        }
        this.staffEntriesWithGraphicalTies.length = 0;
        return;
    }
    /**
     * This method handles a [[StaffEntryLink]].
     * @param graphicalStaffEntry
     * @param staffEntryLinks
     */
    handleStaffEntryLink(graphicalStaffEntry, staffEntryLinks) {
        loglevel_1.default.debug("handleStaffEntryLink not implemented");
    }
    /**
     * Store the newly computed [[Measure]]s in newly created [[MusicSystem]]s.
     */
    calculateMusicSystems() {
        if (!this.graphicalMusicSheet.MeasureList) {
            return;
        }
        const allMeasures = this.graphicalMusicSheet.MeasureList;
        if (!allMeasures) {
            return;
        }
        if (this.rules.MinMeasureToDrawIndex > allMeasures.length - 1) {
            loglevel_1.default.debug("minimum measure to draw index out of range. resetting min measure index to limit.");
            this.rules.MinMeasureToDrawIndex = allMeasures.length - 1;
        }
        // visible 2D-MeasureList
        const visibleMeasureList = [];
        for (let idx = this.rules.MinMeasureToDrawIndex, len = allMeasures.length; idx < len && idx <= this.rules.MaxMeasureToDrawIndex; ++idx) {
            const graphicalMeasures = allMeasures[idx];
            const visiblegraphicalMeasures = [];
            for (let idx2 = 0, len2 = graphicalMeasures.length; idx2 < len2; ++idx2) {
                const graphicalMeasure = allMeasures[idx][idx2];
                if (graphicalMeasure === null || graphicalMeasure === void 0 ? void 0 : graphicalMeasure.isVisible()) {
                    visiblegraphicalMeasures.push(graphicalMeasure);
                    if (this.rules.ColoringEnabled) {
                        // (re-)color notes
                        for (const staffEntry of graphicalMeasure.staffEntries) {
                            for (const gve of staffEntry.graphicalVoiceEntries) {
                                gve.color();
                            }
                        }
                    }
                }
            }
            visibleMeasureList.push(visiblegraphicalMeasures);
        }
        // find out how many StaffLine Instances we need
        let numberOfStaffLines = 0;
        for (let idx = 0, len = visibleMeasureList.length; idx < len; ++idx) {
            const gmlist = visibleMeasureList[idx];
            numberOfStaffLines = Math.max(gmlist.length, numberOfStaffLines);
            break;
        }
        if (numberOfStaffLines === 0) {
            return;
        }
        // build the MusicSystems (and StaffLines)
        const musicSystemBuilder = new MusicSystemBuilder_1.MusicSystemBuilder();
        musicSystemBuilder.initialize(this.graphicalMusicSheet, visibleMeasureList, numberOfStaffLines);
        this.musicSystems = musicSystemBuilder.buildMusicSystems();
        this.formatMeasures();
        // check for Measures with only WholeRestNotes and correct their X-Position (middle of Measure)
        // this.checkMeasuresForWholeRestNotes(); // this currently does nothing
        if (!this.leadSheet) {
            // calculate Beam Placement
            // this.calculateBeams(); // does nothing for now, because layoutBeams() is an empty method
            // possible Displacement of RestNotes
            this.optimizeRestPlacement();
            // possible Displacement of RestNotes
            this.calculateStaffEntryArticulationMarks();
            if (this.rules.RenderSlurs) { // technically we should separate slurs and ties, but shouldn't be relevant for now
                // calculate Ties
                this.calculateTieCurves();
            }
        }
        // calculate Sky- and BottomLine
        // will have reasonable values only between ObjectsBorders (eg StaffEntries)
        this.calculateSkyBottomLines();
        // calculate TupletsNumbers
        this.calculateTupletNumbers();
        // calculate MeasureNumbers
        if (this.rules.RenderMeasureNumbers) {
            for (let idx = 0, len = this.musicSystems.length; idx < len; ++idx) {
                const musicSystem = this.musicSystems[idx];
                this.calculateMeasureNumberPlacement(musicSystem);
            }
        }
        this.calculateFingerings(); // if this is done after slurs, fingerings can be on top of slurs
        // calculate Slurs
        if (!this.leadSheet && this.rules.RenderSlurs) {
            this.calculateSlurs();
        }
        this.calculateGlissandi();
        //Calculate measure number skyline AFTER slurs
        if (this.rules.RenderMeasureNumbers) {
            for (let idx = 0, len = this.musicSystems.length; idx < len; ++idx) {
                const musicSystem = this.musicSystems[idx];
                this.calculateMeasureNumberSkyline(musicSystem);
            }
        }
        // calculate StaffEntry Ornaments
        // (must come after Slurs)
        if (!this.leadSheet) {
            this.calculateOrnaments();
        }
        // calculate StaffEntry ChordSymbols
        this.calculateChordSymbols();
        if (!this.leadSheet) {
            // calculate all Instantaneous/Continuous Dynamics Expressions
            this.calculateDynamicExpressions();
            // calculate all Mood and Unknown Expression
            this.calculateMoodAndUnknownExpressions();
            // Calculate the alignment of close expressions
            this.calculateExpressionAlignements();
            // calculate all OctaveShifts
            this.calculateOctaveShifts();
            if (this.rules.RenderPedals) {
                // calculate all Pedal Expressions
                this.calculatePedals();
            }
            // calcualte RepetitionInstructions (Dal Segno, Coda, etc)
            this.calculateWordRepetitionInstructions();
        }
        // calculate endings last, so they appear above measure numbers
        this.calculateRepetitionEndings();
        // calcualte all Tempo Expressions
        if (!this.leadSheet) {
            this.calculateTempoExpressions();
        }
        this.calculateRehearsalMarks();
        // calculate all LyricWords Positions
        this.calculateLyricsPosition();
        // update all StaffLine's Borders
        // create temporary Object, just to call the methods (in order to avoid declaring them static)
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const musicSystem = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
                const staffLine = musicSystem.StaffLines[idx3];
                this.updateStaffLineBorders(staffLine);
            }
        }
        // calculate Y-spacing -> MusicPages are created here
        musicSystemBuilder.calculateSystemYLayout();
        // calculate Comments for each Staffline
        this.calculateComments();
        // calculate marked Areas for Systems
        this.calculateMarkedAreas();
        // the following must be done after Y-spacing, when the MusicSystems's final Dimensions are set
        // set the final yPositions of Objects such as SystemLabels and SystemLinesContainers,
        // create all System Lines, Brackets and MeasureNumbers (for all systems and for all pages)
        for (let idx = 0, len = this.graphicalMusicSheet.MusicPages.length; idx < len; ++idx) {
            const graphicalMusicPage = this.graphicalMusicSheet.MusicPages[idx];
            for (let idx2 = 0, len2 = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {
                const isFirstSystem = idx === 0 && idx2 === 0;
                const musicSystem = graphicalMusicPage.MusicSystems[idx2];
                musicSystem.setMusicSystemLabelsYPosition();
                if (!this.leadSheet) {
                    musicSystem.setYPositionsToVerticalLineObjectsAndCreateLines(this.rules);
                    musicSystem.createSystemLeftLine(this.rules.SystemThinLineWidth, this.rules.SystemLabelsRightMargin, isFirstSystem);
                    musicSystem.createInstrumentBrackets(this.graphicalMusicSheet.ParentMusicSheet.Instruments, this.rules.StaffHeight);
                    musicSystem.createGroupBrackets(this.graphicalMusicSheet.ParentMusicSheet.InstrumentalGroups, this.rules.StaffHeight, 0);
                    musicSystem.alignBeginInstructions();
                }
                else if (musicSystem === musicSystem.Parent.MusicSystems[0]) {
                    musicSystem.createSystemLeftLine(this.rules.SystemThinLineWidth, this.rules.SystemLabelsRightMargin, isFirstSystem);
                }
                musicSystem.calculateBorders(this.rules);
            }
            const distance = graphicalMusicPage.MusicSystems[0].PositionAndShape.BorderTop;
            for (let idx2 = 0, len2 = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {
                const musicSystem = graphicalMusicPage.MusicSystems[idx2];
                // let newPosition: PointF2D = new PointF2D(musicSystem.PositionAndShape.RelativePosition.x,
                // musicSystem.PositionAndShape.RelativePosition.y - distance);
                musicSystem.PositionAndShape.RelativePosition =
                    new PointF2D_1.PointF2D(musicSystem.PositionAndShape.RelativePosition.x, musicSystem.PositionAndShape.RelativePosition.y - distance);
            }
            // add ActivitySymbolClickArea - currently unused, extends boundingbox of MusicSystem unnecessarily -> PageRightMargin 0 impossible
            // for (let idx2: number = 0, len2: number = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {
            //     const musicSystem: MusicSystem = graphicalMusicPage.MusicSystems[idx2];
            //     for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
            //         const staffLine: StaffLine = musicSystem.StaffLines[idx3];
            //         staffLine.addActivitySymbolClickArea();
            //     }
            // }
            // calculate TopBottom Borders for all elements recursively
            //   necessary for composer label (page labels) for high notes in first system
            graphicalMusicPage.PositionAndShape.calculateTopBottomBorders();
            // TODO how much performance does this cost? can we reduce the amount of calculations, e.g. only checking top?
            // calculate all Labels's Positions for the first Page
            if (graphicalMusicPage === this.graphicalMusicSheet.MusicPages[0]) {
                this.calculatePageLabels(graphicalMusicPage);
            }
            // calculate TopBottom Borders for all elements recursively
            graphicalMusicPage.PositionAndShape.calculateTopBottomBorders(); // this is where top bottom borders were originally calculated (only once)
        }
    }
    calculateMarkedAreas() {
        //log.debug("calculateMarkedAreas not implemented");
        return;
    }
    calculateComments() {
        //log.debug("calculateComments not implemented");
        return;
    }
    calculateChordSymbols() {
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                const skybottomcalculator = staffLine.SkyBottomLineCalculator;
                let minimumOffset = Number.MAX_SAFE_INTEGER; // only calculated if option set
                if (this.rules.ChordSymbolYAlignment && this.rules.ChordSymbolYAlignmentScope === "staffline") {
                    // get the max y position of all chord symbols in the staffline in advance
                    const alignmentScopedStaffEntries = [];
                    for (const measure of staffLine.Measures) {
                        alignmentScopedStaffEntries.push(...measure.staffEntries);
                    }
                    minimumOffset = this.calculateAlignedChordSymbolsOffset(alignmentScopedStaffEntries, skybottomcalculator);
                }
                for (const measure of staffLine.Measures) {
                    if (this.rules.ChordSymbolYAlignment && this.rules.ChordSymbolYAlignmentScope === "measure") {
                        minimumOffset = this.calculateAlignedChordSymbolsOffset(measure.staffEntries, skybottomcalculator);
                    }
                    for (const staffEntry of measure.staffEntries) {
                        if (!staffEntry.graphicalChordContainers || staffEntry.graphicalChordContainers.length === 0) {
                            continue;
                        }
                        for (let i = 0; i < staffEntry.graphicalChordContainers.length; i++) {
                            const graphicalChordContainer = staffEntry.graphicalChordContainers[i];
                            const sps = staffEntry.PositionAndShape;
                            const gps = graphicalChordContainer.PositionAndShape;
                            const start = gps.BorderMarginLeft + sps.AbsolutePosition.x;
                            const end = gps.BorderMarginRight + sps.AbsolutePosition.x;
                            if (!this.rules.ChordSymbolYAlignment || minimumOffset > 0) {
                                //minimumOffset = this.calculateAlignedChordSymbolsOffset([staffEntry], skybottomcalculator);
                                minimumOffset = skybottomcalculator.getSkyLineMinInRange(start, end); // same as above, less code executed
                            }
                            let yShift = 0;
                            if (i === 0) {
                                yShift += this.rules.ChordSymbolYOffset;
                                yShift += 0.1; // above is a bit closer to the notes than below ones for some reason
                            }
                            else {
                                yShift += this.rules.ChordSymbolYPadding;
                            }
                            yShift *= -1;
                            const gLabel = graphicalChordContainer.GraphicalLabel;
                            gLabel.PositionAndShape.RelativePosition.y = minimumOffset + yShift;
                            gLabel.setLabelPositionAndShapeBorders();
                            gLabel.PositionAndShape.calculateBoundingBox();
                            skybottomcalculator.updateSkyLineInRange(start, end, minimumOffset + gLabel.PositionAndShape.BorderMarginTop);
                        }
                    }
                }
            }
        }
    }
    calculateAlignedChordSymbolsOffset(staffEntries, sbc) {
        let minimumOffset = Number.MAX_SAFE_INTEGER;
        for (const staffEntry of staffEntries) {
            for (const graphicalChordContainer of staffEntry.graphicalChordContainers) {
                const sps = staffEntry.PositionAndShape;
                const gps = graphicalChordContainer.PositionAndShape;
                const start = gps.BorderMarginLeft + sps.AbsolutePosition.x;
                const end = gps.BorderMarginRight + sps.AbsolutePosition.x;
                minimumOffset = Math.min(minimumOffset, sbc.getSkyLineMinInRange(start, end));
            }
        }
        return minimumOffset;
    }
    /**
     * Do layout on staff measures which only consist of a full rest.
     * @param rest
     * @param gse
     * @param measure
     */
    layoutMeasureWithWholeRest(rest, gse, measure) {
        return;
    }
    layoutBeams(staffEntry) {
        return;
    }
    layoutArticulationMarks(articulations, voiceEntry, graphicalStaffEntry) {
        return;
    }
    layoutOrnament(ornaments, voiceEntry, graphicalStaffEntry) {
        return;
    }
    calculateRestNotePlacementWithinGraphicalBeam(graphicalStaffEntry, restNote, previousNote, nextStaffEntry, nextNote) {
        return;
    }
    calculateTupletNumbers() {
        if (!this.rules.TupletNumberLimitConsecutiveRepetitions) {
            return;
        }
        let currentTupletNumber = -1;
        let currentTypeLength = undefined;
        let consecutiveTupletCount = 0;
        let currentTuplet = undefined;
        let skipTuplet = undefined; // if set, ignore (further) handling of this tuplet
        const disabledPerVoice = {};
        for (const instrument of this.graphicalMusicSheet.ParentMusicSheet.Instruments) {
            for (const voice of instrument.Voices) {
                consecutiveTupletCount = 0; // reset for next voice
                disabledPerVoice[voice.VoiceId] = {};
                for (const ve of voice.VoiceEntries) {
                    if (ve.Notes.length > 0) {
                        const firstNote = ve.Notes[0];
                        if (!firstNote.NoteTuplet ||
                            firstNote.NoteTuplet.shouldBeBracketed(this.rules.TupletsBracketedUseXMLValue, this.rules.TupletsBracketed, this.rules.TripletsBracketed)) {
                            // don't disable tuplet numbers under these conditions, reset consecutive tuplet count
                            currentTupletNumber = -1;
                            consecutiveTupletCount = 0;
                            currentTuplet = undefined;
                            currentTypeLength = undefined;
                            continue;
                        }
                        if (firstNote.NoteTuplet === skipTuplet) {
                            continue;
                        }
                        let typeLength = firstNote.TypeLength;
                        if (!typeLength) {
                            // shouldn't happen, now that rest notes have TypeLength set too, see VoiceGenerator.addRestNote(), addSingleNote()
                            //   see test_tuplets_starting_with_rests_layout.mxl (first measure bass)
                            loglevel_1.default.warn("note missing TypeLength");
                            typeLength = firstNote.NoteTuplet.Fractions[0];
                        }
                        if (firstNote.NoteTuplet !== currentTuplet) {
                            if (disabledPerVoice[voice.VoiceId][firstNote.NoteTuplet.TupletLabelNumber]) {
                                if (disabledPerVoice[voice.VoiceId][firstNote.NoteTuplet.TupletLabelNumber][typeLength.RealValue]) {
                                    firstNote.NoteTuplet.RenderTupletNumber = false;
                                    skipTuplet = firstNote.NoteTuplet;
                                    continue;
                                }
                            }
                        }
                        if (firstNote.NoteTuplet.TupletLabelNumber !== currentTupletNumber ||
                            !typeLength.Equals(currentTypeLength) ||
                            firstNote.NoteTuplet.Bracket) {
                            currentTupletNumber = firstNote.NoteTuplet.TupletLabelNumber;
                            currentTypeLength = typeLength;
                            consecutiveTupletCount = 0;
                        }
                        currentTuplet = firstNote.NoteTuplet;
                        consecutiveTupletCount++;
                        if (consecutiveTupletCount <= this.rules.TupletNumberMaxConsecutiveRepetitions) {
                            firstNote.NoteTuplet.RenderTupletNumber = true; // need to re-activate after re-render when it was set to false
                        }
                        if (consecutiveTupletCount > this.rules.TupletNumberMaxConsecutiveRepetitions) {
                            firstNote.NoteTuplet.RenderTupletNumber = false;
                            if (this.rules.TupletNumberAlwaysDisableAfterFirstMax) {
                                if (!disabledPerVoice[voice.VoiceId][currentTupletNumber]) {
                                    disabledPerVoice[voice.VoiceId][currentTupletNumber] = {};
                                }
                                disabledPerVoice[voice.VoiceId][currentTupletNumber][typeLength.RealValue] = true;
                            }
                        }
                        skipTuplet = currentTuplet;
                    }
                }
            }
        }
        return;
    }
    calculateSlurs() {
        return;
    }
    calculateGlissandi() {
        return;
    }
    calculateDynamicExpressionsForMultiExpression(multiExpression, measureIndex, staffIndex) {
        return;
    }
    /**
     * This method calculates the RelativePosition of a single verbal GraphicalContinuousDynamic.
     * @param graphicalContinuousDynamic Graphical continous dynamic to be calculated
     * @param startPosInStaffline Starting point in staff line
     */
    calculateGraphicalVerbalContinuousDynamic(graphicalContinuousDynamic, startPosInStaffline) {
        // if ContinuousDynamicExpression is given from words
        const graphLabel = graphicalContinuousDynamic.Label;
        const left = startPosInStaffline.x + graphLabel.PositionAndShape.BorderMarginLeft;
        const right = startPosInStaffline.x + graphLabel.PositionAndShape.BorderMarginRight;
        // placement always below the currentStaffLine, with the exception of Voice Instrument (-> above)
        const placement = graphicalContinuousDynamic.ContinuousDynamic.Placement;
        const staffLine = graphicalContinuousDynamic.ParentStaffLine;
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        let drawingHeight;
        if (placement === AbstractExpression_1.PlacementEnum.Below) {
            drawingHeight = skyBottomLineCalculator.getBottomLineMaxInRange(left, right); // Bottom line
            graphLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(startPosInStaffline.x, drawingHeight - graphLabel.PositionAndShape.BorderMarginTop);
        }
        else {
            drawingHeight = skyBottomLineCalculator.getSkyLineMinInRange(left, right);
            graphLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(startPosInStaffline.x, drawingHeight - graphLabel.PositionAndShape.BorderMarginBottom);
        }
    }
    /**
     * This method calculates the RelativePosition of a single GraphicalContinuousDynamic.
     * @param graphicalContinuousDynamic Graphical continous dynamic to be calculated
     * @param startPosInStaffline Starting point in staff line
     */
    calculateGraphicalContinuousDynamic(graphicalContinuousDynamic, startPosInStaffline) {
        var _a;
        const isSoftAccent = graphicalContinuousDynamic.IsSoftAccent;
        const staffIndex = graphicalContinuousDynamic.ParentStaffLine.ParentStaff.idInMusicSheet;
        // TODO: Previously the staffIndex was passed down. BUT you can (and this function actually does this) get it from
        // the musicSystem OR from the ParentStaffLine. Is this the same index?
        // const staffIndex: number = musicSystem.StaffLines.indexOf(staffLine);
        // We know we have an end measure because otherwise we won't be called
        const endMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(graphicalContinuousDynamic.ContinuousDynamic.EndMultiExpression.SourceMeasureParent, staffIndex);
        if (!endMeasure) {
            loglevel_1.default.warn("MusicSheetCalculator.calculateGraphicalContinuousDynamic: No endMeasure found");
            return;
        }
        graphicalContinuousDynamic.EndMeasure = endMeasure;
        const staffLine = graphicalContinuousDynamic.ParentStaffLine;
        const endStaffLine = endMeasure.ParentStaffLine;
        // check if Expression spreads over the same StaffLine or not
        const sameStaffLine = endStaffLine && staffLine === endStaffLine;
        let isPartOfMultiStaffInstrument = false;
        if (endStaffLine) { // unfortunately we can't do something like (endStaffLine?.check() || staffLine?.check()) in this typescript version
            isPartOfMultiStaffInstrument = endStaffLine === null || endStaffLine === void 0 ? void 0 : endStaffLine.isPartOfMultiStaffInstrument();
        }
        else if (staffLine) {
            isPartOfMultiStaffInstrument = staffLine === null || staffLine === void 0 ? void 0 : staffLine.isPartOfMultiStaffInstrument();
        }
        const endAbsoluteTimestamp = Fraction_1.Fraction.createFromFraction(graphicalContinuousDynamic.ContinuousDynamic.EndMultiExpression.AbsoluteTimestamp);
        const container = this.graphicalMusicSheet.GetVerticalContainerFromTimestamp(endAbsoluteTimestamp);
        const parentMeasure = container.getFirstNonNullStaffEntry().parentMeasure;
        const endOfMeasure = parentMeasure.PositionAndShape.AbsolutePosition.x + parentMeasure.PositionAndShape.BorderRight;
        let maxNoteLength = new Fraction_1.Fraction(0, 0, 0);
        for (const staffEntry of container.StaffEntries) {
            const currentMaxLength = (_a = staffEntry === null || staffEntry === void 0 ? void 0 : staffEntry.sourceStaffEntry) === null || _a === void 0 ? void 0 : _a.calculateMaxNoteLength(false);
            if (currentMaxLength === null || currentMaxLength === void 0 ? void 0 : currentMaxLength.gt(maxNoteLength)) {
                maxNoteLength = currentMaxLength;
            }
        }
        const useStaffEntryBorderLeft = !isSoftAccent &&
            graphicalContinuousDynamic.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.diminuendo;
        const endPosInStaffLine = this.getRelativePositionInStaffLineFromTimestamp(endAbsoluteTimestamp, staffIndex, endStaffLine, isPartOfMultiStaffInstrument, 0, useStaffEntryBorderLeft);
        const beginOfNextNote = Fraction_1.Fraction.plus(endAbsoluteTimestamp, maxNoteLength);
        // TODO for the last note of the piece (wedge ending after last note), this timestamp is incorrect, being after the last note
        //   but there's a workaround in getRelativePositionInStaffLineFromTimestamp() via the variable endAfterRightStaffEntry
        const nextNotePosInStaffLine = this.getRelativePositionInStaffLineFromTimestamp(beginOfNextNote, staffIndex, endStaffLine, isPartOfMultiStaffInstrument, 0, graphicalContinuousDynamic.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.diminuendo);
        const wedgePadding = this.rules.SoftAccentWedgePadding;
        const staffEntryWidth = container.getFirstNonNullStaffEntry().PositionAndShape.Size.width; // staff entry widths for whole notes is too long
        const sizeFactor = this.rules.SoftAccentSizeFactor;
        //const standardWidth: number = 2;
        //If the next note position is not on the next staffline
        //extend close to the next note
        if (isSoftAccent) {
            //startPosInStaffline.x -= 1;
            startPosInStaffline.x -= staffEntryWidth / 2 * sizeFactor + wedgePadding;
            endPosInStaffLine.x = startPosInStaffline.x + staffEntryWidth / 2 * sizeFactor;
        }
        else if (nextNotePosInStaffLine.x > endPosInStaffLine.x && nextNotePosInStaffLine.x < endOfMeasure) {
            endPosInStaffLine.x += (nextNotePosInStaffLine.x - endPosInStaffLine.x) / this.rules.WedgeEndDistanceBetweenTimestampsFactor;
        }
        else { //Otherwise extend to the end of the measure
            endPosInStaffLine.x = endOfMeasure - this.rules.WedgeHorizontalMargin;
        }
        const startCollideBox = this.dynamicExpressionMap.get(graphicalContinuousDynamic.ContinuousDynamic.StartMultiExpression.AbsoluteTimestamp.RealValue);
        if (startCollideBox) {
            startPosInStaffline.x = startCollideBox.RelativePosition.x + startCollideBox.BorderMarginRight + this.rules.WedgeHorizontalMargin;
        }
        //currentMusicSystem and currentStaffLine
        const musicSystem = staffLine.ParentMusicSystem;
        const currentStaffLineIndex = musicSystem.StaffLines.indexOf(staffLine);
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        // let expressionIndex: number;
        // placement always below the currentStaffLine, with the exception of Voice Instrument (-> above)
        const placement = graphicalContinuousDynamic.ContinuousDynamic.Placement;
        // if ContinuousDynamicExpression is given from wedge
        let secondGraphicalContinuousDynamic = undefined;
        // last length check
        if (sameStaffLine && endPosInStaffLine.x - startPosInStaffline.x < this.rules.WedgeMinLength && !isSoftAccent) {
            endPosInStaffLine.x = startPosInStaffline.x + this.rules.WedgeMinLength;
        }
        // Upper staff wedge always starts at the given position and the lower staff wedge always starts at the begin of measure
        const upperStartX = startPosInStaffline.x;
        let lowerStartX = endStaffLine.Measures[0].beginInstructionsWidth - this.rules.WedgeHorizontalMargin - 2;
        //TODO fix this when a range of measures to draw is given that doesn't include all the dynamic's measures (e.g. for crescendo)
        let upperEndX = 0;
        let lowerEndX = 0;
        if (!sameStaffLine) {
            upperEndX = staffLine.PositionAndShape.Size.width;
            lowerEndX = endPosInStaffLine.x;
            // must create a new Wedge
            secondGraphicalContinuousDynamic = new GraphicalContinuousDynamicExpression_1.GraphicalContinuousDynamicExpression(graphicalContinuousDynamic.ContinuousDynamic, endStaffLine, endMeasure.parentSourceMeasure);
            secondGraphicalContinuousDynamic.IsSplittedPart = true;
            graphicalContinuousDynamic.IsSplittedPart = true;
        }
        else {
            upperEndX = endPosInStaffLine.x;
        }
        if (isSoftAccent) {
            // secondGraphicalContinuousDynamic = new GraphicalContinuousDynamicExpression(
            //     graphicalContinuousDynamic.ContinuousDynamic,
            //     graphicalContinuousDynamic.ParentStaffLine,
            //     graphicalContinuousDynamic.StartMeasure.parentSourceMeasure
            // );
            // secondGraphicalContinuousDynamic.StartIsEnd = true;
            // doesn't work well with secondGraphicalDynamic, positions/rendering messed up
            lowerStartX = endPosInStaffLine.x + wedgePadding;
            lowerEndX = lowerStartX + staffEntryWidth / 2 * sizeFactor;
        }
        // the Height of the Expression's placement
        let idealY = 0;
        let secondIdealY = 0;
        if (placement === AbstractExpression_1.PlacementEnum.Below) {
            // can be a single Staff Instrument or an Instrument with 2 Staves
            let nextStaffLineIndex = 0;
            if (currentStaffLineIndex < musicSystem.StaffLines.length - 1) {
                nextStaffLineIndex = currentStaffLineIndex + 1;
            }
            // check, maybe currentStaffLine is the last of the MusicSystem (and it has a ContinuousDynamicExpression with placement below)
            if (nextStaffLineIndex > currentStaffLineIndex) {
                // currentStaffLine isn't the last of the MusicSystem
                const nextStaffLine = musicSystem.StaffLines[nextStaffLineIndex];
                const distanceBetweenStaffLines = nextStaffLine.PositionAndShape.RelativePosition.y -
                    staffLine.PositionAndShape.RelativePosition.y -
                    this.rules.StaffHeight;
                // ideal Height is exactly between the two StaffLines
                idealY = this.rules.StaffHeight + distanceBetweenStaffLines / 2;
            }
            else {
                // currentStaffLine is the MusicSystem's last
                idealY = this.rules.WedgePlacementBelowY;
            }
            // must consider the upperWedge starting/ending tip for the comparison with the BottomLine
            idealY -= this.rules.WedgeOpeningLength / 2;
            if (!sameStaffLine) {
                // Set the value for the splitted y position to the ideal position before we check and modify it with
                // the skybottom calculator detection
                secondIdealY = idealY;
            }
            // must check BottomLine for possible collisions within the Length of the Expression
            // find the corresponding max value for the given Length
            let maxBottomLineValueForExpressionLength = skyBottomLineCalculator.getBottomLineMaxInRange(upperStartX, upperEndX);
            // if collisions, then set the Height accordingly
            if (maxBottomLineValueForExpressionLength > idealY) {
                idealY = maxBottomLineValueForExpressionLength;
            }
            // special case - wedge must be drawn within the boundaries of a crossedBeam
            const withinCrossedBeam = false;
            if (currentStaffLineIndex < musicSystem.StaffLines.length - 1) {
                // find GraphicalStaffEntries closest to wedge's xPositions
                const closestToEndStaffEntry = staffLine.findClosestStaffEntry(upperEndX);
                const closestToStartStaffEntry = staffLine.findClosestStaffEntry(upperStartX);
                if (closestToStartStaffEntry && closestToEndStaffEntry) {
                    // must check both StaffLines
                    const startVerticalContainer = closestToStartStaffEntry.parentVerticalContainer;
                    // const endVerticalContainer: VerticalGraphicalStaffEntryContainer = closestToEndStaffEntry.parentVerticalContainer;
                    if (startVerticalContainer) {
                        // TODO: Needs to be implemented?
                        // withinCrossedBeam = areStaffEntriesWithinCrossedBeam(startVerticalContainer,
                        // endVerticalContainer, currentStaffLineIndex, nextStaffLineIndex);
                    }
                    if (withinCrossedBeam) {
                        const nextStaffLine = musicSystem.StaffLines[nextStaffLineIndex];
                        const nextStaffLineMinSkyLineValue = nextStaffLine.SkyBottomLineCalculator.getSkyLineMinInRange(upperStartX, upperEndX);
                        const distanceBetweenStaffLines = nextStaffLine.PositionAndShape.RelativePosition.y -
                            staffLine.PositionAndShape.RelativePosition.y;
                        const relativeSkyLineHeight = distanceBetweenStaffLines + nextStaffLineMinSkyLineValue;
                        if (relativeSkyLineHeight - this.rules.WedgeOpeningLength > this.rules.StaffHeight) {
                            idealY = relativeSkyLineHeight - this.rules.WedgeVerticalMargin;
                        }
                        else {
                            idealY = this.rules.StaffHeight + this.rules.WedgeOpeningLength;
                        }
                        graphicalContinuousDynamic.NotToBeRemoved = true;
                    }
                }
            }
            // do the same in case of a Wedge ending at another StaffLine
            if (!sameStaffLine) {
                maxBottomLineValueForExpressionLength = endStaffLine.SkyBottomLineCalculator.getBottomLineMaxInRange(lowerStartX, lowerEndX);
                if (maxBottomLineValueForExpressionLength > secondIdealY) {
                    secondIdealY = maxBottomLineValueForExpressionLength;
                }
                secondIdealY += this.rules.WedgeOpeningLength / 2;
                secondIdealY += this.rules.WedgeVerticalMargin;
            }
            if (!withinCrossedBeam) {
                idealY += this.rules.WedgeOpeningLength / 2;
                idealY += this.rules.WedgeVerticalMargin;
            }
        }
        else if (placement === AbstractExpression_1.PlacementEnum.Above) {
            // single Staff Instrument (eg Voice)
            if (staffLine.ParentStaff.ParentInstrument.Staves.length === 1) {
                // single Staff Voice Instrument
                idealY = this.rules.WedgePlacementAboveY;
            }
            else {
                // Staff = not the first Staff of a 2-staved Instrument
                let previousStaffLineIndex = 0;
                if (currentStaffLineIndex > 0) {
                    previousStaffLineIndex = currentStaffLineIndex - 1;
                }
                const previousStaffLine = musicSystem.StaffLines[previousStaffLineIndex];
                const distanceBetweenStaffLines = staffLine.PositionAndShape.RelativePosition.y -
                    previousStaffLine.PositionAndShape.RelativePosition.y -
                    this.rules.StaffHeight;
                // ideal Height is exactly between the two StaffLines
                idealY = -distanceBetweenStaffLines / 2;
            }
            // must consider the upperWedge starting/ending tip for the comparison with the SkyLine
            idealY += this.rules.WedgeOpeningLength / 2;
            if (!sameStaffLine) {
                secondIdealY = idealY;
            }
            // must check SkyLine for possible collisions within the Length of the Expression
            // find the corresponding min value for the given Length
            let minSkyLineValueForExpressionLength = skyBottomLineCalculator.getSkyLineMinInRange(upperStartX, upperEndX);
            // if collisions, then set the Height accordingly
            if (minSkyLineValueForExpressionLength < idealY) {
                idealY = minSkyLineValueForExpressionLength;
            }
            const withinCrossedBeam = false;
            // special case - wedge must be drawn within the boundaries of a crossedBeam
            if (staffLine.ParentStaff.ParentInstrument.Staves.length > 1 && currentStaffLineIndex > 0) {
                // find GraphicalStaffEntries closest to wedge's xPositions
                const closestToStartStaffEntry = staffLine.findClosestStaffEntry(upperStartX);
                const closestToEndStaffEntry = staffLine.findClosestStaffEntry(upperEndX);
                if (closestToStartStaffEntry && closestToEndStaffEntry) {
                    // must check both StaffLines
                    const startVerticalContainer = closestToStartStaffEntry.parentVerticalContainer;
                    // const endVerticalContainer: VerticalGraphicalStaffEntryContainer = closestToEndStaffEntry.parentVerticalContainer;
                    const formerStaffLineIndex = currentStaffLineIndex - 1;
                    if (startVerticalContainer) {
                        // withinCrossedBeam = this.areStaffEntriesWithinCrossedBeam(startVerticalContainer,
                        // endVerticalContainer, currentStaffLineIndex, formerStaffLineIndex);
                    }
                    if (withinCrossedBeam) {
                        const formerStaffLine = musicSystem.StaffLines[formerStaffLineIndex];
                        const formerStaffLineMaxBottomLineValue = formerStaffLine.SkyBottomLineCalculator.
                            getBottomLineMaxInRange(upperStartX, upperEndX);
                        const distanceBetweenStaffLines = staffLine.PositionAndShape.RelativePosition.y -
                            formerStaffLine.PositionAndShape.RelativePosition.y;
                        const relativeSkyLineHeight = distanceBetweenStaffLines - formerStaffLineMaxBottomLineValue;
                        idealY = (relativeSkyLineHeight - this.rules.StaffHeight) / 2 + this.rules.StaffHeight;
                    }
                }
            }
            // do the same in case of a Wedge ending at another StaffLine
            if (!sameStaffLine) {
                minSkyLineValueForExpressionLength = endStaffLine.SkyBottomLineCalculator.getSkyLineMinInRange(lowerStartX, lowerEndX);
                if (minSkyLineValueForExpressionLength < secondIdealY) {
                    secondIdealY = minSkyLineValueForExpressionLength;
                }
                secondIdealY -= this.rules.WedgeOpeningLength / 2;
            }
            if (!withinCrossedBeam) {
                idealY -= this.rules.WedgeOpeningLength / 2;
                idealY -= this.rules.WedgeVerticalMargin;
            }
            if (!sameStaffLine) {
                secondIdealY -= this.rules.WedgeVerticalMargin;
            }
        }
        // now we have the correct placement Height for the Expression
        // the idealY is calculated relative to the currentStaffLine
        // Crescendo (point to the left, opening to the right)
        graphicalContinuousDynamic.Lines.clear();
        if (graphicalContinuousDynamic.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.crescendo) {
            if (isSoftAccent) {
                graphicalContinuousDynamic.createFirstHalfCrescendoLines(upperStartX, upperEndX, idealY);
                graphicalContinuousDynamic.createSecondHalfDiminuendoLines(lowerStartX, lowerEndX, idealY);
                graphicalContinuousDynamic.calcPsi();
                // secondGraphicalContinuousDynamic.createSecondHalfDiminuendoLines(lowerStartX, lowerEndX, idealY);
                // secondGraphicalContinuousDynamic.calcPsi();
            }
            else if (sameStaffLine && !isSoftAccent) {
                graphicalContinuousDynamic.createCrescendoLines(upperStartX, upperEndX, idealY);
                graphicalContinuousDynamic.calcPsi();
            }
            else {
                // two different Wedges
                graphicalContinuousDynamic.createFirstHalfCrescendoLines(upperStartX, upperEndX, idealY);
                graphicalContinuousDynamic.calcPsi();
                secondGraphicalContinuousDynamic.createSecondHalfCrescendoLines(lowerStartX, lowerEndX, secondIdealY);
                secondGraphicalContinuousDynamic.calcPsi();
            }
        }
        else if (graphicalContinuousDynamic.ContinuousDynamic.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum.diminuendo) {
            if (sameStaffLine) {
                graphicalContinuousDynamic.createDiminuendoLines(upperStartX, upperEndX, idealY);
                graphicalContinuousDynamic.calcPsi();
            }
            else {
                graphicalContinuousDynamic.createFirstHalfDiminuendoLines(upperStartX, upperEndX, idealY);
                graphicalContinuousDynamic.calcPsi();
                secondGraphicalContinuousDynamic.createSecondHalfDiminuendoLines(lowerStartX, lowerEndX, secondIdealY);
                secondGraphicalContinuousDynamic.calcPsi();
            }
        } //End Diminuendo
        this.dynamicExpressionMap.set(endAbsoluteTimestamp.RealValue, graphicalContinuousDynamic.PositionAndShape);
    }
    /**
     * This method calculates the RelativePosition of a single GraphicalInstantaneousDynamicExpression.
     * @param graphicalInstantaneousDynamic Dynamic expression to be calculated
     * @param startPosInStaffline Starting point in staff line
     */
    calculateGraphicalInstantaneousDynamicExpression(graphicalInstantaneousDynamic, startPosInStaffline, timestamp) {
        // get Margin Dimensions
        const staffLine = graphicalInstantaneousDynamic.ParentStaffLine;
        if (!staffLine) {
            return; // TODO can happen when drawing range modified (osmd.setOptions({drawFromMeasureNumber...}))
        }
        const left = startPosInStaffline.x + graphicalInstantaneousDynamic.PositionAndShape.BorderMarginLeft;
        const right = startPosInStaffline.x + graphicalInstantaneousDynamic.PositionAndShape.BorderMarginRight;
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        let yPosition = 0;
        // calculate yPosition according to Placement
        if (graphicalInstantaneousDynamic.Placement === AbstractExpression_1.PlacementEnum.Above) {
            const skyLineValue = skyBottomLineCalculator.getSkyLineMinInRange(left, right);
            // if StaffLine part of multiStaff Instrument and not the first one, ideal yPosition middle of distance between Staves
            if (staffLine.isPartOfMultiStaffInstrument() && staffLine.ParentStaff !== staffLine.ParentStaff.ParentInstrument.Staves[0]) {
                const formerStaffLine = staffLine.ParentMusicSystem.StaffLines[staffLine.ParentMusicSystem.StaffLines.indexOf(staffLine) - 1];
                const difference = staffLine.PositionAndShape.RelativePosition.y -
                    formerStaffLine.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;
                // take always into account the size of the Dynamic
                if (skyLineValue > -difference / 2) {
                    yPosition = -difference / 2;
                }
                else {
                    yPosition = skyLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginBottom;
                }
            }
            else {
                yPosition = skyLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginBottom;
            }
            graphicalInstantaneousDynamic.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(startPosInStaffline.x, yPosition);
        }
        else if (graphicalInstantaneousDynamic.Placement === AbstractExpression_1.PlacementEnum.Below) {
            const bottomLineValue = skyBottomLineCalculator.getBottomLineMaxInRange(left, right);
            // if StaffLine part of multiStaff Instrument and not the last one, ideal yPosition middle of distance between Staves
            const lastStaff = staffLine.ParentStaff.ParentInstrument.Staves[staffLine.ParentStaff.ParentInstrument.Staves.length - 1];
            if (staffLine.isPartOfMultiStaffInstrument() && staffLine.ParentStaff !== lastStaff) {
                const nextStaffLine = staffLine.ParentMusicSystem.StaffLines[staffLine.ParentMusicSystem.StaffLines.indexOf(staffLine) + 1];
                const difference = nextStaffLine.PositionAndShape.RelativePosition.y -
                    staffLine.PositionAndShape.RelativePosition.y - this.rules.StaffHeight;
                const border = graphicalInstantaneousDynamic.PositionAndShape.BorderMarginBottom;
                // take always into account the size of the Dynamic
                if (bottomLineValue + border < this.rules.StaffHeight + difference / 2) {
                    yPosition = this.rules.StaffHeight + difference / 2;
                }
                else {
                    yPosition = bottomLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginTop;
                }
            }
            else {
                yPosition = bottomLineValue - graphicalInstantaneousDynamic.PositionAndShape.BorderMarginTop;
            }
            graphicalInstantaneousDynamic.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(startPosInStaffline.x, yPosition);
        }
        graphicalInstantaneousDynamic.updateSkyBottomLine();
    }
    calcGraphicalRepetitionEndingsRecursively(repetition) {
        return;
    }
    /**
     * Calculate a single GraphicalRepetition.
     * @param start
     * @param end
     * @param numberText
     * @param offset
     * @param leftOpen
     * @param rightOpen
     */
    layoutSingleRepetitionEnding(start, end, numberText, offset, leftOpen, rightOpen) {
        return;
    }
    calculateLabel(staffLine, relative, combinedString, style, placement, fontHeight, textAlignment = TextAlignment_1.TextAlignmentEnum.CenterBottom, yPadding = 0) {
        const label = new Label_1.Label(combinedString, textAlignment);
        label.fontStyle = style;
        label.fontHeight = fontHeight;
        // TODO_RR: TextHeight from first Entry
        const graphLabel = new GraphicalLabel_1.GraphicalLabel(label, fontHeight, label.textAlignment, this.rules, staffLine.PositionAndShape);
        const marginFactor = 1.1;
        if (placement === AbstractExpression_1.PlacementEnum.Below) {
            graphLabel.Label.textAlignment = TextAlignment_1.TextAlignmentEnum.LeftTop;
        }
        graphLabel.setLabelPositionAndShapeBorders();
        graphLabel.PositionAndShape.BorderMarginBottom *= marginFactor;
        graphLabel.PositionAndShape.BorderMarginTop *= marginFactor;
        graphLabel.PositionAndShape.BorderMarginLeft *= marginFactor;
        graphLabel.PositionAndShape.BorderMarginRight *= marginFactor;
        let left = relative.x + graphLabel.PositionAndShape.BorderMarginLeft;
        let right = relative.x + graphLabel.PositionAndShape.BorderMarginRight;
        // check if GraphicalLabel exceeds the StaffLine's borders.
        if (right > staffLine.PositionAndShape.Size.width) {
            right = staffLine.PositionAndShape.Size.width - this.rules.MeasureRightMargin;
            left = right - graphLabel.PositionAndShape.MarginSize.width;
            relative.x = left - graphLabel.PositionAndShape.BorderMarginLeft;
        }
        // find allowed position (where the Label can be positioned) from Sky- BottomLine
        let drawingHeight;
        const skyBottomLineCalculator = staffLine.SkyBottomLineCalculator;
        if (placement === AbstractExpression_1.PlacementEnum.Below) {
            drawingHeight = skyBottomLineCalculator.getBottomLineMaxInRange(left, right) + yPadding;
        }
        else {
            drawingHeight = skyBottomLineCalculator.getSkyLineMinInRange(left, right) - yPadding;
        }
        // set RelativePosition
        graphLabel.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(relative.x, drawingHeight);
        // update Sky- BottomLine
        if (placement === AbstractExpression_1.PlacementEnum.Below) {
            skyBottomLineCalculator.updateBottomLineInRange(left, right, graphLabel.PositionAndShape.BorderMarginBottom + drawingHeight);
        }
        else {
            skyBottomLineCalculator.updateSkyLineInRange(left, right, graphLabel.PositionAndShape.BorderMarginTop + drawingHeight);
        }
        return graphLabel;
    }
    calculateTempoExpressionsForMultiTempoExpression(sourceMeasure, multiTempoExpression, measureIndex) {
        // calculate absolute Timestamp
        const absoluteTimestamp = Fraction_1.Fraction.plus(sourceMeasure.AbsoluteTimestamp, multiTempoExpression.Timestamp);
        const measures = this.graphicalMusicSheet.MeasureList[measureIndex];
        let relative = new PointF2D_1.PointF2D();
        if (multiTempoExpression.ContinuousTempo || multiTempoExpression.InstantaneousTempo) {
            // TempoExpressions always on the first visible System's StaffLine // TODO is it though?
            if (this.rules.MinMeasureToDrawIndex > 0) {
                return; // assuming that the tempo is always in measure 1 (idx 0), adding the expression causes issues when we don't draw measure 1
            }
            if (!measures[0]) {
                return;
            }
            let staffLine = measures[0].ParentStaffLine;
            let firstVisibleMeasureX = measures[0].PositionAndShape.RelativePosition.x;
            let verticalIndex = 0;
            for (let j = 0; j < measures.length; j++) {
                if (!measures[j].ParentStaffLine || measures[j].ParentStaffLine.Measures.length === 0) {
                    continue;
                }
                if (measures[j].ParentStaffLine.Measures.length > 0) {
                    staffLine = measures[j].ParentStaffLine;
                    firstVisibleMeasureX = measures[j].PositionAndShape.RelativePosition.x;
                    verticalIndex = j;
                    break;
                }
            }
            relative = this.getRelativePositionInStaffLineFromTimestamp(absoluteTimestamp, verticalIndex, staffLine, staffLine.isPartOfMultiStaffInstrument(), firstVisibleMeasureX);
            // also placement Above
            if (multiTempoExpression.EntriesList.length > 0 &&
                multiTempoExpression.EntriesList[0].Expression instanceof InstantaneousTempoExpression_1.InstantaneousTempoExpression) {
                const instantaniousTempo = multiTempoExpression.EntriesList[0].Expression;
                instantaniousTempo.Placement = AbstractExpression_1.PlacementEnum.Above;
                // if an InstantaniousTempoExpression exists at the very beginning then
                // check if expression is positioned at first ever StaffEntry and
                // check if MusicSystem is first MusicSystem
                if (staffLine.Measures[0].staffEntries.length > 0 &&
                    Math.abs(relative.x - staffLine.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x) === 0 &&
                    staffLine.ParentMusicSystem === this.musicSystems[0]) {
                    const firstInstructionEntry = staffLine.Measures[0].FirstInstructionStaffEntry;
                    if (firstInstructionEntry) {
                        const lastInstruction = firstInstructionEntry.GraphicalInstructions.last();
                        relative.x = lastInstruction.PositionAndShape.RelativePosition.x;
                    }
                    if (this.rules.CompactMode) {
                        relative.x = staffLine.PositionAndShape.RelativePosition.x +
                            staffLine.Measures[0].PositionAndShape.RelativePosition.x;
                    }
                }
            }
            // const addAtLastList: GraphicalObject[] = [];
            for (const entry of multiTempoExpression.EntriesList) {
                let textAlignment = TextAlignment_1.TextAlignmentEnum.CenterBottom;
                if (this.rules.CompactMode) {
                    textAlignment = TextAlignment_1.TextAlignmentEnum.LeftBottom;
                }
                const graphLabel = this.calculateLabel(staffLine, relative, entry.label, multiTempoExpression.getFontstyleOfFirstEntry(), entry.Expression.Placement, this.rules.UnknownTextHeight, textAlignment, this.rules.TempoYSpacing);
                if (entry.Expression instanceof InstantaneousTempoExpression_1.InstantaneousTempoExpression) {
                    //already added?
                    for (const expr of staffLine.AbstractExpressions) {
                        if (expr instanceof GraphicalInstantaneousTempoExpression_1.GraphicalInstantaneousTempoExpression &&
                            expr.SourceExpression.Label === entry.Expression.Label) {
                            //already added
                            continue;
                        }
                    }
                    const graphicalTempoExpr = new GraphicalInstantaneousTempoExpression_1.GraphicalInstantaneousTempoExpression(entry.Expression, graphLabel);
                    if (!graphicalTempoExpr.ParentStaffLine) {
                        loglevel_1.default.warn("Adding staffline didn't work");
                        // I am actually fooling the linter here and use the created object. This method needs refactoring,
                        // all graphical expression creations should be in one place and have basic stuff like labels, lines, ...
                        // in their constructor
                    }
                    // in case of metronome mark:
                    if (this.rules.MetronomeMarksDrawn) {
                        if (entry.Expression.Enum === InstantaneousTempoExpression_1.TempoEnum.metronomeMark) {
                            this.createMetronomeMark(entry.Expression);
                            continue;
                        }
                    }
                }
                else if (entry.Expression instanceof ContinuousTempoExpression_1.ContinuousTempoExpression) {
                    for (const expr of staffLine.AbstractExpressions) {
                        if (expr instanceof GraphicalInstantaneousTempoExpression_1.GraphicalInstantaneousTempoExpression &&
                            expr.SourceExpression.Label === entry.Expression.Label) {
                            continue; // already added
                        }
                    }
                    // TODO maybe create GraphicalContinuousTempoExpression class,
                    //   though the ContinuousTempoExpressions we have currently behave the same graphically (accelerando, ritardando, etc).
                    //   The behavior difference rather affects playback (e.g. ritardando, which gradually changes tempo)
                    staffLine.AbstractExpressions.push(new GraphicalInstantaneousTempoExpression_1.GraphicalInstantaneousTempoExpression(entry.Expression, graphLabel));
                }
            }
        }
    }
    createMetronomeMark(metronomeExpression) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    graphicalMeasureCreatedCalculations(measure) {
        return;
    }
    clearSystemsAndMeasures() {
        for (let idx = 0, len = this.graphicalMusicSheet.MusicPages.length; idx < len; ++idx) {
            const graphicalMusicPage = this.graphicalMusicSheet.MusicPages[idx];
            for (let idx2 = 0, len2 = graphicalMusicPage.MusicSystems.length; idx2 < len2; ++idx2) {
                const musicSystem = graphicalMusicPage.MusicSystems[idx2];
                for (let idx3 = 0, len3 = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
                    const staffLine = musicSystem.StaffLines[idx3];
                    for (let idx4 = 0, len4 = staffLine.Measures.length; idx4 < len4; ++idx4) {
                        const graphicalMeasure = staffLine.Measures[idx4];
                        if (graphicalMeasure.FirstInstructionStaffEntry) {
                            const index = graphicalMeasure.PositionAndShape.ChildElements.indexOf(graphicalMeasure.FirstInstructionStaffEntry.PositionAndShape);
                            if (index > -1) {
                                graphicalMeasure.PositionAndShape.ChildElements.splice(index, 1);
                            }
                            graphicalMeasure.FirstInstructionStaffEntry = undefined;
                            graphicalMeasure.beginInstructionsWidth = 0.0;
                        }
                        if (graphicalMeasure.LastInstructionStaffEntry) {
                            const index = graphicalMeasure.PositionAndShape.ChildElements.indexOf(graphicalMeasure.LastInstructionStaffEntry.PositionAndShape);
                            if (index > -1) {
                                graphicalMeasure.PositionAndShape.ChildElements.splice(index, 1);
                            }
                            graphicalMeasure.LastInstructionStaffEntry = undefined;
                            graphicalMeasure.endInstructionsWidth = 0.0;
                        }
                    }
                    staffLine.Measures = [];
                    staffLine.PositionAndShape.ChildElements = [];
                }
                musicSystem.StaffLines.length = 0;
                musicSystem.PositionAndShape.ChildElements = [];
            }
            graphicalMusicPage.MusicSystems = [];
            graphicalMusicPage.PositionAndShape.ChildElements = [];
        }
        this.graphicalMusicSheet.MusicPages = [];
    }
    handleVoiceEntry(voiceEntry, graphicalStaffEntry, accidentalCalculator, openLyricWords, activeClef, openTuplets, openBeams, octaveShiftValue, staffIndex, linkedNotes = undefined, sourceStaffEntry = undefined) {
        if (voiceEntry.StemDirectionXml !== VoiceEntry_1.StemDirectionType.Undefined &&
            this.rules.SetWantedStemDirectionByXml &&
            voiceEntry.StemDirectionXml !== undefined) {
            voiceEntry.WantedStemDirection = voiceEntry.StemDirectionXml;
        }
        else {
            this.calculateStemDirectionFromVoices(voiceEntry);
        }
        // if GraphicalStaffEntry has been created earlier (because of Tie), then the GraphicalNotesLists have also been created
        const gve = graphicalStaffEntry.findOrCreateGraphicalVoiceEntry(voiceEntry);
        gve.octaveShiftValue = octaveShiftValue;
        // check for Tabs:
        const tabStaffEntry = graphicalStaffEntry.tabStaffEntry;
        let graphicalTabVoiceEntry;
        if (tabStaffEntry) {
            graphicalTabVoiceEntry = tabStaffEntry.findOrCreateGraphicalVoiceEntry(voiceEntry);
        }
        for (let idx = 0, len = voiceEntry.Notes.length; idx < len; ++idx) {
            const note = voiceEntry.Notes[idx];
            if (!note) {
                continue;
            }
            if (sourceStaffEntry !== undefined && sourceStaffEntry.Link !== undefined && linkedNotes !== undefined && linkedNotes.indexOf(note) > -1) {
                continue;
            }
            let graphicalNote;
            if (voiceEntry.IsGrace) {
                graphicalNote = MusicSheetCalculator.symbolFactory.createGraceNote(note, gve, activeClef, this.rules, octaveShiftValue);
            }
            else {
                graphicalNote = MusicSheetCalculator.symbolFactory.createNote(note, gve, activeClef, octaveShiftValue, this.rules, undefined);
                MusicSheetCalculator.stafflineNoteCalculator.trackNote(graphicalNote);
            }
            if (note.Pitch) {
                this.checkNoteForAccidental(graphicalNote, accidentalCalculator, activeClef, octaveShiftValue);
            }
            this.resetYPositionForLeadSheet(graphicalNote.PositionAndShape);
            graphicalStaffEntry.addGraphicalNoteToListAtCorrectYPosition(gve, graphicalNote);
            graphicalNote.PositionAndShape.calculateBoundingBox();
            if (!this.leadSheet) {
                if (note.NoteBeam !== undefined && note.PrintObject) {
                    this.handleBeam(graphicalNote, note.NoteBeam, openBeams);
                }
                if (note.NoteTuplet !== undefined && note.PrintObject) {
                    this.handleTuplet(graphicalNote, note.NoteTuplet, openTuplets);
                }
            }
            // handle TabNotes:
            if (graphicalTabVoiceEntry) {
                // notes should be either TabNotes or RestNotes -> add all:
                const graphicalTabNote = MusicSheetCalculator.symbolFactory.createNote(note, graphicalTabVoiceEntry, activeClef, octaveShiftValue, this.rules, undefined);
                tabStaffEntry.addGraphicalNoteToListAtCorrectYPosition(graphicalTabVoiceEntry, graphicalTabNote);
                graphicalTabNote.PositionAndShape.calculateBoundingBox();
                if (!this.leadSheet) {
                    if (note.NoteTuplet) {
                        this.handleTuplet(graphicalTabNote, note.NoteTuplet, openTuplets);
                    }
                }
            }
        }
        if (voiceEntry.Articulations.length > 0) {
            this.handleVoiceEntryArticulations(voiceEntry.Articulations, voiceEntry, graphicalStaffEntry);
        }
        if (voiceEntry.TechnicalInstructions.length > 0) {
            this.handleVoiceEntryTechnicalInstructions(voiceEntry.TechnicalInstructions, voiceEntry, graphicalStaffEntry);
        }
        if (voiceEntry.LyricsEntries.size() > 0) {
            this.handleVoiceEntryLyrics(voiceEntry, graphicalStaffEntry, openLyricWords);
        }
        if (voiceEntry.OrnamentContainer) {
            this.handleVoiceEntryOrnaments(voiceEntry.OrnamentContainer, voiceEntry, graphicalStaffEntry);
        }
        return octaveShiftValue;
    }
    resetYPositionForLeadSheet(psi) {
        if (this.leadSheet) {
            psi.RelativePosition = new PointF2D_1.PointF2D(psi.RelativePosition.x, 0.0);
        }
    }
    layoutVoiceEntries(graphicalStaffEntry, staffIndex) {
        graphicalStaffEntry.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, 0.0);
        if (!this.leadSheet) {
            for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
                const graphicalNotes = gve.notes;
                if (graphicalNotes.length === 0) {
                    continue;
                }
                const voiceEntry = graphicalNotes[0].sourceNote.ParentVoiceEntry;
                const hasPitchedNote = graphicalNotes[0].sourceNote.Pitch !== undefined;
                this.layoutVoiceEntry(voiceEntry, graphicalNotes, graphicalStaffEntry, hasPitchedNote);
            }
        }
    }
    maxInstrNameLabelLength() {
        var _a;
        let maxLabelLength = 0.0;
        for (const instrument of this.graphicalMusicSheet.ParentMusicSheet.Instruments) {
            if (((_a = instrument.NameLabel) === null || _a === void 0 ? void 0 : _a.print) && instrument.Voices.length > 0 && instrument.Voices[0].Visible) {
                let renderedLabel = instrument.NameLabel;
                if (!this.rules.RenderPartNames) {
                    renderedLabel = new Label_1.Label("", renderedLabel.textAlignment, renderedLabel.font);
                }
                const graphicalLabel = new GraphicalLabel_1.GraphicalLabel(renderedLabel, this.rules.InstrumentLabelTextHeight, TextAlignment_1.TextAlignmentEnum.LeftCenter, this.rules);
                graphicalLabel.setLabelPositionAndShapeBorders();
                maxLabelLength = Math.max(maxLabelLength, graphicalLabel.PositionAndShape.MarginSize.width);
            }
        }
        if (!this.rules.RenderPartNames) {
            return 0;
        }
        return maxLabelLength;
    }
    calculateSheetLabelBoundingBoxes() {
        const musicSheet = this.graphicalMusicSheet.ParentMusicSheet;
        const defaultColorTitle = this.rules.DefaultColorTitle; // can be undefined => black
        if (musicSheet.Title !== undefined && this.rules.RenderTitle) {
            const title = new GraphicalLabel_1.GraphicalLabel(musicSheet.Title, this.rules.SheetTitleHeight, TextAlignment_1.TextAlignmentEnum.CenterBottom, this.rules);
            title.Label.IsCreditLabel = true;
            title.Label.colorDefault = defaultColorTitle;
            this.graphicalMusicSheet.Title = title;
            title.setLabelPositionAndShapeBorders();
        }
        else if (!this.rules.RenderTitle) {
            this.graphicalMusicSheet.Title = undefined; // clear label if rendering it was disabled after last render
        }
        if (musicSheet.Subtitle !== undefined && this.rules.RenderSubtitle) {
            const subtitle = new GraphicalLabel_1.GraphicalLabel(musicSheet.Subtitle, this.rules.SheetSubtitleHeight, TextAlignment_1.TextAlignmentEnum.CenterCenter, this.rules);
            subtitle.Label.IsCreditLabel = true;
            subtitle.Label.colorDefault = defaultColorTitle;
            this.graphicalMusicSheet.Subtitle = subtitle;
            subtitle.setLabelPositionAndShapeBorders();
        }
        else if (!this.rules.RenderSubtitle) {
            this.graphicalMusicSheet.Subtitle = undefined;
        }
        if (musicSheet.Composer !== undefined && this.rules.RenderComposer) {
            const composer = new GraphicalLabel_1.GraphicalLabel(musicSheet.Composer, this.rules.SheetComposerHeight, TextAlignment_1.TextAlignmentEnum.RightCenter, this.rules);
            composer.Label.IsCreditLabel = true;
            composer.Label.colorDefault = defaultColorTitle;
            this.graphicalMusicSheet.Composer = composer;
            composer.setLabelPositionAndShapeBorders();
        }
        else if (!this.rules.RenderComposer) {
            this.graphicalMusicSheet.Composer = undefined;
        }
        if (musicSheet.Lyricist !== undefined && this.rules.RenderLyricist) {
            const lyricist = new GraphicalLabel_1.GraphicalLabel(musicSheet.Lyricist, this.rules.SheetAuthorHeight, TextAlignment_1.TextAlignmentEnum.LeftCenter, this.rules);
            lyricist.Label.IsCreditLabel = true;
            lyricist.Label.colorDefault = defaultColorTitle;
            this.graphicalMusicSheet.Lyricist = lyricist;
            lyricist.setLabelPositionAndShapeBorders();
        }
        else if (!this.rules.RenderLyricist) {
            this.graphicalMusicSheet.Lyricist = undefined;
        }
        if (musicSheet.Copyright !== undefined && this.rules.RenderCopyright) {
            const copyright = new GraphicalLabel_1.GraphicalLabel(musicSheet.Copyright, this.rules.SheetCopyrightHeight, TextAlignment_1.TextAlignmentEnum.CenterBottom, this.rules);
            copyright.Label.IsCreditLabel = true;
            copyright.Label.colorDefault = defaultColorTitle;
            this.graphicalMusicSheet.Copyright = copyright;
            copyright.setLabelPositionAndShapeBorders();
        }
        else if (!this.rules.RenderCopyright) {
            this.graphicalMusicSheet.Copyright = undefined;
        }
    }
    checkMeasuresForWholeRestNotes() {
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const musicSystem = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
                const staffLine = musicSystem.StaffLines[idx3];
                for (let idx4 = 0, len4 = staffLine.Measures.length; idx4 < len4; ++idx4) {
                    const measure = staffLine.Measures[idx4];
                    if (measure.staffEntries.length === 1) {
                        const gse = measure.staffEntries[0];
                        if (gse.graphicalVoiceEntries.length > 0 && gse.graphicalVoiceEntries[0].notes.length === 1) {
                            const graphicalNote = gse.graphicalVoiceEntries[0].notes[0];
                            if (!graphicalNote.sourceNote.Pitch && (new Fraction_1.Fraction(1, 2)).lt(graphicalNote.sourceNote.Length)) {
                                this.layoutMeasureWithWholeRest(graphicalNote, gse, measure);
                            }
                        }
                    }
                }
            }
        }
    }
    optimizeRestNotePlacement(graphicalStaffEntry, measure) {
        if (graphicalStaffEntry.graphicalVoiceEntries.length === 0) {
            return;
        }
        const voice1Notes = graphicalStaffEntry.graphicalVoiceEntries[0].notes;
        if (voice1Notes.length === 0) {
            return;
        }
        const voice1Note1 = voice1Notes[0];
        const voice1Note1IsRest = voice1Note1.sourceNote.isRest();
        if (graphicalStaffEntry.graphicalVoiceEntries.length === 2) {
            let voice2Note1IsRest = false;
            const voice2Notes = graphicalStaffEntry.graphicalVoiceEntries[1].notes;
            if (voice2Notes.length > 0) {
                const voice2Note1 = voice2Notes[0];
                voice2Note1IsRest = voice2Note1.sourceNote.isRest();
            }
            if (voice1Note1IsRest && voice2Note1IsRest) {
                this.calculateTwoRestNotesPlacementWithCollisionDetection(graphicalStaffEntry);
            }
            else if (voice1Note1IsRest || voice2Note1IsRest) {
                this.calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote(graphicalStaffEntry);
            }
        }
        else if (voice1Note1IsRest && graphicalStaffEntry !== measure.staffEntries[0] &&
            graphicalStaffEntry !== measure.staffEntries[measure.staffEntries.length - 1]) {
            const staffEntryIndex = measure.staffEntries.indexOf(graphicalStaffEntry);
            const previousStaffEntry = measure.staffEntries[staffEntryIndex - 1];
            const nextStaffEntry = measure.staffEntries[staffEntryIndex + 1];
            if (previousStaffEntry.graphicalVoiceEntries.length === 1) {
                const previousNote = previousStaffEntry.graphicalVoiceEntries[0].notes[0];
                if (previousNote.sourceNote.NoteBeam !== undefined && nextStaffEntry.graphicalVoiceEntries.length === 1) {
                    const nextNote = nextStaffEntry.graphicalVoiceEntries[0].notes[0];
                    if (nextNote.sourceNote.NoteBeam !== undefined && previousNote.sourceNote.NoteBeam === nextNote.sourceNote.NoteBeam) {
                        this.calculateRestNotePlacementWithinGraphicalBeam(graphicalStaffEntry, voice1Note1, previousNote, nextStaffEntry, nextNote);
                        graphicalStaffEntry.PositionAndShape.calculateBoundingBox();
                    }
                }
            }
        }
    }
    getRelativePositionInStaffLineFromTimestamp(timestamp, verticalIndex, staffLine, multiStaffInstrument, firstVisibleMeasureRelativeX = 0.0, useLeftStaffEntryBorder = false) {
        let relative = new PointF2D_1.PointF2D();
        let leftStaffEntry = undefined;
        let rightStaffEntry = undefined;
        const numEntries = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length;
        const index = this.graphicalMusicSheet.GetInterpolatedIndexInVerticalContainers(timestamp);
        const leftIndex = Math.min(Math.floor(index), numEntries - 1);
        const rightIndex = Math.min(Math.ceil(index), numEntries - 1);
        if (leftIndex < 0 || verticalIndex < 0) {
            return relative;
        }
        leftStaffEntry = this.getFirstLeftNotNullStaffEntryFromContainer(leftIndex, verticalIndex, multiStaffInstrument);
        rightStaffEntry = this.getFirstRightNotNullStaffEntryFromContainer(rightIndex, verticalIndex, multiStaffInstrument);
        if (leftStaffEntry && rightStaffEntry) {
            let measureRelativeX = leftStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;
            if (firstVisibleMeasureRelativeX > 0) {
                measureRelativeX = firstVisibleMeasureRelativeX;
            }
            let leftX = leftStaffEntry.PositionAndShape.RelativePosition.x + measureRelativeX;
            let rightX = rightStaffEntry.PositionAndShape.RelativePosition.x + rightStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x;
            const endAfterRightStaffEntry = timestamp.RealValue > rightStaffEntry.getAbsoluteTimestamp().RealValue;
            // endAfterRightStaffEntry is an unfortunate case where the timestamp isn't correct for the last note in the piece,
            //   see test_wedge_diminuendo_duplicated.musicxml
            if (firstVisibleMeasureRelativeX > 0) {
                rightX = rightStaffEntry.PositionAndShape.RelativePosition.x + measureRelativeX;
            }
            else if (useLeftStaffEntryBorder &&
                (leftStaffEntry.getAbsoluteTimestamp().RealValue === timestamp.RealValue || endAfterRightStaffEntry)) {
                leftX = leftStaffEntry.PositionAndShape.RelativePosition.x + leftStaffEntry.PositionAndShape.BorderLeft + measureRelativeX;
                rightX = leftX;
            }
            let timestampQuotient = 0.0;
            if (leftStaffEntry !== rightStaffEntry) {
                const leftTimestamp = leftStaffEntry.getAbsoluteTimestamp();
                const rightTimestamp = rightStaffEntry.getAbsoluteTimestamp();
                const leftDifference = Fraction_1.Fraction.minus(timestamp, leftTimestamp);
                timestampQuotient = leftDifference.RealValue / Fraction_1.Fraction.minus(rightTimestamp, leftTimestamp).RealValue;
            }
            if (leftStaffEntry.parentMeasure.ParentStaffLine !== rightStaffEntry.parentMeasure.ParentStaffLine) {
                if (leftStaffEntry.parentMeasure.ParentStaffLine === staffLine) {
                    rightX = staffLine.PositionAndShape.Size.width;
                }
                else {
                    leftX = staffLine.PositionAndShape.RelativePosition.x;
                }
            }
            relative = new PointF2D_1.PointF2D(leftX + (rightX - leftX) * timestampQuotient, 0.0);
        }
        return relative;
    }
    getRelativeXPositionFromTimestamp(timestamp) {
        const numEntries = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length;
        const index = this.graphicalMusicSheet.GetInterpolatedIndexInVerticalContainers(timestamp);
        const discreteIndex = Math.max(0, Math.min(Math.round(index), numEntries - 1));
        const gse = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[discreteIndex].getFirstNonNullStaffEntry();
        const posX = gse.PositionAndShape.RelativePosition.x + gse.parentMeasure.PositionAndShape.RelativePosition.x;
        return posX;
    }
    calculatePageLabels(page) {
        var _a;
        if (this.rules.RenderSingleHorizontalStaffline) {
            page.PositionAndShape.BorderRight = page.PositionAndShape.Size.width;
            //page.PositionAndShape.BorderRight = page.PositionAndShape.Size.width + this.rules.PageRightMargin;
            page.PositionAndShape.calculateBoundingBox();
            this.graphicalMusicSheet.ParentMusicSheet.pageWidth = page.PositionAndShape.Size.width;
        }
        // The PositionAndShape child elements of page need to be manually connected to the lyricist, composer, subtitle, etc.
        // because the page is only available now
        let firstSystemAbsoluteTopMargin = 10;
        let lastSystemAbsoluteBottomMargin = -1;
        if (page.MusicSystems.length > 0) {
            const firstMusicSystem = page.MusicSystems[0];
            firstSystemAbsoluteTopMargin = firstMusicSystem.PositionAndShape.RelativePosition.y + firstMusicSystem.PositionAndShape.BorderTop;
            const lastMusicSystem = page.MusicSystems[page.MusicSystems.length - 1];
            lastSystemAbsoluteBottomMargin = lastMusicSystem.PositionAndShape.RelativePosition.y + lastMusicSystem.PositionAndShape.BorderBottom;
        }
        //const firstStaffLine: StaffLine = this.graphicalMusicSheet.MusicPages[0].MusicSystems[0].StaffLines[0];
        if (this.graphicalMusicSheet.Title && this.rules.RenderTitle) {
            const title = this.graphicalMusicSheet.Title;
            title.PositionAndShape.Parent = page.PositionAndShape;
            //title.PositionAndShape.Parent = firstStaffLine.PositionAndShape;
            const relative = new PointF2D_1.PointF2D();
            relative.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth / 2;
            //relative.x = firstStaffLine.PositionAndShape.RelativePosition.x + firstStaffLine.PositionAndShape.Size.width / 2; // half of first staffline width
            relative.y = this.rules.TitleTopDistance + this.rules.SheetTitleHeight;
            title.PositionAndShape.RelativePosition = relative;
            page.Labels.push(title);
        }
        if (this.graphicalMusicSheet.Subtitle && this.rules.RenderTitle && this.rules.RenderSubtitle) {
            const subtitle = this.graphicalMusicSheet.Subtitle;
            //subtitle.PositionAndShape.Parent = firstStaffLine.PositionAndShape;
            subtitle.PositionAndShape.Parent = page.PositionAndShape;
            const relative = new PointF2D_1.PointF2D();
            relative.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth / 2;
            //relative.x = firstStaffLine.PositionAndShape.RelativePosition.x + firstStaffLine.PositionAndShape.Size.width / 2; // half of first staffline width
            relative.y = this.rules.TitleTopDistance + this.rules.SheetTitleHeight + this.rules.SheetMinimumDistanceBetweenTitleAndSubtitle;
            subtitle.PositionAndShape.RelativePosition = relative;
            page.Labels.push(subtitle);
        }
        // Get the first system, first staffline skybottomcalculator
        // const topStaffline: StaffLine = page.MusicSystems[0].StaffLines[0];
        // const skyBottomLineCalculator: SkyBottomLineCalculator = topStaffline.SkyBottomLineCalculator;
        //   we don't need a skybottomcalculator currently, labels are put above system skyline anyways.
        const composer = this.graphicalMusicSheet.Composer;
        let composerRelativeY;
        if (composer && this.rules.RenderComposer) {
            composer.PositionAndShape.Parent = page.PositionAndShape; // if using pageWidth. (which can currently be too wide) TODO fix pageWidth (#578)
            //composer.PositionAndShape.Parent = topStaffline.PositionAndShape; // if using firstStaffLine...width.
            //      y-collision problems, harder to y-align with lyrics
            composer.setLabelPositionAndShapeBorders();
            const relative = new PointF2D_1.PointF2D();
            //const firstStaffLineEndX: number = this.rules.PageLeftMargin + this.rules.SystemLeftMargin + this.rules.left
            //    firstStaffLine.PositionAndShape.RelativePosition.x + firstStaffLine.PositionAndShape.Size.width;
            //relative.x = Math.min(this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageRightMargin,
            //  firstStaffLineEndX); // awkward with 2-bar score
            relative.x = this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageRightMargin;
            //relative.x = firstStaffLine.PositionAndShape.Size.width;
            //when this is less, goes higher.
            //So 0 is top of the sheet, 22 or so is touching the music system margin
            relative.y = firstSystemAbsoluteTopMargin;
            //relative.y = - this.rules.SystemComposerDistance;
            //relative.y = -firstStaffLine.PositionAndShape.Size.height;
            // TODO only add measure label height if rendering labels and composer measure has label
            // TODO y-align with lyricist? which is harder if they have different bbox parents (page and firstStaffLine).
            // when the pageWidth gets fixed, we could use page as parent again.
            //Sufficient for now to just use the longest composer entry instead of bottom.
            //Otherwise we need to construct a 'bottom line' for the text block
            // const endX: number = topStaffline.PositionAndShape.BorderMarginRight;
            // const startX: number = endX - composer.PositionAndShape.Size.width;
            // const currentMin: number = skyBottomLineCalculator.getSkyLineMinInRange(startX, endX);
            relative.y -= this.rules.SystemComposerDistance;
            const lines = (_a = composer.TextLines) === null || _a === void 0 ? void 0 : _a.length;
            if (lines > 1) { //Don't want to affect existing behavior. but this doesn't check bboxes for clip
                relative.y -= composer.PositionAndShape.BorderBottom * (lines - 1) / (lines);
            }
            //const newSkylineY: number = currentMin; // don't add composer label height to skyline
            //- firstSystemAbsoluteTopMargin - this.rules.SystemComposerDistance - composer.PositionAndShape.MarginSize.height;
            //skyBottomLineCalculator.updateSkyLineInRange(startX, endX, newSkylineY); // this can fix skyline for generateImages for some reason
            composerRelativeY = relative.y; // for lyricist label
            composer.PositionAndShape.RelativePosition = relative;
            page.Labels.push(composer);
        }
        const lyricist = this.graphicalMusicSheet.Lyricist;
        if (lyricist && this.rules.RenderLyricist) {
            lyricist.PositionAndShape.Parent = page.PositionAndShape;
            lyricist.setLabelPositionAndShapeBorders();
            const relative = new PointF2D_1.PointF2D();
            relative.x = this.rules.PageLeftMargin;
            relative.y = firstSystemAbsoluteTopMargin;
            // const startX: number = topStaffline.PositionAndShape.BorderMarginLeft - relative.x;
            // const endX: number = startX + lyricist.PositionAndShape.Size.width;
            // const currentMin: number = skyBottomLineCalculator.getSkyLineMinInRange(startX, endX);
            relative.y += lyricist.PositionAndShape.BorderBottom;
            relative.y = Math.min(relative.y, composerRelativeY !== null && composerRelativeY !== void 0 ? composerRelativeY : Number.MAX_SAFE_INTEGER);
            // same height as composer label (at least not lower). ?? prevents undefined -> Math.min returns NaN
            //skyBottomLineCalculator.updateSkyLineInRange(startX, endX, currentMin - lyricist.PositionAndShape.MarginSize.height);
            //relative.y = Math.max(relative.y, composer.PositionAndShape.RelativePosition.y);
            lyricist.PositionAndShape.RelativePosition = relative;
            page.Labels.push(lyricist);
        }
        const copyright = this.graphicalMusicSheet.Copyright;
        if (copyright && this.rules.RenderCopyright) {
            copyright.PositionAndShape.Parent = page.PositionAndShape;
            copyright.setLabelPositionAndShapeBorders();
            const relative = new PointF2D_1.PointF2D();
            relative.x = page.PositionAndShape.Size.width / 2;
            relative.y = lastSystemAbsoluteBottomMargin + this.rules.SheetCopyrightMargin;
            relative.y -= copyright.PositionAndShape.BorderTop;
            copyright.PositionAndShape.RelativePosition = relative;
            page.Labels.push(copyright);
        }
    }
    createGraphicalTies() {
        for (let measureIndex = 0; measureIndex < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; measureIndex++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[measureIndex];
            for (let staffIndex = 0; staffIndex < sourceMeasure.CompleteNumberOfStaves; staffIndex++) {
                for (let j = 0; j < sourceMeasure.VerticalSourceStaffEntryContainers.length; j++) {
                    const sourceStaffEntry = sourceMeasure.VerticalSourceStaffEntryContainers[j].StaffEntries[staffIndex];
                    if (sourceStaffEntry) {
                        const startStaffEntry = this.graphicalMusicSheet.findGraphicalStaffEntryFromMeasureList(staffIndex, measureIndex, sourceStaffEntry);
                        if (startStaffEntry) {
                            startStaffEntry.GraphicalTies.clear(); // don't duplicate ties when calling render() again
                            startStaffEntry.ties.clear();
                        }
                        for (let idx = 0, len = sourceStaffEntry.VoiceEntries.length; idx < len; ++idx) {
                            const voiceEntry = sourceStaffEntry.VoiceEntries[idx];
                            for (let idx2 = 0, len2 = voiceEntry.Notes.length; idx2 < len2; ++idx2) {
                                const note = voiceEntry.Notes[idx2];
                                if (note.NoteTie) {
                                    const tie = note.NoteTie;
                                    if (note === note.NoteTie.Notes.last()) {
                                        continue; // nothing to do on last note. don't create last tie twice.
                                    }
                                    if (startStaffEntry) {
                                        for (const gTie of startStaffEntry.GraphicalTies) {
                                            if (gTie.Tie === tie) {
                                                continue; // don't handle the same tie on the same startStaffEntry twice
                                            }
                                        }
                                    }
                                    this.handleTie(tie, startStaffEntry, staffIndex, measureIndex);
                                }
                            }
                        }
                        this.setTieDirections(startStaffEntry);
                    }
                }
            }
        }
    }
    handleTie(tie, startGraphicalStaffEntry, staffIndex, measureIndex) {
        if (!startGraphicalStaffEntry) {
            // console.log('tie not found in measure number ' + measureIndex - 1);
            return;
        }
        startGraphicalStaffEntry.ties.push(tie);
        let startGse = startGraphicalStaffEntry;
        let startNote = undefined;
        let endGse = undefined;
        let endNote = undefined;
        for (let i = 1; i < tie.Notes.length; i++) {
            startNote = startGse.findTieGraphicalNoteFromNote(tie.Notes[i - 1]);
            endGse = this.graphicalMusicSheet.GetGraphicalFromSourceStaffEntry(tie.Notes[i].ParentStaffEntry);
            if (!endGse) {
                continue;
            }
            endNote = endGse.findTieGraphicalNoteFromNote(tie.Notes[i]);
            if (startNote !== undefined && endNote !== undefined && endGse) {
                if (!startNote.sourceNote.PrintObject || !endNote.sourceNote.PrintObject) {
                    continue;
                }
                const graphicalTie = this.createGraphicalTie(tie, startGse, endGse, startNote, endNote);
                startGse.GraphicalTies.push(graphicalTie);
                if (this.staffEntriesWithGraphicalTies.indexOf(startGse) >= 0) {
                    this.staffEntriesWithGraphicalTies.push(startGse);
                }
            }
            startGse = endGse;
        }
    }
    setTieDirections(staffEntry) {
        if (!staffEntry) {
            return;
        }
        const ties = staffEntry.ties;
        if (ties.length === 1) {
            const tie = ties[0];
            if (tie.TieDirection === AbstractExpression_1.PlacementEnum.NotYetDefined) {
                const voiceId = tie.Notes[0].ParentVoiceEntry.ParentVoice.VoiceId;
                // put ties of second voices (e.g. 2 for right hand, 6 left hand) below by default
                //   TODO could be more precise but also more complex by checking lower notes, other notes, etc.
                if (voiceId === 2 || voiceId === 6) {
                    tie.TieDirection = AbstractExpression_1.PlacementEnum.Below;
                }
            }
        }
        if (ties.length > 1) {
            let highestNote = undefined;
            for (const gseTie of ties) {
                const tieNote = gseTie.Notes[0];
                if (!highestNote || tieNote.Pitch.getHalfTone() > highestNote.Pitch.getHalfTone()) {
                    highestNote = tieNote;
                }
            }
            for (const gseTie of ties) {
                if (gseTie.TieDirection === AbstractExpression_1.PlacementEnum.NotYetDefined) { // only set/change if not already set by xml
                    if (gseTie.Notes[0] === highestNote) {
                        gseTie.TieDirection = AbstractExpression_1.PlacementEnum.Above;
                    }
                    else {
                        gseTie.TieDirection = AbstractExpression_1.PlacementEnum.Below;
                    }
                }
            }
        }
    }
    createAccidentalCalculators() {
        const accidentalCalculators = [];
        const firstSourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();
        if (firstSourceMeasure) {
            for (let i = 0; i < firstSourceMeasure.CompleteNumberOfStaves; i++) {
                const accidentalCalculator = new AccidentalCalculator_1.AccidentalCalculator();
                accidentalCalculators.push(accidentalCalculator);
                if (firstSourceMeasure.FirstInstructionsStaffEntries[i]) {
                    for (let idx = 0, len = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions.length; idx < len; ++idx) {
                        const abstractNotationInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[i].Instructions[idx];
                        if (abstractNotationInstruction instanceof KeyInstruction_1.KeyInstruction) {
                            const keyInstruction = abstractNotationInstruction;
                            accidentalCalculator.ActiveKeyInstruction = keyInstruction;
                        }
                    }
                }
            }
        }
        return accidentalCalculators;
    }
    calculateVerticalContainersList() {
        const numberOfEntries = this.graphicalMusicSheet.MeasureList[0].length;
        for (let i = 0; i < this.graphicalMusicSheet.MeasureList.length; i++) {
            for (let j = 0; j < numberOfEntries; j++) {
                const measure = this.graphicalMusicSheet.MeasureList[i][j];
                if (!measure) {
                    continue;
                }
                for (let idx = 0, len = measure.staffEntries.length; idx < len; ++idx) {
                    const graphicalStaffEntry = measure.staffEntries[idx];
                    const verticalContainer = this.graphicalMusicSheet.getOrCreateVerticalContainer(graphicalStaffEntry.getAbsoluteTimestamp());
                    if (verticalContainer) {
                        verticalContainer.StaffEntries[j] = graphicalStaffEntry;
                        graphicalStaffEntry.parentVerticalContainer = verticalContainer;
                    }
                }
            }
        }
    }
    setIndicesToVerticalGraphicalContainers() {
        for (let i = 0; i < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; i++) {
            this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].Index = i;
        }
    }
    createGraphicalMeasuresForSourceMeasure(sourceMeasure, accidentalCalculators, openLyricWords, openOctaveShifts, activeClefs) {
        this.initGraphicalMeasuresCreation();
        const verticalMeasureList = []; // (VexFlowMeasure, extends GraphicalMeasure)
        const openBeams = [];
        const openTuplets = [];
        const staffEntryLinks = [];
        let restInAllGraphicalMeasures = true;
        for (let staffIndex = 0; staffIndex < sourceMeasure.CompleteNumberOfStaves; staffIndex++) {
            const measure = this.createGraphicalMeasure(// (VexFlowMeasure)
            sourceMeasure, openTuplets, openBeams, accidentalCalculators[staffIndex], activeClefs, openOctaveShifts, openLyricWords, staffIndex, staffEntryLinks);
            restInAllGraphicalMeasures = restInAllGraphicalMeasures && measure.hasOnlyRests;
            verticalMeasureList.push(measure);
        }
        sourceMeasure.allRests = restInAllGraphicalMeasures;
        sourceMeasure.VerticalMeasureList = verticalMeasureList; // much easier way to link sourceMeasure to graphicalMeasures than Dictionary
        //this.graphicalMusicSheet.sourceToGraphicalMeasureLinks.setValue(sourceMeasure, verticalMeasureList); // overwrites entries because:
        //this.graphicalMusicSheet.sourceToGraphicalMeasureLinks[sourceMeasure] = verticalMeasureList; // can't use SourceMeasure as key.
        // to save the reference by dictionary we would need two Dictionaries, id -> sourceMeasure and id -> GraphicalMeasure.
        return verticalMeasureList;
    }
    createGraphicalMeasure(sourceMeasure, openTuplets, openBeams, accidentalCalculator, activeClefs, openOctaveShifts, openLyricWords, staffIndex, staffEntryLinks) {
        var _a, _b, _c, _d;
        const staff = this.graphicalMusicSheet.ParentMusicSheet.getStaffFromIndex(staffIndex);
        let measure = undefined;
        if (activeClefs[staffIndex].ClefType === ClefInstruction_1.ClefEnum.TAB) {
            staff.isTab = true;
            measure = MusicSheetCalculator.symbolFactory.createTabStaffMeasure(sourceMeasure, staff);
        }
        else if (sourceMeasure.multipleRestMeasures && this.rules.RenderMultipleRestMeasures) {
            measure = MusicSheetCalculator.symbolFactory.createMultiRestMeasure(sourceMeasure, staff);
        }
        else if (sourceMeasure.multipleRestMeasureNumber > 1) {
            return undefined; // don't need to create a graphical measure that is within a multiple rest measure
        }
        else {
            measure = MusicSheetCalculator.symbolFactory.createGraphicalMeasure(sourceMeasure, staff);
        }
        measure.hasError = sourceMeasure.getErrorInMeasure(staffIndex);
        // check for key instruction changes
        if (sourceMeasure.FirstInstructionsStaffEntries[staffIndex]) {
            for (let idx = 0, len = sourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions.length; idx < len; ++idx) {
                const instruction = sourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[idx];
                if (instruction instanceof KeyInstruction_1.KeyInstruction) {
                    const key = KeyInstruction_1.KeyInstruction.copy(instruction);
                    const transposeHalftones = measure.getTransposedHalftones();
                    if (transposeHalftones !== 0 &&
                        measure.ParentStaff.ParentInstrument.MidiInstrumentId !== ClefInstruction_2.MidiInstrument.Percussion &&
                        MusicSheetCalculator.transposeCalculator) {
                        MusicSheetCalculator.transposeCalculator.transposeKey(key, transposeHalftones);
                    }
                    accidentalCalculator.ActiveKeyInstruction = key;
                }
            }
        }
        // check for octave shifts
        const octaveShifts = [];
        for (let idx = 0, len = sourceMeasure.StaffLinkedExpressions[staffIndex].length; idx < len; ++idx) {
            const multiExpression = sourceMeasure.StaffLinkedExpressions[staffIndex][idx];
            let targetOctaveShift;
            if (multiExpression.OctaveShiftStart) {
                targetOctaveShift = multiExpression.OctaveShiftStart;
            }
            else if (multiExpression.OctaveShiftEnd) {
                // also check for octave shift that is ending here but starting in earlier measure, see test_octaveshift_notes_shifted_octave_shift_end.musicxml
                targetOctaveShift = multiExpression.OctaveShiftEnd;
            }
            if (targetOctaveShift) {
                octaveShifts.push(multiExpression);
                const openOctaveShift = targetOctaveShift;
                let absoluteEnd = (_a = openOctaveShift === null || openOctaveShift === void 0 ? void 0 : openOctaveShift.ParentEndMultiExpression) === null || _a === void 0 ? void 0 : _a.AbsoluteTimestamp;
                if (!(openOctaveShift === null || openOctaveShift === void 0 ? void 0 : openOctaveShift.ParentEndMultiExpression)) {
                    const measureEndTimestamp = Fraction_1.Fraction.plus(sourceMeasure.AbsoluteTimestamp, sourceMeasure.Duration);
                    absoluteEnd = measureEndTimestamp;
                    // TODO better handling if end expression missing
                    // old comment:
                    // TODO check if octaveshift end exists, otherwise set to last measure end. only necessary if xml was cut manually and is incomplete
                }
                openOctaveShifts[staffIndex] = new OctaveShiftParams_1.OctaveShiftParams(openOctaveShift, openOctaveShift.ParentStartMultiExpression.AbsoluteTimestamp, 
                //openOctaveShift, multiExpression?.AbsoluteTimestamp,
                absoluteEnd);
            }
        }
        // create GraphicalStaffEntries - always check for possible null Entry
        for (let entryIndex = 0; entryIndex < sourceMeasure.VerticalSourceStaffEntryContainers.length; entryIndex++) {
            const sourceStaffEntry = sourceMeasure.VerticalSourceStaffEntryContainers[entryIndex].StaffEntries[staffIndex];
            // is there a SourceStaffEntry at this Index
            if (sourceStaffEntry) {
                // a SourceStaffEntry exists
                // is there an inStaff ClefInstruction? -> update activeClef
                for (let idx = 0, len = sourceStaffEntry.Instructions.length; idx < len; ++idx) {
                    const abstractNotationInstruction = sourceStaffEntry.Instructions[idx];
                    if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                        activeClefs[staffIndex] = abstractNotationInstruction;
                    }
                }
                // create new GraphicalStaffEntry
                const graphicalStaffEntry = MusicSheetCalculator.symbolFactory.createStaffEntry(sourceStaffEntry, measure);
                if (entryIndex < measure.staffEntries.length) {
                    // a GraphicalStaffEntry has been inserted already at this Index (from Tie)
                    measure.addGraphicalStaffEntryAtTimestamp(graphicalStaffEntry);
                }
                else {
                    measure.addGraphicalStaffEntry(graphicalStaffEntry);
                }
                const linkedNotes = [];
                if (sourceStaffEntry.Link) {
                    sourceStaffEntry.findLinkedNotes(linkedNotes);
                    this.handleStaffEntryLink(graphicalStaffEntry, staffEntryLinks);
                }
                // check for possible OctaveShift
                let octaveShiftValue = OctaveShift_1.OctaveEnum.NONE;
                if (openOctaveShifts[staffIndex]) {
                    if (openOctaveShifts[staffIndex].getAbsoluteStartTimestamp.lte(sourceStaffEntry.AbsoluteTimestamp) &&
                        sourceStaffEntry.AbsoluteTimestamp.lte(openOctaveShifts[staffIndex].getAbsoluteEndTimestamp)) {
                        octaveShiftValue = openOctaveShifts[staffIndex].getOpenOctaveShift.Type;
                    }
                }
                if (octaveShiftValue === OctaveShift_1.OctaveEnum.NONE) {
                    // check for existing octave shifts outside openOctaveShifts
                    for (const octaveShift of octaveShifts) {
                        let targetOctaveShift;
                        if (octaveShift.OctaveShiftStart) {
                            targetOctaveShift = octaveShift.OctaveShiftStart;
                        }
                        else if (octaveShift.OctaveShiftEnd) {
                            targetOctaveShift = octaveShift.OctaveShiftEnd;
                        }
                        if (((_b = targetOctaveShift === null || targetOctaveShift === void 0 ? void 0 : targetOctaveShift.ParentStartMultiExpression) === null || _b === void 0 ? void 0 : _b.AbsoluteTimestamp.lte(sourceStaffEntry.AbsoluteTimestamp)) &&
                            !((_c = targetOctaveShift.ParentEndMultiExpression) === null || _c === void 0 ? void 0 : _c.AbsoluteTimestamp.lt(sourceStaffEntry.AbsoluteTimestamp))) {
                            octaveShiftValue = targetOctaveShift.Type;
                            break;
                        }
                    }
                }
                // for each visible Voice create the corresponding GraphicalNotes
                for (let idx = 0, len = sourceStaffEntry.VoiceEntries.length; idx < len; ++idx) {
                    const voiceEntry = sourceStaffEntry.VoiceEntries[idx];
                    // Normal Notes...
                    octaveShiftValue = this.handleVoiceEntry(voiceEntry, graphicalStaffEntry, accidentalCalculator, openLyricWords, activeClefs[staffIndex], openTuplets, openBeams, octaveShiftValue, staffIndex, linkedNotes, sourceStaffEntry);
                }
                // SourceStaffEntry has inStaff ClefInstruction -> create graphical clef
                if (sourceStaffEntry.Instructions.length > 0) {
                    const clefInstruction = sourceStaffEntry.Instructions[0];
                    MusicSheetCalculator.symbolFactory.createInStaffClef(graphicalStaffEntry, clefInstruction);
                }
                if (this.rules.RenderChordSymbols && ((_d = sourceStaffEntry.ChordContainers) === null || _d === void 0 ? void 0 : _d.length) > 0) {
                    sourceStaffEntry.ParentStaff.ParentInstrument.HasChordSymbols = true;
                    MusicSheetCalculator.symbolFactory.createChordSymbols(sourceStaffEntry, graphicalStaffEntry, accidentalCalculator.ActiveKeyInstruction, this.graphicalMusicSheet.ParentMusicSheet.Transpose);
                }
            }
        }
        accidentalCalculator.doCalculationsAtEndOfMeasure();
        // update activeClef given at end of measure if needed
        if (sourceMeasure.LastInstructionsStaffEntries[staffIndex]) {
            const lastStaffEntry = sourceMeasure.LastInstructionsStaffEntries[staffIndex];
            for (let idx = 0, len = lastStaffEntry.Instructions.length; idx < len; ++idx) {
                const abstractNotationInstruction = lastStaffEntry.Instructions[idx];
                if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                    activeClefs[staffIndex] = abstractNotationInstruction;
                }
            }
        }
        for (let idx = 0, len = sourceMeasure.StaffLinkedExpressions[staffIndex].length; idx < len; ++idx) {
            const multiExpression = sourceMeasure.StaffLinkedExpressions[staffIndex][idx];
            if (multiExpression.OctaveShiftEnd !== undefined && openOctaveShifts[staffIndex] !== undefined &&
                multiExpression.OctaveShiftEnd === openOctaveShifts[staffIndex].getOpenOctaveShift) {
                openOctaveShifts[staffIndex] = undefined;
            }
        }
        // check wantedStemDirections of beam notes at end of measure (e.g. for beam with grace notes)
        for (const staffEntry of measure.staffEntries) {
            for (const voiceEntry of staffEntry.graphicalVoiceEntries) {
                this.setBeamNotesWantedStemDirections(voiceEntry.parentVoiceEntry);
            }
        }
        // if there are no staffEntries in this measure, create a rest for the whole measure:
        // check OSMDOptions.fillEmptyMeasuresWithWholeRest
        if (this.rules.FillEmptyMeasuresWithWholeRest >= 1) { // fill measures with no notes given with whole rests, visible (1) or invisible (2)
            if (measure.staffEntries.length === 0) {
                const sourceStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(new VerticalSourceStaffEntryContainer_1.VerticalSourceStaffEntryContainer(measure.parentSourceMeasure, measure.parentSourceMeasure.AbsoluteTimestamp, measure.parentSourceMeasure.CompleteNumberOfStaves), staff);
                if (staff.Voices.length === 0) {
                    const newVoice = new Voice_1.Voice(measure.ParentStaff.ParentInstrument, -1);
                    // this is problematic because we don't know the MusicXML voice ids and how many voices with which ids will be created after this.
                    //   but it should only happen when the first measure of the piece is empty.
                    staff.Voices.push(newVoice);
                }
                const voiceEntry = new VoiceEntry_1.VoiceEntry(new Fraction_1.Fraction(0, 1), staff.Voices[0], sourceStaffEntry);
                let duration = sourceMeasure.Duration;
                if (duration.RealValue === 0) {
                    duration = sourceMeasure.ActiveTimeSignature.clone();
                }
                const note = new Note_1.Note(voiceEntry, sourceStaffEntry, duration, undefined, sourceMeasure, true);
                note.IsWholeMeasureRest = true; // there may be a more elegant solution
                note.PrintObject = this.rules.FillEmptyMeasuresWithWholeRest === OSMDOptions_1.FillEmptyMeasuresWithWholeRests.YesVisible;
                // don't display whole rest that wasn't given in XML, only for layout/voice completion
                voiceEntry.Notes.push(note);
                const graphicalStaffEntry = MusicSheetCalculator.symbolFactory.createStaffEntry(sourceStaffEntry, measure);
                measure.addGraphicalStaffEntry(graphicalStaffEntry);
                graphicalStaffEntry.relInMeasureTimestamp = voiceEntry.Timestamp;
                const gve = MusicSheetCalculator.symbolFactory.createVoiceEntry(voiceEntry, graphicalStaffEntry);
                graphicalStaffEntry.graphicalVoiceEntries.push(gve);
                const graphicalNote = MusicSheetCalculator.symbolFactory.createNote(note, gve, new ClefInstruction_1.ClefInstruction(), OctaveShift_1.OctaveEnum.NONE, this.rules);
                MusicSheetCalculator.stafflineNoteCalculator.trackNote(graphicalNote);
                gve.notes.push(graphicalNote);
            }
        }
        measure.hasOnlyRests = true;
        //if staff entries empty, loop will not start. so true is valid
        for (const graphicalStaffEntry of measure.staffEntries) {
            //Loop until we get just one false
            measure.hasOnlyRests = graphicalStaffEntry.hasOnlyRests();
            if (!measure.hasOnlyRests) {
                break;
            }
        }
        return measure;
    }
    checkNoteForAccidental(graphicalNote, accidentalCalculator, activeClef, octaveEnum) {
        let pitch = graphicalNote.sourceNote.Pitch;
        const transposeHalftones = graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure.getTransposedHalftones();
        if (transposeHalftones !== 0 && graphicalNote.sourceNote.ParentStaffEntry.ParentStaff.ParentInstrument.MidiInstrumentId !== ClefInstruction_2.MidiInstrument.Percussion) {
            pitch = graphicalNote.Transpose(accidentalCalculator.ActiveKeyInstruction, activeClef, transposeHalftones, octaveEnum);
            graphicalNote.sourceNote.TransposedPitch = pitch;
        }
        graphicalNote.sourceNote.halfTone = pitch.getHalfTone();
        accidentalCalculator.checkAccidental(graphicalNote, pitch);
    }
    // private createStaffEntryForTieNote(measure: StaffMeasure, absoluteTimestamp: Fraction, openTie: Tie): GraphicalStaffEntry {
    //     let graphicalStaffEntry: GraphicalStaffEntry;
    //     graphicalStaffEntry = MusicSheetCalculator.symbolFactory.createStaffEntry(openTie.Start.ParentStaffEntry, measure);
    //     graphicalStaffEntry.relInMeasureTimestamp = Fraction.minus(absoluteTimestamp, measure.parentSourceMeasure.AbsoluteTimestamp);
    //     this.resetYPositionForLeadSheet(graphicalStaffEntry.PositionAndShape);
    //     measure.addGraphicalStaffEntryAtTimestamp(graphicalStaffEntry);
    //     return graphicalStaffEntry;
    // }
    handleStaffEntries(staffIsPercussionArray) {
        for (let idx = 0, len = this.graphicalMusicSheet.MeasureList.length; idx < len; ++idx) {
            const measures = this.graphicalMusicSheet.MeasureList[idx];
            for (let idx2 = 0, len2 = measures.length; idx2 < len2; ++idx2) {
                const measure = measures[idx2];
                if (!measure) {
                    continue;
                }
                //This property is active...
                if (this.rules.PercussionOneLineCutoff > 0 && !this.rules.PercussionUseCajon2NoteSystem) {
                    //We have a percussion clef, check to see if this property applies...
                    if (staffIsPercussionArray[idx2]) {
                        //-1 means always trigger, or we are under the cutoff number specified
                        if (this.rules.PercussionOneLineCutoff === -1 ||
                            MusicSheetCalculator.stafflineNoteCalculator.getStafflineUniquePositionCount(idx2) < this.rules.PercussionOneLineCutoff) {
                            measure.ParentStaff.StafflineCount = 1;
                        }
                    }
                }
                for (const graphicalStaffEntry of measure.staffEntries) {
                    if (graphicalStaffEntry.parentMeasure !== undefined
                        && graphicalStaffEntry.graphicalVoiceEntries.length > 0
                        && graphicalStaffEntry.graphicalVoiceEntries[0].notes.length > 0) {
                        this.layoutVoiceEntries(graphicalStaffEntry, idx2);
                        this.layoutStaffEntry(graphicalStaffEntry);
                    }
                }
                this.graphicalMeasureCreatedCalculations(measure);
            }
        }
    }
    calculateSkyBottomLines() {
        // override
    }
    /**
     * Re-adjust the x positioning of expressions.
     */
    calculateExpressionAlignements() {
        // override
    }
    // does nothing for now, because layoutBeams() is an empty method
    // private calculateBeams(): void {
    //     for (let idx2: number = 0, len2: number = this.musicSystems.length; idx2 < len2; ++idx2) {
    //         const musicSystem: MusicSystem = this.musicSystems[idx2];
    //         for (let idx3: number = 0, len3: number = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
    //             const staffLine: StaffLine = musicSystem.StaffLines[idx3];
    //             for (let idx4: number = 0, len4: number = staffLine.Measures.length; idx4 < len4; ++idx4) {
    //                 const measure: GraphicalMeasure = staffLine.Measures[idx4];
    //                 for (let idx5: number = 0, len5: number = measure.staffEntries.length; idx5 < len5; ++idx5) {
    //                     const staffEntry: GraphicalStaffEntry = measure.staffEntries[idx5];
    //                     this.layoutBeams(staffEntry);
    //                 }
    //             }
    //         }
    //     }
    // }
    calculateStaffEntryArticulationMarks() {
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const system = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = system.StaffLines.length; idx3 < len3; ++idx3) {
                const line = system.StaffLines[idx3];
                for (let idx4 = 0, len4 = line.Measures.length; idx4 < len4; ++idx4) {
                    const measure = line.Measures[idx4];
                    for (let idx5 = 0, len5 = measure.staffEntries.length; idx5 < len5; ++idx5) {
                        const graphicalStaffEntry = measure.staffEntries[idx5];
                        for (let idx6 = 0, len6 = graphicalStaffEntry.sourceStaffEntry.VoiceEntries.length; idx6 < len6; ++idx6) {
                            const voiceEntry = graphicalStaffEntry.sourceStaffEntry.VoiceEntries[idx6];
                            if (voiceEntry.Articulations.length > 0) {
                                this.layoutArticulationMarks(voiceEntry.Articulations, voiceEntry, graphicalStaffEntry);
                            }
                        }
                    }
                }
            }
        }
    }
    calculateOrnaments() {
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const system = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = system.StaffLines.length; idx3 < len3; ++idx3) {
                const line = system.StaffLines[idx3];
                for (let idx4 = 0, len4 = line.Measures.length; idx4 < len4; ++idx4) {
                    const measure = line.Measures[idx4];
                    for (let idx5 = 0, len5 = measure.staffEntries.length; idx5 < len5; ++idx5) {
                        const graphicalStaffEntry = measure.staffEntries[idx5];
                        for (let idx6 = 0, len6 = graphicalStaffEntry.sourceStaffEntry.VoiceEntries.length; idx6 < len6; ++idx6) {
                            const voiceEntry = graphicalStaffEntry.sourceStaffEntry.VoiceEntries[idx6];
                            if (voiceEntry.OrnamentContainer) {
                                if (voiceEntry.hasTie() && !graphicalStaffEntry.relInMeasureTimestamp.Equals(voiceEntry.Timestamp)) {
                                    continue;
                                }
                                this.layoutOrnament(voiceEntry.OrnamentContainer, voiceEntry, graphicalStaffEntry);
                                if (!(this.staffEntriesWithOrnaments.indexOf(graphicalStaffEntry) !== -1)) {
                                    this.staffEntriesWithOrnaments.push(graphicalStaffEntry);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    getFingeringPlacement(measure) {
        let placement = this.rules.FingeringPosition;
        if (placement === AbstractExpression_1.PlacementEnum.NotYetDefined || placement === AbstractExpression_1.PlacementEnum.AboveOrBelow) {
            placement = measure.isUpperStaffOfInstrument() ? AbstractExpression_1.PlacementEnum.Above : AbstractExpression_1.PlacementEnum.Below;
        }
        return placement;
    }
    calculateFingerings() {
        if (this.rules.FingeringPosition === AbstractExpression_1.PlacementEnum.Left ||
            this.rules.FingeringPosition === AbstractExpression_1.PlacementEnum.Right) {
            return;
        }
        for (const system of this.musicSystems) {
            for (const line of system.StaffLines) {
                for (const measure of line.Measures) {
                    const placement = this.getFingeringPlacement(measure);
                    for (const gse of measure.staffEntries) {
                        gse.FingeringEntries = [];
                        const skybottomcalculator = line.SkyBottomLineCalculator;
                        const staffEntryPositionX = gse.PositionAndShape.RelativePosition.x +
                            measure.PositionAndShape.RelativePosition.x;
                        const fingerings = [];
                        for (const voiceEntry of gse.graphicalVoiceEntries) {
                            for (const note of voiceEntry.notes) {
                                const sourceNote = note.sourceNote;
                                if (sourceNote.Fingering && !sourceNote.IsGraceNote) {
                                    fingerings.push(sourceNote.Fingering);
                                }
                            }
                        }
                        if (placement === AbstractExpression_1.PlacementEnum.Below) {
                            fingerings.reverse();
                        }
                        for (let i = 0; i < fingerings.length; i++) {
                            const fingering = fingerings[i];
                            const alignment = placement === AbstractExpression_1.PlacementEnum.Above ? TextAlignment_1.TextAlignmentEnum.CenterBottom : TextAlignment_1.TextAlignmentEnum.CenterTop;
                            const label = new Label_1.Label(fingering.value, alignment);
                            const gLabel = new GraphicalLabel_1.GraphicalLabel(label, this.rules.FingeringTextSize, label.textAlignment, this.rules, line.PositionAndShape);
                            const marginLeft = staffEntryPositionX + gLabel.PositionAndShape.BorderMarginLeft;
                            const marginRight = staffEntryPositionX + gLabel.PositionAndShape.BorderMarginRight;
                            let skybottomFurthest = undefined;
                            if (placement === AbstractExpression_1.PlacementEnum.Above) {
                                skybottomFurthest = skybottomcalculator.getSkyLineMinInRange(marginLeft, marginRight);
                            }
                            else {
                                skybottomFurthest = skybottomcalculator.getBottomLineMaxInRange(marginLeft, marginRight);
                            }
                            let yShift = 0;
                            if (i === 0) {
                                yShift += this.rules.FingeringOffsetY;
                                if (placement === AbstractExpression_1.PlacementEnum.Above) {
                                    yShift += 0.1; // above fingerings are a bit closer to the notes than below ones for some reason
                                }
                            }
                            else {
                                yShift += this.rules.FingeringPaddingY;
                            }
                            if (placement === AbstractExpression_1.PlacementEnum.Above) {
                                yShift *= -1;
                            }
                            gLabel.PositionAndShape.RelativePosition.y += skybottomFurthest + yShift;
                            gLabel.PositionAndShape.RelativePosition.x = staffEntryPositionX;
                            gLabel.setLabelPositionAndShapeBorders();
                            gLabel.PositionAndShape.calculateBoundingBox();
                            gse.FingeringEntries.push(gLabel);
                            const start = gLabel.PositionAndShape.RelativePosition.x + gLabel.PositionAndShape.BorderLeft;
                            //start -= line.PositionAndShape.RelativePosition.x;
                            const end = start - gLabel.PositionAndShape.BorderLeft + gLabel.PositionAndShape.BorderRight;
                            if (placement === AbstractExpression_1.PlacementEnum.Above) {
                                skybottomcalculator.updateSkyLineInRange(start, end, gLabel.PositionAndShape.RelativePosition.y + gLabel.PositionAndShape.BorderTop); // BorderMarginTop too much
                            }
                            else if (placement === AbstractExpression_1.PlacementEnum.Below) {
                                skybottomcalculator.updateBottomLineInRange(start, end, gLabel.PositionAndShape.RelativePosition.y + gLabel.PositionAndShape.BorderBottom);
                            }
                        }
                    }
                }
            }
        }
    }
    optimizeRestPlacement() {
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const system = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = system.StaffLines.length; idx3 < len3; ++idx3) {
                const line = system.StaffLines[idx3];
                for (let idx4 = 0, len4 = line.Measures.length; idx4 < len4; ++idx4) {
                    const measure = line.Measures[idx4];
                    for (let idx5 = 0, len5 = measure.staffEntries.length; idx5 < len5; ++idx5) {
                        const graphicalStaffEntry = measure.staffEntries[idx5];
                        this.optimizeRestNotePlacement(graphicalStaffEntry, measure);
                    }
                }
            }
        }
    }
    calculateTwoRestNotesPlacementWithCollisionDetection(graphicalStaffEntry) {
        const firstRestNote = graphicalStaffEntry.graphicalVoiceEntries[0].notes[0];
        const secondRestNote = graphicalStaffEntry.graphicalVoiceEntries[1].notes[0];
        secondRestNote.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, 2.5);
        graphicalStaffEntry.PositionAndShape.calculateAbsolutePositionsRecursiveWithoutTopelement();
        firstRestNote.PositionAndShape.computeNonOverlappingPositionWithMargin(graphicalStaffEntry.PositionAndShape, BoundingBox_1.ColDirEnum.Up, new PointF2D_1.PointF2D(0.0, secondRestNote.PositionAndShape.RelativePosition.y));
        const relative = firstRestNote.PositionAndShape.RelativePosition;
        relative.y -= 1.0;
        firstRestNote.PositionAndShape.RelativePosition = relative;
        graphicalStaffEntry.PositionAndShape.calculateBoundingBox();
    }
    calculateRestNotePlacementWithCollisionDetectionFromGraphicalNote(graphicalStaffEntry) {
        let restNote;
        let graphicalNotes;
        if (graphicalStaffEntry.graphicalVoiceEntries[0].notes[0].sourceNote.isRest()) {
            restNote = graphicalStaffEntry.graphicalVoiceEntries[0].notes[0];
            graphicalNotes = graphicalStaffEntry.graphicalVoiceEntries[1].notes;
        }
        else {
            graphicalNotes = graphicalStaffEntry.graphicalVoiceEntries[0].notes;
            restNote = graphicalStaffEntry.graphicalVoiceEntries[1].notes[0];
        }
        //restNote.parallelVoiceEntryNotes = graphicalNotes; // TODO maybe save potentially colliding notes, check them in VexFlowConverter.StaveNote
        let collision = false;
        graphicalStaffEntry.PositionAndShape.calculateAbsolutePositionsRecursiveWithoutTopelement();
        for (let idx = 0, len = graphicalNotes.length; idx < len; ++idx) {
            const graphicalNote = graphicalNotes[idx];
            if (restNote.PositionAndShape.marginCollisionDetection(graphicalNote.PositionAndShape)) {
                // TODO bounding box of graphical note isn't set correctly yet.
                // we could do manual collision checking here
                collision = true;
                break;
            }
        }
        if (collision) {
            if (restNote.sourceNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice_1.LinkedVoice) {
                const bottomBorder = graphicalNotes[0].PositionAndShape.BorderMarginBottom + graphicalNotes[0].PositionAndShape.RelativePosition.y;
                restNote.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, bottomBorder - restNote.PositionAndShape.BorderMarginTop + 0.5);
            }
            else {
                const last = graphicalNotes[graphicalNotes.length - 1];
                const topBorder = last.PositionAndShape.BorderMarginTop + last.PositionAndShape.RelativePosition.y;
                if (graphicalNotes[0].sourceNote.ParentVoiceEntry.ParentVoice instanceof LinkedVoice_1.LinkedVoice) {
                    restNote.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, topBorder - restNote.PositionAndShape.BorderMarginBottom - 0.5);
                }
                else {
                    const bottomBorder = graphicalNotes[0].PositionAndShape.BorderMarginBottom + graphicalNotes[0].PositionAndShape.RelativePosition.y;
                    if (bottomBorder < 2.0) {
                        restNote.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, bottomBorder - restNote.PositionAndShape.BorderMarginTop + 0.5);
                    }
                    else {
                        restNote.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, topBorder - restNote.PositionAndShape.BorderMarginBottom - 0.0);
                    }
                }
            }
        }
        graphicalStaffEntry.PositionAndShape.calculateBoundingBox();
    }
    calculateTieCurves() {
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                for (const measure of staffLine.Measures) {
                    for (const staffEntry of measure.staffEntries) {
                        for (const graphicalTie of staffEntry.GraphicalTies) {
                            if (graphicalTie.StartNote !== undefined && graphicalTie.StartNote.parentVoiceEntry.parentStaffEntry === staffEntry) {
                                const tieIsAtSystemBreak = (graphicalTie.StartNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaffLine !==
                                    graphicalTie.EndNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaffLine);
                                this.layoutGraphicalTie(graphicalTie, tieIsAtSystemBreak, measure.ParentStaff.isTab);
                            }
                        }
                    }
                }
            }
        }
    }
    calculateLyricsPosition() {
        const lyricStaffEntriesDict = new typescript_collections_1.Dictionary();
        // sort the lyriceVerseNumbers for every Instrument that has Lyrics
        for (let idx = 0, len = this.graphicalMusicSheet.ParentMusicSheet.Instruments.length; idx < len; ++idx) {
            const instrument = this.graphicalMusicSheet.ParentMusicSheet.Instruments[idx];
            if (instrument.HasLyrics && instrument.LyricVersesNumbers.length > 0) {
                instrument.LyricVersesNumbers.sort();
            }
        }
        // first calc lyrics text positions
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const musicSystem = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
                const staffLine = musicSystem.StaffLines[idx3];
                const lyricsStaffEntries = this.calculateSingleStaffLineLyricsPosition(staffLine, staffLine.ParentStaff.ParentInstrument.LyricVersesNumbers);
                lyricStaffEntriesDict.setValue(staffLine, lyricsStaffEntries);
                this.calculateLyricsExtendsAndDashes(lyricStaffEntriesDict.getValue(staffLine));
            }
        }
        // then fill in the lyric word dashes and lyrics extends/underscores
        for (let idx2 = 0, len2 = this.musicSystems.length; idx2 < len2; ++idx2) {
            const musicSystem = this.musicSystems[idx2];
            for (let idx3 = 0, len3 = musicSystem.StaffLines.length; idx3 < len3; ++idx3) {
                const staffLine = musicSystem.StaffLines[idx3];
                this.calculateLyricsExtendsAndDashes(lyricStaffEntriesDict.getValue(staffLine));
            }
        }
    }
    /**
     * This method calculates the dashes within the syllables of a LyricWord
     * @param lyricEntry
     */
    calculateSingleLyricWord(lyricEntry) {
        // const skyBottomLineCalculator: SkyBottomLineCalculator = new SkyBottomLineCalculator (this.rules);
        const graphicalLyricWord = lyricEntry.ParentLyricWord;
        const index = graphicalLyricWord.GraphicalLyricsEntries.indexOf(lyricEntry);
        let nextLyricEntry = undefined;
        if (index >= 0) {
            nextLyricEntry = graphicalLyricWord.GraphicalLyricsEntries[index + 1];
        }
        if (!nextLyricEntry) {
            return;
        }
        const startStaffLine = lyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine;
        const nextStaffLine = nextLyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine;
        const startStaffEntry = lyricEntry.StaffEntryParent;
        const endStaffentry = nextLyricEntry.StaffEntryParent;
        // if on the same StaffLine
        if (lyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine === nextLyricEntry.StaffEntryParent.parentMeasure.ParentStaffLine) {
            // start- and End margins from the text Labels
            const startX = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +
                startStaffEntry.PositionAndShape.RelativePosition.x +
                lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.x +
                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight -
                lyricEntry.GraphicalLabel.CenteringXShift; // TODO not sure why this is necessary, see Christbaum measure 9+11, Land der Berge 11-12
            const endX = endStaffentry.parentMeasure.PositionAndShape.RelativePosition.x +
                endStaffentry.PositionAndShape.RelativePosition.x +
                lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.x +
                nextLyricEntry.GraphicalLabel.PositionAndShape.BorderMarginLeft;
            const y = lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;
            let numberOfDashes = 1;
            if ((endX - startX) > this.rules.MinimumDistanceBetweenDashes * 3) {
                // *3: need distance between word to first dash, dash to dash, dash to next word
                numberOfDashes = Math.floor((endX - startX) / this.rules.MinimumDistanceBetweenDashes) - 1;
            }
            // check distance and create the adequate number of Dashes
            if (numberOfDashes === 1) {
                // distance between the two GraphicalLyricEntries is big for only one Dash, position in the middle
                this.calculateSingleDashForLyricWord(startStaffLine, startX, endX, y);
            }
            else {
                // distance is big enough for more Dashes
                // calculate the adequate number of Dashes from the distance between the two LyricEntries
                // distance between the Dashes should be equal
                this.calculateDashes(startStaffLine, startX, endX, y);
            }
        }
        else {
            // start and end on different StaffLines
            // start margin from the text Label until the End of StaffLine
            const startX = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +
                startStaffEntry.PositionAndShape.RelativePosition.x +
                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;
            const lastGraphicalMeasure = startStaffLine.Measures[startStaffLine.Measures.length - 1];
            const endX = lastGraphicalMeasure.PositionAndShape.RelativePosition.x + lastGraphicalMeasure.PositionAndShape.Size.width;
            let y = lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;
            // calculate Dashes for the first StaffLine
            this.calculateDashes(startStaffLine, startX, endX, y);
            // calculate Dashes for the second StaffLine (only if endStaffEntry isn't the first StaffEntry of the StaffLine)
            if (nextStaffLine && // check for undefined objects e.g. when drawingRange given
                nextStaffLine.Measures[0] &&
                endStaffentry.parentMeasure.ParentStaffLine &&
                !(endStaffentry === endStaffentry.parentMeasure.staffEntries[0] &&
                    endStaffentry.parentMeasure === endStaffentry.parentMeasure.ParentStaffLine.Measures[0])) {
                const secondStartX = nextStaffLine.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x;
                const secondEndX = endStaffentry.parentMeasure.PositionAndShape.RelativePosition.x +
                    endStaffentry.PositionAndShape.RelativePosition.x +
                    nextLyricEntry.GraphicalLabel.PositionAndShape.BorderMarginLeft;
                y = nextLyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;
                this.calculateDashes(nextStaffLine, secondStartX, secondEndX, y);
            }
        }
    }
    /**
     * This method calculates Dashes for a LyricWord.
     * @param staffLine
     * @param startX
     * @param endX
     * @param y
     */
    calculateDashes(staffLine, startX, endX, y) {
        let distance = endX - startX;
        if (distance < this.rules.MinimumDistanceBetweenDashes * 3) {
            this.calculateSingleDashForLyricWord(staffLine, startX, endX, y);
        }
        else {
            // enough distance for more Dashes
            const numberOfDashes = Math.floor(distance / this.rules.MinimumDistanceBetweenDashes) - 1;
            const distanceBetweenDashes = distance / (numberOfDashes + 1);
            let counter = 0;
            startX += distanceBetweenDashes;
            endX -= distanceBetweenDashes;
            while (counter <= Math.floor(numberOfDashes / 2.0) && endX > startX) {
                distance = this.calculateRightAndLeftDashesForLyricWord(staffLine, startX, endX, y);
                startX += distanceBetweenDashes;
                endX -= distanceBetweenDashes;
                counter++;
            }
            // if the remaining distance isn't big enough for two Dashes,
            // but long enough for a middle dash inbetween,
            // then put the last Dash in the middle of the remaining distance
            if (distance > distanceBetweenDashes * 2) {
                this.calculateSingleDashForLyricWord(staffLine, startX, endX, y);
            }
        }
    }
    /**
     * This method calculates a single Dash for a LyricWord, positioned in the middle of the given distance.
     * @param {StaffLine} staffLine
     * @param {number} startX
     * @param {number} endX
     * @param {number} y
     */
    calculateSingleDashForLyricWord(staffLine, startX, endX, y) {
        const label = new Label_1.Label("-");
        label.colorDefault = this.rules.DefaultColorLyrics; // if undefined, no change. saves an if check
        let textHeight = this.rules.LyricsHeight;
        if (endX - startX < 0.8) {
            textHeight *= 0.8;
            y -= 0.1 * textHeight; // dash moves downwards when textHeight is reduced. counteract that.
            //xShift = -0.1;
            // x-position is situational, sometimes it's slightly right-leaning and tends to overlap with the right LyricsEntry
            //   (see Cornelius - Christbaum, measure 9 and 11 ("li-che", "li-ger"), due to centering x-shift = GraphicalLabel.CenteringXShift)
            // sometimes the x-position is perfect and the interval is extremely narrow
            //   (see Mozart/Holzer Land der Berge measure 11-12)
            // or even slightly too far left (Beethoven Geliebte measure 4, due to centering x-shift = GraphicalLabel.CenteringXShift)
        }
        const dash = new GraphicalLabel_1.GraphicalLabel(label, textHeight, TextAlignment_1.TextAlignmentEnum.CenterBottom, this.rules);
        dash.setLabelPositionAndShapeBorders();
        staffLine.LyricsDashes.push(dash);
        if (this.staffLinesWithLyricWords.indexOf(staffLine) === -1) {
            this.staffLinesWithLyricWords.push(staffLine);
        }
        dash.PositionAndShape.Parent = staffLine.PositionAndShape;
        const relative = new PointF2D_1.PointF2D(startX + (endX - startX) / 2, y);
        dash.PositionAndShape.RelativePosition = relative;
    }
    /**
     * Layouts the underscore line when a lyric entry is marked as extend
     * @param {GraphicalLyricEntry} lyricEntry
     */
    calculateLyricExtend(lyricEntry) {
        let startY = lyricEntry.GraphicalLabel.PositionAndShape.RelativePosition.y;
        const startStaffEntry = lyricEntry.StaffEntryParent;
        const startStaffLine = startStaffEntry.parentMeasure.ParentStaffLine;
        // find endstaffEntry and staffLine
        let endStaffEntry = undefined;
        let endStaffLine = undefined;
        const staffIndex = startStaffEntry.parentMeasure.ParentStaff.idInMusicSheet;
        for (let index = startStaffEntry.parentVerticalContainer.Index + 1; index < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; ++index) {
            const gse = this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[index].StaffEntries[staffIndex];
            if (!gse) {
                continue;
            }
            if (gse.hasOnlyRests()) {
                break;
            }
            if (gse.LyricsEntries.length > 0) {
                break;
            }
            endStaffEntry = gse;
            endStaffLine = endStaffEntry.parentMeasure.ParentStaffLine;
            if (!endStaffLine) {
                endStaffLine = startStaffEntry.parentMeasure.ParentStaffLine;
            }
        }
        if (!endStaffEntry || !endStaffLine) {
            return;
        }
        // if on the same StaffLine
        if (startStaffLine === endStaffLine && endStaffEntry.parentMeasure.ParentStaffLine) {
            // start- and End margins from the text Labels
            const startX = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +
                startStaffEntry.PositionAndShape.RelativePosition.x +
                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;
            // + startStaffLine.PositionAndShape.AbsolutePosition.x; // doesn't work, done in drawer
            const endX = endStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +
                endStaffEntry.PositionAndShape.RelativePosition.x +
                endStaffEntry.PositionAndShape.BorderMarginRight;
            // + endStaffLine.PositionAndShape.AbsolutePosition.x; // doesn't work, done in drawer
            // TODO maybe add half-width of following note.
            // though we don't have the vexflow note's bbox yet and extend layouting is unconstrained,
            // we have more room for spacing without it.
            // needed in order to line up with the Label's text bottom line (is the y position of the underscore)
            startY -= lyricEntry.GraphicalLabel.PositionAndShape.Size.height / 4;
            // create a Line (as underscore after the LyricLabel's End)
            this.calculateSingleLyricWordWithUnderscore(startStaffLine, startX, endX, startY);
        }
        else { // start and end on different StaffLines
            // start margin from the text Label until the End of StaffLine
            const lastMeasureBb = startStaffLine.Measures[startStaffLine.Measures.length - 1].PositionAndShape;
            const startX = startStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +
                startStaffEntry.PositionAndShape.RelativePosition.x +
                lyricEntry.GraphicalLabel.PositionAndShape.BorderMarginRight;
            const endX = lastMeasureBb.RelativePosition.x +
                lastMeasureBb.Size.width;
            // needed in order to line up with the Label's text bottom line
            startY -= lyricEntry.GraphicalLabel.PositionAndShape.Size.height / 4;
            // first Underscore until the StaffLine's End
            this.calculateSingleLyricWordWithUnderscore(startStaffLine, startX, endX, startY);
            if (!endStaffEntry) {
                return;
            }
            // second Underscore in the endStaffLine until endStaffEntry (if endStaffEntry isn't the first StaffEntry of the StaffLine))
            if (endStaffEntry.parentMeasure.ParentStaffLine && endStaffEntry.parentMeasure.staffEntries &&
                !(endStaffEntry === endStaffEntry.parentMeasure.staffEntries[0] &&
                    endStaffEntry.parentMeasure === endStaffEntry.parentMeasure.ParentStaffLine.Measures[0])) {
                const secondStartX = endStaffLine.Measures[0].staffEntries[0].PositionAndShape.RelativePosition.x;
                const secondEndX = endStaffEntry.parentMeasure.PositionAndShape.RelativePosition.x +
                    endStaffEntry.PositionAndShape.RelativePosition.x +
                    endStaffEntry.PositionAndShape.BorderMarginRight;
                this.calculateSingleLyricWordWithUnderscore(endStaffLine, secondStartX, secondEndX, startY);
            }
        }
    }
    /**
     * This method calculates a single underscoreLine.
     * @param staffLine
     * @param startX
     * @param end
     * @param y
     */
    calculateSingleLyricWordWithUnderscore(staffLine, startX, endX, y) {
        const lineStart = new PointF2D_1.PointF2D(startX, y);
        const lineEnd = new PointF2D_1.PointF2D(endX, y);
        const graphicalLine = new GraphicalLine_1.GraphicalLine(lineStart, lineEnd, this.rules.LyricUnderscoreLineWidth);
        graphicalLine.colorHex = this.rules.DefaultColorLyrics; // if undefined, no change. saves an if check
        staffLine.LyricLines.push(graphicalLine);
        if (this.staffLinesWithLyricWords.indexOf(staffLine) === -1) {
            this.staffLinesWithLyricWords.push(staffLine);
        }
    }
    /**
     * This method calculates two Dashes for a LyricWord, positioned at the the two ends of the given distance.
     * @param {StaffLine} staffLine
     * @param {number} startX
     * @param {number} endX
     * @param {number} y
     * @returns {number}
     */
    calculateRightAndLeftDashesForLyricWord(staffLine, startX, endX, y) {
        const leftLabel = new Label_1.Label("-");
        leftLabel.colorDefault = this.rules.DefaultColorLyrics; // if undefined, no change. saves an if check
        const leftDash = new GraphicalLabel_1.GraphicalLabel(leftLabel, this.rules.LyricsHeight, TextAlignment_1.TextAlignmentEnum.CenterBottom, this.rules);
        leftDash.setLabelPositionAndShapeBorders();
        staffLine.LyricsDashes.push(leftDash);
        if (this.staffLinesWithLyricWords.indexOf(staffLine) === -1) {
            this.staffLinesWithLyricWords.push(staffLine);
        }
        leftDash.PositionAndShape.Parent = staffLine.PositionAndShape;
        const leftDashRelative = new PointF2D_1.PointF2D(startX, y);
        leftDash.PositionAndShape.RelativePosition = leftDashRelative;
        const rightLabel = new Label_1.Label("-");
        const rightDash = new GraphicalLabel_1.GraphicalLabel(rightLabel, this.rules.LyricsHeight, TextAlignment_1.TextAlignmentEnum.CenterBottom, this.rules);
        rightDash.setLabelPositionAndShapeBorders();
        staffLine.LyricsDashes.push(rightDash);
        rightDash.PositionAndShape.Parent = staffLine.PositionAndShape;
        const rightDashRelative = new PointF2D_1.PointF2D(endX, y);
        rightDash.PositionAndShape.RelativePosition = rightDashRelative;
        return (rightDash.PositionAndShape.RelativePosition.x - leftDash.PositionAndShape.RelativePosition.x);
    }
    calculateDynamicExpressions() {
        const maxIndex = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, this.rules.MaxMeasureToDrawIndex);
        const minIndex = Math.min(this.rules.MinMeasureToDrawIndex, this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length);
        for (let i = minIndex; i <= maxIndex; i++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];
            //Reset, beginning of new measure
            this.dynamicExpressionMap.clear();
            for (let j = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {
                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {
                    continue;
                }
                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {
                    for (let k = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {
                        if (sourceMeasure.StaffLinkedExpressions[j][k].InstantaneousDynamic !== undefined ||
                            (sourceMeasure.StaffLinkedExpressions[j][k].StartingContinuousDynamic !== undefined &&
                                sourceMeasure.StaffLinkedExpressions[j][k].StartingContinuousDynamic.StartMultiExpression ===
                                    sourceMeasure.StaffLinkedExpressions[j][k] && sourceMeasure.StaffLinkedExpressions[j][k].UnknownList.length === 0)) {
                            this.calculateDynamicExpressionsForMultiExpression(sourceMeasure.StaffLinkedExpressions[j][k], i, j);
                        }
                    }
                }
            }
        }
        this.dynamicExpressionMap.clear();
    }
    calculateOctaveShifts() {
        for (let i = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];
            for (let j = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {
                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {
                    continue;
                }
                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {
                    for (let k = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {
                        if ((sourceMeasure.StaffLinkedExpressions[j][k].OctaveShiftStart)) {
                            this.calculateSingleOctaveShift(sourceMeasure, sourceMeasure.StaffLinkedExpressions[j][k], i, j);
                        }
                    }
                }
            }
        }
    }
    calculatePedals() {
        for (let i = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];
            for (let j = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {
                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {
                    continue;
                }
                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {
                    for (let k = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {
                        if ((sourceMeasure.StaffLinkedExpressions[j][k].PedalStart)) {
                            this.calculateSinglePedal(sourceMeasure, sourceMeasure.StaffLinkedExpressions[j][k], i, j);
                        }
                    }
                }
            }
        }
    }
    getFirstLeftNotNullStaffEntryFromContainer(horizontalIndex, verticalIndex, multiStaffInstrument) {
        if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex]) {
            return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex];
        }
        for (let i = horizontalIndex - 1; i >= 0; i--) {
            if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex]) {
                return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex];
            }
        }
        return undefined;
    }
    getFirstRightNotNullStaffEntryFromContainer(horizontalIndex, verticalIndex, multiStaffInstrument) {
        if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex]) {
            return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[horizontalIndex].StaffEntries[verticalIndex];
        }
        for (let i = horizontalIndex + 1; i < this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers.length; i++) {
            if (this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex]) {
                return this.graphicalMusicSheet.VerticalGraphicalStaffEntryContainers[i].StaffEntries[verticalIndex];
            }
        }
        return undefined;
    }
    calculateWordRepetitionInstructions() {
        for (let i = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];
            for (let idx = 0, len = sourceMeasure.FirstRepetitionInstructions.length; idx < len; ++idx) {
                const instruction = sourceMeasure.FirstRepetitionInstructions[idx];
                this.calculateWordRepetitionInstruction(instruction, i);
            }
            for (let idx = 0, len = sourceMeasure.LastRepetitionInstructions.length; idx < len; ++idx) {
                const instruction = sourceMeasure.LastRepetitionInstructions[idx];
                this.calculateWordRepetitionInstruction(instruction, i);
            }
        }
    }
    calculateRepetitionEndings() {
        const musicsheet = this.graphicalMusicSheet.ParentMusicSheet;
        for (let idx = 0, len = musicsheet.Repetitions.length; idx < len; ++idx) {
            const repetition = musicsheet.Repetitions[idx];
            this.calcGraphicalRepetitionEndingsRecursively(repetition);
        }
    }
    calculateTempoExpressions() {
        const maxIndex = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, this.rules.MaxMeasureToDrawIndex);
        const minIndex = this.rules.MinMeasureToDrawIndex;
        for (let i = minIndex; i <= maxIndex; i++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];
            for (let j = 0; j < sourceMeasure.TempoExpressions.length; j++) {
                this.calculateTempoExpressionsForMultiTempoExpression(sourceMeasure, sourceMeasure.TempoExpressions[j], i);
            }
        }
    }
    calculateRehearsalMarks() {
        if (!this.rules.RenderRehearsalMarks) {
            return;
        }
        for (const measure of this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures) {
            this.calculateRehearsalMark(measure);
        }
    }
    calculateRehearsalMark(measure) {
        throw new Error(this.abstractNotImplementedErrorMessage);
    }
    calculateMoodAndUnknownExpressions() {
        for (let i = 0; i < this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length; i++) {
            const sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[i];
            for (let j = 0; j < sourceMeasure.StaffLinkedExpressions.length; j++) {
                if (!this.graphicalMusicSheet.MeasureList[i] || !this.graphicalMusicSheet.MeasureList[i][j]) {
                    continue;
                }
                if (this.graphicalMusicSheet.MeasureList[i][j].ParentStaff.ParentInstrument.Visible) {
                    for (let k = 0; k < sourceMeasure.StaffLinkedExpressions[j].length; k++) {
                        if ((sourceMeasure.StaffLinkedExpressions[j][k].MoodList.length > 0) ||
                            (sourceMeasure.StaffLinkedExpressions[j][k].UnknownList.length > 0)) {
                            this.calculateMoodAndUnknownExpression(sourceMeasure.StaffLinkedExpressions[j][k], i, j);
                        }
                    }
                }
            }
        }
    }
    /**
     * Calculates the desired stem direction depending on the number (or type) of voices.
     * If more than one voice is there, the main voice (typically the first or upper voice) will get stem up direction.
     * The others get stem down direction.
     * @param voiceEntry the voiceEntry for which the stem direction has to be calculated
     */
    calculateStemDirectionFromVoices(voiceEntry) {
        // Stem direction calculation:
        const hasLink = voiceEntry.ParentSourceStaffEntry.Link !== undefined;
        if (hasLink) {
            // in case of StaffEntryLink don't check mainVoice / linkedVoice
            if (voiceEntry === voiceEntry.ParentSourceStaffEntry.VoiceEntries[0]) {
                // set stem up:
                voiceEntry.WantedStemDirection = VoiceEntry_1.StemDirectionType.Up;
                return;
            }
            else {
                // set stem down:
                voiceEntry.WantedStemDirection = VoiceEntry_1.StemDirectionType.Down;
                return;
            }
        }
        else {
            if (voiceEntry.ParentVoice instanceof LinkedVoice_1.LinkedVoice) {
                // Linked voice: set stem down:
                voiceEntry.WantedStemDirection = VoiceEntry_1.StemDirectionType.Down;
            }
            else {
                // if this voiceEntry belongs to the mainVoice:
                // check first that there are also more voices present:
                if (voiceEntry.ParentSourceStaffEntry.VoiceEntries.length > 1) {
                    // as this voiceEntry belongs to the mainVoice: stem Up
                    voiceEntry.WantedStemDirection = VoiceEntry_1.StemDirectionType.Up;
                }
            }
        }
        // setBeamNotesWantedStemDirections() will be called at end of measure (createGraphicalMeasure)
    }
    /** Sets a voiceEntry's stem direction to one already set in other notes in its beam, if it has one. */
    setBeamNotesWantedStemDirections(voiceEntry) {
        if (!(voiceEntry.Notes.length > 0)) {
            return;
        }
        // don't just set direction if undefined. if there's a note in the beam with a different stem direction, Vexflow draws it with an unending stem.
        // if (voiceEntry.WantedStemDirection === StemDirectionType.Undefined) {
        const beam = voiceEntry.Notes[0].NoteBeam;
        if (beam) {
            // if there is a beam, find any already set stemDirection in the beam:
            for (const note of beam.Notes) {
                // if (note.ParentVoiceEntry === voiceEntry) {
                //     continue; // this could cause a misreading, also potentially in cross-staf beams, in any case it's unnecessary.
                //} else if
                if (note.ParentVoiceEntry.WantedStemDirection !== VoiceEntry_1.StemDirectionType.Undefined) {
                    if (note.ParentVoiceEntry.ParentSourceStaffEntry.ParentStaff.Id === voiceEntry.ParentSourceStaffEntry.ParentStaff.Id) {
                        // set the stem direction
                        voiceEntry.WantedStemDirection = note.ParentVoiceEntry.WantedStemDirection;
                        break;
                    }
                }
            }
        }
    }
}
exports.MusicSheetCalculator = MusicSheetCalculator;


/***/ }),

/***/ "./src/MusicalScore/Graphical/MusicSheetDrawer.ts":
/*!********************************************************!*\
  !*** ./src/MusicalScore/Graphical/MusicSheetDrawer.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSheetDrawer = void 0;
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const DrawingEnums_1 = __webpack_require__(/*! ./DrawingEnums */ "./src/MusicalScore/Graphical/DrawingEnums.ts");
const GraphicalLine_1 = __webpack_require__(/*! ./GraphicalLine */ "./src/MusicalScore/Graphical/GraphicalLine.ts");
const RectangleF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/RectangleF2D */ "./src/Common/DataObjects/RectangleF2D.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const GraphicalLabel_1 = __webpack_require__(/*! ./GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const Label_1 = __webpack_require__(/*! ../Label */ "./src/MusicalScore/Label.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const SystemLine_1 = __webpack_require__(/*! ./SystemLine */ "./src/MusicalScore/Graphical/SystemLine.ts");
const MusicSymbol_1 = __webpack_require__(/*! ./MusicSymbol */ "./src/MusicalScore/Graphical/MusicSymbol.ts");
const DrawingMode_1 = __webpack_require__(/*! ./DrawingMode */ "./src/MusicalScore/Graphical/DrawingMode.ts");
// eslint-disable-next-line
const VexFlow_1 = __webpack_require__(/*! ./VexFlow */ "./src/MusicalScore/Graphical/VexFlow/index.ts");
const StaffLineActivitySymbol_1 = __webpack_require__(/*! ./StaffLineActivitySymbol */ "./src/MusicalScore/Graphical/StaffLineActivitySymbol.ts");
// import { FontStyles } from "../../Common/Enums/FontStyles";
/**
 * Draw a [[GraphicalMusicSheet]] (through the .drawSheet method)
 *
 * The drawing is implemented with a top-down approach, starting from a music sheet, going through pages, systems, staffs...
 * ... and ending in notes, beams, accidentals and other symbols.
 * It's worth to say, that this class just draws the symbols and graphical elements, using the positions that have been computed before.
 * But in any case, some of these previous positioning algorithms need the sizes of the concrete symbols (NoteHeads, sharps, flats, keys...).
 * Therefore, there are some static functions on the 'Bounding Boxes' section used to compute these symbol boxes at the
 * beginning for the later use in positioning algorithms.
 *
 * This class also includes the resizing and positioning of the symbols due to user interaction like zooming or panning.
 */
class MusicSheetDrawer {
    constructor(textMeasurer, drawingParameters) {
        this.drawableBoundingBoxElement = "None"; // process.env.DRAW_BOUNDING_BOX_ELEMENT;
        this.skyLineVisible = false;
        this.bottomLineVisible = false;
        this.phonicScoreMode = DrawingMode_1.PhonicScoreModes.Manual;
        this.textMeasurer = textMeasurer;
        this.splitScreenLineColor = -1;
        this.drawingParameters = drawingParameters;
        this.rules = drawingParameters.Rules;
    }
    set Mode(value) {
        this.phonicScoreMode = value;
    }
    drawSheet(graphicalMusicSheet) {
        this.graphicalMusicSheet = graphicalMusicSheet;
        this.rules = graphicalMusicSheet.ParentMusicSheet.Rules;
        this.drawSplitScreenLine();
        if (this.drawingParameters.drawCursors) {
            for (const line of graphicalMusicSheet.Cursors) {
                if (!line) {
                    // TODO GraphicalMusicSheet.calculateCursorLineAtTimestamp() can return undefined.
                    // why does this happen in the VexFlowMusicSheetDrawer_Test? (it("draws cursor..."))
                    continue;
                }
                const psi = new BoundingBox_1.BoundingBox(line);
                psi.AbsolutePosition = line.Start;
                psi.BorderBottom = line.End.y - line.Start.y;
                psi.BorderRight = line.Width / 2.0;
                psi.BorderLeft = -line.Width / 2.0;
                if (this.isVisible(psi)) {
                    this.drawLineAsVerticalRectangle(line, DrawingEnums_1.GraphicalLayers.Cursor);
                }
            }
        }
        // Draw the vertical ScrollIndicator
        if (this.drawingParameters.drawScrollIndicator) {
            this.drawScrollIndicator();
        }
        // Draw the pages
        const pagesToDraw = Math.min(this.graphicalMusicSheet.MusicPages.length, this.rules.MaxPageToDrawNumber);
        for (let i = 0; i < pagesToDraw; i++) {
            const page = this.graphicalMusicSheet.MusicPages[i];
            this.drawPage(page);
        }
    }
    drawLineAsHorizontalRectangle(line, layer) {
        let rectangle = new RectangleF2D_1.RectangleF2D(line.Start.x, line.End.y - line.Width / 2, line.End.x - line.Start.x, line.Width);
        rectangle = this.applyScreenTransformationForRect(rectangle);
        this.renderRectangle(rectangle, layer, line.styleId, line.colorHex);
    }
    drawLineAsVerticalRectangle(line, layer) {
        const lineStart = line.Start;
        const lineWidth = line.Width;
        let rectangle = new RectangleF2D_1.RectangleF2D(lineStart.x - lineWidth / 2, lineStart.y, lineWidth, line.End.y - lineStart.y);
        rectangle = this.applyScreenTransformationForRect(rectangle);
        this.renderRectangle(rectangle, layer, line.styleId);
    }
    drawLineAsHorizontalRectangleWithOffset(line, offset, layer) {
        const start = new PointF2D_1.PointF2D(line.Start.x + offset.x, line.Start.y + offset.y);
        const end = new PointF2D_1.PointF2D(line.End.x + offset.x, line.End.y + offset.y);
        const width = line.Width;
        let rectangle = new RectangleF2D_1.RectangleF2D(start.x, end.y - width / 2, end.x - start.x, width);
        rectangle = this.applyScreenTransformationForRect(rectangle);
        this.renderRectangle(rectangle, layer, line.styleId);
    }
    drawLineAsVerticalRectangleWithOffset(line, offset, layer) {
        const start = new PointF2D_1.PointF2D(line.Start.x + offset.x, line.Start.y + offset.y);
        const end = new PointF2D_1.PointF2D(line.End.x + offset.x, line.End.y + offset.y);
        const width = line.Width;
        let rectangle = new RectangleF2D_1.RectangleF2D(start.x, start.y, width, end.y - start.y);
        rectangle = this.applyScreenTransformationForRect(rectangle);
        this.renderRectangle(rectangle, layer, line.styleId);
    }
    drawRectangle(rect, layer) {
        const psi = rect.PositionAndShape;
        let rectangle = new RectangleF2D_1.RectangleF2D(psi.AbsolutePosition.x, psi.AbsolutePosition.y, psi.BorderRight, psi.BorderBottom);
        rectangle = this.applyScreenTransformationForRect(rectangle);
        this.renderRectangle(rectangle, layer, rect.style);
    }
    calculatePixelDistance(unitDistance) {
        throw new Error("not implemented");
    }
    drawLabel(graphicalLabel, layer) {
        if (!this.isVisible(graphicalLabel.PositionAndShape)) {
            return undefined;
        }
        const label = graphicalLabel.Label;
        if (label.text.trim() === "") {
            return undefined;
        }
        const screenPosition = this.applyScreenTransformation(graphicalLabel.PositionAndShape.AbsolutePosition);
        const fontHeightInPixel = this.calculatePixelDistance(label.fontHeight);
        const widthInPixel = this.calculatePixelDistance(graphicalLabel.PositionAndShape.Size.width);
        const bitmapWidth = Math.ceil(widthInPixel);
        const bitmapHeight = Math.ceil(fontHeightInPixel * (0.2 + graphicalLabel.TextLines.length));
        switch (label.textAlignment) {
            // Adjust the OSMD-calculated positions to rendering coordinates
            // These have to match the Border settings in GraphicalLabel.setLabelPositionAndShapeBorders()
            // TODO isn't this a Vexflow-specific transformation that should be in VexflowMusicSheetDrawer?
            case TextAlignment_1.TextAlignmentEnum.LeftTop:
                break;
            case TextAlignment_1.TextAlignmentEnum.LeftCenter:
                screenPosition.y -= bitmapHeight / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.LeftBottom:
                screenPosition.y -= bitmapHeight;
                break;
            case TextAlignment_1.TextAlignmentEnum.CenterTop:
                screenPosition.x -= bitmapWidth / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.CenterCenter:
                screenPosition.x -= bitmapWidth / 2;
                screenPosition.y -= bitmapHeight / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.CenterBottom:
                screenPosition.x -= bitmapWidth / 2;
                screenPosition.y -= bitmapHeight;
                break;
            case TextAlignment_1.TextAlignmentEnum.RightTop:
                screenPosition.x -= bitmapWidth;
                break;
            case TextAlignment_1.TextAlignmentEnum.RightCenter:
                screenPosition.x -= bitmapWidth;
                screenPosition.y -= bitmapHeight / 2;
                break;
            case TextAlignment_1.TextAlignmentEnum.RightBottom:
                screenPosition.x -= bitmapWidth;
                screenPosition.y -= bitmapHeight;
                break;
            default:
                throw new Exceptions_1.ArgumentOutOfRangeException("");
        }
        return this.renderLabel(graphicalLabel, layer, bitmapWidth, bitmapHeight, fontHeightInPixel, screenPosition);
    }
    applyScreenTransformation(point) {
        throw new Error("not implemented");
    }
    applyScreenTransformations(points) {
        const transformedPoints = [];
        for (const point of points) {
            transformedPoints.push(this.applyScreenTransformation(point));
        }
        return transformedPoints;
    }
    applyScreenTransformationForRect(rectangle) {
        throw new Error("not implemented");
    }
    drawSplitScreenLine() {
        // empty
    }
    renderRectangle(rectangle, layer, styleId, colorHex = undefined, alpha = 1) {
        throw new Error("not implemented");
    }
    drawScrollIndicator() {
        // empty
    }
    drawSelectionStartSymbol(symbol) {
        // empty
    }
    drawSelectionEndSymbol(symbol) {
        // empty
    }
    renderLabel(graphicalLabel, layer, bitmapWidth, bitmapHeight, heightInPixel, screenPosition) {
        throw new Error("not implemented");
    }
    renderSystemToScreen(system, systemBoundingBoxInPixels, absBoundingRectWithMargin) {
        // empty
    }
    drawMeasure(measure) {
        throw new Error("not implemented");
    }
    drawSkyLine(staffLine) {
        // empty
    }
    drawBottomLine(staffLine) {
        // empty
    }
    drawInstrumentBrace(brace, system) {
        // empty
    }
    drawGroupBracket(bracket, system) {
        // empty
    }
    isVisible(psi) {
        return true;
    }
    drawMusicSystem(system) {
        const absBoundingRectWithMargin = this.getSystemAbsBoundingRect(system);
        const systemBoundingBoxInPixels = this.getSytemBoundingBoxInPixels(absBoundingRectWithMargin);
        this.drawMusicSystemComponents(system, systemBoundingBoxInPixels, absBoundingRectWithMargin);
    }
    getSytemBoundingBoxInPixels(absBoundingRectWithMargin) {
        const systemBoundingBoxInPixels = this.applyScreenTransformationForRect(absBoundingRectWithMargin);
        systemBoundingBoxInPixels.x = Math.round(systemBoundingBoxInPixels.x);
        systemBoundingBoxInPixels.y = Math.round(systemBoundingBoxInPixels.y);
        return systemBoundingBoxInPixels;
    }
    getSystemAbsBoundingRect(system) {
        const relBoundingRect = system.PositionAndShape.BoundingRectangle;
        const absBoundingRectWithMargin = new RectangleF2D_1.RectangleF2D(system.PositionAndShape.AbsolutePosition.x + system.PositionAndShape.BorderLeft - 1, system.PositionAndShape.AbsolutePosition.y + system.PositionAndShape.BorderTop - 1, (relBoundingRect.width + 6), (relBoundingRect.height + 2));
        return absBoundingRectWithMargin;
    }
    drawMusicSystemComponents(musicSystem, systemBoundingBoxInPixels, absBoundingRectWithMargin) {
        const selectStartSymb = this.graphicalMusicSheet.SelectionStartSymbol;
        const selectEndSymb = this.graphicalMusicSheet.SelectionEndSymbol;
        if (this.drawingParameters.drawSelectionStartSymbol) {
            if (selectStartSymb !== undefined && this.isVisible(selectStartSymb.PositionAndShape)) {
                this.drawSelectionStartSymbol(selectStartSymb);
            }
        }
        if (this.drawingParameters.drawSelectionEndSymbol) {
            if (selectEndSymb !== undefined && this.isVisible(selectEndSymb.PositionAndShape)) {
                this.drawSelectionEndSymbol(selectEndSymb);
            }
        }
        for (const staffLine of musicSystem.StaffLines) {
            this.drawStaffLine(staffLine);
            if (this.rules.RenderLyrics) {
                // draw lyric dashes
                if (staffLine.LyricsDashes.length > 0) {
                    this.drawDashes(staffLine.LyricsDashes);
                }
                // draw lyric lines (e.g. LyricExtends: "dich,___")
                if (staffLine.LyricLines.length > 0) {
                    this.drawLyricLines(staffLine.LyricLines, staffLine);
                }
            }
        }
        for (const systemLine of musicSystem.SystemLines) {
            this.drawSystemLineObject(systemLine);
        }
        if (musicSystem.Parent === musicSystem.Parent.Parent.MusicPages[0]) {
            for (const label of musicSystem.Labels) {
                label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
        const instruments = this.graphicalMusicSheet.ParentMusicSheet.Instruments;
        const instrumentsVisible = instruments.filter((instrument) => instrument.Visible).length;
        for (const bracket of musicSystem.InstrumentBrackets) {
            this.drawInstrumentBrace(bracket, musicSystem);
        }
        if (instruments.length > 0) {
            // TODO instead of this check we could save what instruments are in the group bracket,
            //   and only draw it if all these instruments are visible.
            //   Currently the instruments/stafflines aren't saved in the bracket however.
            if (instrumentsVisible > 1) {
                for (const bracket of musicSystem.GroupBrackets) {
                    this.drawGroupBracket(bracket, musicSystem);
                }
            }
            else {
                for (const bracket of musicSystem.GroupBrackets) {
                    bracket.Visible = false; //.setType(VF.StaveConnector.type.NONE);
                }
            }
        }
        if (!this.leadSheet) {
            for (const measureNumberLabel of musicSystem.MeasureNumberLabels) {
                measureNumberLabel.SVGNode = this.drawLabel(measureNumberLabel, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
        for (const staffLine of musicSystem.StaffLines) {
            this.drawStaffLineSymbols(staffLine);
        }
        if (this.drawingParameters.drawMarkedAreas) {
            this.drawMarkedAreas(musicSystem);
        }
        if (this.drawingParameters.drawComments) {
            this.drawComment(musicSystem);
        }
    }
    activateSystemRendering(systemId, absBoundingRect, systemBoundingBoxInPixels, createNewImage) {
        return true;
    }
    drawSystemLineObject(systemLine) {
        // empty
    }
    drawStaffLine(staffLine) {
        for (const measure of staffLine.Measures) {
            this.drawMeasure(measure);
        }
        if (this.rules.RenderLyrics) {
            if (staffLine.LyricsDashes.length > 0) {
                this.drawDashes(staffLine.LyricsDashes);
            }
        }
        this.drawOctaveShifts(staffLine);
        this.drawPedals(staffLine);
        this.drawExpressions(staffLine);
        if (this.skyLineVisible) {
            this.drawSkyLine(staffLine);
        }
        if (this.bottomLineVisible) {
            this.drawBottomLine(staffLine);
        }
    }
    drawLyricLines(lyricLines, staffLine) {
        staffLine.LyricLines.forEach(lyricLine => {
            // TODO maybe we should put this in the calculation (MusicSheetCalculator.calculateLyricExtend)
            // then we can also remove staffLine argument
            // but same addition doesn't work in calculateLyricExtend, because y-spacing happens after lyrics positioning
            lyricLine.Start.y += staffLine.PositionAndShape.AbsolutePosition.y;
            lyricLine.End.y += staffLine.PositionAndShape.AbsolutePosition.y;
            lyricLine.Start.x += staffLine.PositionAndShape.AbsolutePosition.x;
            lyricLine.End.x += staffLine.PositionAndShape.AbsolutePosition.x;
            this.drawGraphicalLine(lyricLine, this.rules.LyricUnderscoreLineWidth, lyricLine.colorHex);
        });
    }
    drawExpressions(staffline) {
        // implemented by subclass (VexFlowMusicSheetDrawer)
    }
    drawGraphicalLine(graphicalLine, lineWidth, colorOrStyle = "black") {
        /* TODO similar checks as in drawLabel
        if (!this.isVisible(new BoundingBox(graphicalLine.Start,)) {
            return;
        }
        */
        return this.drawLine(graphicalLine.Start, graphicalLine.End, colorOrStyle, lineWidth);
    }
    drawLine(start, stop, color = "#FF0000FF", lineWidth) {
        // implemented by subclass (VexFlowMusicSheetDrawer)
        return undefined;
    }
    /**
     * Draw all dashes to the canvas
     * @param lyricsDashes Array of lyric dashes to be drawn
     * @param layer Number of the layer that the lyrics should be drawn in
     */
    drawDashes(lyricsDashes) {
        lyricsDashes.forEach(dash => dash.SVGNode = this.drawLabel(dash, DrawingEnums_1.GraphicalLayers.Notes));
    }
    // protected drawSlur(slur: GraphicalSlur, abs: PointF2D): void {
    //
    // }
    drawOctaveShifts(staffLine) {
        return;
    }
    drawStaffLines(staffLine) {
        if (staffLine.StaffLines) {
            const position = staffLine.PositionAndShape.AbsolutePosition;
            for (let i = 0; i < 5; i++) {
                this.drawLineAsHorizontalRectangleWithOffset(staffLine.StaffLines[i], position, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
    }
    // protected drawEnding(ending: GraphicalRepetitionEnding, absolutePosition: PointF2D): void {
    //     if (undefined !== ending.Left)
    //         drawLineAsVerticalRectangle(ending.Left, absolutePosition, <number>GraphicalLayers.Notes);
    //     this.drawLineAsHorizontalRectangle(ending.Top, absolutePosition, <number>GraphicalLayers.Notes);
    //     if (undefined !== ending.Right)
    //         drawLineAsVerticalRectangle(ending.Right, absolutePosition, <number>GraphicalLayers.Notes);
    //     this.drawLabel(ending.Label, <number>GraphicalLayers.Notes);
    // }
    /**
     * Draws an instantaneous dynamic expression (p, pp, f, ff, ...) to the canvas
     * @param instantaneousDynamic GraphicalInstantaneousDynamicExpression to be drawn
     */
    drawInstantaneousDynamic(instantaneousDynamic) {
        throw new Error("not implemented");
    }
    /**
     * Draws a continuous dynamic expression (wedges) to the canvas
     * @param expression GraphicalContinuousDynamicExpression to be drawn
     */
    drawContinuousDynamic(expression) {
        throw new Error("not implemented");
    }
    drawSymbol(symbol, symbolStyle, position, scalingFactor = 1, layer = DrawingEnums_1.GraphicalLayers.Notes) {
        //empty
    }
    get leadSheet() {
        return this.graphicalMusicSheet.LeadSheet;
    }
    set leadSheet(value) {
        this.graphicalMusicSheet.LeadSheet = value;
    }
    drawPage(page) {
        if (!this.isVisible(page.PositionAndShape)) {
            return;
        }
        for (const system of page.MusicSystems) {
            if (this.isVisible(system.PositionAndShape)) {
                this.drawMusicSystem(system);
            }
        }
        if (page === page.Parent.MusicPages[0]) {
            for (const label of page.Labels) {
                label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
        // Draw bounding boxes for debug purposes. This has to be at the end because only
        // then all the calculations and recalculations are done
        if (this.drawableBoundingBoxElement) {
            this.drawBoundingBoxes(page.PositionAndShape, 0, this.drawableBoundingBoxElement);
        }
    }
    /**
     * Draw bounding boxes aroung GraphicalObjects
     * @param startBox Bounding Box that is used as a staring point to recursively go through all child elements
     * @param layer Layer to draw to
     * @param type Type of element to show bounding boxes for as string.
     */
    drawBoundingBoxes(startBox, layer = 0, type = "all") {
        const dataObjectString = startBox.DataObject.constructor.name; // only works with non-minified build or sourcemap
        let typeMatch = false;
        if (type === "all") {
            typeMatch = true;
        }
        else {
            if (type === "VexFlowStaffEntry") {
                typeMatch = startBox.DataObject instanceof VexFlow_1.VexFlowStaffEntry;
            }
            else if (type === "VexFlowMeasure") {
                typeMatch = startBox.DataObject instanceof VexFlow_1.VexFlowMeasure;
            }
            else if (type === "VexFlowGraphicalNote") {
                typeMatch = startBox.DataObject instanceof VexFlow_1.VexFlowGraphicalNote;
            }
            else if (type === "VexFlowVoiceEntry") {
                typeMatch = startBox.DataObject instanceof VexFlow_1.VexFlowVoiceEntry;
            }
            else if (type === "GraphicalLabel") {
                typeMatch = startBox.DataObject instanceof GraphicalLabel_1.GraphicalLabel;
            }
            else if (type === "VexFlowStaffLine") {
                typeMatch = startBox.DataObject instanceof VexFlow_1.VexFlowStaffLine;
            }
            else if (type === "SystemLine") {
                typeMatch = startBox.DataObject instanceof SystemLine_1.SystemLine;
            }
            else if (type === "StaffLineActivitySymbol") {
                typeMatch = startBox.DataObject instanceof StaffLineActivitySymbol_1.StaffLineActivitySymbol;
            }
            else if (type === "VexFlowContinuousDynamicExpression") {
                typeMatch = startBox.DataObject instanceof VexFlow_1.VexFlowContinuousDynamicExpression;
            }
            // else if (type === "MusicSystem") {
            //     typeMatch = startBox.DataObject instanceof MusicSystem;
            // } else if (type === "GraphicalMusicPage") {
            //     typeMatch = startBox.DataObject instanceof GraphicalMusicPage;
            // }
        }
        if (typeMatch || dataObjectString === type) {
            this.drawBoundingBox(startBox, undefined, true, dataObjectString, layer);
        }
        layer++;
        startBox.ChildElements.forEach(bb => this.drawBoundingBoxes(bb, layer, type));
    }
    drawBoundingBox(bbox, color = undefined, drawCross = false, labelText = undefined, layer = 0) {
        let tmpRect = new RectangleF2D_1.RectangleF2D(bbox.AbsolutePosition.x + bbox.BorderMarginLeft, bbox.AbsolutePosition.y + bbox.BorderMarginTop, bbox.BorderMarginRight - bbox.BorderMarginLeft, bbox.BorderMarginBottom - bbox.BorderMarginTop);
        if (drawCross) {
            this.drawLineAsHorizontalRectangle(new GraphicalLine_1.GraphicalLine(new PointF2D_1.PointF2D(bbox.AbsolutePosition.x - 1, bbox.AbsolutePosition.y), new PointF2D_1.PointF2D(bbox.AbsolutePosition.x + 1, bbox.AbsolutePosition.y), 0.1, DrawingEnums_1.OutlineAndFillStyleEnum.BaseWritingColor, color), layer - 1);
            this.drawLineAsVerticalRectangle(new GraphicalLine_1.GraphicalLine(new PointF2D_1.PointF2D(bbox.AbsolutePosition.x, bbox.AbsolutePosition.y - 1), new PointF2D_1.PointF2D(bbox.AbsolutePosition.x, bbox.AbsolutePosition.y + 1), 0.1, DrawingEnums_1.OutlineAndFillStyleEnum.BaseWritingColor, color), layer - 1);
        }
        tmpRect = this.applyScreenTransformationForRect(tmpRect);
        const rectNode = this.renderRectangle(tmpRect, DrawingEnums_1.GraphicalLayers.Background, layer, color, 0.5);
        if (labelText) {
            const label = new Label_1.Label(labelText);
            this.renderLabel(new GraphicalLabel_1.GraphicalLabel(label, 0.8, TextAlignment_1.TextAlignmentEnum.CenterCenter, this.rules), layer, tmpRect.width, tmpRect.height, tmpRect.height, new PointF2D_1.PointF2D(tmpRect.x, tmpRect.y + 12));
            // theoretically we should return the nodes from renderLabel here as well, so they can also be removed later
        }
        return rectNode;
    }
    drawMarkedAreas(system) {
        for (const markedArea of system.GraphicalMarkedAreas) {
            if (markedArea) {
                if (markedArea.systemRectangle) {
                    this.drawRectangle(markedArea.systemRectangle, DrawingEnums_1.GraphicalLayers.Background);
                }
                if (markedArea.settings) {
                    markedArea.settings.SVGNode = this.drawLabel(markedArea.settings, DrawingEnums_1.GraphicalLayers.Comment);
                }
                if (markedArea.labelRectangle) {
                    this.drawRectangle(markedArea.labelRectangle, DrawingEnums_1.GraphicalLayers.Background);
                }
                if (markedArea.label) {
                    markedArea.label.SVGNode = this.drawLabel(markedArea.label, DrawingEnums_1.GraphicalLayers.Comment);
                }
            }
        }
    }
    drawComment(system) {
        for (const comment of system.GraphicalComments) {
            if (comment) {
                if (comment.settings) {
                    comment.settings.SVGNode = this.drawLabel(comment.settings, DrawingEnums_1.GraphicalLayers.Comment);
                }
                if (comment.label) {
                    comment.label.SVGNode = this.drawLabel(comment.label, DrawingEnums_1.GraphicalLayers.Comment);
                }
            }
        }
    }
    drawStaffLineSymbols(staffLine) {
        const parentInst = staffLine.ParentStaff.ParentInstrument;
        const absX = staffLine.PositionAndShape.AbsolutePosition.x;
        const absY = staffLine.PositionAndShape.AbsolutePosition.y + 2;
        const borderRight = staffLine.PositionAndShape.BorderRight;
        if (parentInst.highlight && this.drawingParameters.drawHighlights) {
            this.drawLineAsHorizontalRectangle(new GraphicalLine_1.GraphicalLine(new PointF2D_1.PointF2D(absX, absY), new PointF2D_1.PointF2D(absX + borderRight, absY), 4, DrawingEnums_1.OutlineAndFillStyleEnum.Highlighted), DrawingEnums_1.GraphicalLayers.Highlight);
        }
        let style = DrawingMode_1.MusicSymbolDrawingStyle.Disabled;
        let symbol = MusicSymbol_1.MusicSymbol.PLAY;
        let drawSymbols = this.drawingParameters.drawActivitySymbols;
        switch (this.phonicScoreMode) {
            case DrawingMode_1.PhonicScoreModes.Midi:
                symbol = MusicSymbol_1.MusicSymbol.PLAY;
                if (this.midiPlaybackAvailable && staffLine.ParentStaff.audible) {
                    style = DrawingMode_1.MusicSymbolDrawingStyle.PlaybackSymbols;
                }
                break;
            case DrawingMode_1.PhonicScoreModes.Following:
                symbol = MusicSymbol_1.MusicSymbol.MIC;
                if (staffLine.ParentStaff.following) {
                    style = DrawingMode_1.MusicSymbolDrawingStyle.FollowSymbols;
                }
                break;
            default:
                drawSymbols = false;
                break;
        }
        if (drawSymbols) {
            const p = new PointF2D_1.PointF2D(absX + borderRight + 2, absY);
            this.drawSymbol(symbol, style, p);
        }
        if (this.drawingParameters.drawErrors) {
            for (const measure of staffLine.Measures) {
                const measurePSI = measure.PositionAndShape;
                const absXPSI = measurePSI.AbsolutePosition.x;
                const absYPSI = measurePSI.AbsolutePosition.y + 2;
                if (measure.hasError && this.graphicalMusicSheet.ParentMusicSheet.DrawErroneousMeasures) {
                    this.drawLineAsHorizontalRectangle(new GraphicalLine_1.GraphicalLine(new PointF2D_1.PointF2D(absXPSI, absYPSI), new PointF2D_1.PointF2D(absXPSI + measurePSI.BorderRight, absYPSI), 4, DrawingEnums_1.OutlineAndFillStyleEnum.ErrorUnderlay), DrawingEnums_1.GraphicalLayers.MeasureError);
                }
            }
        }
    }
}
exports.MusicSheetDrawer = MusicSheetDrawer;


/***/ }),

/***/ "./src/MusicalScore/Graphical/MusicSymbol.ts":
/*!***************************************************!*\
  !*** ./src/MusicalScore/Graphical/MusicSymbol.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSymbol = void 0;
var MusicSymbol;
(function (MusicSymbol) {
    MusicSymbol[MusicSymbol["Unused_first_Symbol"] = 0] = "Unused_first_Symbol";
    MusicSymbol[MusicSymbol["BLACK_HEAD"] = 1] = "BLACK_HEAD";
    MusicSymbol[MusicSymbol["UPWARDS_TAIL"] = 2] = "UPWARDS_TAIL";
    MusicSymbol[MusicSymbol["DOWNWARDS_TAIL"] = 3] = "DOWNWARDS_TAIL";
    MusicSymbol[MusicSymbol["UPWARDS_DOUBLE_TAIL"] = 4] = "UPWARDS_DOUBLE_TAIL";
    MusicSymbol[MusicSymbol["DOWNWARDS_DOUBLE_TAIL"] = 5] = "DOWNWARDS_DOUBLE_TAIL";
    MusicSymbol[MusicSymbol["UPWARDS_TRIPLE_TAIL"] = 6] = "UPWARDS_TRIPLE_TAIL";
    MusicSymbol[MusicSymbol["DOWNWARDS_TRIPLE_TAIL"] = 7] = "DOWNWARDS_TRIPLE_TAIL";
    MusicSymbol[MusicSymbol["UPWARDS_QUAD_TAIL"] = 8] = "UPWARDS_QUAD_TAIL";
    MusicSymbol[MusicSymbol["DOWNWARDS_QUAD_TAIL"] = 9] = "DOWNWARDS_QUAD_TAIL";
    MusicSymbol[MusicSymbol["ROUND_HEAD"] = 10] = "ROUND_HEAD";
    MusicSymbol[MusicSymbol["WHITE_HEAD"] = 11] = "WHITE_HEAD";
    MusicSymbol[MusicSymbol["G_CLEF"] = 12] = "G_CLEF";
    MusicSymbol[MusicSymbol["F_CLEF"] = 13] = "F_CLEF";
    MusicSymbol[MusicSymbol["C_CLEF"] = 14] = "C_CLEF";
    MusicSymbol[MusicSymbol["BREVE"] = 15] = "BREVE";
    MusicSymbol[MusicSymbol["BREVE_REST"] = 16] = "BREVE_REST";
    MusicSymbol[MusicSymbol["COMMON_TIME"] = 17] = "COMMON_TIME";
    MusicSymbol[MusicSymbol["CUT_TIME"] = 18] = "CUT_TIME";
    MusicSymbol[MusicSymbol["WHOLE_REST"] = 19] = "WHOLE_REST";
    MusicSymbol[MusicSymbol["HALF_REST"] = 20] = "HALF_REST";
    MusicSymbol[MusicSymbol["QUARTER_REST"] = 21] = "QUARTER_REST";
    MusicSymbol[MusicSymbol["EIGHTH_REST"] = 22] = "EIGHTH_REST";
    MusicSymbol[MusicSymbol["SIXTEENTH_REST"] = 23] = "SIXTEENTH_REST";
    MusicSymbol[MusicSymbol["THIRTYSECOND_REST"] = 24] = "THIRTYSECOND_REST";
    MusicSymbol[MusicSymbol["SIXTYFOURTH_REST"] = 25] = "SIXTYFOURTH_REST";
    MusicSymbol[MusicSymbol["FLAT"] = 26] = "FLAT";
    MusicSymbol[MusicSymbol["SHARP"] = 27] = "SHARP";
    MusicSymbol[MusicSymbol["NATURAL"] = 28] = "NATURAL";
    MusicSymbol[MusicSymbol["DOUBLE_FLAT"] = 29] = "DOUBLE_FLAT";
    MusicSymbol[MusicSymbol["DOUBLE_SHARP"] = 30] = "DOUBLE_SHARP";
    MusicSymbol[MusicSymbol["ZERO"] = 31] = "ZERO";
    MusicSymbol[MusicSymbol["ONE"] = 32] = "ONE";
    MusicSymbol[MusicSymbol["TWO"] = 33] = "TWO";
    MusicSymbol[MusicSymbol["THREE"] = 34] = "THREE";
    MusicSymbol[MusicSymbol["FOUR"] = 35] = "FOUR";
    MusicSymbol[MusicSymbol["FIVE"] = 36] = "FIVE";
    MusicSymbol[MusicSymbol["SIX"] = 37] = "SIX";
    MusicSymbol[MusicSymbol["SEVEN"] = 38] = "SEVEN";
    MusicSymbol[MusicSymbol["EIGHT"] = 39] = "EIGHT";
    MusicSymbol[MusicSymbol["NINE"] = 40] = "NINE";
    MusicSymbol[MusicSymbol["DOT"] = 41] = "DOT";
    MusicSymbol[MusicSymbol["FERMATA"] = 42] = "FERMATA";
    MusicSymbol[MusicSymbol["INVERTED_FERMATA"] = 43] = "INVERTED_FERMATA";
    MusicSymbol[MusicSymbol["SPICCATO"] = 44] = "SPICCATO";
    MusicSymbol[MusicSymbol["TENUTO"] = 45] = "TENUTO";
    MusicSymbol[MusicSymbol["MARCATO"] = 46] = "MARCATO";
    MusicSymbol[MusicSymbol["MARCATISSIMO"] = 47] = "MARCATISSIMO";
    MusicSymbol[MusicSymbol["INVERTED_MARCATISSIMO"] = 48] = "INVERTED_MARCATISSIMO";
    MusicSymbol[MusicSymbol["P"] = 49] = "P";
    MusicSymbol[MusicSymbol["F"] = 50] = "F";
    MusicSymbol[MusicSymbol["S"] = 51] = "S";
    MusicSymbol[MusicSymbol["Z"] = 52] = "Z";
    MusicSymbol[MusicSymbol["M"] = 53] = "M";
    MusicSymbol[MusicSymbol["R"] = 54] = "R";
    MusicSymbol[MusicSymbol["SEGNO"] = 55] = "SEGNO";
    MusicSymbol[MusicSymbol["CODA"] = 56] = "CODA";
    MusicSymbol[MusicSymbol["DRUM_CLEF"] = 57] = "DRUM_CLEF";
    MusicSymbol[MusicSymbol["G_CLEF_SUB8"] = 58] = "G_CLEF_SUB8";
    MusicSymbol[MusicSymbol["G_CLEF_SUPER8"] = 59] = "G_CLEF_SUPER8";
    MusicSymbol[MusicSymbol["G_CLEF_SUB15"] = 60] = "G_CLEF_SUB15";
    MusicSymbol[MusicSymbol["G_CLEF_SUPER15"] = 61] = "G_CLEF_SUPER15";
    MusicSymbol[MusicSymbol["F_CLEF_SUB8"] = 62] = "F_CLEF_SUB8";
    MusicSymbol[MusicSymbol["F_CLEF_SUPER8"] = 63] = "F_CLEF_SUPER8";
    MusicSymbol[MusicSymbol["F_CLEF_SUB15"] = 64] = "F_CLEF_SUB15";
    MusicSymbol[MusicSymbol["F_CLEF_SUPER15"] = 65] = "F_CLEF_SUPER15";
    MusicSymbol[MusicSymbol["DOWN_BOW"] = 66] = "DOWN_BOW";
    MusicSymbol[MusicSymbol["MORDENT"] = 67] = "MORDENT";
    MusicSymbol[MusicSymbol["INVERTED_MORDENT"] = 68] = "INVERTED_MORDENT";
    MusicSymbol[MusicSymbol["TURN"] = 69] = "TURN";
    MusicSymbol[MusicSymbol["INVERTED_TURN"] = 70] = "INVERTED_TURN";
    MusicSymbol[MusicSymbol["LEFTHAND_PIZZICATO"] = 71] = "LEFTHAND_PIZZICATO";
    MusicSymbol[MusicSymbol["RELEASE_PED"] = 72] = "RELEASE_PED";
    MusicSymbol[MusicSymbol["ENGAGE_PED"] = 73] = "ENGAGE_PED";
    MusicSymbol[MusicSymbol["VA8"] = 74] = "VA8";
    MusicSymbol[MusicSymbol["VB8"] = 75] = "VB8";
    MusicSymbol[MusicSymbol["TRILL"] = 76] = "TRILL";
    MusicSymbol[MusicSymbol["MA15"] = 77] = "MA15";
    MusicSymbol[MusicSymbol["MB15"] = 78] = "MB15";
    MusicSymbol[MusicSymbol["HIGH"] = 79] = "HIGH";
    MusicSymbol[MusicSymbol["PLAY"] = 80] = "PLAY";
    MusicSymbol[MusicSymbol["MIC"] = 81] = "MIC";
    MusicSymbol[MusicSymbol["SNAP_PIZZICATO"] = 82] = "SNAP_PIZZICATO";
    MusicSymbol[MusicSymbol["NATURAL_HARMONIC"] = 83] = "NATURAL_HARMONIC";
    MusicSymbol[MusicSymbol["EditPen"] = 84] = "EditPen";
    MusicSymbol[MusicSymbol["PEDAL_BRACKET"] = 85] = "PEDAL_BRACKET";
    MusicSymbol[MusicSymbol["PEDAL_MIXED"] = 86] = "PEDAL_MIXED";
    MusicSymbol[MusicSymbol["PEDAL_SYMBOL"] = 87] = "PEDAL_SYMBOL";
})(MusicSymbol = exports.MusicSymbol || (exports.MusicSymbol = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/MusicSystem.ts":
/*!***************************************************!*\
  !*** ./src/MusicalScore/Graphical/MusicSystem.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSystem = void 0;
const Instrument_1 = __webpack_require__(/*! ../Instrument */ "./src/MusicalScore/Instrument.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const GraphicalLabel_1 = __webpack_require__(/*! ./GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ./SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
const SystemLinePosition_1 = __webpack_require__(/*! ./SystemLinePosition */ "./src/MusicalScore/Graphical/SystemLinePosition.ts");
const Label_1 = __webpack_require__(/*! ../Label */ "./src/MusicalScore/Label.ts");
/**
 * A MusicSystem contains the [[StaffLine]]s for all instruments, until a line break
 */
class MusicSystem extends GraphicalObject_1.GraphicalObject {
    constructor(id) {
        super();
        this.needsToBeRedrawn = true;
        this.staffLines = [];
        this.graphicalMeasures = [];
        /** Dictionary of (Instruments and) labels.
         * note that the key needs to be unique, GraphicalLabel is not unique yet.
         * That is why the labels are labels.values() and not labels.keys().
         */
        this.labels = new typescript_collections_1.Dictionary();
        this.measureNumberLabels = [];
        this.objectsToRedraw = [];
        this.instrumentBrackets = [];
        this.groupBrackets = [];
        this.graphicalMarkedAreas = [];
        this.graphicalComments = [];
        this.systemLines = [];
        this.breaksPage = false;
        this.id = id;
        this.boundingBox = new BoundingBox_1.BoundingBox(this);
        this.maxLabelLength = 0.0;
    }
    get Parent() {
        return this.parent;
    }
    set Parent(value) {
        // remove from old page
        if (this.parent) {
            const index = this.parent.MusicSystems.indexOf(this, 0);
            if (index > -1) {
                this.parent.MusicSystems.splice(index, 1);
            }
        }
        this.parent = value;
        this.boundingBox.Parent = value.PositionAndShape;
    }
    get NextSystem() {
        const idxInParent = this.Parent.MusicSystems.indexOf(this);
        return idxInParent !== this.Parent.MusicSystems.length ? this.Parent.MusicSystems[idxInParent + 1] : undefined;
    }
    get StaffLines() {
        return this.staffLines;
    }
    get GraphicalMeasures() {
        return this.graphicalMeasures;
    }
    get MeasureNumberLabels() {
        return this.measureNumberLabels;
    }
    get Labels() {
        return this.labels.values();
    }
    get ObjectsToRedraw() {
        return this.objectsToRedraw;
    }
    get InstrumentBrackets() {
        return this.instrumentBrackets;
    }
    get GroupBrackets() {
        return this.groupBrackets;
    }
    get GraphicalMarkedAreas() {
        return this.graphicalMarkedAreas;
    }
    get GraphicalComments() {
        return this.graphicalComments;
    }
    get SystemLines() {
        return this.systemLines;
    }
    get Id() {
        return this.id;
    }
    /**
     * Create the left vertical Line connecting all staves of the [[MusicSystem]].
     * @param lineWidth
     * @param systemLabelsRightMargin
     */
    createSystemLeftLine(lineWidth, systemLabelsRightMargin, isFirstSystem) {
        let xPosition = -lineWidth / 2;
        if (isFirstSystem) {
            xPosition = this.maxLabelLength + systemLabelsRightMargin - lineWidth / 2;
        }
        const top = this.staffLines[0].Measures[0];
        let bottom = undefined;
        if (this.staffLines.length > 1) {
            bottom = this.staffLines[this.staffLines.length - 1].Measures[0];
        }
        const leftSystemLine = this.createSystemLine(xPosition, lineWidth, SystemLinesEnum_1.SystemLinesEnum.SingleThin, SystemLinePosition_1.SystemLinePosition.MeasureBegin, this, top, bottom);
        this.SystemLines.push(leftSystemLine);
        leftSystemLine.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(xPosition, 0);
        leftSystemLine.PositionAndShape.BorderLeft = 0;
        leftSystemLine.PositionAndShape.BorderRight = lineWidth;
        leftSystemLine.PositionAndShape.BorderTop = leftSystemLine.PositionAndShape.Parent.BorderTop;
        leftSystemLine.PositionAndShape.BorderBottom = leftSystemLine.PositionAndShape.Parent.BorderBottom;
        // TODO this is arguably still too large for the systemline bbox, but at least not larger than the MusicSystem anymore.
        //   see https://github.com/opensheetmusicdisplay/opensheetmusicdisplay/issues/1245
        this.createLinesForSystemLine(leftSystemLine);
    }
    /**
     * Create the vertical Lines after the End of all [[StaffLine]]'s Measures
     * @param xPosition
     * @param lineWidth
     * @param lineType
     * @param linePosition indicates if the line belongs to start or end of measure
     * @param measureIndex the measure index within the staffline
     * @param measure
     */
    createVerticalLineForMeasure(xPosition, lineWidth, lineType, linePosition, measureIndex, measure) {
        //return; // TODO check why there's a bold line here for the double barline sample
        const staffLine = measure.ParentStaffLine;
        const staffLineRelative = new PointF2D_1.PointF2D(staffLine.PositionAndShape.RelativePosition.x, staffLine.PositionAndShape.RelativePosition.y);
        const staves = staffLine.ParentStaff.ParentInstrument.Staves;
        if (staffLine.ParentStaff === staves[0]) {
            let bottomMeasure = undefined;
            if (staves.length > 1) {
                bottomMeasure = this.getBottomStaffLine(staffLine).Measures[measureIndex];
            }
            const singleVerticalLineAfterMeasure = this.createSystemLine(xPosition, lineWidth, lineType, linePosition, this, measure, bottomMeasure);
            const systemXPosition = staffLineRelative.x + xPosition;
            singleVerticalLineAfterMeasure.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(systemXPosition, 0);
            singleVerticalLineAfterMeasure.PositionAndShape.BorderLeft = 0;
            singleVerticalLineAfterMeasure.PositionAndShape.BorderRight = lineWidth;
            this.SystemLines.push(singleVerticalLineAfterMeasure);
        }
    }
    /**
     * Set the y-Positions of all the system lines in the system and creates the graphical Lines and dots within.
     * @param rules
     */
    setYPositionsToVerticalLineObjectsAndCreateLines(rules) {
        // empty
    }
    calculateBorders(rules) {
        // empty
    }
    alignBeginInstructions() {
        // empty
    }
    GetLeftBorderAbsoluteXPosition() {
        return this.StaffLines[0].PositionAndShape.AbsolutePosition.x + this.StaffLines[0].Measures[0].beginInstructionsWidth;
    }
    GetRightBorderAbsoluteXPosition() {
        return this.StaffLines[0].PositionAndShape.AbsolutePosition.x + this.StaffLines[0].StaffLines[0].End.x;
    }
    AddGraphicalMeasures(graphicalMeasures) {
        for (let idx = 0, len = graphicalMeasures.length; idx < len; ++idx) {
            const graphicalMeasure = graphicalMeasures[idx];
            graphicalMeasure.ParentMusicSystem = this;
        }
        this.graphicalMeasures.push(graphicalMeasures);
    }
    GetSystemsFirstTimeStamp() {
        return this.graphicalMeasures[0][0].parentSourceMeasure.AbsoluteTimestamp;
    }
    GetSystemsLastTimeStamp() {
        const m = this.graphicalMeasures[this.graphicalMeasures.length - 1][0].parentSourceMeasure;
        return Fraction_1.Fraction.plus(m.AbsoluteTimestamp, m.Duration);
    }
    /**
     * Create an InstrumentBracket for each multiStave Instrument.
     * @param instruments
     * @param staffHeight
     */
    createInstrumentBrackets(instruments, staffHeight) {
        for (let idx = 0, len = instruments.length; idx < len; ++idx) {
            const instrument = instruments[idx];
            if (instrument.Staves.length > 1) {
                let firstStaffLine = undefined, lastStaffLine = undefined;
                for (let idx2 = 0, len2 = this.staffLines.length; idx2 < len2; ++idx2) {
                    const staffLine = this.staffLines[idx2];
                    if (staffLine.ParentStaff === instrument.Staves[0]) {
                        firstStaffLine = staffLine;
                    }
                    if (staffLine.ParentStaff === instrument.Staves[instrument.Staves.length - 1]) {
                        lastStaffLine = staffLine;
                    }
                }
                if (firstStaffLine && lastStaffLine) {
                    this.createInstrumentBracket(firstStaffLine, lastStaffLine);
                }
            }
        }
    }
    /**
     * Create a GroupBracket for an [[InstrumentalGroup]].
     * @param instrumentGroups
     * @param staffHeight
     * @param recursionDepth
     */
    createGroupBrackets(instrumentGroups, staffHeight, recursionDepth) {
        for (let idx = 0, len = instrumentGroups.length; idx < len; ++idx) {
            const instrumentGroup = instrumentGroups[idx];
            if (instrumentGroup.InstrumentalGroups.length < 1) {
                continue;
            }
            const instrument1 = this.findFirstVisibleInstrumentInInstrumentalGroup(instrumentGroup);
            const instrument2 = this.findLastVisibleInstrumentInInstrumentalGroup(instrumentGroup);
            if (!instrument1 || !instrument2) {
                continue;
            }
            let firstStaffLine = undefined;
            let lastStaffLine = undefined;
            for (let idx2 = 0, len2 = this.staffLines.length; idx2 < len2; ++idx2) {
                const staffLine = this.staffLines[idx2];
                if (staffLine.ParentStaff === instrument1.Staves[0]) {
                    firstStaffLine = staffLine;
                }
                if (staffLine.ParentStaff === instrument2.Staves[0]) {
                    lastStaffLine = staffLine;
                }
            }
            if (firstStaffLine && lastStaffLine) {
                this.createGroupBracket(firstStaffLine, lastStaffLine, recursionDepth);
            }
            if (instrumentGroup.InstrumentalGroups.length < 1) {
                continue;
            }
            this.createGroupBrackets(instrumentGroup.InstrumentalGroups, staffHeight, recursionDepth + 1);
        }
    }
    /**
     * Create the Instrument's Labels (only for the first [[MusicSystem]] of the first MusicPage).
     * @param instrumentLabelTextHeight
     * @param systemLabelsRightMargin
     * @param labelMarginBorderFactor
     */
    createMusicSystemLabel(instrumentLabelTextHeight, systemLabelsRightMargin, labelMarginBorderFactor, isFirstSystem = false) {
        var _a;
        const originalSystemLabelsRightMargin = systemLabelsRightMargin;
        for (let idx = 0, len = this.staffLines.length; idx < len; ++idx) {
            const instrument = this.staffLines[idx].ParentStaff.ParentInstrument;
            let instrNameLabel;
            if (isFirstSystem) {
                instrNameLabel = instrument.NameLabel;
                if (!this.rules.RenderPartNames || !(instrNameLabel === null || instrNameLabel === void 0 ? void 0 : instrNameLabel.print)) {
                    instrNameLabel = new Label_1.Label("", instrument.NameLabel.textAlignment, instrument.NameLabel.font);
                    systemLabelsRightMargin = 0; // might affect lyricist/tempo placement. but without this there's still some extra x-spacing.
                }
            }
            else {
                if (!this.rules.RenderPartAbbreviations || !this.rules.RenderPartNames // don't render abbreviations if we don't render part names
                    || this.staffLines.length === 1 // don't render part abbreviations if there's only one instrument/part (could be an option in the future)
                    || !instrument.PartAbbreviation
                    || instrument.PartAbbreviation === "") {
                    return;
                }
                const labelText = instrument.PartAbbreviation;
                // const labelText: string = instrument.NameLabel.text[0] + ".";
                instrNameLabel = new Label_1.Label(labelText, instrument.NameLabel.textAlignment, instrument.NameLabel.font);
            }
            if ((_a = instrument === null || instrument === void 0 ? void 0 : instrument.NameLabel) === null || _a === void 0 ? void 0 : _a.print) {
                const graphicalLabel = new GraphicalLabel_1.GraphicalLabel(instrNameLabel, instrumentLabelTextHeight, TextAlignment_1.TextAlignmentEnum.LeftCenter, this.rules, this.boundingBox);
                graphicalLabel.setLabelPositionAndShapeBorders();
                this.labels.setValue(instrument, graphicalLabel);
                // X-Position will be 0 (Label starts at the same PointF_2D with MusicSystem)
                // Y-Position will be calculated after the y-Spacing
                // graphicalLabel.PositionAndShape.RelativePosition = new PointF2D(0.0, 0.0);
            }
            else {
                systemLabelsRightMargin = 0;
            }
        }
        // calculate maxLabelLength (needed for X-Spacing)
        this.maxLabelLength = 0.0;
        const labels = this.labels.values();
        for (let idx = 0, len = labels.length; idx < len; ++idx) {
            const label = labels[idx];
            if (!label.Label.print) {
                continue;
            }
            if (label.PositionAndShape.Size.width > this.maxLabelLength) {
                this.maxLabelLength = label.PositionAndShape.Size.width;
                systemLabelsRightMargin = originalSystemLabelsRightMargin;
            }
        }
        this.updateMusicSystemStaffLineXPosition(systemLabelsRightMargin);
    }
    /**
     * Set the Y-Positions for the MusicSystem's Labels.
     */
    setMusicSystemLabelsYPosition() {
        this.labels.forEach((key, value) => {
            let ypositionSum = 0;
            let staffCounter = 0;
            for (let i = 0; i < this.staffLines.length; i++) {
                if (this.staffLines[i].ParentStaff.ParentInstrument === key) {
                    for (let j = i; j < this.staffLines.length; j++) {
                        const staffLine = this.staffLines[j];
                        if (staffLine.ParentStaff.ParentInstrument !== key) {
                            break;
                        }
                        ypositionSum += staffLine.PositionAndShape.RelativePosition.y;
                        staffCounter++;
                    }
                    break;
                }
            }
            if (staffCounter > 0) {
                value.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, ypositionSum / staffCounter + 2.0);
            }
        });
    }
    /**
     * Check if two "adjacent" StaffLines have BOTH a StaffEntry with a StaffEntryLink.
     * This is needed for the y-spacing algorithm.
     * @returns {boolean}
     */
    checkStaffEntriesForStaffEntryLink() {
        let first = false;
        let second = false;
        for (let i = 0; i < this.staffLines.length - 1; i++) {
            for (let idx = 0, len = this.staffLines[i].Measures.length; idx < len; ++idx) {
                const measure = this.staffLines[i].Measures[idx];
                for (let idx2 = 0, len2 = measure.staffEntries.length; idx2 < len2; ++idx2) {
                    const staffEntry = measure.staffEntries[idx2];
                    if (staffEntry.sourceStaffEntry.Link) {
                        first = true;
                    }
                }
            }
            for (let idx = 0, len = this.staffLines[i + 1].Measures.length; idx < len; ++idx) {
                const measure = this.staffLines[i + 1].Measures[idx];
                for (let idx2 = 0, len2 = measure.staffEntries.length; idx2 < len2; ++idx2) {
                    const staffEntry = measure.staffEntries[idx2];
                    if (staffEntry.sourceStaffEntry.Link) {
                        second = true;
                    }
                }
            }
        }
        if (first && second) {
            return true;
        }
        return false;
    }
    getBottomStaffLine(topStaffLine) {
        const staves = topStaffLine.ParentStaff.ParentInstrument.Staves;
        const last = staves[staves.length - 1];
        for (const line of topStaffLine.ParentMusicSystem.staffLines) {
            if (line.ParentStaff === last) {
                return line;
            }
        }
        return undefined;
    }
    /**
     * Here the system line is generated, which acts as the container of graphical lines and dots that will be finally rendered.
     * It holds al the logical parameters of the system line.
     * @param xPosition The x position within the system
     * @param lineWidth The total x width
     * @param lineType The line type enum
     * @param linePosition indicates if the line belongs to start or end of measure
     * @param musicSystem
     * @param topMeasure
     * @param bottomMeasure
     */
    createSystemLine(xPosition, lineWidth, lineType, linePosition, musicSystem, topMeasure, bottomMeasure = undefined) {
        throw new Error("not implemented");
    }
    /**
     * Create all the graphical lines and dots needed to render a system line (e.g. bold-thin-dots..).
     * @param systemLine
     */
    createLinesForSystemLine(systemLine) {
        //Empty
    }
    /**
     * Calculates the summed x-width of a possibly given Instrument Brace and/or Group Bracket(s).
     * @returns {number} the x-width
     */
    calcBracketsWidth() {
        let width = 0;
        for (let idx = 0, len = this.GroupBrackets.length; idx < len; ++idx) {
            const groupBracket = this.GroupBrackets[idx];
            width = Math.max(width, groupBracket.PositionAndShape.Size.width);
        }
        for (let idx2 = 0, len2 = this.InstrumentBrackets.length; idx2 < len2; ++idx2) {
            const instrumentBracket = this.InstrumentBrackets[idx2];
            width = Math.max(width, instrumentBracket.PositionAndShape.Size.width);
        }
        return width;
    }
    createInstrumentBracket(firstStaffLine, lastStaffLine) {
        // no impl here
    }
    createGroupBracket(firstStaffLine, lastStaffLine, recursionDepth) {
        // no impl here
    }
    findFirstVisibleInstrumentInInstrumentalGroup(instrumentalGroup) {
        for (let idx = 0, len = instrumentalGroup.InstrumentalGroups.length; idx < len; ++idx) {
            const groupOrInstrument = instrumentalGroup.InstrumentalGroups[idx];
            if (groupOrInstrument instanceof Instrument_1.Instrument) {
                if (groupOrInstrument.Visible === true) {
                    return groupOrInstrument;
                }
                continue;
            }
            return this.findFirstVisibleInstrumentInInstrumentalGroup(groupOrInstrument);
        }
        return undefined;
    }
    findLastVisibleInstrumentInInstrumentalGroup(instrumentalGroup) {
        let groupOrInstrument;
        for (let i = instrumentalGroup.InstrumentalGroups.length - 1; i >= 0; i--) {
            groupOrInstrument = instrumentalGroup.InstrumentalGroups[i];
            if (groupOrInstrument instanceof Instrument_1.Instrument) {
                if (groupOrInstrument.Visible === true) {
                    return groupOrInstrument;
                }
                continue;
            }
            return this.findLastVisibleInstrumentInInstrumentalGroup(groupOrInstrument);
        }
        return undefined;
    }
    /**
     * Update the xPosition of the [[MusicSystem]]'s [[StaffLine]]'s due to [[Label]] positioning.
     * @param systemLabelsRightMargin
     */
    updateMusicSystemStaffLineXPosition(systemLabelsRightMargin) {
        for (let idx = 0, len = this.StaffLines.length; idx < len; ++idx) {
            const staffLine = this.StaffLines[idx];
            const relative = staffLine.PositionAndShape.RelativePosition;
            relative.x = this.maxLabelLength + systemLabelsRightMargin;
            staffLine.PositionAndShape.RelativePosition = relative;
            staffLine.PositionAndShape.BorderRight = this.boundingBox.Size.width - this.maxLabelLength - systemLabelsRightMargin;
            for (let i = 0; i < staffLine.StaffLines.length; i++) {
                const lineEnd = new PointF2D_1.PointF2D(staffLine.PositionAndShape.Size.width, staffLine.StaffLines[i].End.y);
                staffLine.StaffLines[i].End = lineEnd;
            }
        }
    }
}
exports.MusicSystem = MusicSystem;


/***/ }),

/***/ "./src/MusicalScore/Graphical/MusicSystemBuilder.ts":
/*!**********************************************************!*\
  !*** ./src/MusicalScore/Graphical/MusicSystemBuilder.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MeasureBuildParameters = exports.SystemBuildParameters = exports.MusicSystemBuilder = void 0;
const GraphicalMusicPage_1 = __webpack_require__(/*! ./GraphicalMusicPage */ "./src/MusicalScore/Graphical/GraphicalMusicPage.ts");
const RhythmInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const KeyInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const ClefInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const GraphicalLine_1 = __webpack_require__(/*! ./GraphicalLine */ "./src/MusicalScore/Graphical/GraphicalLine.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ./SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const MusicSheetCalculator_1 = __webpack_require__(/*! ./MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
const ClefInstruction_2 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const CollectionUtil_1 = __webpack_require__(/*! ../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
const SystemLinePosition_1 = __webpack_require__(/*! ./SystemLinePosition */ "./src/MusicalScore/Graphical/SystemLinePosition.ts");
class MusicSystemBuilder {
    constructor() {
        this.musicSystems = [];
        this.globalSystemIndex = 0;
        this.leadSheet = false;
    }
    initialize(graphicalMusicSheet, measureList, numberOfStaffLines) {
        this.leadSheet = graphicalMusicSheet.LeadSheet;
        this.graphicalMusicSheet = graphicalMusicSheet;
        this.rules = this.graphicalMusicSheet.ParentMusicSheet.Rules;
        this.measureList = measureList;
        this.numberOfVisibleStaffLines = numberOfStaffLines;
        this.activeRhythm = new Array(this.numberOfVisibleStaffLines);
        this.activeKeys = new Array(this.numberOfVisibleStaffLines);
        this.activeClefs = new Array(this.numberOfVisibleStaffLines);
        this.initializeActiveInstructions(this.measureList[0]);
    }
    buildMusicSystems() {
        var _a, _b, _c;
        const systemMaxWidth = this.getFullPageSystemWidth();
        let prevMeasureEndsPart = false;
        this.measureListIndex = 0;
        this.currentSystemParams = new SystemBuildParameters();
        // the first System - create also its Labels
        this.currentSystemParams.currentSystem = this.initMusicSystem();
        // let numberOfMeasures: number = 0;
        // for (let idx: number = 0, len: number = this.measureList.length; idx < len; ++idx) {
        //     if (this.measureList[idx].length > 0) {
        //         numberOfMeasures++;
        //     }
        // }
        // console.log(`numberOfMeasures: ${numberOfMeasures}`);
        // go through measures and add to system until system gets too long -> finish system and start next system [line break, new system].
        while (this.measureListIndex < this.measureList.length) {
            const graphicalMeasures = this.measureList[this.measureListIndex];
            if (!graphicalMeasures || !graphicalMeasures[0]) {
                this.measureListIndex++;
                continue; // previous measure was probably multi-rest, skip this one
            }
            for (let idx = 0, len = graphicalMeasures.length; idx < len; ++idx) {
                // graphicalMeasures[idx].InitiallyActiveClef = this.activeClefs[idx]; // too early to know clef
                graphicalMeasures[idx].resetLayout();
            }
            const sourceMeasure = graphicalMeasures[0].parentSourceMeasure;
            const sourceMeasureEndsPart = sourceMeasure.HasEndLine;
            const sourceMeasureBreaksSystem = sourceMeasureEndsPart && this.rules.NewPartAndSystemAfterFinalBarline;
            const isSystemStartMeasure = this.currentSystemParams.IsSystemStartMeasure();
            sourceMeasure.IsSystemStartMeasure = isSystemStartMeasure;
            const isFirstSourceMeasure = sourceMeasure === this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();
            let currentMeasureBeginInstructionsWidth = this.rules.MeasureLeftMargin;
            let currentMeasureEndInstructionsWidth = 0;
            // calculate the current Measure Width:
            // The width of a measure is build up from
            // 1. the begin instructions (clef, Key, Rhythm),
            // 2. the staff entries (= notes) and
            // 3. the end instructions (actually only clefs)
            const measureStartLine = this.getMeasureStartLine();
            currentMeasureBeginInstructionsWidth += this.getLineWidth(graphicalMeasures[0], measureStartLine, isSystemStartMeasure);
            if (!this.leadSheet) {
                let forceShowRhythm = false;
                if (prevMeasureEndsPart && this.rules.ShowRhythmAgainAfterPartEndOrFinalBarline) {
                    forceShowRhythm = true;
                }
                currentMeasureBeginInstructionsWidth += this.addBeginInstructions(graphicalMeasures, isSystemStartMeasure, isFirstSourceMeasure || forceShowRhythm);
                // forceShowRhythm could be a fourth parameter instead in addBeginInstructions, but only affects RhythmInstruction for now.
                currentMeasureEndInstructionsWidth += this.addEndInstructions(graphicalMeasures);
            }
            let currentMeasureVarWidth = 0;
            for (let i = 0; i < this.numberOfVisibleStaffLines; i++) {
                currentMeasureVarWidth = Math.max(currentMeasureVarWidth, graphicalMeasures[i].minimumStaffEntriesWidth);
            }
            // take into account the LineWidth after each Measure
            const measureEndLine = this.getMeasureEndLine();
            currentMeasureEndInstructionsWidth += this.getLineWidth(graphicalMeasures[0], measureEndLine, isSystemStartMeasure);
            let nextMeasureBeginInstructionWidth = this.rules.MeasureLeftMargin;
            // Check if there are key or rhythm change instructions within the next measure:
            let nextSourceMeasure = undefined;
            if (this.measureListIndex + 1 < this.measureList.length) {
                const nextGraphicalMeasures = this.measureList[this.measureListIndex + 1];
                // TODO: consider multirest. then the next graphical measure may not exist. but there shouldn't be hidden changes here.
                nextSourceMeasure = (_a = nextGraphicalMeasures[0]) === null || _a === void 0 ? void 0 : _a.parentSourceMeasure;
                if (nextSourceMeasure === null || nextSourceMeasure === void 0 ? void 0 : nextSourceMeasure.hasBeginInstructions()) {
                    nextMeasureBeginInstructionWidth += this.addBeginInstructions(nextGraphicalMeasures, false, false);
                }
            }
            let totalMeasureWidth = currentMeasureBeginInstructionsWidth + currentMeasureEndInstructionsWidth + currentMeasureVarWidth;
            if ((_c = (_b = graphicalMeasures[0]) === null || _b === void 0 ? void 0 : _b.parentSourceMeasure) === null || _c === void 0 ? void 0 : _c.multipleRestMeasures) {
                totalMeasureWidth = this.rules.MultipleRestMeasureDefaultWidth; // default 4 (12 seems too large)
            }
            const measureFitsInSystem = this.currentSystemParams.currentWidth + totalMeasureWidth + nextMeasureBeginInstructionWidth < systemMaxWidth;
            const doXmlPageBreak = this.rules.NewPageAtXMLNewPageAttribute && sourceMeasure.printNewPageXml;
            const impliedSystemBreak = doXmlPageBreak || // also create new system if doing page break
                (this.rules.NewSystemAtXMLNewPageAttribute && sourceMeasure.printNewPageXml);
            const doXmlLineBreak = impliedSystemBreak ||
                (this.rules.NewSystemAtXMLNewSystemAttribute && sourceMeasure.printNewSystemXml);
            if (isSystemStartMeasure || (measureFitsInSystem && !doXmlLineBreak)) {
                this.addMeasureToSystem(graphicalMeasures, measureStartLine, measureEndLine, totalMeasureWidth, currentMeasureBeginInstructionsWidth, currentMeasureVarWidth, currentMeasureEndInstructionsWidth);
                this.updateActiveClefs(sourceMeasure, graphicalMeasures);
                this.measureListIndex++;
                if (sourceMeasureBreaksSystem) {
                    if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) {
                        this.finalizeCurrentSystem(graphicalMeasures, !this.rules.StretchLastSystemLine, false);
                        return this.musicSystems;
                    }
                    this.finalizeCurrentAndCreateNewSystem(graphicalMeasures, !this.rules.StretchLastSystemLine, false);
                }
                prevMeasureEndsPart = sourceMeasureEndsPart;
            }
            else {
                if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) {
                    this.finalizeCurrentSystem(graphicalMeasures, false, true, doXmlPageBreak);
                    return this.musicSystems;
                }
                // finalize current system and prepare a new one
                this.finalizeCurrentAndCreateNewSystem(graphicalMeasures, false, true, doXmlPageBreak);
                // don't increase measure index to check this measure now again
                // don't set prevMeasureEndsPart in this case! because we will loop with the same measure again.
            }
        }
        if (this.currentSystemParams.systemMeasures.length > 0) {
            if (this.rules.MaxSystemToDrawNumber === this.musicSystems.length) {
                this.finalizeCurrentSystem(this.measureList[this.measureList.length - 1], !this.rules.StretchLastSystemLine, false);
                return this.musicSystems;
            }
            // TODO FixedMeasureWidth: last measure will have a different stretch factor, misaligning measures and widths. use previous stretch factor instead
            this.finalizeCurrentAndCreateNewSystem(this.measureList[this.measureList.length - 1], !this.rules.StretchLastSystemLine, false);
        }
        return this.musicSystems;
    }
    /**
     * calculates the y positions of the staff lines within a system and
     * furthermore the y positions of the systems themselves.
     */
    calculateSystemYLayout() {
        for (const musicSystem of this.musicSystems) {
            this.optimizeDistanceBetweenStaffLines(musicSystem);
        }
        // set y positions of systems using the previous system and a fixed distance.
        this.calculateMusicSystemsRelativePositions();
    }
    /**
     * Set the Width of the staff-Measures of one source measure.
     * @param graphicalMeasures
     * @param width
     * @param beginInstrWidth
     * @param endInstrWidth
     */
    setMeasureWidth(graphicalMeasures, width, beginInstrWidth, endInstrWidth) {
        for (let idx = 0, len = graphicalMeasures.length; idx < len; ++idx) {
            const measure = graphicalMeasures[idx];
            measure.setWidth(width);
            if (beginInstrWidth > 0) {
                measure.beginInstructionsWidth = beginInstrWidth;
            }
            if (endInstrWidth > 0) {
                measure.endInstructionsWidth = endInstrWidth;
            }
        }
    }
    /**
     * When the actual source measure doesn't fit any more, this method finalizes the current system and
     * opens up a new empty system, where the actual measure will be added in the next iteration.
     * @param measures
     * @param isPartEndingSystem
     */
    finalizeCurrentAndCreateNewSystem(measures, systemEndsPart = false, checkExtraInstructionMeasure = true, startNewPage = false) {
        this.finalizeCurrentSystem(measures, systemEndsPart, checkExtraInstructionMeasure, startNewPage);
        this.currentSystemParams = new SystemBuildParameters(); // this and the following used to be in finalizeCurrentSystem after stretchMusicSystem
        if (measures !== undefined &&
            this.measureListIndex < this.measureList.length) {
            this.currentSystemParams.currentSystem = this.initMusicSystem();
        }
    }
    finalizeCurrentSystem(measures, systemEndsPart = false, checkExtraInstructionMeasure = true, startNewPage = false) {
        this.currentSystemParams.currentSystem.breaksPage = startNewPage;
        this.adaptRepetitionLineWithIfNeeded();
        if (measures !== undefined &&
            checkExtraInstructionMeasure) {
            this.checkAndCreateExtraInstructionMeasure(measures);
        }
        this.stretchMusicSystem(systemEndsPart);
    }
    /**
     * If a line repetition is ending and a new line repetition is starting at the end of the system,
     * the double repetition line has to be split into two: one at the currently ending system and
     * one at the next system.
     * (this should be refactored at some point to not use a combined end/start line but always separated lines)
     */
    adaptRepetitionLineWithIfNeeded() {
        const systemMeasures = this.currentSystemParams.systemMeasures;
        if (systemMeasures.length >= 1) {
            const measures = this.currentSystemParams.currentSystem.GraphicalMeasures[this.currentSystemParams.currentSystem.GraphicalMeasures.length - 1];
            let diff = 0.0;
            const measureParams = systemMeasures[systemMeasures.length - 1];
            if (measureParams.endLine === SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots) {
                measureParams.endLine = SystemLinesEnum_1.SystemLinesEnum.DotsThinBold;
                diff = measures[0].getLineWidth(SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots) / 2 - measures[0].getLineWidth(SystemLinesEnum_1.SystemLinesEnum.DotsThinBold);
            }
            this.currentSystemParams.currentSystemFixWidth -= diff;
            for (let idx = 0, len = measures.length; idx < len; ++idx) {
                const measure = measures[idx];
                measure.endInstructionsWidth -= diff;
            }
        }
    }
    addMeasureToSystem(graphicalMeasures, measureStartLine, measureEndLine, totalMeasureWidth, currentMeasureBeginInstructionsWidth, currentVarWidth, currentMeasureEndInstructionsWidth) {
        this.currentSystemParams.systemMeasures.push({ beginLine: measureStartLine, endLine: measureEndLine });
        this.setMeasureWidth(graphicalMeasures, totalMeasureWidth, currentMeasureBeginInstructionsWidth, currentMeasureEndInstructionsWidth);
        this.addStaveMeasuresToSystem(graphicalMeasures);
        this.currentSystemParams.currentWidth += totalMeasureWidth;
        this.currentSystemParams.currentSystemFixWidth += currentMeasureBeginInstructionsWidth + currentMeasureEndInstructionsWidth;
        this.currentSystemParams.currentSystemVarWidth += currentVarWidth;
        this.currentSystemParams.systemMeasureIndex++;
    }
    /**
     * Initialize a new [[MusicSystem]].
     * @returns {MusicSystem}
     */
    initMusicSystem() {
        const musicSystem = MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.createMusicSystem(this.globalSystemIndex++, this.rules);
        this.musicSystems.push(musicSystem);
        this.layoutSystemStaves(musicSystem);
        musicSystem.createMusicSystemLabel(this.rules.InstrumentLabelTextHeight, this.rules.SystemLabelsRightMargin, this.rules.LabelMarginBorderFactor, this.musicSystems.length === 1);
        return musicSystem;
    }
    /**
     * Get the width the system should have for a given page width.
     * @returns {number}
     */
    getFullPageSystemWidth() {
        return this.graphicalMusicSheet.ParentMusicSheet.pageWidth - this.rules.PageLeftMargin
            - this.rules.PageRightMargin - this.rules.SystemLeftMargin - this.rules.SystemRightMargin;
    }
    layoutSystemStaves(musicSystem) {
        const systemWidth = this.getFullPageSystemWidth();
        const boundingBox = musicSystem.PositionAndShape;
        boundingBox.BorderLeft = 0.0;
        boundingBox.BorderRight = systemWidth;
        boundingBox.BorderTop = 0.0;
        const staffList = [];
        const instruments = this.graphicalMusicSheet.ParentMusicSheet.Instruments;
        for (let idx = 0, len = instruments.length; idx < len; ++idx) {
            const instrument = instruments[idx];
            if (!instrument.Visible || instrument.Voices.length === 0) {
                continue;
            }
            for (let idx2 = 0, len2 = instrument.Staves.length; idx2 < len2; ++idx2) {
                const staff = instrument.Staves[idx2];
                staffList.push(staff);
            }
        }
        let multiLyrics = false;
        if (this.leadSheet) {
            for (let idx = 0, len = staffList.length; idx < len; ++idx) {
                const staff = staffList[idx];
                if (staff.ParentInstrument.LyricVersesNumbers.length > 1) {
                    multiLyrics = true;
                    break;
                }
            }
        }
        let yOffsetSum = 0;
        for (let i = 0; i < staffList.length; i++) {
            this.addStaffLineToMusicSystem(musicSystem, yOffsetSum, staffList[i]);
            yOffsetSum += this.rules.StaffHeight;
            if (i + 1 < staffList.length) {
                let yOffset = 0;
                if (this.leadSheet && !multiLyrics) {
                    yOffset = 2.5;
                }
                else {
                    if (staffList[i].ParentInstrument === staffList[i + 1].ParentInstrument) {
                        yOffset = this.rules.BetweenStaffDistance;
                    }
                    else {
                        yOffset = this.rules.StaffDistance;
                    }
                }
                yOffsetSum += yOffset;
            }
        }
        boundingBox.BorderBottom = yOffsetSum;
    }
    /**
     * Calculate the [[StaffLine]](s) needed for a [[MusicSystem]].
     * @param musicSystem
     * @param relativeYPosition
     * @param staff
     */
    addStaffLineToMusicSystem(musicSystem, relativeYPosition, staff) {
        if (musicSystem) {
            const staffLine = MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.createStaffLine(musicSystem, staff);
            musicSystem.StaffLines.push(staffLine);
            const boundingBox = staffLine.PositionAndShape;
            const relativePosition = new PointF2D_1.PointF2D();
            relativePosition.x = 0.0;
            boundingBox.BorderRight = musicSystem.PositionAndShape.Size.width;
            relativePosition.y = relativeYPosition;
            boundingBox.RelativePosition = relativePosition;
            boundingBox.BorderLeft = 0.0;
            boundingBox.BorderTop = 0.0;
            boundingBox.BorderBottom = this.rules.StaffHeight;
            for (let i = 0; i < 5; i++) {
                const start = new PointF2D_1.PointF2D();
                start.x = 0.0;
                start.y = i * this.rules.StaffHeight / 4;
                const end = new PointF2D_1.PointF2D();
                end.x = staffLine.PositionAndShape.Size.width;
                end.y = i * this.rules.StaffHeight / 4;
                if (this.leadSheet) {
                    start.y = end.y = 0;
                }
                staffLine.StaffLines[i] = new GraphicalLine_1.GraphicalLine(start, end, this.rules.StaffLineWidth);
            }
        }
    }
    /**
     * Initialize the active Instructions from the first [[SourceMeasure]] of first [[SourceMusicPart]].
     * @param measureList
     */
    initializeActiveInstructions(measureList) {
        const firstSourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.getFirstSourceMeasure();
        if (firstSourceMeasure) {
            this.visibleStaffIndices = this.graphicalMusicSheet.getVisibleStavesIndicesFromSourceMeasure(measureList);
            for (let i = 0, len = this.visibleStaffIndices.length; i < len; i++) {
                const staffIndex = this.visibleStaffIndices[i];
                const graphicalMeasure = this.graphicalMusicSheet
                    .getGraphicalMeasureFromSourceMeasureAndIndex(firstSourceMeasure, staffIndex);
                this.activeClefs[i] = firstSourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[0];
                graphicalMeasure.InitiallyActiveClef = this.activeClefs[i]; // TODO ClefInstruction.copy? doesn't exist
                const firstKeyInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[1];
                if (firstKeyInstruction) {
                    let keyInstruction = KeyInstruction_1.KeyInstruction.copy(firstKeyInstruction);
                    keyInstruction = this.transposeKeyInstruction(keyInstruction, graphicalMeasure);
                    this.activeKeys[i] = keyInstruction;
                }
                const firstRhythmInstruction = firstSourceMeasure.FirstInstructionsStaffEntries[staffIndex].Instructions[2];
                // if (firstRhythmInstruction) {
                this.activeRhythm[i] = firstRhythmInstruction;
            }
        }
    }
    transposeKeyInstruction(keyInstruction, graphicalMeasure) {
        const transposeHalftones = graphicalMeasure.getTransposedHalftones();
        if (transposeHalftones !== keyInstruction.isTransposedBy
            && graphicalMeasure.ParentStaff.ParentInstrument.MidiInstrumentId !== ClefInstruction_2.MidiInstrument.Percussion
            && MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator !== undefined) {
            MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator.transposeKey(keyInstruction, transposeHalftones);
        }
        return keyInstruction;
        // TODO we probably need to call initializeActiveInstructions() after this has been executed
        //   (though we need to call it from where this is called)
        //   since the accidentals are messed up after changing from transpose to 1 then to 0 again,
        //   probably because this.activeKeys doesn't get updated. or maybe the issue is somewhere else
    }
    /**
     * Calculate the width needed for Instructions (Key, Clef, Rhythm, Repetition) for the measure.
     * @param measures
     * @param isSystemFirstMeasure
     * @param isFirstSourceMeasure
     * @returns {number}
     */
    addBeginInstructions(measures, isSystemFirstMeasure, isFirstSourceMeasure) {
        const measureCount = measures.length;
        if (measureCount === 0) {
            return 0;
        }
        let totalBeginInstructionLengthX = 0.0;
        const sourceMeasure = measures[0].parentSourceMeasure;
        const staves = []; // VF.Stave. generally don't want to reference Vexflow classes here.
        for (let idx = 0; idx < measureCount; ++idx) {
            const measure = measures[idx];
            if (measure) { // MultiRestMeasure may be undefined
                staves.push(measure.getVFStave()); // as VexFlowMeasure
            }
            const staffIndex = this.visibleStaffIndices[idx];
            const beginInstructionsStaffEntry = sourceMeasure.FirstInstructionsStaffEntries[staffIndex];
            const beginInstructionLengthX = this.AddInstructionsAtMeasureBegin(beginInstructionsStaffEntry, measure, idx, isFirstSourceMeasure, isSystemFirstMeasure);
            totalBeginInstructionLengthX = Math.max(totalBeginInstructionLengthX, beginInstructionLengthX);
        }
        staves[0].formatBegModifiers(staves); // x-align notes / beginning modifiers like time signatures, e.g. for transposing instruments
        return totalBeginInstructionLengthX;
    }
    /**
     * Calculates the width needed for Instructions (Clef, Repetition) for the measure.
     * @param measures
     * @returns {number}
     */
    addEndInstructions(measures) {
        const measureCount = measures.length;
        if (measureCount === 0) {
            return 0;
        }
        let totalEndInstructionLengthX = 0.5;
        const sourceMeasure = measures[0].parentSourceMeasure;
        for (let idx = 0; idx < measureCount; idx++) {
            const measure = measures[idx];
            const staffIndex = this.visibleStaffIndices[idx];
            const endInstructionsStaffEntry = sourceMeasure.LastInstructionsStaffEntries[staffIndex];
            const endInstructionLengthX = this.addInstructionsAtMeasureEnd(endInstructionsStaffEntry, measure, measures);
            totalEndInstructionLengthX = Math.max(totalEndInstructionLengthX, endInstructionLengthX);
        }
        return totalEndInstructionLengthX;
    }
    AddInstructionsAtMeasureBegin(firstEntry, measure, visibleStaffIdx, isFirstSourceMeasure, isSystemStartMeasure) {
        var _a;
        let instructionsLengthX = 0;
        let currentClef = undefined;
        let currentKey = undefined;
        let currentRhythm = undefined;
        if (firstEntry) {
            for (let idx = 0, len = firstEntry.Instructions.length; idx < len; ++idx) {
                const abstractNotationInstruction = firstEntry.Instructions[idx];
                if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                    currentClef = abstractNotationInstruction;
                }
                else if (abstractNotationInstruction instanceof KeyInstruction_1.KeyInstruction) {
                    currentKey = abstractNotationInstruction;
                }
                else if (abstractNotationInstruction instanceof RhythmInstruction_1.RhythmInstruction) {
                    currentRhythm = abstractNotationInstruction;
                }
            }
        }
        measure.InitiallyActiveClef = currentClef !== null && currentClef !== void 0 ? currentClef : this.activeClefs[visibleStaffIdx];
        if (isSystemStartMeasure) {
            if (!currentClef) {
                currentClef = this.activeClefs[visibleStaffIdx];
            }
            if (!currentKey) {
                currentKey = KeyInstruction_1.KeyInstruction.copy(this.activeKeys[visibleStaffIdx]);
            }
            if (isFirstSourceMeasure && !currentRhythm) {
                currentRhythm = this.activeRhythm[visibleStaffIdx];
            }
        }
        let clefAdded = false;
        let keyAdded = false;
        let rhythmAdded = false;
        if (currentClef) {
            measure.addClefAtBegin(currentClef);
            clefAdded = true;
        }
        else {
            currentClef = this.activeClefs[visibleStaffIdx];
        }
        if (currentKey) {
            currentKey = this.transposeKeyInstruction(currentKey, measure);
            const previousKey = isSystemStartMeasure ? undefined : this.activeKeys[visibleStaffIdx];
            measure.addKeyAtBegin(currentKey, previousKey, currentClef);
            keyAdded = true;
        }
        if (currentRhythm !== undefined && currentRhythm.PrintObject && this.rules.RenderTimeSignatures) {
            let printRhythm = true;
            // check for previous pickup measure
            // TODO this does not need to be a pickup measure, see #1069
            const pickupMeasureIndex = measure.MeasureNumber - 1;
            const measureIndex = pickupMeasureIndex - this.rules.MinMeasureToDrawIndex;
            if (measure.MeasureNumber - 1 >= 0 && this.measureList[measureIndex]) {
                const previousMeasureList = this.measureList[measureIndex];
                const previousMeasure = (_a = previousMeasureList[0]) === null || _a === void 0 ? void 0 : _a.parentSourceMeasure;
                if ((previousMeasure === null || previousMeasure === void 0 ? void 0 : previousMeasure.ImplicitMeasure) && (previousMeasure === null || previousMeasure === void 0 ? void 0 : previousMeasure.RhythmPrinted)) {
                    printRhythm = false;
                }
            }
            if (printRhythm) {
                measure.addRhythmAtBegin(currentRhythm);
                measure.parentSourceMeasure.RhythmPrinted = currentRhythm;
                rhythmAdded = true;
            }
        }
        if (clefAdded || keyAdded || rhythmAdded) {
            instructionsLengthX += measure.beginInstructionsWidth;
            if (rhythmAdded) {
                instructionsLengthX += this.rules.RhythmRightMargin;
            }
        }
        return instructionsLengthX;
    }
    addInstructionsAtMeasureEnd(lastEntry, measure, measures) {
        if (!lastEntry || !lastEntry.Instructions || lastEntry.Instructions.length === 0) {
            return 0;
        }
        for (let idx = 0, len = lastEntry.Instructions.length; idx < len; ++idx) {
            const abstractNotationInstruction = lastEntry.Instructions[idx];
            if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                const activeClef = abstractNotationInstruction;
                measure.addClefAtEnd(activeClef);
                for (const otherVerticalMeasure of measures) {
                    if (otherVerticalMeasure !== measure) {
                        otherVerticalMeasure.addClefAtEnd(activeClef, false);
                    }
                }
            }
        }
        return this.rules.MeasureRightMargin + measure.endInstructionsWidth;
    }
    /**
     * Track down and update the active ClefInstruction in Measure's StaffEntries.
     * This has to be done after the measure is added to a system
     * (otherwise already the check if the measure fits to the system would update the active clefs..)
     * @param measure
     * @param graphicalMeasures
     */
    updateActiveClefs(measure, graphicalMeasures) {
        for (let visStaffIdx = 0, len = graphicalMeasures.length; visStaffIdx < len; visStaffIdx++) {
            const staffIndex = this.visibleStaffIndices[visStaffIdx];
            const firstEntry = measure.FirstInstructionsStaffEntries[staffIndex];
            if (firstEntry) {
                for (let idx = 0, len2 = firstEntry.Instructions.length; idx < len2; ++idx) {
                    const abstractNotationInstruction = firstEntry.Instructions[idx];
                    if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                        this.activeClefs[visStaffIdx] = abstractNotationInstruction;
                    }
                    else if (abstractNotationInstruction instanceof KeyInstruction_1.KeyInstruction) {
                        this.activeKeys[visStaffIdx] = abstractNotationInstruction;
                    }
                    else if (abstractNotationInstruction instanceof RhythmInstruction_1.RhythmInstruction) {
                        this.activeRhythm[visStaffIdx] = abstractNotationInstruction;
                    }
                }
            }
            // graphicalMeasures[visStaffIdx].InitiallyActiveClef = this.activeClefs[visStaffIdx];
            //   already done at MusicSystemBuilder.AddInstructionsAtMeasureBegin
            const entries = measure.getEntriesPerStaff(staffIndex);
            for (let idx = 0, len2 = entries.length; idx < len2; ++idx) {
                const staffEntry = entries[idx];
                if (staffEntry.Instructions) {
                    for (let idx2 = 0, len3 = staffEntry.Instructions.length; idx2 < len3; ++idx2) {
                        const abstractNotationInstruction = staffEntry.Instructions[idx2];
                        if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                            this.activeClefs[visStaffIdx] = abstractNotationInstruction;
                        }
                    }
                }
            }
            const lastEntry = measure.LastInstructionsStaffEntries[staffIndex];
            if (lastEntry) {
                const instructions = lastEntry.Instructions;
                for (let idx = 0, len3 = instructions.length; idx < len3; ++idx) {
                    const abstractNotationInstruction = instructions[idx];
                    if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                        this.activeClefs[visStaffIdx] = abstractNotationInstruction;
                    }
                }
            }
        }
    }
    /**
     * Check if an extra Instruction [[Measure]] is needed.
     * @param measures
     */
    checkAndCreateExtraInstructionMeasure(measures) {
        const firstStaffEntries = measures[0].parentSourceMeasure.FirstInstructionsStaffEntries;
        const visibleInstructionEntries = [];
        for (let idx = 0, len = measures.length; idx < len; ++idx) {
            const measure = measures[idx];
            visibleInstructionEntries.push(firstStaffEntries[measure.ParentStaff.idInMusicSheet]);
        }
        let maxMeasureWidth = 0;
        for (let visStaffIdx = 0, len = visibleInstructionEntries.length; visStaffIdx < len; ++visStaffIdx) {
            const sse = visibleInstructionEntries[visStaffIdx];
            if (!sse) {
                continue;
            }
            const instructions = sse.Instructions;
            let keyInstruction = undefined;
            let rhythmInstruction = undefined;
            for (let idx2 = 0, len2 = instructions.length; idx2 < len2; ++idx2) {
                const instruction = instructions[idx2];
                if (instruction instanceof KeyInstruction_1.KeyInstruction && instruction.Key !== this.activeKeys[visStaffIdx].Key) {
                    keyInstruction = instruction;
                }
                if (instruction instanceof RhythmInstruction_1.RhythmInstruction && instruction !== this.activeRhythm[visStaffIdx]) {
                    rhythmInstruction = instruction;
                }
            }
            if (keyInstruction !== undefined || rhythmInstruction) {
                const measureWidth = this.addExtraInstructionMeasure(visStaffIdx, keyInstruction, rhythmInstruction);
                maxMeasureWidth = Math.max(maxMeasureWidth, measureWidth);
            }
        }
        if (maxMeasureWidth > 0) {
            this.currentSystemParams.systemMeasures.push({
                beginLine: SystemLinesEnum_1.SystemLinesEnum.None,
                endLine: SystemLinesEnum_1.SystemLinesEnum.None,
            });
            this.currentSystemParams.currentWidth += maxMeasureWidth;
            this.currentSystemParams.currentSystemFixWidth += maxMeasureWidth;
        }
    }
    addExtraInstructionMeasure(visStaffIdx, keyInstruction, rhythmInstruction) {
        const currentSystem = this.currentSystemParams.currentSystem;
        const measures = [];
        const measure = MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory.createExtraGraphicalMeasure(currentSystem.StaffLines[visStaffIdx]);
        measures.push(measure);
        if (keyInstruction) {
            measure.addKeyAtBegin(keyInstruction, this.activeKeys[visStaffIdx], this.activeClefs[visStaffIdx]);
        }
        if (rhythmInstruction !== undefined && rhythmInstruction.PrintObject) {
            measure.addRhythmAtBegin(rhythmInstruction);
        }
        measure.PositionAndShape.BorderLeft = 0.0;
        measure.PositionAndShape.BorderTop = 0.0;
        measure.PositionAndShape.BorderBottom = this.rules.StaffHeight;
        const width = this.rules.MeasureLeftMargin + measure.beginInstructionsWidth + this.rules.MeasureRightMargin;
        measure.PositionAndShape.BorderRight = width;
        currentSystem.StaffLines[visStaffIdx].Measures.push(measure);
        return width;
    }
    /**
     * Add all current vertical Measures to currentSystem.
     * @param graphicalMeasures
     */
    addStaveMeasuresToSystem(graphicalMeasures) {
        if (graphicalMeasures[0]) {
            const gmeasures = [];
            for (let i = 0; i < graphicalMeasures.length; i++) {
                gmeasures.push(graphicalMeasures[i]);
            }
            const currentSystem = this.currentSystemParams.currentSystem;
            for (let visStaffIdx = 0; visStaffIdx < this.numberOfVisibleStaffLines; visStaffIdx++) {
                const measure = gmeasures[visStaffIdx];
                currentSystem.StaffLines[visStaffIdx].Measures.push(measure);
                measure.ParentStaffLine = currentSystem.StaffLines[visStaffIdx];
            }
            currentSystem.AddGraphicalMeasures(gmeasures);
        }
    }
    /**
     * Return the width of the corresponding [[SystemLine]] and set the corresponding [[SystemLineEnum]].
     * @returns {SystemLinesEnum}
     */
    getMeasureStartLine() {
        const thisMeasureBeginsLineRep = this.thisMeasureBeginsLineRepetition();
        if (thisMeasureBeginsLineRep) {
            const isGlobalFirstMeasure = this.measureListIndex === 0;
            if (isGlobalFirstMeasure && this.rules.RepetitionAllowFirstMeasureBeginningRepeatBarline) {
                return SystemLinesEnum_1.SystemLinesEnum.BoldThinDots;
            }
            const isSystemStartMeasure = this.currentSystemParams.IsSystemStartMeasure();
            if (this.previousMeasureEndsLineRepetition() && !isSystemStartMeasure) {
                return SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots;
            }
            if (!isGlobalFirstMeasure) {
                return SystemLinesEnum_1.SystemLinesEnum.BoldThinDots;
            }
        }
        return SystemLinesEnum_1.SystemLinesEnum.None;
    }
    getMeasureEndLine() {
        let sourceMeasure = undefined;
        try {
            sourceMeasure = this.measureList[this.measureListIndex][0].parentSourceMeasure;
            if (this.rules.RenderMultipleRestMeasures && sourceMeasure.multipleRestMeasures > 1) {
                const newIndex = Math.min(this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length - 1, // safety check
                sourceMeasure.measureListIndex + sourceMeasure.multipleRestMeasures - 1
                // check the bar line of the last sourcemeasure in the multiple measure rest sequence
                );
                sourceMeasure = this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures[newIndex];
                // sourceMeasure = this.measureList[this.measureListIndex + sourceMeasure.multipleRestMeasures - 1][0].parentSourceMeasure;
                //    this will be possible when the other GraphicalMeasures in the measureList aren't undefined anymore
            }
        }
        finally {
            // do nothing
        }
        if (this.nextMeasureBeginsLineRepetition() && this.thisMeasureEndsLineRepetition()) {
            return SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots;
        }
        if (this.thisMeasureEndsLineRepetition()) {
            return SystemLinesEnum_1.SystemLinesEnum.DotsThinBold;
        }
        // always end piece with final barline: not a good idea. user should be able to override final barline.
        // also, selecting range of measures to draw would always end with final barline, even if extract is from the middle of the piece
        // this was probably done before we parsed the barline type from XML.
        /*if (this.measureListIndex === this.measureList.length - 1 || this.measureList[this.measureListIndex][0].parentSourceMeasure.endsPiece) {
            return SystemLinesEnum.ThinBold;
        }*/
        if (this.nextMeasureHasKeyInstructionChange() || this.thisMeasureEndsWordRepetition() || this.nextMeasureBeginsWordRepetition()) {
            return SystemLinesEnum_1.SystemLinesEnum.DoubleThin;
        }
        if (!sourceMeasure) {
            return SystemLinesEnum_1.SystemLinesEnum.SingleThin;
        }
        if (sourceMeasure.endingBarStyleEnum !== undefined) {
            return sourceMeasure.endingBarStyleEnum;
        }
        // TODO: print an error message if the default fallback is used.
        return SystemLinesEnum_1.SystemLinesEnum.SingleThin;
    }
    /**
     * Return the width of the corresponding [[SystemLine]] and sets the corresponding [[SystemLineEnum]].
     * @param measure
     * @param systemLineEnum
     * @param isSystemStartMeasure
     * @returns {number}
     */
    getLineWidth(measure, systemLineEnum, isSystemStartMeasure) {
        let width = measure.getLineWidth(systemLineEnum);
        if (systemLineEnum === SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots) {
            width /= 2;
        }
        if (isSystemStartMeasure && systemLineEnum === SystemLinesEnum_1.SystemLinesEnum.BoldThinDots) {
            width += this.rules.DistanceBetweenLastInstructionAndRepetitionBarline;
        }
        return width;
    }
    previousMeasureEndsLineRepetition() {
        if (this.measureListIndex === 0) {
            return false;
        }
        for (let idx = 0, len = this.measureList[this.measureListIndex - 1].length; idx < len; ++idx) {
            const measure = this.measureList[this.measureListIndex - 1][idx];
            if (measure.endsWithLineRepetition()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if at this [[Measure]] starts a [[Repetition]].
     * @returns {boolean}
     */
    thisMeasureBeginsLineRepetition() {
        for (let idx = 0, len = this.measureList[this.measureListIndex].length; idx < len; ++idx) {
            const measure = this.measureList[this.measureListIndex][idx];
            if (measure.beginsWithLineRepetition()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if a [[Repetition]] starts at the next [[Measure]].
     * @returns {boolean}
     */
    nextMeasureBeginsLineRepetition() {
        const nextMeasureIndex = this.measureListIndex + 1;
        if (nextMeasureIndex >= this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length
            || !this.measureList[nextMeasureIndex]) {
            return false;
        }
        for (let idx = 0, len = this.measureList[nextMeasureIndex].length; idx < len; ++idx) {
            const measure = this.measureList[nextMeasureIndex][idx];
            if (measure.beginsWithLineRepetition()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if this [[Measure]] is a [[Repetition]] ending.
     * @returns {boolean}
     */
    thisMeasureEndsLineRepetition() {
        var _a;
        for (let idx = 0, len = this.measureList[this.measureListIndex].length; idx < len; ++idx) {
            const measure = this.measureList[this.measureListIndex][idx];
            if (measure.endsWithLineRepetition()) {
                return true;
            }
            else if ((_a = measure.parentSourceMeasure) === null || _a === void 0 ? void 0 : _a.isReducedToMultiRest) {
                // check if the last measure in the multiple rest measure sequence has a repeat ending
                const sheet = this.graphicalMusicSheet.ParentMusicSheet;
                let currentMultirestMeasure = measure.parentSourceMeasure;
                const startMeasureIndex = sheet.SourceMeasures.indexOf(currentMultirestMeasure);
                let currentMultirestMeasureNumber = currentMultirestMeasure.multipleRestMeasureNumber;
                for (let i = startMeasureIndex + 1; i < sheet.SourceMeasures.length; i++) {
                    const nextMultirestMeasure = sheet.SourceMeasures[i];
                    if (nextMultirestMeasure.multipleRestMeasureNumber >= currentMultirestMeasureNumber) {
                        currentMultirestMeasure = nextMultirestMeasure;
                        currentMultirestMeasureNumber = nextMultirestMeasure.multipleRestMeasureNumber;
                    }
                    else {
                        break; // end of current multirest chain = last multirest measure
                    }
                }
                return currentMultirestMeasure.endsWithLineRepetition();
            }
        }
        return false;
    }
    /**
     * Check if a [[Repetition]] starts at the next [[Measure]].
     * @returns {boolean}
     */
    nextMeasureBeginsWordRepetition() {
        const nextMeasureIndex = this.measureListIndex + 1;
        if (nextMeasureIndex >= this.graphicalMusicSheet.ParentMusicSheet.SourceMeasures.length ||
            nextMeasureIndex > this.measureList.length - 1) {
            return false;
        }
        for (let idx = 0, len = this.measureList[nextMeasureIndex].length; idx < len; ++idx) {
            const measure = this.measureList[nextMeasureIndex][idx];
            if (measure.beginsWithWordRepetition()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if this [[Measure]] is a [[Repetition]] ending.
     * @returns {boolean}
     */
    thisMeasureEndsWordRepetition() {
        for (let idx = 0, len = this.measureList[this.measureListIndex].length; idx < len; ++idx) {
            const measure = this.measureList[this.measureListIndex][idx];
            if (measure.endsWithWordRepetition()) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if the next [[Measure]] has a [[KeyInstruction]] change.
     * @returns {boolean}
     */
    nextMeasureHasKeyInstructionChange() {
        return this.getNextMeasureKeyInstruction() !== undefined;
    }
    getNextMeasureKeyInstruction() {
        var _a;
        if (this.measureListIndex < this.measureList.length - 1) {
            for (let visIndex = 0; visIndex < this.measureList[this.measureListIndex].length; visIndex++) {
                const sourceMeasure = (_a = this.measureList[this.measureListIndex + 1][visIndex]) === null || _a === void 0 ? void 0 : _a.parentSourceMeasure;
                if (!sourceMeasure) {
                    return undefined;
                }
                return sourceMeasure.getKeyInstruction(this.visibleStaffIndices[visIndex]);
            }
        }
        return undefined;
    }
    /**
     * Calculate the X ScalingFactor in order to strech the whole System.
     * @param systemFixWidth
     * @param systemVarWidth
     * @returns {number}
     */
    calculateXScalingFactor(systemFixWidth, systemVarWidth) {
        if (Math.abs(systemVarWidth - 0) < 0.00001 || Math.abs(systemFixWidth - 0) < 0.00001) {
            return 1.0;
        }
        const currentSystem = this.currentSystemParams.currentSystem;
        const systemEndX = currentSystem.StaffLines[0].PositionAndShape.Size.width;
        const scalingFactor = (systemEndX - systemFixWidth) / systemVarWidth;
        return scalingFactor;
    }
    /**
     * Stretch the whole System so that no white space is left at the end.
     * @param systemEndsPart
     */
    stretchMusicSystem(systemEndsPart) {
        let scalingFactor = this.calculateXScalingFactor(this.currentSystemParams.currentSystemFixWidth, this.currentSystemParams.currentSystemVarWidth);
        if (systemEndsPart) {
            scalingFactor = Math.min(scalingFactor, this.rules.LastSystemMaxScalingFactor);
        }
        const currentSystem = this.currentSystemParams.currentSystem;
        for (let visStaffIdx = 0, len = currentSystem.StaffLines.length; visStaffIdx < len; ++visStaffIdx) {
            const staffLine = currentSystem.StaffLines[visStaffIdx];
            let currentXPosition = 0.0;
            for (let measureIndex = 0; measureIndex < staffLine.Measures.length; measureIndex++) {
                const measure = staffLine.Measures[measureIndex];
                measure.setPositionInStaffline(currentXPosition);
                const beginInstructionsWidth = measure.beginInstructionsWidth;
                // if (measureIndex === 0 && measure.staffEntries) {
                //     if (!measure.parentSourceMeasure.hasLyrics) {
                //         beginInstructionsWidth *= 1; // TODO the first measure in a system is always slightly too big. why? try e.g. 0.6
                //     }
                // }
                measure.setWidth(beginInstructionsWidth + measure.minimumStaffEntriesWidth * scalingFactor + measure.endInstructionsWidth);
                if (measureIndex < this.currentSystemParams.systemMeasures.length) {
                    const startLine = this.currentSystemParams.systemMeasures[measureIndex].beginLine;
                    const lineWidth = measure.getLineWidth(SystemLinesEnum_1.SystemLinesEnum.BoldThinDots);
                    switch (startLine) {
                        case SystemLinesEnum_1.SystemLinesEnum.BoldThinDots:
                            let xPosition = currentXPosition;
                            if (measureIndex === 0) {
                                xPosition = currentXPosition + measure.beginInstructionsWidth - lineWidth;
                            }
                            currentSystem.createVerticalLineForMeasure(xPosition, lineWidth, startLine, SystemLinePosition_1.SystemLinePosition.MeasureBegin, measureIndex, measure);
                            break;
                        default:
                    }
                }
                measure.staffEntriesScaleFactor = scalingFactor;
                measure.layoutSymbols();
                const nextMeasureHasRepStartLine = measureIndex + 1 < this.currentSystemParams.systemMeasures.length
                    && this.currentSystemParams.systemMeasures[measureIndex + 1].beginLine === SystemLinesEnum_1.SystemLinesEnum.BoldThinDots;
                if (!nextMeasureHasRepStartLine) {
                    let endLine = SystemLinesEnum_1.SystemLinesEnum.SingleThin;
                    if (measureIndex < this.currentSystemParams.systemMeasures.length) {
                        endLine = this.currentSystemParams.systemMeasures[measureIndex].endLine;
                    }
                    const lineWidth = measure.getLineWidth(endLine);
                    let xPos = measure.PositionAndShape.RelativePosition.x + measure.PositionAndShape.BorderRight - lineWidth;
                    if (endLine === SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots) {
                        xPos -= lineWidth / 2;
                    }
                    currentSystem.createVerticalLineForMeasure(xPos, lineWidth, endLine, SystemLinePosition_1.SystemLinePosition.MeasureEnd, measureIndex, measure);
                }
                currentXPosition = measure.PositionAndShape.RelativePosition.x + measure.PositionAndShape.BorderRight;
            }
        }
        if (systemEndsPart) {
            this.decreaseMusicSystemBorders();
        }
    }
    /**
     * If the last [[MusicSystem]] doesn't need stretching, then this method decreases the System's Width,
     * the [[StaffLine]]'s Width and the 5 [[StaffLine]]s length.
     */
    decreaseMusicSystemBorders() {
        const currentSystem = this.currentSystemParams.currentSystem;
        const bb = CollectionUtil_1.CollectionUtil.last(currentSystem.StaffLines[0].Measures).PositionAndShape;
        const width = bb.RelativePosition.x + bb.Size.width;
        for (let idx = 0, len = currentSystem.StaffLines.length; idx < len; ++idx) {
            const staffLine = currentSystem.StaffLines[idx];
            staffLine.PositionAndShape.BorderRight = width;
            for (let idx2 = 0, len2 = staffLine.StaffLines.length; idx2 < len2; ++idx2) {
                const graphicalLine = staffLine.StaffLines[idx2];
                graphicalLine.End = new PointF2D_1.PointF2D(width, graphicalLine.End.y);
            }
        }
        currentSystem.PositionAndShape.BorderRight = width + this.currentSystemParams.maxLabelLength + this.rules.SystemLabelsRightMargin;
    }
    /**
     * This method updates the System's StaffLine's RelativePosition (starting from the given index).
     * @param musicSystem
     * @param index
     * @param value
     */
    updateStaffLinesRelativePosition(musicSystem, index, value) {
        for (let i = index; i < musicSystem.StaffLines.length; i++) {
            musicSystem.StaffLines[i].PositionAndShape.RelativePosition.y = value;
        }
        musicSystem.PositionAndShape.BorderBottom += value;
    }
    /**
     * Create a new [[GraphicalMusicPage]]
     * (for now only one long page is used per music sheet, as we scroll down and have no page flips)
     * @returns {GraphicalMusicPage}
     */
    createMusicPage() {
        // const previousPage: GraphicalMusicPage = this.graphicalMusicSheet.MusicPages.last();
        // const previousSizeY: number = previousPage ? previousPage.PositionAndShape.Size.height : 0;
        const page = new GraphicalMusicPage_1.GraphicalMusicPage(this.graphicalMusicSheet);
        this.graphicalMusicSheet.MusicPages.push(page);
        page.PageNumber = this.graphicalMusicSheet.MusicPages.length; // caution: page number = page index + 1
        page.PositionAndShape.BorderLeft = 0.0;
        page.PositionAndShape.BorderRight = this.graphicalMusicSheet.ParentMusicSheet.pageWidth;
        page.PositionAndShape.BorderTop = 0.0;
        page.PositionAndShape.BorderBottom = this.rules.PageHeight;
        page.PositionAndShape.RelativePosition = new PointF2D_1.PointF2D(0.0, 0.0);
        return page;
    }
    addSystemToPage(page, system) {
        page.MusicSystems.push(system);
        system.Parent = page;
    }
    /**
     * This method checks the distances between any two consecutive StaffLines of a System and if needed, shifts the lower one down.
     * @param musicSystem
     */
    optimizeDistanceBetweenStaffLines(musicSystem) {
        // don't perform any y-spacing in case of a StaffEntryLink (in both StaffLines)
        if (!musicSystem.checkStaffEntriesForStaffEntryLink()) {
            for (let i = 0; i < musicSystem.StaffLines.length - 1; i++) {
                const upperBottomLine = musicSystem.StaffLines[i].BottomLine;
                const lowerSkyLine = musicSystem.StaffLines[i + 1].SkyLine;
                // 1. Find maximum required space for sky bottom line touching each other
                let maxDistance = 0;
                for (let j = 0; j < upperBottomLine.length; j++) {
                    const bottomLineValue = upperBottomLine[j];
                    // look at a range of +/- 2 Units to also ensure that objects are also not too close in x-direction:
                    const startIdx = Math.max(0, j - 6);
                    const endIdx = Math.min(lowerSkyLine.length - 1, j + 6);
                    let skylineValue = 0;
                    for (let lowerIdx = startIdx; lowerIdx <= endIdx; lowerIdx++) {
                        skylineValue = Math.min(skylineValue, lowerSkyLine[lowerIdx]);
                    }
                    const distance = bottomLineValue - skylineValue;
                    maxDistance = Math.max(distance, maxDistance);
                }
                // 2. Add user defined distance between sky bottom line
                maxDistance += this.rules.MinSkyBottomDistBetweenStaves;
                // 3. Take the maximum between previous value and user defined value for staff line minimum distance
                maxDistance = Math.max(maxDistance, this.rules.StaffHeight + this.rules.MinimumStaffLineDistance);
                const lowerStafflineYPos = maxDistance + musicSystem.StaffLines[i].PositionAndShape.RelativePosition.y;
                this.updateStaffLinesRelativePosition(musicSystem, i + 1, lowerStafflineYPos);
            }
        }
        const firstStaffLine = musicSystem.StaffLines[0];
        musicSystem.PositionAndShape.BorderTop = firstStaffLine.PositionAndShape.RelativePosition.y + firstStaffLine.PositionAndShape.BorderTop;
        const lastStaffLine = musicSystem.StaffLines[musicSystem.StaffLines.length - 1];
        musicSystem.PositionAndShape.BorderBottom = lastStaffLine.PositionAndShape.RelativePosition.y + lastStaffLine.PositionAndShape.BorderBottom;
    }
    /** Calculates the relative Positions of all MusicSystems.
     *
     */
    calculateMusicSystemsRelativePositions() {
        let currentPage = this.createMusicPage();
        let currentYPosition = 0;
        // xPosition is always fixed
        let currentSystem = this.musicSystems[0];
        let timesPageCouldntFitSingleSystem = 0;
        for (let i = 0; i < this.musicSystems.length; i++) {
            currentSystem = this.musicSystems[i];
            if (currentPage.MusicSystems.length === 0) {
                // if this is the first system on the current page:
                // take top margins into account
                this.addSystemToPage(currentPage, currentSystem);
                if (this.rules.CompactMode) {
                    currentYPosition = this.rules.PageTopMarginNarrow;
                }
                else {
                    currentYPosition = this.rules.PageTopMargin;
                }
                if (this.graphicalMusicSheet.MusicPages.length === 1) {
                    /*
                    Only need this in the event that lyricist or composer text intersects with title,
                    which seems exceedingly rare.
                    Leaving here just in case for future needs.
                    Prefer to use skyline calculator in MusicSheetCalculator.calculatePageLabels

                    let maxLineCount: number = this.graphicalMusicSheet.Composer?.TextLines?.length;
                    let maxFontHeight: number = this.graphicalMusicSheet.Composer?.Label?.fontHeight;
                    let lyricistLineCount: number = this.graphicalMusicSheet.Lyricist?.TextLines?.length;
                    let lyricistFontHeight: number = this.graphicalMusicSheet.Lyricist?.Label?.fontHeight;

                    maxLineCount = maxLineCount ? maxLineCount : 0;
                    maxFontHeight = maxFontHeight ? maxFontHeight : 0;
                    lyricistLineCount = lyricistLineCount ? lyricistLineCount : 0;
                    lyricistFontHeight = lyricistFontHeight ? lyricistFontHeight : 0;

                    let maxHeight: number = maxLineCount * maxFontHeight;
                    const totalLyricist: number = lyricistLineCount * lyricistFontHeight;

                    if (totalLyricist > maxHeight) {
                        maxLineCount = lyricistLineCount;
                        maxFontHeight = lyricistFontHeight;
                        maxHeight = totalLyricist;
                    } */
                    if (this.rules.RenderTitle) {
                        // if it is the first System on the FIRST page: Add Title height and gap-distance
                        currentYPosition += this.rules.TitleTopDistance + this.rules.SheetTitleHeight +
                            this.rules.TitleBottomDistance;
                    }
                    /*
                    see comment above - only needed for rare case of composer/lyricist being
                    wide enough to be below the title (or title wide enough to be above)
                    if (maxLineCount > 2) {
                        currentYPosition += maxFontHeight * (maxLineCount - 2);
                    }*/
                }
                // now add the border-top: everything that stands out above the staffline:
                // note: this is unnecessary. We have PageTopMargin and TitleBottomDistance for this.
                //   also, this creates a sudden margin spike from PageTopMargin = 0.1 to PageTopMargin = 0.
                // if (!this.rules.CompactMode) { // don't add extra margins/borders in compact mode
                //     if (this.rules.PageTopMargin > 0) { // don't add extra margins with PageTopMargin == 0
                //         currentYPosition += -currentSystem.PositionAndShape.BorderTop;
                //     }
                // }
                const relativePosition = new PointF2D_1.PointF2D(this.rules.PageLeftMargin + this.rules.SystemLeftMargin, currentYPosition);
                currentSystem.PositionAndShape.RelativePosition = relativePosition;
                // check if the first system doesn't even fit on the page -> would lead to truncation at bottom end:
                if (currentYPosition + currentSystem.PositionAndShape.BorderBottom > this.rules.PageHeight - this.rules.PageBottomMargin) {
                    // can't fit single system on page, maybe PageFormat too small
                    timesPageCouldntFitSingleSystem++;
                    if (timesPageCouldntFitSingleSystem <= 4) { // only warn once with detailed info
                        console.log(`warning: could not fit a single system on page ${currentPage.PageNumber}` +
                            ` and measure number ${currentSystem.GraphicalMeasures[0][0].MeasureNumber}.
                            The PageFormat may be too small for this sheet."
                            Will not give further warnings for all pages, only total.`);
                    }
                }
            }
            else {
                // if this is not the first system on the page:
                // find optimum distance between Systems
                const previousSystem = this.musicSystems[i - 1];
                const prevSystemLastStaffline = previousSystem.StaffLines[previousSystem.StaffLines.length - 1];
                const prevSystemLastStaffLineBB = prevSystemLastStaffline.PositionAndShape;
                let distance = this.findRequiredDistanceWithSkyBottomLine(previousSystem, currentSystem);
                // make sure the optical distance is the user-defined min distance:
                distance += this.rules.MinSkyBottomDistBetweenSystems;
                distance = Math.max(distance, this.rules.MinimumDistanceBetweenSystems + prevSystemLastStaffline.StaffHeight);
                const newYPosition = currentYPosition +
                    prevSystemLastStaffLineBB.RelativePosition.y +
                    distance;
                // calculate the needed height for placing the current system on the page,
                // to see if it still fits:
                const currSystemBottomYPos = newYPosition +
                    currentSystem.PositionAndShape.BorderMarginBottom;
                const doXmlPageBreak = this.rules.NewPageAtXMLNewPageAttribute && previousSystem.breaksPage;
                if (!doXmlPageBreak &&
                    (currSystemBottomYPos < this.rules.PageHeight - this.rules.PageBottomMargin)) {
                    // enough space on this page:
                    this.addSystemToPage(currentPage, currentSystem);
                    currentYPosition = newYPosition;
                    const relativePosition = new PointF2D_1.PointF2D(this.rules.PageLeftMargin + this.rules.SystemLeftMargin, currentYPosition);
                    currentSystem.PositionAndShape.RelativePosition = relativePosition;
                }
                else {
                    // new page needed:
                    currentPage = this.createMusicPage();
                    // re-check this system again:
                    i -= 1;
                    continue;
                }
            }
        }
        if (timesPageCouldntFitSingleSystem > 0) {
            console.log(`total amount of pages that couldn't fit a single music system: ${timesPageCouldntFitSingleSystem} of ${currentPage.PageNumber}`);
        }
    }
    /**
     * Finds the minimum required distance between two systems
     * with the help of the sky- and bottom lines
     * @param upperSystem
     * @param lowerSystem
     */
    findRequiredDistanceWithSkyBottomLine(upperSystem, lowerSystem) {
        const upperSystemLastStaffLine = upperSystem.StaffLines[upperSystem.StaffLines.length - 1];
        const lowerSystemFirstStaffLine = lowerSystem.StaffLines[0];
        const upperBottomLineArray = upperSystemLastStaffLine.BottomLine;
        const lowerSkyLineArray = lowerSystemFirstStaffLine.SkyLine;
        const upperStaffLineBB = upperSystemLastStaffLine.PositionAndShape;
        const lowerStaffLineBB = lowerSystemFirstStaffLine.PositionAndShape;
        const skylinePixelWidth = 1 / this.rules.SamplingUnit;
        // Find maximum required space for sky and bottom line touching each other
        let maxDistance = 0;
        for (let upperIdx = 0; upperIdx < upperBottomLineArray.length; upperIdx++) {
            const bottomLineValue = upperBottomLineArray[upperIdx];
            // find index of the same x-position in lower skyline:
            const lowerCenterIdx = upperIdx +
                Math.round((upperStaffLineBB.RelativePosition.x - lowerStaffLineBB.RelativePosition.x) * skylinePixelWidth);
            if (lowerCenterIdx < 0) {
                // should actually not happen..
                continue;
            }
            if (lowerCenterIdx >= lowerSkyLineArray.length) {
                // lower system ends earlier x-wise than upper system (e.g. at last system, if it is not stretched)
                break;
            }
            // look at a range of +/- 2 Units to also ensure that objects are also not too close in x-direction:
            const startIdx = Math.max(0, lowerCenterIdx - 6);
            const endIdx = Math.min(lowerSkyLineArray.length - 1, lowerCenterIdx + 6);
            let skylineValue = 0;
            for (let lowerIdx = startIdx; lowerIdx <= endIdx; lowerIdx++) {
                skylineValue = Math.min(skylineValue, lowerSkyLineArray[lowerIdx]);
            }
            const distance = bottomLineValue - skylineValue;
            maxDistance = Math.max(distance, maxDistance);
        }
        if (maxDistance === 0) {
            // can only happen when the bottom- and skyline have no x-overlap at all:
            // fall back to borders:
            maxDistance = upperStaffLineBB.BorderBottom - lowerStaffLineBB.BorderTop;
        }
        return maxDistance;
    }
}
exports.MusicSystemBuilder = MusicSystemBuilder;
class SystemBuildParameters {
    constructor() {
        this.systemMeasures = [];
        this.systemMeasureIndex = 0;
        this.currentWidth = 0;
        this.currentSystemFixWidth = 0;
        this.currentSystemVarWidth = 0;
        this.maxLabelLength = 0;
    }
    IsSystemStartMeasure() {
        return this.systemMeasureIndex === 0;
    }
}
exports.SystemBuildParameters = SystemBuildParameters;
class MeasureBuildParameters {
}
exports.MeasureBuildParameters = MeasureBuildParameters;


/***/ }),

/***/ "./src/MusicalScore/Graphical/OctaveShiftParams.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/Graphical/OctaveShiftParams.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OctaveShiftParams = void 0;
class OctaveShiftParams {
    constructor(openOctaveShift, absoluteStartTimestamp, absoluteEndTimestamp) {
        this.getOpenOctaveShift = openOctaveShift;
        this.getAbsoluteStartTimestamp = absoluteStartTimestamp;
        this.getAbsoluteEndTimestamp = absoluteEndTimestamp;
    }
}
exports.OctaveShiftParams = OctaveShiftParams;


/***/ }),

/***/ "./src/MusicalScore/Graphical/PlainSkyBottomLineBatchCalculatorBackend.ts":
/*!********************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/PlainSkyBottomLineBatchCalculatorBackend.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlainSkyBottomLineBatchCalculatorBackend = void 0;
const SkyBottomLineCalculationResult_1 = __webpack_require__(/*! ./SkyBottomLineCalculationResult */ "./src/MusicalScore/Graphical/SkyBottomLineCalculationResult.ts");
const SkyBottomLineBatchCalculatorBackend_1 = __webpack_require__(/*! ./SkyBottomLineBatchCalculatorBackend */ "./src/MusicalScore/Graphical/SkyBottomLineBatchCalculatorBackend.ts");
/**
 * This class calculates the skylines and the bottom lines by iterating over pixels retrieved via
 * CanvasRenderingContext2D.getImageData().
 */
class PlainSkyBottomLineBatchCalculatorBackend extends SkyBottomLineBatchCalculatorBackend_1.SkyBottomLineBatchCalculatorBackend {
    constructor(rules, measures) {
        super(rules, measures);
    }
    getPreferredRenderingConfiguration(maxWidth, elementHeight) {
        return {
            elementWidth: Math.ceil(maxWidth),
            numColumns: 6,
            numRows: 6,
        };
    }
    onInitialize(tableConfiguration) {
        // does nothing
    }
    calculateFromCanvas(canvas, vexFlowContext, measures, samplingUnit, tableConfiguration) {
        // vexFlowContext is CanvasRenderingContext2D in runtime
        const canvasWidth = canvas.width;
        const context = vexFlowContext;
        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
        const rgbaLength = 4;
        const { elementWidth, elementHeight, numColumns } = tableConfiguration;
        const result = [];
        for (let i = 0; i < measures.length; ++i) {
            const measure = measures[i];
            const measureWidth = Math.floor(measure.getVFStave().getWidth());
            const measureArrayLength = Math.max(Math.ceil(measure.PositionAndShape.Size.width * samplingUnit), 1);
            const u = i % numColumns;
            const v = Math.floor(i / numColumns);
            const xStart = u * elementWidth;
            const xEnd = xStart + measureWidth;
            const yStart = v * elementHeight;
            const yEnd = yStart + elementHeight;
            const skyLine = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);
            const bottomLine = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);
            for (let x = xStart; x < xEnd; ++x) {
                // SkyLine
                skyLine[x - xStart] = 0;
                for (let y = yStart; y < yEnd; ++y) {
                    const yOffset = y * canvasWidth * rgbaLength;
                    const bufIndex = yOffset + x * rgbaLength;
                    const alpha = imageData.data[bufIndex + 3];
                    if (alpha > 0) {
                        skyLine[x - xStart] = y - yStart;
                        break;
                    }
                }
                // BottomLine
                bottomLine[x - xStart] = elementHeight;
                for (let y = yEnd - 1; y >= yStart; y--) {
                    const yOffset = y * canvasWidth * rgbaLength;
                    const bufIndex = yOffset + x * rgbaLength;
                    const alpha = imageData.data[bufIndex + 3];
                    if (alpha > 0) {
                        bottomLine[x - xStart] = y - yStart;
                        break;
                    }
                }
            }
            const lowestSkyLine = Math.max(...skyLine);
            const highestBottomLine = Math.min(...bottomLine);
            for (let x = 0; x < measureWidth; ++x) {
                skyLine[x] = skyLine[x] === 0 ? lowestSkyLine : skyLine[x];
                bottomLine[x] = bottomLine[x] === elementHeight ? highestBottomLine : bottomLine[x];
            }
            result.push(new SkyBottomLineCalculationResult_1.SkyBottomLineCalculationResult(skyLine, bottomLine));
        }
        return result;
    }
}
exports.PlainSkyBottomLineBatchCalculatorBackend = PlainSkyBottomLineBatchCalculatorBackend;


/***/ }),

/***/ "./src/MusicalScore/Graphical/SkyBottomLineBatchCalculator.ts":
/*!********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/SkyBottomLineBatchCalculator.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkyBottomLineBatchCalculator = void 0;
const OpenSheetMusicDisplay_1 = __webpack_require__(/*! ../../OpenSheetMusicDisplay */ "./src/OpenSheetMusicDisplay/index.ts");
const PlainSkyBottomLineBatchCalculatorBackend_1 = __webpack_require__(/*! ./PlainSkyBottomLineBatchCalculatorBackend */ "./src/MusicalScore/Graphical/PlainSkyBottomLineBatchCalculatorBackend.ts");
const WebGLSkyBottomLineBatchCalculatorBackend_1 = __webpack_require__(/*! ./WebGLSkyBottomLineBatchCalculatorBackend */ "./src/MusicalScore/Graphical/WebGLSkyBottomLineBatchCalculatorBackend.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const CollectionUtil_1 = __webpack_require__(/*! ../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
/**
 * This class calculates the skylines and the bottom lines for multiple stafflines.
 */
class SkyBottomLineBatchCalculator {
    constructor(staffLines, preferredBackend) {
        const batchEntryArrayList = new Map();
        for (const staffLine of staffLines) {
            const rules = staffLine.ParentMusicSystem.rules;
            const batchEntryArray = (() => {
                if (batchEntryArrayList.has(rules)) {
                    return batchEntryArrayList.get(rules);
                }
                else {
                    const array = [];
                    batchEntryArrayList.set(rules, array);
                    return array;
                }
            })();
            batchEntryArray.push({
                skyBottomLineCalculator: staffLine.SkyBottomLineCalculator,
                measures: staffLine.Measures
            });
        }
        this.batches = new Map();
        for (const [rules, batchEntryArray] of batchEntryArrayList.entries()) {
            const measures = CollectionUtil_1.CollectionUtil.flat(batchEntryArray.map(entry => entry.measures));
            const backend = (() => {
                if (preferredBackend === OpenSheetMusicDisplay_1.SkyBottomLineBatchCalculatorBackendType.Plain) {
                    return new PlainSkyBottomLineBatchCalculatorBackend_1.PlainSkyBottomLineBatchCalculatorBackend(rules, measures).initialize();
                }
                else {
                    try {
                        return new WebGLSkyBottomLineBatchCalculatorBackend_1.WebGLSkyBottomLineBatchCalculatorBackend(rules, measures).initialize();
                    }
                    catch (_a) {
                        loglevel_1.default.info("Couldn't create WebGLBackend for Skyline. Using fallback.");
                        return new PlainSkyBottomLineBatchCalculatorBackend_1.PlainSkyBottomLineBatchCalculatorBackend(rules, measures).initialize();
                    }
                }
            })();
            backend.initialize();
            this.batches.set(rules, {
                backend,
                entries: batchEntryArray
            });
        }
    }
    /**
     * This method calculates the skylines and the bottom lines for the stafflines passed to the constructor.
     */
    calculateLines() {
        for (const [, { backend, entries }] of this.batches) {
            const results = backend.calculateLines();
            let start = 0;
            for (const { skyBottomLineCalculator, measures } of entries) {
                const end = start + measures.length;
                skyBottomLineCalculator.updateLines(results.slice(start, end));
                start = end;
            }
        }
    }
}
exports.SkyBottomLineBatchCalculator = SkyBottomLineBatchCalculator;


/***/ }),

/***/ "./src/MusicalScore/Graphical/SkyBottomLineBatchCalculatorBackend.ts":
/*!***************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/SkyBottomLineBatchCalculatorBackend.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkyBottomLineBatchCalculatorBackend = void 0;
const CanvasVexFlowBackend_1 = __webpack_require__(/*! ./VexFlow/CanvasVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
/**
 * This class calculates the sky lines and the bottom lines for multiple stafflines.
 */
class SkyBottomLineBatchCalculatorBackend {
    constructor(rules, measures) {
        /**
         * The default height used by CanvasVexFlowBackend. Update this value when the
         * default height value of CanvasVexFlowBackend.initializeHeadless is updated.
         * This value is used as a height of each cell in the table rendered by this class.
         */
        this.elementHeight = 300;
        this.canvas = new CanvasVexFlowBackend_1.CanvasVexFlowBackend(rules);
        this.measures = measures;
        this.maxWidth = Math.max(...this.measures.map(measure => {
            let width = measure.getVFStave().getWidth();
            if (!(width > 0) && !measure.IsExtraGraphicalMeasure) {
                loglevel_1.default.warn("SkyBottomLineBatchCalculatorBackend: width not > 0 in measure " + measure.MeasureNumber);
                width = 50;
            }
            return width;
        }));
        this.samplingUnit = rules.SamplingUnit;
    }
    /**
     * This method allocates required resources for the calculation.
     */
    initialize() {
        this.tableConfiguration = Object.assign(Object.assign({}, this.getPreferredRenderingConfiguration(this.maxWidth, this.elementHeight)), { elementHeight: this.elementHeight });
        if (this.tableConfiguration.numRows < 1 || this.tableConfiguration.numColumns < 1) {
            loglevel_1.default.warn("SkyBottomLineBatchCalculatorBackend: numRows or numColumns in tableConfiguration is 0");
            throw new Error("numRows or numColumns in tableConfiguration is 0");
        }
        if (this.tableConfiguration.elementWidth < this.maxWidth) {
            loglevel_1.default.warn("SkyBottomLineBatchCalculatorBackend: elementWidth in tableConfiguration is less than the width of widest measure");
        }
        const width = this.tableConfiguration.elementWidth * this.tableConfiguration.numColumns;
        const height = this.elementHeight * this.tableConfiguration.numRows;
        this.canvas.initializeHeadless(width, height);
        this.onInitialize(this.tableConfiguration);
        return this;
    }
    /**
     * This method calculates the skylines and the bottom lines for the measures passed to the constructor.
     */
    calculateLines() {
        const debugTmpCanvas = false;
        const { numColumns, numRows, elementWidth } = this.tableConfiguration;
        const elementHeight = this.elementHeight;
        const numElementsPerTable = numColumns * numRows;
        const vexFlowContext = this.canvas.getContext();
        const context = vexFlowContext;
        const canvasElement = this.canvas.getCanvas();
        if (debugTmpCanvas) {
            document.querySelectorAll(".osmd-sky-bottom-line-tmp-canvas").forEach(element => element.parentElement.removeChild(element));
        }
        const results = [];
        for (let i = 0; i < this.measures.length; i += numElementsPerTable) {
            vexFlowContext.clear();
            const measures = this.measures.slice(i, i + numElementsPerTable);
            for (let j = 0; j < measures.length; ++j) {
                const measure = measures[j];
                const vsStaff = measure.getVFStave();
                // (u, v) is the position of measure in the table
                const u = j % numColumns;
                const v = Math.floor(j / numColumns);
                let currentWidth = vsStaff.getWidth();
                if (!(currentWidth > 0) && !measure.IsExtraGraphicalMeasure) {
                    currentWidth = 50;
                }
                currentWidth = Math.floor(currentWidth);
                // must calculate first AbsolutePositions
                measure.PositionAndShape.calculateAbsolutePositionsRecursive(0, 0);
                const x = 0;
                vsStaff.setX(x);
                // The magic number 100 is an offset from the top image border so that
                // elements above the staffline can be drawn correctly.
                const y = vsStaff.y + 100;
                vsStaff.setY(y);
                const oldMeasureWidth = vsStaff.getWidth();
                // We need to tell the VexFlow stave about the canvas width. This looks
                // redundant because it should know the canvas but somehow it doesn't.
                // Maybe I am overlooking something but for now this does the trick
                vsStaff.setWidth(currentWidth);
                measure.format();
                vsStaff.setWidth(oldMeasureWidth);
                try {
                    context.translate(u * elementWidth, v * elementHeight);
                    measure.draw(vexFlowContext);
                    context.translate(-u * elementWidth, -v * elementHeight);
                    // Vexflow errors can happen here, then our complete rendering loop would halt without catching errors.
                }
                catch (ex) {
                    loglevel_1.default.warn("SkyBottomLineBatchCalculatorBackend.calculateLines.draw", ex);
                }
            }
            const result = this.calculateFromCanvas(canvasElement, vexFlowContext, measures, this.samplingUnit, this.tableConfiguration);
            results.push(...result);
            if (debugTmpCanvas) {
                const canvasContext = vexFlowContext;
                const oldFillStyle = canvasContext.fillStyle;
                for (let j = 0; j < result.length; ++j) {
                    const { skyLine, bottomLine } = result[j];
                    const u = j % numColumns;
                    const v = Math.floor(j / numColumns);
                    const xStart = u * elementWidth;
                    const yStart = v * elementHeight;
                    canvasContext.fillStyle = "#FF0000";
                    skyLine.forEach((y, x) => vexFlowContext.fillRect(x - 1 + xStart, y - 1 + yStart, 2, 2));
                    canvasContext.fillStyle = "#0000FF";
                    bottomLine.forEach((y, x) => vexFlowContext.fillRect(x - 1 + xStart, y - 1 + yStart, 2, 2));
                }
                canvasContext.fillStyle = oldFillStyle;
                const url = canvasElement.toDataURL("image/png");
                const img = document.createElement("img");
                img.classList.add("osmd-sky-bottom-line-tmp-canvas");
                img.src = url;
                document.body.appendChild(img);
                const hr = document.createElement("hr");
                hr.classList.add("osmd-sky-bottom-line-tmp-canvas");
                document.body.appendChild(hr);
            }
        }
        return results;
    }
}
exports.SkyBottomLineBatchCalculatorBackend = SkyBottomLineBatchCalculatorBackend;


/***/ }),

/***/ "./src/MusicalScore/Graphical/SkyBottomLineCalculationResult.ts":
/*!**********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/SkyBottomLineCalculationResult.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkyBottomLineCalculationResult = void 0;
/**
 * Contains a skyline and a bottomline for a measure.
 */
class SkyBottomLineCalculationResult {
    constructor(skyLine, bottomLine) {
        this.skyLine = skyLine;
        this.bottomLine = bottomLine;
    }
}
exports.SkyBottomLineCalculationResult = SkyBottomLineCalculationResult;


/***/ }),

/***/ "./src/MusicalScore/Graphical/SkyBottomLineCalculator.ts":
/*!***************************************************************!*\
  !*** ./src/MusicalScore/Graphical/SkyBottomLineCalculator.ts ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SkyBottomLineCalculator = void 0;
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlow/VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const SkyBottomLineCalculationResult_1 = __webpack_require__(/*! ./SkyBottomLineCalculationResult */ "./src/MusicalScore/Graphical/SkyBottomLineCalculationResult.ts");
const CanvasVexFlowBackend_1 = __webpack_require__(/*! ./VexFlow/CanvasVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts");
/**
 * This class calculates and holds the skyline and bottom line information.
 * It also has functions to update areas of the two lines if new elements are
 * added to the staffline (e.g. measure number, annotations, ...)
 */
class SkyBottomLineCalculator {
    /**
     * Create a new object of the calculator
     * @param staffLineParent staffline where the calculator should be attached
     */
    constructor(staffLineParent) {
        this.mStaffLineParent = staffLineParent;
        this.mRules = staffLineParent.ParentMusicSystem.rules;
    }
    /**
     * This method updates the skylines and bottomlines for mStaffLineParent.
     * @param calculationResults the skylines and bottomlines of mStaffLineParent's measures calculated by SkyBottomLineBatchCalculator
     */
    updateLines(calculationResults) {
        const measures = this.StaffLineParent.Measures;
        if (calculationResults.length !== measures.length) {
            loglevel_1.default.warn("SkyBottomLineCalculator: lengths of calculation result array and measure array do not match");
            if (calculationResults.length < measures.length) {
                while (calculationResults.length < measures.length) {
                    calculationResults.push(new SkyBottomLineCalculationResult_1.SkyBottomLineCalculationResult([], []));
                }
            }
            else {
                calculationResults = calculationResults.slice(0, measures.length);
            }
        }
        const arrayLength = Math.max(Math.ceil(this.StaffLineParent.PositionAndShape.Size.width * this.SamplingUnit), 1);
        this.mSkyLine = [];
        this.mBottomLine = [];
        for (const { skyLine, bottomLine } of calculationResults) {
            this.mSkyLine.push(...skyLine);
            this.mBottomLine.push(...bottomLine);
        }
        // Subsampling:
        // The pixel width is bigger than the measure size in units. So we split the array into
        // chunks with the size of MeasurePixelWidth/measureUnitWidth and reduce the value to its
        // average
        const arrayChunkSize = this.mSkyLine.length / arrayLength;
        const subSampledSkyLine = [];
        const subSampledBottomLine = [];
        for (let chunkIndex = 0; chunkIndex < this.mSkyLine.length; chunkIndex += arrayChunkSize) {
            if (subSampledSkyLine.length === arrayLength) {
                break; // TODO find out why skyline.length becomes arrayLength + 1. see log.debug below
            }
            const endIndex = Math.min(this.mSkyLine.length, chunkIndex + arrayChunkSize);
            let chunk = this.mSkyLine.slice(chunkIndex, endIndex + 1); // slice does not include end index
            // TODO chunkIndex + arrayChunkSize is sometimes bigger than this.mSkyLine.length -> out of bounds
            // TODO chunkIndex + arrayChunkSize is often a non-rounded float as well. is that ok to use with slice?
            /*const diff: number = this.mSkyLine.length - (chunkIndex + arrayChunkSize);
            if (diff < 0) { // out of bounds
                console.log("length - slice end index: " + diff);
            }*/
            subSampledSkyLine.push(Math.min(...chunk));
            chunk = this.mBottomLine.slice(chunkIndex, endIndex + 1); // slice does not include end index
            subSampledBottomLine.push(Math.max(...chunk));
        }
        this.mSkyLine = subSampledSkyLine;
        this.mBottomLine = subSampledBottomLine;
        if (this.mSkyLine.length !== arrayLength) { // bottomline will always be same length as well
            loglevel_1.default.debug(`SkyLine calculation was not correct (${this.mSkyLine.length} instead of ${arrayLength})`);
        }
        // Remap the values from 0 to +/- height in units
        const lowestSkyLine = Math.max(...this.mSkyLine);
        this.mSkyLine = this.mSkyLine.map(v => (v - lowestSkyLine) / VexFlowMusicSheetDrawer_1.unitInPixels + this.StaffLineParent.TopLineOffset);
        const highestBottomLine = Math.min(...this.mBottomLine);
        this.mBottomLine = this.mBottomLine.map(v => (v - highestBottomLine) / VexFlowMusicSheetDrawer_1.unitInPixels + this.StaffLineParent.BottomLineOffset);
    }
    /**
     * This method calculates the Sky- and BottomLines for a StaffLine.
     */
    calculateLines() {
        const samplingUnit = this.mRules.SamplingUnit;
        const results = [];
        // Create a temporary canvas outside the DOM to draw the measure in.
        const tmpCanvas = new CanvasVexFlowBackend_1.CanvasVexFlowBackend(this.mRules);
        // search through all Measures
        for (const measure of this.StaffLineParent.Measures) {
            // must calculate first AbsolutePositions
            measure.PositionAndShape.calculateAbsolutePositionsRecursive(0, 0);
            // Pre initialize and get stuff for more performance
            const vsStaff = measure.getVFStave();
            let width = vsStaff.getWidth();
            if (!(width > 0) && !measure.IsExtraGraphicalMeasure) {
                loglevel_1.default.warn("SkyBottomLineCalculator: width not > 0 in measure " + measure.MeasureNumber);
                width = 50;
            }
            // Headless because we are outside the DOM
            tmpCanvas.initializeHeadless(width);
            const ctx = tmpCanvas.getContext();
            const canvas = tmpCanvas.getCanvas();
            width = canvas.width;
            const height = canvas.height;
            // This magic number is an offset from the top image border so that
            // elements above the staffline can be drawn correctly.
            vsStaff.setY(vsStaff.y + 100);
            const oldMeasureWidth = vsStaff.getWidth();
            // We need to tell the VexFlow stave about the canvas width. This looks
            // redundant because it should know the canvas but somehow it doesn't.
            // Maybe I am overlooking something but for now this does the trick
            vsStaff.setWidth(width);
            measure.format();
            vsStaff.setWidth(oldMeasureWidth);
            try {
                measure.draw(ctx);
                // Vexflow errors can happen here, then our complete rendering loop would halt without catching errors.
            }
            catch (ex) {
                loglevel_1.default.warn("SkyBottomLineCalculator.calculateLines.draw", ex);
            }
            // imageData.data is a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order
            // RGBA is 32 bit word with 8 bits red, 8 bits green, 8 bits blue and 8 bit alpha. Alpha should be 0 for all background colors.
            // Since we are only interested in black or white we can take 32bit words at once
            const imageData = ctx.getImageData(0, 0, width, height);
            const rgbaLength = 4;
            const measureArrayLength = Math.max(Math.ceil(measure.PositionAndShape.Size.width * samplingUnit), 1);
            const tmpSkyLine = new Array(measureArrayLength);
            const tmpBottomLine = new Array(measureArrayLength);
            for (let x = 0; x < width; x++) {
                // SkyLine
                for (let y = 0; y < height; y++) {
                    const yOffset = y * width * rgbaLength;
                    const bufIndex = yOffset + x * rgbaLength;
                    const alpha = imageData.data[bufIndex + 3];
                    if (alpha > 0) {
                        tmpSkyLine[x] = y;
                        break;
                    }
                }
                // BottomLine
                for (let y = height; y > 0; y--) {
                    const yOffset = y * width * rgbaLength;
                    const bufIndex = yOffset + x * rgbaLength;
                    const alpha = imageData.data[bufIndex + 3];
                    if (alpha > 0) {
                        tmpBottomLine[x] = y;
                        break;
                    }
                }
            }
            for (let idx = 0; idx < tmpSkyLine.length; idx++) {
                if (tmpSkyLine[idx] === undefined) {
                    tmpSkyLine[idx] = Math.max(this.findPreviousValidNumber(idx, tmpSkyLine), this.findNextValidNumber(idx, tmpSkyLine));
                }
            }
            for (let idx = 0; idx < tmpBottomLine.length; idx++) {
                if (tmpBottomLine[idx] === undefined) {
                    tmpBottomLine[idx] = Math.max(this.findPreviousValidNumber(idx, tmpBottomLine), this.findNextValidNumber(idx, tmpBottomLine));
                }
            }
            results.push(new SkyBottomLineCalculationResult_1.SkyBottomLineCalculationResult(tmpSkyLine, tmpBottomLine));
            // Set to true to only show the "mini canvases" and the corresponding skylines
            const debugTmpCanvas = false;
            if (debugTmpCanvas) {
                tmpSkyLine.forEach((y, x) => this.drawPixel(new PointF2D_1.PointF2D(x, y), tmpCanvas));
                tmpBottomLine.forEach((y, x) => this.drawPixel(new PointF2D_1.PointF2D(x, y), tmpCanvas, "blue"));
                const img = canvas.toDataURL("image/png");
                document.write('<img src="' + img + '"/>');
            }
            tmpCanvas.clear();
        }
        this.updateLines(results);
    }
    updateSkyLineWithLine(start, end, value) {
        const startIndex = Math.floor(start.x * this.SamplingUnit);
        const endIndex = Math.ceil(end.x * this.SamplingUnit);
        for (let i = startIndex + 1; i < Math.min(endIndex, this.SkyLine.length); i++) {
            this.SkyLine[i] = value;
        }
    }
    /**
     * This method updates the SkyLine for a given Wedge.
     * @param start Start point of the wedge (the point where both lines meet)
     * @param end End point of the wedge (the end of the most extreme line: upper line for skyline, lower line for bottomline)
     */
    updateSkyLineWithWedge(start, end) {
        // FIXME: Refactor if wedges will be added. Current status is that vexflow will be used for this
        let startIndex = Math.floor(start.x * this.SamplingUnit);
        let endIndex = Math.ceil(end.x * this.SamplingUnit);
        let slope = (end.y - start.y) / (end.x - start.x);
        if (endIndex - startIndex <= 1) {
            endIndex++;
            slope = 0;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (startIndex >= this.BottomLine.length) {
            startIndex = this.BottomLine.length - 1;
        }
        if (endIndex < 0) {
            endIndex = 0;
        }
        if (endIndex >= this.BottomLine.length) {
            endIndex = this.BottomLine.length;
        }
        this.SkyLine[startIndex] = start.y;
        for (let i = startIndex + 1; i < Math.min(endIndex, this.SkyLine.length); i++) {
            this.SkyLine[i] = this.SkyLine[i - 1] + slope / this.SamplingUnit;
        }
    }
    /**
     * This method updates the BottomLine for a given Wedge.
     * @param start Start point of the wedge
     * @param end End point of the wedge
     */
    updateBottomLineWithWedge(start, end) {
        // FIXME: Refactor if wedges will be added. Current status is that vexflow will be used for this
        let startIndex = Math.floor(start.x * this.SamplingUnit);
        let endIndex = Math.ceil(end.x * this.SamplingUnit);
        let slope = (end.y - start.y) / (end.x - start.x);
        if (endIndex - startIndex <= 1) {
            endIndex++;
            slope = 0;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (startIndex >= this.BottomLine.length) {
            startIndex = this.BottomLine.length - 1;
        }
        if (endIndex < 0) {
            endIndex = 0;
        }
        if (endIndex >= this.BottomLine.length) {
            endIndex = this.BottomLine.length;
        }
        this.BottomLine[startIndex] = start.y;
        for (let i = startIndex + 1; i < endIndex; i++) {
            this.BottomLine[i] = this.BottomLine[i - 1] + slope / this.SamplingUnit;
        }
    }
    /**
     * This method updates the SkyLine for a given range with a given value
     * //param  to update the SkyLine for
     * @param startIndex Start index of the range
     * @param endIndex End index of the range
     * @param value ??
     */
    updateSkyLineInRange(startIndex, endIndex, value) {
        this.updateInRange(this.mSkyLine, startIndex, endIndex, value);
    }
    /**
     * This method updates the BottomLine for a given range with a given value
     * @param startIndex Start index of the range
     * @param endIndex End index of the range (excluding)
     * @param value ??
     */
    updateBottomLineInRange(startIndex, endIndex, value) {
        this.updateInRange(this.BottomLine, startIndex, endIndex, value);
    }
    /**
     * Resets a SkyLine in a range to its original value
     * @param startIndex Start index of the range
     * @param endIndex End index of the range (excluding)
     */
    resetSkyLineInRange(startIndex, endIndex) {
        this.updateInRange(this.SkyLine, startIndex, endIndex);
    }
    /**
     * Resets a bottom line in a range to its original value
     * @param startIndex Start index of the range
     * @param endIndex End index of the range
     */
    resetBottomLineInRange(startIndex, endIndex) {
        this.setInRange(this.BottomLine, startIndex, endIndex);
    }
    /**
     * Update the whole skyline with a certain value
     * @param value value to be set
     */
    setSkyLineWithValue(value) {
        this.SkyLine.forEach(sl => sl = value);
    }
    /**
     * Update the whole bottomline with a certain value
     * @param value value to be set
     */
    setBottomLineWithValue(value) {
        this.BottomLine.forEach(bl => bl = value);
    }
    getLeftIndexForPointX(x, length) {
        const index = Math.floor(x * this.SamplingUnit);
        if (index < 0) {
            return 0;
        }
        if (index >= length) {
            return length - 1;
        }
        return index;
    }
    getRightIndexForPointX(x, length) {
        const index = Math.ceil(x * this.SamplingUnit);
        if (index < 0) {
            return 0;
        }
        if (index >= length) {
            return length - 1;
        }
        return index;
    }
    /**
     * This method updates the StaffLine Borders with the Sky- and BottomLines Min- and MaxValues.
     */
    updateStaffLineBorders() {
        this.mStaffLineParent.PositionAndShape.BorderTop = this.getSkyLineMin();
        this.mStaffLineParent.PositionAndShape.BorderMarginTop = this.getSkyLineMin();
        this.mStaffLineParent.PositionAndShape.BorderBottom = this.getBottomLineMax();
        this.mStaffLineParent.PositionAndShape.BorderMarginBottom = this.getBottomLineMax();
    }
    /**
     * This method finds the minimum value of the SkyLine.
     */
    getSkyLineMin() {
        return Math.min(...this.SkyLine.filter(s => !isNaN(s)));
    }
    getSkyLineMinAtPoint(point) {
        const index = Math.round(point * this.SamplingUnit);
        return this.mSkyLine[index];
    }
    /**
     * This method finds the SkyLine's minimum value within a given range.
     * @param startIndex Starting index
     * @param endIndex End index (including)
     */
    getSkyLineMinInRange(startIndex, endIndex) {
        return this.getMinInRange(this.SkyLine, startIndex, endIndex);
    }
    /**
     * This method finds the maximum value of the BottomLine.
     */
    getBottomLineMax() {
        return Math.max(...this.BottomLine.filter(s => !isNaN(s)));
    }
    getBottomLineMaxAtPoint(point) {
        const index = Math.round(point * this.SamplingUnit);
        return this.mBottomLine[index];
    }
    /**
     * This method finds the BottomLine's maximum value within a given range.
     * @param startIndex Start index of the range
     * @param endIndex End index of the range (excluding)
     */
    getBottomLineMaxInRange(startIndex, endIndex) {
        return this.getMaxInRange(this.BottomLine, startIndex, endIndex);
    }
    /**
     * This method returns the maximum value of the bottom line around a specific
     * bounding box. Will return undefined if the bounding box is not valid or inside staffline
     * @param boundingBox Bounding box where the maximum should be retrieved from
     * @returns Maximum value inside bounding box boundaries or undefined if not possible
     */
    getBottomLineMaxInBoundingBox(boundingBox) {
        //TODO: Actually it should be the margin. But that one is not implemented
        const startPoint = Math.floor(boundingBox.AbsolutePosition.x + boundingBox.BorderLeft);
        const endPoint = Math.ceil(boundingBox.AbsolutePosition.x + boundingBox.BorderRight);
        return this.getMaxInRange(this.mBottomLine, startPoint, endPoint);
    }
    /**
     * Updates sky- and bottom line with a boundingBox and its children
     * @param boundingBox Bounding box to be added
     */
    updateWithBoundingBoxRecursively(boundingBox) {
        if (boundingBox.ChildElements && boundingBox.ChildElements.length > 0) {
            this.updateWithBoundingBoxRecursively(boundingBox);
        }
        else {
            const currentTopBorder = boundingBox.BorderTop + boundingBox.AbsolutePosition.y;
            const currentBottomBorder = boundingBox.BorderBottom + boundingBox.AbsolutePosition.y;
            if (currentTopBorder < 0) {
                const startPoint = Math.floor(boundingBox.AbsolutePosition.x + boundingBox.BorderLeft);
                const endPoint = Math.ceil(boundingBox.AbsolutePosition.x + boundingBox.BorderRight);
                this.updateInRange(this.mSkyLine, startPoint, endPoint, currentTopBorder);
            }
            else if (currentBottomBorder > this.StaffLineParent.StaffHeight) {
                const startPoint = Math.floor(boundingBox.AbsolutePosition.x + boundingBox.BorderLeft);
                const endPoint = Math.ceil(boundingBox.AbsolutePosition.x + boundingBox.BorderRight);
                this.updateInRange(this.mBottomLine, startPoint, endPoint, currentBottomBorder);
            }
        }
    }
    //#region Private methods
    /**
     * go backwards through the skyline array and find a number so that
     * we can properly calculate the average
     * @param start the starting index of the search
     * @param tSkyLine the skyline to search through
     */
    findPreviousValidNumber(start, tSkyLine) {
        for (let idx = start; idx >= 0; idx--) {
            if (!isNaN(tSkyLine[idx])) {
                return tSkyLine[idx];
            }
        }
        return 0;
    }
    /**
     * go forward through the skyline array and find a number so that
     * we can properly calculate the average
     * @param start the starting index of the search
     * @param tSkyLine the skyline to search through
     */
    findNextValidNumber(start, tSkyLine) {
        if (start >= tSkyLine.length) {
            return tSkyLine[start - 1];
        }
        for (let idx = start; idx < tSkyLine.length; idx++) {
            if (!isNaN(tSkyLine[idx])) {
                return tSkyLine[idx];
            }
        }
        return 0;
    }
    /**
     * Debugging drawing function that can draw single pixels
     * @param coord Point to draw to
     * @param backend the backend to be used
     * @param color the color to be used, default is red
     */
    drawPixel(coord, backend, color = "#FF0000FF") {
        const ctx = backend.getContext();
        const oldStyle = ctx.fillStyle;
        ctx.fillStyle = color;
        ctx.fillRect(coord.x, coord.y, 2, 2);
        ctx.fillStyle = oldStyle;
    }
    /**
     * Update an array with the value given inside a range. NOTE: will only be updated if value > oldValue
     * @param array Array to fill in the new value
     * @param startIndex start index to begin with (default: 0)
     * @param endIndex end index of array (excluding, default: array length)
     * @param value value to fill in (default: 0)
     */
    updateInRange(array, startIndex = 0, endIndex = array.length, value = 0) {
        startIndex = Math.floor(startIndex * this.SamplingUnit);
        endIndex = Math.ceil(endIndex * this.SamplingUnit);
        if (endIndex < startIndex) {
            throw new Error("start index of line is greater than the end index");
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (endIndex > array.length) {
            endIndex = array.length;
        }
        for (let i = startIndex; i < endIndex; i++) {
            array[i] = Math.abs(value) > Math.abs(array[i]) ? value : array[i];
        }
    }
    /**
     * Sets the value given to the range inside the array. NOTE: will always update the value
     * @param array Array to fill in the new value
     * @param startIndex start index to begin with (default: 0)
     * @param endIndex end index of array (excluding, default: array length)
     * @param value value to fill in (default: 0)
     */
    setInRange(array, startIndex = 0, endIndex = array.length, value = 0) {
        startIndex = Math.floor(startIndex * this.SamplingUnit);
        endIndex = Math.ceil(endIndex * this.SamplingUnit);
        if (endIndex < startIndex) {
            throw new Error("start index of line is greater then the end index");
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (endIndex > array.length) {
            endIndex = array.length;
        }
        for (let i = startIndex; i < endIndex; i++) {
            array[i] = value;
        }
    }
    /**
     * Get all values of the selected line inside the given range
     * @param skyBottomArray Skyline or bottom line
     * @param startIndex start index
     * @param endIndex end index (including)
     */
    getMinInRange(skyBottomArray, startIndex, endIndex) {
        startIndex = Math.floor(startIndex * this.SamplingUnit);
        endIndex = Math.ceil(endIndex * this.SamplingUnit);
        if (!skyBottomArray) {
            // Highly questionable
            return Number.MAX_VALUE;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (startIndex >= skyBottomArray.length) {
            startIndex = skyBottomArray.length - 1;
        }
        if (endIndex < 0) {
            endIndex = 0;
        }
        if (endIndex >= skyBottomArray.length) {
            endIndex = skyBottomArray.length;
        }
        if (startIndex >= 0 && endIndex <= skyBottomArray.length) {
            return Math.min(...skyBottomArray.slice(startIndex, endIndex + 1)); // slice does not include end (index)
        }
    }
    /**
     * Get the maximum value inside the given indices
     * @param skyBottomArray Skyline or bottom line
     * @param startIndex start index
     * @param endIndex end index (including)
     */
    getMaxInRange(skyBottomArray, startIndex, endIndex) {
        startIndex = Math.floor(startIndex * this.SamplingUnit);
        endIndex = Math.ceil(endIndex * this.SamplingUnit);
        if (!skyBottomArray) {
            // Highly questionable
            return Number.MIN_VALUE;
        }
        if (startIndex < 0) {
            startIndex = 0;
        }
        if (startIndex >= skyBottomArray.length) {
            startIndex = skyBottomArray.length - 1;
        }
        if (endIndex < 0) {
            endIndex = 0;
        }
        if (endIndex >= skyBottomArray.length) {
            endIndex = skyBottomArray.length;
        }
        if (startIndex >= 0 && endIndex <= skyBottomArray.length) {
            return Math.max(...skyBottomArray.slice(startIndex, endIndex + 1)); // slice does not include end (index)
        }
    }
    // FIXME: What does this do here?
    // private isStaffLineUpper(): boolean {
    //     const instrument: Instrument = this.StaffLineParent.ParentStaff.ParentInstrument;
    //     if (this.StaffLineParent.ParentStaff === instrument.Staves[0]) {
    //         return true;
    //     } else {
    //         return false;
    //     }
    // }
    // #endregion
    //#region Getter Setter
    /** Sampling units that are used to quantize the sky and bottom line  */
    get SamplingUnit() {
        return this.mRules.SamplingUnit;
    }
    /** Parent staffline where the skybottomline calculator is attached to */
    get StaffLineParent() {
        return this.mStaffLineParent;
    }
    /** Get the plain skyline array */
    get SkyLine() {
        return this.mSkyLine;
    }
    /** Get the plain bottomline array */
    get BottomLine() {
        return this.mBottomLine;
    }
}
exports.SkyBottomLineCalculator = SkyBottomLineCalculator;


/***/ }),

/***/ "./src/MusicalScore/Graphical/StaffLine.ts":
/*!*************************************************!*\
  !*** ./src/MusicalScore/Graphical/StaffLine.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StaffLine = void 0;
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const StaffLineActivitySymbol_1 = __webpack_require__(/*! ./StaffLineActivitySymbol */ "./src/MusicalScore/Graphical/StaffLineActivitySymbol.ts");
const PointF2D_1 = __webpack_require__(/*! ../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const SkyBottomLineCalculator_1 = __webpack_require__(/*! ./SkyBottomLineCalculator */ "./src/MusicalScore/Graphical/SkyBottomLineCalculator.ts");
/**
 * A StaffLine contains the [[Measure]]s in one line of the music sheet
 * (one instrument, one line, until a line break)
 */
class StaffLine extends GraphicalObject_1.GraphicalObject {
    constructor(parentSystem, parentStaff) {
        super();
        this.measures = [];
        this.staffLines = new Array(5);
        this.octaveShifts = [];
        this.lyricLines = [];
        this.lyricsDashes = [];
        this.abstractExpressions = [];
        // For displaying Slurs
        this.graphicalSlurs = [];
        this.graphicalGlissandi = [];
        this.Pedals = [];
        this.parentMusicSystem = parentSystem;
        this.parentStaff = parentStaff;
        this.boundingBox = new BoundingBox_1.BoundingBox(this, parentSystem.PositionAndShape);
        this.skyBottomLine = new SkyBottomLineCalculator_1.SkyBottomLineCalculator(this);
        this.staffHeight = this.parentMusicSystem.rules.StaffHeight;
        this.topLineOffset = 0;
        this.bottomLineOffset = 4;
        this.calculateStaffLineOffsets();
    }
    /**
     * If the musicXML sets different numbers of stafflines, we need to have different offsets
     * to accomodate this - primarily for the sky and bottom lines and cursor.
     */
    calculateStaffLineOffsets() {
        if (this.ParentStaff.isTab) {
            switch (this.ParentStaff.StafflineCount) {
                case 5:
                    this.staffHeight = this.bottomLineOffset =
                        this.ParentStaff.ParentInstrument.GetMusicSheet.Rules.TabStaffInterlineHeight * 6;
                    break;
                default:
                    this.staffHeight = this.bottomLineOffset =
                        this.ParentStaff.ParentInstrument.GetMusicSheet.Rules.TabStaffInterlineHeight * this.ParentStaff.StafflineCount;
                    break;
            }
        }
        else {
            switch (this.ParentStaff.StafflineCount) {
                case 4:
                    this.bottomLineOffset = 1;
                    break;
                case 3:
                    this.topLineOffset = 1;
                    this.bottomLineOffset = 1;
                    break;
                case 2:
                    this.topLineOffset = 2;
                    this.bottomLineOffset = 1;
                    break;
                case 1:
                    this.topLineOffset = 2;
                    this.bottomLineOffset = 2;
                    break;
                default:
                    break;
            }
        }
    }
    get Measures() {
        return this.measures;
    }
    set Measures(value) {
        this.measures = value;
    }
    get StaffLines() {
        return this.staffLines;
    }
    set StaffLines(value) {
        this.staffLines = value;
    }
    get NextStaffLine() {
        const idxInParent = this.parentMusicSystem.StaffLines.indexOf(this);
        return idxInParent !== this.parentMusicSystem.StaffLines.length ? this.parentMusicSystem.StaffLines[idxInParent + 1] : undefined;
    }
    get LyricLines() {
        return this.lyricLines;
    }
    get AbstractExpressions() {
        return this.abstractExpressions;
    }
    set AbstractExpressions(value) {
        this.abstractExpressions = value;
    }
    set LyricLines(value) {
        this.lyricLines = value;
    }
    get LyricsDashes() {
        return this.lyricsDashes;
    }
    set LyricsDashes(value) {
        this.lyricsDashes = value;
    }
    get ParentMusicSystem() {
        return this.parentMusicSystem;
    }
    set ParentMusicSystem(value) {
        this.parentMusicSystem = value;
    }
    get ParentStaff() {
        return this.parentStaff;
    }
    set ParentStaff(value) {
        this.parentStaff = value;
    }
    get SkyBottomLineCalculator() {
        return this.skyBottomLine;
    }
    get SkyLine() {
        return this.skyBottomLine.SkyLine;
    }
    get BottomLine() {
        return this.skyBottomLine.BottomLine;
    }
    get OctaveShifts() {
        return this.octaveShifts;
    }
    set OctaveShifts(value) {
        this.octaveShifts = value;
    }
    get StaffHeight() {
        return this.staffHeight;
    }
    get TopLineOffset() {
        return this.topLineOffset;
    }
    get BottomLineOffset() {
        return this.bottomLineOffset;
    }
    // get all Graphical Slurs of a staffline
    get GraphicalSlurs() {
        return this.graphicalSlurs;
    }
    get GraphicalGlissandi() {
        return this.graphicalGlissandi;
    }
    /**
     * Add a given Graphical Slur to the staffline
     * @param gSlur
     */
    addSlurToStaffline(gSlur) {
        this.graphicalSlurs.push(gSlur);
    }
    addGlissandoToStaffline(gGlissando) {
        this.graphicalGlissandi.push(gGlissando);
        gGlissando.StaffLine = this;
    }
    addActivitySymbolClickArea() {
        const activitySymbol = new StaffLineActivitySymbol_1.StaffLineActivitySymbol(this);
        const staffLinePsi = this.PositionAndShape;
        activitySymbol.PositionAndShape.RelativePosition =
            new PointF2D_1.PointF2D(staffLinePsi.RelativePosition.x + staffLinePsi.BorderRight + 0.5, staffLinePsi.RelativePosition.y + 0.5);
        activitySymbol.PositionAndShape.Parent = this.parentMusicSystem.PositionAndShape;
    }
    /**
     * True iff [[StaffLine]] belongs to an [[Instrument]] with more than one [[Staff]].
     * @returns {boolean}
     */
    isPartOfMultiStaffInstrument() {
        const instrument = this.parentStaff.ParentInstrument;
        if (instrument.Staves.length > 1) {
            return true;
        }
        return false;
    }
    /**
     * Find the [[GraphicalStaffEntry]] closest to the given xPosition.
     * @param xPosition
     * @returns {GraphicalStaffEntry}
     */
    findClosestStaffEntry(xPosition) {
        let closestStaffentry = undefined;
        for (let idx = 0, len = this.Measures.length; idx < len; ++idx) {
            const graphicalMeasure = this.Measures[idx];
            for (let idx2 = 0, len2 = graphicalMeasure.staffEntries.length; idx2 < len2; ++idx2) {
                const graphicalStaffEntry = graphicalMeasure.staffEntries[idx2];
                if (Math.abs(graphicalStaffEntry.PositionAndShape.RelativePosition.x - xPosition + graphicalMeasure.PositionAndShape.RelativePosition.x) < 5.0) {
                    closestStaffentry = graphicalStaffEntry;
                }
            }
        }
        return closestStaffentry;
    }
}
exports.StaffLine = StaffLine;


/***/ }),

/***/ "./src/MusicalScore/Graphical/StaffLineActivitySymbol.ts":
/*!***************************************************************!*\
  !*** ./src/MusicalScore/Graphical/StaffLineActivitySymbol.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StaffLineActivitySymbol = void 0;
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
class StaffLineActivitySymbol extends GraphicalObject_1.GraphicalObject {
    constructor(staffLine) {
        super();
        this.parentStaffLine = staffLine;
        const staffLinePsi = staffLine.PositionAndShape;
        this.boundingBox = new BoundingBox_1.BoundingBox(this, staffLinePsi);
        this.boundingBox.BorderRight = 6;
        this.boundingBox.BorderBottom = 4.5;
        this.boundingBox.BorderLeft = -1.5;
        this.boundingBox.BorderTop = -1.5;
    }
}
exports.StaffLineActivitySymbol = StaffLineActivitySymbol;


/***/ }),

/***/ "./src/MusicalScore/Graphical/SystemLine.ts":
/*!**************************************************!*\
  !*** ./src/MusicalScore/Graphical/SystemLine.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SystemLine = void 0;
const SystemLinesEnum_1 = __webpack_require__(/*! ./SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const BoundingBox_1 = __webpack_require__(/*! ./BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const GraphicalObject_1 = __webpack_require__(/*! ./GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
class SystemLine extends GraphicalObject_1.GraphicalObject {
    constructor(lineType, linePosition, musicSystem, topMeasure, bottomMeasure = undefined) {
        super();
        this.lineType = lineType;
        this.linePosition = linePosition;
        this.parentMusicSystem = musicSystem;
        this.topMeasure = topMeasure;
        this.bottomMeasure = bottomMeasure;
        this.parentTopStaffLine = topMeasure === null || topMeasure === void 0 ? void 0 : topMeasure.ParentStaffLine;
        this.boundingBox = new BoundingBox_1.BoundingBox(this, musicSystem.PositionAndShape);
    }
    /**
     * Return the width of the SystemLinesContainer for the given SystemLineType.
     * @param rules
     * @param systemLineType
     * @returns {number}
     */
    static getObjectWidthForLineType(rules, systemLineType) {
        switch (systemLineType) {
            case SystemLinesEnum_1.SystemLinesEnum.SingleThin:
                return rules.SystemThinLineWidth;
            case SystemLinesEnum_1.SystemLinesEnum.DoubleThin:
                return rules.SystemThinLineWidth * 2 + rules.DistanceBetweenVerticalSystemLines;
            case SystemLinesEnum_1.SystemLinesEnum.ThinBold:
                return rules.SystemThinLineWidth + rules.SystemBoldLineWidth + rules.DistanceBetweenVerticalSystemLines;
            case SystemLinesEnum_1.SystemLinesEnum.BoldThinDots:
                return rules.SystemThinLineWidth + rules.SystemBoldLineWidth + rules.DistanceBetweenVerticalSystemLines + rules.SystemDotWidth +
                    rules.DistanceBetweenDotAndLine;
            case SystemLinesEnum_1.SystemLinesEnum.DotsThinBold:
                return rules.SystemThinLineWidth + rules.SystemBoldLineWidth + rules.DistanceBetweenVerticalSystemLines + rules.SystemDotWidth +
                    rules.DistanceBetweenDotAndLine;
            case SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots:
                return 2 * rules.SystemBoldLineWidth + 2 * rules.SystemDotWidth + 2 * rules.DistanceBetweenDotAndLine +
                    rules.DistanceBetweenVerticalSystemLines;
            default:
                return 0;
        }
    }
}
exports.SystemLine = SystemLine;


/***/ }),

/***/ "./src/MusicalScore/Graphical/SystemLinePosition.ts":
/*!**********************************************************!*\
  !*** ./src/MusicalScore/Graphical/SystemLinePosition.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SystemLinePosition = void 0;
var SystemLinePosition;
(function (SystemLinePosition) {
    SystemLinePosition[SystemLinePosition["MeasureBegin"] = 0] = "MeasureBegin";
    SystemLinePosition[SystemLinePosition["MeasureEnd"] = 1] = "MeasureEnd";
})(SystemLinePosition = exports.SystemLinePosition || (exports.SystemLinePosition = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/SystemLinesEnum.ts":
/*!*******************************************************!*\
  !*** ./src/MusicalScore/Graphical/SystemLinesEnum.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SystemLinesEnumHelper = exports.SystemLinesEnum = void 0;
var SystemLinesEnum;
(function (SystemLinesEnum) {
    SystemLinesEnum[SystemLinesEnum["SingleThin"] = 0] = "SingleThin";
    SystemLinesEnum[SystemLinesEnum["DoubleThin"] = 1] = "DoubleThin";
    SystemLinesEnum[SystemLinesEnum["ThinBold"] = 2] = "ThinBold";
    SystemLinesEnum[SystemLinesEnum["BoldThinDots"] = 3] = "BoldThinDots";
    SystemLinesEnum[SystemLinesEnum["DotsThinBold"] = 4] = "DotsThinBold";
    SystemLinesEnum[SystemLinesEnum["DotsBoldBoldDots"] = 5] = "DotsBoldBoldDots";
    SystemLinesEnum[SystemLinesEnum["None"] = 6] = "None";
    SystemLinesEnum[SystemLinesEnum["Dotted"] = 7] = "Dotted";
    SystemLinesEnum[SystemLinesEnum["Dashed"] = 8] = "Dashed";
    SystemLinesEnum[SystemLinesEnum["Bold"] = 9] = "Bold";
    SystemLinesEnum[SystemLinesEnum["BoldThin"] = 10] = "BoldThin";
    SystemLinesEnum[SystemLinesEnum["DoubleBold"] = 11] = "DoubleBold";
    SystemLinesEnum[SystemLinesEnum["Tick"] = 12] = "Tick";
    SystemLinesEnum[SystemLinesEnum["Short"] = 13] = "Short"; /*              [bar-style=short]*/
})(SystemLinesEnum = exports.SystemLinesEnum || (exports.SystemLinesEnum = {}));
class SystemLinesEnumHelper {
    static xmlBarlineStyleToSystemLinesEnum(xmlValue) {
        if (xmlValue === "regular") {
            return SystemLinesEnum.SingleThin;
        }
        else if (xmlValue === "dotted") {
            return SystemLinesEnum.Dotted;
        }
        else if (xmlValue === "dashed") {
            return SystemLinesEnum.Dashed;
        }
        else if (xmlValue === "heavy") {
            return SystemLinesEnum.Bold;
        }
        else if (xmlValue === "light-light") {
            return SystemLinesEnum.DoubleThin;
        }
        else if (xmlValue === "light-heavy") {
            return SystemLinesEnum.ThinBold;
        }
        else if (xmlValue === "heavy-light") {
            return SystemLinesEnum.BoldThin;
        }
        else if (xmlValue === "heavy-heavy") {
            return SystemLinesEnum.DoubleBold;
        }
        else if (xmlValue === "tick") {
            return SystemLinesEnum.Tick;
        }
        else if (xmlValue === "short") {
            return SystemLinesEnum.Short;
        }
        else if (xmlValue === "none") {
            return SystemLinesEnum.None;
        }
        return SystemLinesEnum.SingleThin;
    }
}
exports.SystemLinesEnumHelper = SystemLinesEnumHelper;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VerticalGraphicalStaffEntryContainer.ts":
/*!****************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VerticalGraphicalStaffEntryContainer.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VerticalGraphicalStaffEntryContainer = void 0;
class VerticalGraphicalStaffEntryContainer {
    constructor(numberOfEntries, absoluteTimestamp) {
        this.staffEntries = [];
        this.absoluteTimestamp = absoluteTimestamp;
        this.staffEntries = new Array(numberOfEntries);
    }
    get Index() {
        return this.index;
    }
    set Index(value) {
        this.index = value;
    }
    get AbsoluteTimestamp() {
        return this.absoluteTimestamp;
    }
    //public set AbsoluteTimestamp(value: Fraction) {
    //    this.absoluteTimestamp = value;
    //}
    get StaffEntries() {
        return this.staffEntries;
    }
    set StaffEntries(value) {
        this.staffEntries = value;
    }
    static compareByTimestamp(x, y) {
        const xValue = x.absoluteTimestamp.RealValue;
        const yValue = y.absoluteTimestamp.RealValue;
        if (xValue < yValue) {
            return -1;
        }
        else if (xValue > yValue) {
            return 1;
        }
        else {
            return 0;
        }
    }
    /**
     * Return the first non-null [[GraphicalStaffEntry]].
     * @returns {any}
     */
    getFirstNonNullStaffEntry() {
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            if (graphicalStaffEntry) {
                return graphicalStaffEntry;
            }
        }
        return undefined;
    }
}
exports.VerticalGraphicalStaffEntryContainer = VerticalGraphicalStaffEntryContainer;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/AlignmentManager.ts":
/*!****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/AlignmentManager.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlignmentManager = void 0;
const VexFlowContinuousDynamicExpression_1 = __webpack_require__(/*! ./VexFlowContinuousDynamicExpression */ "./src/MusicalScore/Graphical/VexFlow/VexFlowContinuousDynamicExpression.ts");
const PointF2D_1 = __webpack_require__(/*! ../../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
class AlignmentManager {
    constructor(staffline) {
        this.parentStaffline = staffline;
        this.rules = this.parentStaffline.ParentMusicSystem.rules;
    }
    alignDynamicExpressions() {
        var _a, _b;
        // Find close expressions along the staffline. Group them into tuples
        const groups = [];
        let tmpList = new Array();
        for (let aeIdx = 0; aeIdx < this.parentStaffline.AbstractExpressions.length - 1; aeIdx++) {
            const currentExpression = this.parentStaffline.AbstractExpressions[aeIdx];
            const nextExpression = this.parentStaffline.AbstractExpressions[aeIdx + 1];
            const currentExpressionPlacement = (_a = currentExpression === null || currentExpression === void 0 ? void 0 : currentExpression.SourceExpression) === null || _a === void 0 ? void 0 : _a.Placement;
            const nextExpressionPlacement = (_b = nextExpression === null || nextExpression === void 0 ? void 0 : nextExpression.SourceExpression) === null || _b === void 0 ? void 0 : _b.Placement;
            // TODO this shifts dynamics in An die Ferne Geliebte, showing that there's something wrong with the RelativePositions etc with wedges
            // if (currentExpression instanceof GraphicalContinuousDynamicExpression) {
            //     currentExpression.calcPsi();
            // }
            // if (nextExpression instanceof GraphicalContinuousDynamicExpression) {
            //     nextExpression.calcPsi();
            // }
            if (currentExpressionPlacement === nextExpressionPlacement) {
                // if ((currentExpression as any).label?.label?.text?.startsWith("dim") ||
                //     (nextExpression as any).label?.label?.text?.startsWith("dim")) {
                //         console.log("here");
                //     }
                const dist = this.getDistance(currentExpression.PositionAndShape, nextExpression.PositionAndShape);
                if (Math.abs(dist.x) < this.rules.DynamicExpressionMaxDistance) {
                    // Prevent last found expression to be added twice. e.g. p<f as three close expressions
                    if (tmpList.indexOf(currentExpression) === -1) {
                        tmpList.push(currentExpression);
                    }
                    tmpList.push(nextExpression);
                }
                else {
                    groups.push(tmpList);
                    tmpList = new Array();
                }
            }
        }
        // If expressions are colliding at end, we need to add them too
        groups.push(tmpList);
        for (const aes of groups) {
            if (aes.length > 0) {
                // Get the median y position and shift all group members to that position
                const centerYs = aes.map(expr => expr.PositionAndShape.Center.y);
                // TODO this may not give the right position for wedges (GraphicalContinuousDynamic, !isVerbal())
                const yIdeal = Math.max(...centerYs);
                // for (const ae of aes) { // debug
                //     if (ae.PositionAndShape.Center.y > 6) {
                //         // dynamic positioned at edge of skybottomline
                //         console.log(`max expression in measure ${ae.SourceExpression.parentMeasure.MeasureNumber}: `);
                //         console.dir(aes);
                //     }
                // }
                for (let exprIdx = 0; exprIdx < aes.length; exprIdx++) {
                    const expr = aes[exprIdx];
                    const centerOffset = centerYs[exprIdx] - yIdeal;
                    // TODO centerOffset is way too big sometimes, like 7.0 in An die Ferne Geliebte (measure 10, dim.)
                    // FIXME: Expressions should not behave differently.
                    if (expr instanceof VexFlowContinuousDynamicExpression_1.VexFlowContinuousDynamicExpression) {
                        expr.shiftYPosition(-centerOffset);
                        expr.calcPsi();
                    }
                    else {
                        // TODO: The 0.8 are because the letters are a bit too far done
                        expr.PositionAndShape.RelativePosition.y -= centerOffset * 0.8;
                        // note: verbal GraphicalContinuousDynamicExpressions have a label, nonverbal ones don't.
                        // take care to update and take the right bounding box for skyline.
                        expr.PositionAndShape.calculateBoundingBox();
                    }
                    // Squeeze wedges
                    if (expr.squeeze) {
                        const nextExpression = exprIdx < aes.length - 1 ? aes[exprIdx + 1] : undefined;
                        const prevExpression = exprIdx > 0 ? aes[exprIdx - 1] : undefined;
                        if (nextExpression) {
                            const overlapRight = this.getOverlap(expr.PositionAndShape, nextExpression.PositionAndShape);
                            expr.squeeze(-(overlapRight.x + this.rules.DynamicExpressionSpacer));
                        }
                        if (prevExpression) {
                            const overlapLeft = this.getOverlap(prevExpression.PositionAndShape, expr.PositionAndShape);
                            expr.squeeze(overlapLeft.x + this.rules.DynamicExpressionSpacer);
                        }
                    }
                }
            }
        }
    }
    /**
     * Get distance between two bounding boxes
     * @param a First bounding box
     * @param b Second bounding box
     */
    getDistance(a, b) {
        const rightBorderA = a.RelativePosition.x + a.BorderMarginRight;
        const leftBorderB = b.RelativePosition.x + b.BorderMarginLeft;
        const bottomBorderA = a.RelativePosition.y + a.BorderMarginBottom;
        const topBorderB = b.RelativePosition.y + b.BorderMarginTop;
        return new PointF2D_1.PointF2D(leftBorderB - rightBorderA, topBorderB - bottomBorderA);
        // note: this is a distance vector, not absolute distance, otherwise we need Math.abs
    }
    /**
     * Get overlap of two bounding boxes
     * @param a First bounding box
     * @param b Second bounding box
     */
    getOverlap(a, b) {
        return new PointF2D_1.PointF2D((a.RelativePosition.x + a.BorderMarginRight) - (b.RelativePosition.x + b.BorderMarginLeft), (a.RelativePosition.y + a.BorderMarginBottom) - (b.RelativePosition.y + b.BorderMarginTop));
    }
}
exports.AlignmentManager = AlignmentManager;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts":
/*!********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CanvasVexFlowBackend = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const VexFlowBackend_1 = __webpack_require__(/*! ./VexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/VexFlowBackend.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const OSMDOptions_1 = __webpack_require__(/*! ../../../OpenSheetMusicDisplay/OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
const GraphicalMusicPage_1 = __webpack_require__(/*! ../GraphicalMusicPage */ "./src/MusicalScore/Graphical/GraphicalMusicPage.ts");
class CanvasVexFlowBackend extends VexFlowBackend_1.VexFlowBackend {
    constructor(rules) {
        super();
        this.rules = rules;
    }
    getVexflowBackendType() {
        return VF.Renderer.Backends.CANVAS;
    }
    getOSMDBackendType() {
        return OSMDOptions_1.BackendType.Canvas;
    }
    getCanvasSize() {
        var _a;
        return (_a = document.getElementById("osmdCanvasPage" + this.graphicalMusicPage.PageNumber)) === null || _a === void 0 ? void 0 : _a.offsetHeight;
        // smaller inner canvas:
        // return Number.parseInt(
        //     document.getElementById("osmdCanvasVexFlowBackendCanvas" + this.graphicalMusicPage.PageNumber)?.style.height, 10);
    }
    initialize(container, zoom) {
        this.zoom = zoom;
        this.canvas = document.createElement("canvas");
        if (!this.graphicalMusicPage) {
            this.graphicalMusicPage = new GraphicalMusicPage_1.GraphicalMusicPage(undefined);
            this.graphicalMusicPage.PageNumber = 1;
        }
        this.canvas.id = "osmdCanvasVexFlowBackendCanvas" + this.graphicalMusicPage.PageNumber; // needed to extract image buffer from js
        this.inner = document.createElement("div");
        this.inner.id = "osmdCanvasPage" + this.graphicalMusicPage.PageNumber;
        this.inner.style.position = "relative";
        this.canvas.style.zIndex = "0";
        this.inner.appendChild(this.canvas);
        container.appendChild(this.inner);
        this.renderer = new VF.Renderer(this.canvas, this.getVexflowBackendType());
        this.ctx = this.renderer.getContext();
    }
    /**
     * Initialize a canvas without attaching it to a DOM node. Can be used to draw in background
     * @param width Width of the canvas
     * @param height Height of the canvas
     */
    initializeHeadless(width = 300, height = 300) {
        if (!this.graphicalMusicPage) {
            // not needed here yet, but just for future safety, make sure the page isn't undefined
            this.graphicalMusicPage = new GraphicalMusicPage_1.GraphicalMusicPage(undefined);
            this.graphicalMusicPage.PageNumber = 1;
        }
        this.canvas = document.createElement("canvas");
        this.canvas.width = width;
        this.canvas.height = height;
        this.renderer = new VF.Renderer(this.canvas, this.getVexflowBackendType());
        this.ctx = this.renderer.getContext();
    }
    getContext() {
        return this.ctx;
    }
    clear() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        // set background color if not transparent
        if (this.rules.PageBackgroundColor) {
            this.ctx.save();
            // note that this will hide the cursor
            this.ctx.setFillStyle(this.rules.PageBackgroundColor);
            this.zoom = 1; // remove
            this.ctx.fillRect(0, 0, this.canvas.width / this.zoom, this.canvas.height / this.zoom);
            this.ctx.restore();
        }
    }
    scale(k) {
        this.ctx.scale(k, k);
    }
    translate(x, y) {
        this.CanvasRenderingCtx.translate(x, y);
    }
    renderText(fontHeight, fontStyle, font, text, heightInPixel, screenPosition, color = undefined, fontFamily = undefined) {
        const old = this.CanvasRenderingCtx.font;
        this.CanvasRenderingCtx.save();
        this.CanvasRenderingCtx.font = VexFlowConverter_1.VexFlowConverter.font(fontHeight, fontStyle, font, this.rules, fontFamily);
        this.CanvasRenderingCtx.fillStyle = color;
        this.CanvasRenderingCtx.strokeStyle = color;
        this.CanvasRenderingCtx.fillText(text, screenPosition.x, screenPosition.y + heightInPixel);
        this.CanvasRenderingCtx.restore();
        this.CanvasRenderingCtx.font = old;
        return undefined; // can't return svg dom node
    }
    renderRectangle(rectangle, styleId, colorHex, alpha = 1) {
        const old = this.CanvasRenderingCtx.fillStyle;
        if (colorHex) {
            this.CanvasRenderingCtx.fillStyle = colorHex;
        }
        else {
            this.CanvasRenderingCtx.fillStyle = VexFlowConverter_1.VexFlowConverter.style(styleId);
        }
        this.CanvasRenderingCtx.globalAlpha = alpha;
        this.ctx.fillRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
        this.CanvasRenderingCtx.fillStyle = old;
        this.CanvasRenderingCtx.globalAlpha = 1;
        return undefined; // can't return dom node like with SVG
    }
    renderLine(start, stop, color = "#FF0000FF", lineWidth = 2, id) {
        const oldStyle = this.CanvasRenderingCtx.strokeStyle;
        this.CanvasRenderingCtx.strokeStyle = color;
        this.CanvasRenderingCtx.beginPath();
        this.CanvasRenderingCtx.moveTo(start.x, start.y);
        this.CanvasRenderingCtx.lineTo(stop.x, stop.y);
        this.CanvasRenderingCtx.stroke();
        this.CanvasRenderingCtx.strokeStyle = oldStyle;
        return undefined; // can't return svg dom node
    }
    renderCurve(points) {
        this.ctx.beginPath();
        this.ctx.moveTo(points[0].x, points[0].y);
        this.ctx.bezierCurveTo(points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y);
        this.ctx.lineTo(points[7].x, points[7].y);
        this.ctx.bezierCurveTo(points[6].x, points[6].y, points[5].x, points[5].y, points[4].x, points[4].y);
        this.ctx.lineTo(points[0].x, points[0].y);
        //this.ctx.stroke();
        this.ctx.closePath();
        this.ctx.fill();
        return undefined;
    }
    renderPath(points, fill = true, id) {
        this.ctx.beginPath();
        let currentPoint;
        for (const point of points) {
            if (!currentPoint) {
                this.ctx.moveTo(point.x, point.y);
                currentPoint = point;
                continue;
            }
            this.ctx.lineTo(point.x, point.y);
            // this.ctx.stroke();
        }
        this.ctx.closePath();
        if (fill) {
            this.ctx.fill();
        }
        else {
            this.ctx.stroke(); // just trace outline, don't fill inner area
        }
        return undefined;
    }
    get CanvasRenderingCtx() {
        // This clusterfuck is only there to counter act my favorite vexflow line:
        // ctx.vexFlowCanvasContext = ctx;
        // No idea why they are saving the context but we wrap the types here
        return this.ctx.vexFlowCanvasContext;
    }
}
exports.CanvasVexFlowBackend = CanvasVexFlowBackend;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/SvgVexFlowBackend.ts":
/*!*****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/SvgVexFlowBackend.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SvgVexFlowBackend = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const VexFlowBackend_1 = __webpack_require__(/*! ./VexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/VexFlowBackend.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
const OSMDOptions_1 = __webpack_require__(/*! ../../../OpenSheetMusicDisplay/OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class SvgVexFlowBackend extends VexFlowBackend_1.VexFlowBackend {
    constructor(rules) {
        super();
        this.rules = rules;
    }
    getVexflowBackendType() {
        return VF.Renderer.Backends.SVG;
    }
    getOSMDBackendType() {
        return OSMDOptions_1.BackendType.SVG;
    }
    getCanvasSize() {
        var _a;
        return (_a = document.getElementById("osmdCanvasPage" + this.graphicalMusicPage.PageNumber)) === null || _a === void 0 ? void 0 : _a.offsetHeight;
    }
    initialize(container, zoom) {
        this.zoom = zoom;
        this.canvas = document.createElement("div");
        this.canvas.id = "osmdCanvasPage" + this.graphicalMusicPage.PageNumber;
        // this.canvas.id = uniqueID // TODO create unique tagName like with cursor now?
        this.inner = this.canvas;
        this.inner.style.position = "relative";
        this.canvas.style.zIndex = "0";
        container.appendChild(this.inner);
        this.renderer = new VF.Renderer(this.canvas, this.getVexflowBackendType());
        this.ctx = this.renderer.getContext();
        this.ctx.svg.id = "osmdSvgPage" + this.graphicalMusicPage.PageNumber;
    }
    getContext() {
        return this.ctx;
    }
    getSvgElement() {
        return this.ctx.svg;
    }
    removeNode(node) {
        var _a;
        const svg = (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.svg;
        if (!svg) {
            return false;
        }
        // unfortunately there's no method svg.hasChild(node). traversing all nodes seems inefficient.
        try {
            svg.removeChild(node);
        }
        catch (ex) {
            // log.error("SvgVexFlowBackend.removeNode: error:"); // unnecessary, stacktrace is in exception
            loglevel_1.default.error(ex);
            return false;
        }
        return true;
    }
    clear() {
        if (!this.ctx) {
            return;
        }
        //const { svg } = this.ctx; // seems to make svg static between osmd instances.
        const svg = this.ctx.svg;
        // removes all children from the SVG element,
        // effectively clearing the SVG viewport
        while (svg.lastChild) {
            svg.removeChild(svg.lastChild);
        }
        // set background color if not transparent
        if (this.rules.PageBackgroundColor) {
            //     this.ctx.save();
            //     // note that this will hide the cursor if its zIndex is negative.
            //     this.ctx.setFillStyle(this.rules.PageBackgroundColor);
            //     this.ctx.setStrokeStyle("#12345600"); // transparent
            //     this.ctx.fillRect(0, 0, this.canvas.offsetWidth / this.zoom, this.canvas.offsetHeight / this.zoom);
            //     this.ctx.restore();
            this.ctx.svg.style["background-color"] = this.rules.PageBackgroundColor;
            // note that the cursor would be invisible if its zIndex remained negative here,
            //   so we have to push it to a higher layer and make it more transparent.
            // effectively, setting a background color will make the cursor more transparent.
        }
    }
    scale(k) {
        this.ctx.scale(k, k);
    }
    translate(x, y) {
        // TODO: implement this
    }
    renderText(fontHeight, fontStyle, font, text, heightInPixel, screenPosition, color = undefined, fontFamily = undefined) {
        this.ctx.save();
        const node = this.ctx.openGroup("text");
        if (color) {
            this.ctx.attributes.fill = color;
            this.ctx.attributes.stroke = color;
        }
        let fontFamilyVexFlow = fontFamily;
        if (!fontFamily || fontFamily === "default") {
            fontFamilyVexFlow = this.rules.DefaultFontFamily;
        }
        this.ctx.setFont(fontFamilyVexFlow, fontHeight, VexFlowConverter_1.VexFlowConverter.fontStyle(fontStyle));
        // font size is set by VexFlow in `pt`. This overwrites the font so it's set to px instead
        this.ctx.attributes["font-size"] = `${fontHeight}px`;
        this.ctx.state["font-size"] = `${fontHeight}px`;
        let fontWeightVexflow = "normal";
        let fontStyleVexflow = "normal";
        switch (fontStyle) {
            case FontStyles_1.FontStyles.Bold:
                fontWeightVexflow = "bold";
                break;
            case FontStyles_1.FontStyles.Italic:
                fontStyleVexflow = "italic";
                break;
            case FontStyles_1.FontStyles.BoldItalic:
                fontWeightVexflow = "bold";
                fontStyleVexflow = "italic";
                break;
            default:
                fontWeightVexflow = "normal";
        }
        this.ctx.attributes["font-weight"] = fontWeightVexflow;
        this.ctx.state["font-weight"] = fontWeightVexflow;
        this.ctx.attributes["font-style"] = fontStyleVexflow;
        this.ctx.state["font-style"] = fontStyleVexflow;
        this.ctx.fillText(text, screenPosition.x, screenPosition.y + heightInPixel);
        this.ctx.closeGroup();
        this.ctx.restore();
        return node;
    }
    renderRectangle(rectangle, styleId, colorHex, alpha = 1) {
        this.ctx.save();
        const node = this.ctx.openGroup("rect");
        if (colorHex) {
            this.ctx.attributes.fill = colorHex;
        }
        else {
            this.ctx.attributes.fill = VexFlowConverter_1.VexFlowConverter.style(styleId);
        }
        this.ctx.attributes["fill-opacity"] = alpha;
        this.ctx.fillRect(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
        this.ctx.restore();
        this.ctx.attributes["fill-opacity"] = 1;
        this.ctx.closeGroup();
        return node;
    }
    renderLine(start, stop, color = "#FF0000FF", lineWidth = 2, id) {
        this.ctx.save();
        const node = this.ctx.openGroup("line", id);
        this.ctx.beginPath();
        this.ctx.moveTo(start.x, start.y);
        this.ctx.lineTo(stop.x, stop.y);
        this.ctx.attributes.stroke = color;
        //this.ctx.attributes.strokeStyle = color;
        //this.ctx.attributes["font-weight"] = "bold";
        //this.ctx.attributes["stroke-linecap"] = "round";
        this.ctx.lineWidth = lineWidth;
        this.ctx.stroke();
        this.ctx.closeGroup();
        this.ctx.restore();
        return node;
    }
    renderCurve(points) {
        const node = this.ctx.openGroup("curve");
        this.ctx.beginPath();
        this.ctx.moveTo(points[0].x, points[0].y);
        this.ctx.bezierCurveTo(points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y);
        this.ctx.lineTo(points[7].x, points[7].y);
        this.ctx.bezierCurveTo(points[6].x, points[6].y, points[5].x, points[5].y, points[4].x, points[4].y);
        this.ctx.lineTo(points[0].x, points[0].y);
        //this.ctx.stroke();
        this.ctx.closePath();
        this.ctx.fill();
        this.ctx.closeGroup();
        return node;
    }
    renderPath(points, fill = true, id) {
        const node = this.ctx.openGroup("path", id);
        this.ctx.beginPath();
        let currentPoint;
        for (const point of points) {
            if (!currentPoint) {
                this.ctx.moveTo(point.x, point.y);
                currentPoint = point;
                continue;
            }
            this.ctx.lineTo(point.x, point.y);
            // this.ctx.stroke();
        }
        this.ctx.closePath();
        if (fill) {
            this.ctx.fill();
        }
        else {
            this.ctx.stroke(); // just trace outline, don't fill inner area
        }
        this.ctx.stroke();
        this.ctx.closeGroup();
        return node;
    }
    export() {
        // See: https://stackoverflow.com/questions/38477972/javascript-save-svg-element-to-file-on-disk
        // first create a clone of our svg node so we don't mess the original one
        const clone = this.ctx.svg.cloneNode(true);
        // create a doctype that is SVG
        const svgDocType = document.implementation.createDocumentType("svg", "-//W3C//DTD SVG 1.1//EN", "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd");
        // Create a new svg document
        const svgDoc = document.implementation.createDocument("http://www.w3.org/2000/svg", "svg", svgDocType);
        // replace the documentElement with our clone
        svgDoc.replaceChild(clone, svgDoc.documentElement);
        // get the data
        const svgData = (new XMLSerializer()).serializeToString(svgDoc);
        // now you've got your svg data, the following will depend on how you want to download it
        // e.g yo could make a Blob of it for FileSaver.js
        /*
        var blob = new Blob([svgData.replace(/></g, '>\n\r<')]);
        saveAs(blob, 'myAwesomeSVG.svg');
        */
        // here I'll just make a simple a with download attribute
        const a = document.createElement("a");
        a.href = "data:image/svg+xml; charset=utf8, " + encodeURIComponent(svgData.replace(/></g, ">\n\r<"));
        a.download = "opensheetmusicdisplay_download.svg";
        a.innerHTML = window.location.href + "/download";
        document.body.appendChild(a);
    }
}
exports.SvgVexFlowBackend = SvgVexFlowBackend;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowBackend.ts":
/*!**************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowBackend.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowBackend = exports.VexFlowBackends = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
class VexFlowBackends {
}
exports.VexFlowBackends = VexFlowBackends;
class VexFlowBackend {
    getInnerElement() {
        return this.inner;
    }
    getCanvas() {
        return this.canvas;
    }
    getRenderElement() {
        //console.log("backend type: " + this.getVexflowBackendType());
        let renderingHtmlElement = this.canvas; // for SVGBackend
        if (this.getVexflowBackendType() === VF.Renderer.Backends.CANVAS) {
            renderingHtmlElement = this.inner;
            // usage in removeFromContainer:
            // for SVG, this.canvas === this.inner, but for Canvas, removing this.canvas causes an error because it's not a child of container,
            // so we have to remove this.inner instead.
        }
        return renderingHtmlElement;
    }
    getRenderer() {
        return this.renderer;
    }
    removeAllChildrenFromContainer(container) {
        while (container.children.length !== 0) {
            container.removeChild(container.children.item(0));
        }
    }
    // note: removing single children to remove all is error-prone, because sometimes a random SVG-child remains.
    removeFromContainer(container) {
        const htmlElementToRemove = this.getRenderElement();
        // only remove child if the container has this child, otherwise it will throw an error.
        for (let i = 0; i < container.children.length; i++) {
            if (container.children.item(i) === htmlElementToRemove) {
                container.removeChild(htmlElementToRemove);
                break;
            }
        }
        // there is unfortunately no built-in container.hasChild(child) method.
    }
    resize(width, height) {
        this.renderer.resize(width, height);
        this.width = width;
        this.height = height;
    }
}
exports.VexFlowBackend = VexFlowBackend;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowContinuousDynamicExpression.ts":
/*!**********************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowContinuousDynamicExpression.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowContinuousDynamicExpression = void 0;
const GraphicalContinuousDynamicExpression_1 = __webpack_require__(/*! ../GraphicalContinuousDynamicExpression */ "./src/MusicalScore/Graphical/GraphicalContinuousDynamicExpression.ts");
const GraphicalLabel_1 = __webpack_require__(/*! ../GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const Label_1 = __webpack_require__(/*! ../../Label */ "./src/MusicalScore/Label.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
/**
 * This class extends the GraphicalContinuousDynamicExpression and creates all necessary methods for drawing
 */
class VexFlowContinuousDynamicExpression extends GraphicalContinuousDynamicExpression_1.GraphicalContinuousDynamicExpression {
    constructor(continuousDynamic, staffLine, measure, textHeight) {
        super(continuousDynamic, staffLine, measure);
        if (this.IsVerbal) {
            const sourceLabel = new Label_1.Label(continuousDynamic.Label);
            this.label = new GraphicalLabel_1.GraphicalLabel(sourceLabel, textHeight ? textHeight : this.rules.ContinuousDynamicTextHeight, TextAlignment_1.TextAlignmentEnum.LeftCenter, this.rules, this.PositionAndShape);
            this.label.Label.fontStyle = FontStyles_1.FontStyles.Italic;
            this.label.setLabelPositionAndShapeBorders();
            this.PositionAndShape.calculateBoundingBox();
        }
    }
}
exports.VexFlowContinuousDynamicExpression = VexFlowContinuousDynamicExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts":
/*!****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowConverter = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const ClefInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Fraction_1 = __webpack_require__(/*! ../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const RhythmInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const KeyInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const Pitch_2 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Pitch_3 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ../SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
const Fonts_1 = __webpack_require__(/*! ../../../Common/Enums/Fonts */ "./src/Common/Enums/Fonts.ts");
const DrawingEnums_1 = __webpack_require__(/*! ../DrawingEnums */ "./src/MusicalScore/Graphical/DrawingEnums.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const VoiceEntry_1 = __webpack_require__(/*! ../../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const SystemLinePosition_1 = __webpack_require__(/*! ../SystemLinePosition */ "./src/MusicalScore/Graphical/SystemLinePosition.ts");
const OrnamentContainer_1 = __webpack_require__(/*! ../../VoiceData/OrnamentContainer */ "./src/MusicalScore/VoiceData/OrnamentContainer.ts");
const Notehead_1 = __webpack_require__(/*! ../../VoiceData/Notehead */ "./src/MusicalScore/VoiceData/Notehead.ts");
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const Arpeggio_1 = __webpack_require__(/*! ../../VoiceData/Arpeggio */ "./src/MusicalScore/VoiceData/Arpeggio.ts");
const TabNote_1 = __webpack_require__(/*! ../../VoiceData/TabNote */ "./src/MusicalScore/VoiceData/TabNote.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
/**
 * Helper class, which contains static methods which actually convert
 * from OSMD objects to VexFlow objects.
 */
class VexFlowConverter {
    /**
     * Convert a fraction to Vexflow string durations.
     * A duration like 5/16 (5 16th notes) can't be represented by a single (dotted) note,
     *   so we need to return multiple durations (e.g. for 5/16th ghost notes).
     * Currently, for a dotted quarter ghost note, we return a quarter and an eighth ghost note.
     *   We could return a dotted quarter instead, but then the code would need to distinguish between
     *   notes that can be represented as dotted notes and notes that can't, which would complicate things.
     *   We could e.g. add a parameter "allowSingleDottedNote" which makes it possible to return single dotted notes instead.
     * But currently, this is only really used for Ghost notes, so it doesn't make a difference visually.
     *   (for other uses like StaveNotes, we calculate the dots separately)
     * @param fraction a fraction representing the duration of a note
     * @returns {string[]} Vexflow note type strings (e.g. "h" = half note)
     */
    static durations(fraction, isTuplet) {
        const durations = [];
        const remainingFraction = fraction.clone();
        while (remainingFraction.RealValue > 0) {
            const dur = remainingFraction.RealValue;
            // TODO consider long (dur=4) and maxima (dur=8), though Vexflow doesn't seem to support them
            if (dur >= 2) { // Breve
                durations.push("1/2");
                remainingFraction.Sub(new Fraction_1.Fraction(2, 1));
            }
            else if (dur >= 1) {
                durations.push("w");
                remainingFraction.Sub(new Fraction_1.Fraction(1, 1));
            }
            else if (dur < 1 && dur >= 0.5) {
                // change to the next higher straight note to get the correct note display type
                if (isTuplet && dur > 0.5) {
                    return ["w"];
                }
                else {
                    durations.push("h");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 2));
                }
            }
            else if (dur < 0.5 && dur >= 0.25) {
                // change to the next higher straight note to get the correct note display type
                if (isTuplet && dur > 0.25) {
                    return ["h"];
                }
                else {
                    durations.push("q");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 4));
                }
            }
            else if (dur < 0.25 && dur >= 0.125) {
                // change to the next higher straight note to get the correct note display type
                if (isTuplet && dur > 0.125) {
                    return ["q"];
                }
                else {
                    durations.push("8");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 8));
                }
            }
            else if (dur < 0.125 && dur >= 0.0625) {
                // change to the next higher straight note to get the correct note display type
                if (isTuplet && dur > 0.0625) {
                    return ["8"];
                }
                else {
                    durations.push("16");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 16));
                }
            }
            else if (dur < 0.0625 && dur >= 0.03125) {
                // change to the next higher straight note to get the correct note display type
                if (isTuplet && dur > 0.03125) {
                    return ["16"];
                }
                else {
                    durations.push("32");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 32));
                }
            }
            else if (dur < 0.03125 && dur >= 0.015625) {
                // change to the next higher straight note to get the correct note display type
                if (isTuplet && dur > 0.015625) {
                    return ["32"];
                }
                else {
                    durations.push("64");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 64));
                }
            }
            else {
                if (isTuplet) {
                    return ["64"];
                }
                else {
                    durations.push("128");
                    remainingFraction.Sub(new Fraction_1.Fraction(1, 128));
                }
            }
        }
        //   if (isTuplet) {
        //     dots = 0; // TODO (different) calculation?
        //   } else {
        //     dots = fraction.calculateNumberOfNeededDots();
        //   }
        return durations;
    }
    /**
     * Takes a Pitch and returns a string representing a VexFlow pitch,
     * which has the form "b/4", plus its alteration (accidental)
     * @param pitch
     * @returns {string[]}
     */
    static pitch(pitch, isRest, clef, notehead = undefined, octaveOffsetGiven = undefined) {
        //FIXME: The octave seems to need a shift of three?
        //FIXME: Also rests seem to use different offsets depending on the clef.
        let octaveOffset = octaveOffsetGiven;
        if (octaveOffsetGiven === undefined) {
            octaveOffset = 3;
        }
        if (isRest && octaveOffsetGiven === undefined) {
            octaveOffset = 0;
            if (clef.ClefType === ClefInstruction_1.ClefEnum.F) {
                octaveOffset = 2;
            }
            if (clef.ClefType === ClefInstruction_1.ClefEnum.C) {
                octaveOffset = 2;
            }
            // TODO the pitch for rests will be the start position, for eights rests it will be the bottom point
            // maybe we want to center on the display position instead of having the bottom there?
        }
        const fund = Pitch_3.NoteEnum[pitch.FundamentalNote].toLowerCase();
        const acc = Pitch_1.Pitch.accidentalVexflow(pitch.Accidental);
        const octave = pitch.Octave - clef.OctaveOffset + octaveOffset;
        let noteheadCode = "";
        if (notehead) {
            noteheadCode = this.NoteHeadCode(notehead);
        }
        return [fund + "n/" + octave + noteheadCode, acc, clef];
    }
    static restToNotePitch(pitch, clefType) {
        let octave = pitch.Octave;
        // offsets see pitch()
        switch (clefType) {
            case ClefInstruction_1.ClefEnum.C:
            case ClefInstruction_1.ClefEnum.F: {
                octave += 2;
                break;
            }
            case ClefInstruction_1.ClefEnum.G:
            default:
        }
        return new Pitch_1.Pitch(pitch.FundamentalNote, octave, Pitch_2.AccidentalEnum.NONE);
    }
    /** returns the Vexflow code for a note head. Some are still unsupported, see Vexflow/tables.js */
    static NoteHeadCode(notehead) {
        const codeStart = "/";
        const codeFilled = notehead.Filled ? "2" : "1"; // filled/unfilled notehead code in most vexflow glyphs
        switch (notehead.Shape) {
            case Notehead_1.NoteHeadShape.NORMAL:
                return "";
            case Notehead_1.NoteHeadShape.DIAMOND:
                return codeStart + "D" + codeFilled;
            case Notehead_1.NoteHeadShape.TRIANGLE:
                return codeStart + "T" + codeFilled;
            case Notehead_1.NoteHeadShape.TRIANGLE_INVERTED:
                return codeStart + "TI";
            case Notehead_1.NoteHeadShape.X:
                return codeStart + "X" + codeFilled;
            case Notehead_1.NoteHeadShape.CIRCLEX:
                return codeStart + "X3";
            case Notehead_1.NoteHeadShape.RECTANGLE:
                return codeStart + "R" + codeFilled;
            case Notehead_1.NoteHeadShape.SQUARE:
                return codeStart + "S" + codeFilled;
            case Notehead_1.NoteHeadShape.SLASH:
                return ""; // slash is specified at end of duration string in Vexflow
            default:
                return "";
        }
    }
    static GhostNotes(frac) {
        const ghostNotes = [];
        const durations = VexFlowConverter.durations(frac, false);
        for (const duration of durations) {
            ghostNotes.push(new VF.GhostNote({
                duration: duration,
                //dots: dots
            }));
        }
        return ghostNotes;
    }
    /**
     * Convert a GraphicalVoiceEntry to a VexFlow StaveNote
     * @param gve the GraphicalVoiceEntry which can hold a note or a chord on the staff belonging to one voice
     * @returns {VF.StaveNote}
     */
    static StaveNote(gve) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        // if (gve.octaveShiftValue !== OctaveEnum.NONE) { // gves with accidentals in octave shift brackets can be unsorted
        gve.sortForVexflow(); // also necessary for some other cases, see test_sorted_notes... sample
        //   sort and reverse replace the array anyways, so we might as well directly sort them reversely for now.
        //   otherwise we should copy the array, see the commented GraphicalVoiceEntry.sortedNotesCopyForVexflow()
        //   another alternative: don't sort gve notes, instead collect and sort tickables in an array,
        //     then iterate over the array by addTickable() in VexFlowMeasure.graphicalMeasureCreatedCalculations()
        const notes = gve.notes;
        // for (const note of gve.notes) { // debug
        //     const pitch: Pitch = note.sourceNote.Pitch;
        //     console.log('note: ' + pitch?.ToString() + ', halftone: ' + pitch?.getHalfTone());
        // }
        const rules = gve.parentStaffEntry.parentMeasure.parentSourceMeasure.Rules;
        const baseNote = notes[0];
        let keys = [];
        const accidentals = [];
        const baseNoteLength = baseNote.graphicalNoteLength;
        const isTuplet = baseNote.sourceNote.NoteTuplet !== undefined;
        let duration = VexFlowConverter.durations(baseNoteLength, isTuplet)[0];
        if (baseNote.sourceNote.TypeLength !== undefined &&
            baseNote.sourceNote.TypeLength !== baseNoteLength &&
            baseNote.sourceNote.TypeLength.RealValue !== 0) {
            duration = VexFlowConverter.durations(baseNote.sourceNote.TypeLength, isTuplet)[0];
            baseNote.numberOfDots = baseNote.sourceNote.DotsXml;
        }
        let vfClefType = undefined;
        let numDots = baseNote.numberOfDots;
        let alignCenter = false;
        let xShift = 0;
        let isRest = false;
        let restYPitch;
        for (const note of notes) {
            if (numDots < note.numberOfDots) {
                numDots = note.numberOfDots;
            }
            // if it is a rest:
            if (note.sourceNote.isRest()) {
                isRest = true;
                if (note.sourceNote.Pitch) {
                    const restVfPitch = note.vfpitch;
                    keys = [restVfPitch[0]];
                    break;
                }
                else {
                    keys = ["b/4"]; // default placement
                    // pause rest encircled by two beamed notes: place rest just below previous note
                    const pauseVoiceEntry = (_a = note.parentVoiceEntry) === null || _a === void 0 ? void 0 : _a.parentVoiceEntry;
                    if (pauseVoiceEntry) {
                        const neighborGSEs = (_b = note.parentVoiceEntry) === null || _b === void 0 ? void 0 : _b.parentStaffEntry.parentMeasure.staffEntries;
                        let previousVoiceEntry, followingVoiceEntry;
                        let pauseVEIndex = -1;
                        for (let i = 0; i < neighborGSEs.length; i++) {
                            if (((_c = neighborGSEs[i]) === null || _c === void 0 ? void 0 : _c.graphicalVoiceEntries[0].parentVoiceEntry) === pauseVoiceEntry) {
                                pauseVEIndex = i;
                                break;
                            }
                        }
                        if (pauseVEIndex >= 1 && (neighborGSEs.length - 1) >= (pauseVEIndex + 1)) {
                            previousVoiceEntry = (_e = (_d = neighborGSEs[pauseVEIndex - 1]) === null || _d === void 0 ? void 0 : _d.graphicalVoiceEntries[0]) === null || _e === void 0 ? void 0 : _e.parentVoiceEntry;
                            followingVoiceEntry = (_g = (_f = neighborGSEs[pauseVEIndex + 1]) === null || _f === void 0 ? void 0 : _f.graphicalVoiceEntries[0]) === null || _g === void 0 ? void 0 : _g.parentVoiceEntry;
                            if (previousVoiceEntry && followingVoiceEntry) {
                                const previousNote = previousVoiceEntry.Notes[0];
                                const followingNote = followingVoiceEntry.Notes[0];
                                if ((_h = previousNote.NoteBeam) === null || _h === void 0 ? void 0 : _h.Notes.includes(followingNote)) {
                                    const previousNotePitch = previousVoiceEntry.Notes.last().Pitch;
                                    const clef = note.Clef();
                                    const vfpitch = VexFlowConverter.pitch(VexFlowConverter.restToNotePitch(previousNotePitch.getTransposedPitch(-2), clef.ClefType), false, clef);
                                    keys = [vfpitch[0]];
                                }
                            }
                        }
                    }
                }
                // TODO do collision checking, place rest e.g. either below staff (A3, for stem direction below voice) or above (C5)
                // if it is a full measure rest:
                //   (a whole rest note signifies a whole measure duration, unless the time signature is longer than 4 quarter notes, e.g. 6/4 or 3/2.
                //   Note: this should not apply to most pickup measures, e.g. with an 8th pickup measure in a 3/4 time signature)
                // const measureDuration: number = note.sourceNote.SourceMeasure.Duration.RealValue;
                const isWholeMeasureRest = note.sourceNote.IsWholeMeasureRest ||
                    baseNoteLength.RealValue === note.sourceNote.SourceMeasure.ActiveTimeSignature.RealValue;
                if (isWholeMeasureRest) {
                    keys = ["d/5"];
                    duration = "w";
                    numDots = 0;
                    // If it's a whole rest we want it smack in the middle. Apparently there is still an issue in vexflow:
                    // https://github.com/0xfe/vexflow/issues/579 The author reports that he needs to add some negative x shift
                    // if the measure has no modifiers.
                    alignCenter = true;
                    xShift = rules.WholeRestXShiftVexflow * VexFlowMusicSheetDrawer_1.unitInPixels; // TODO find way to make dependent on the modifiers
                    // affects VexFlowStaffEntry.calculateXPosition()
                }
                //If we have more than one visible voice entry, shift the rests so no collision occurs
                if (note.sourceNote.ParentStaff.Voices.length > 1) {
                    const staffGves = note.parentVoiceEntry.parentStaffEntry.graphicalVoiceEntries;
                    //Find all visible voice entries (don't want invisible rests/notes causing visible shift)
                    const restVoiceId = note.parentVoiceEntry.parentVoiceEntry.ParentVoice.VoiceId;
                    let maxHalftone;
                    let linesShift;
                    for (const staffGve of staffGves) {
                        for (const gveNote of staffGve.notes) {
                            if (gveNote === note || gveNote.sourceNote.isRest() || !gveNote.sourceNote.PrintObject) {
                                continue;
                            }
                            // unfortunately, we don't have functional note bounding boxes at this point,
                            //   so we have to infer the note positions and sizes manually.
                            const wantedStemDirection = gveNote.parentVoiceEntry.parentVoiceEntry.WantedStemDirection;
                            const isUpperVoiceRest = restVoiceId === 1 || restVoiceId === 5;
                            const lineShiftDirection = isUpperVoiceRest ? 1 : -1; // voice 1: put rest above (-y). other voices: below
                            const gveNotePitch = gveNote.sourceNote.Pitch;
                            const noteHalftone = gveNotePitch.getHalfTone();
                            const newHigh = lineShiftDirection === 1 && noteHalftone > maxHalftone;
                            const newLow = lineShiftDirection === -1 && noteHalftone < maxHalftone;
                            if (!maxHalftone || newHigh || newLow) {
                                maxHalftone = noteHalftone;
                                linesShift = 0;
                                // add stem length if necessary
                                if (isUpperVoiceRest && wantedStemDirection === VoiceEntry_1.StemDirectionType.Up) {
                                    linesShift += 7; // rest should be above notes with up stem
                                }
                                else if (!isUpperVoiceRest && wantedStemDirection === VoiceEntry_1.StemDirectionType.Down) {
                                    linesShift += 7; // rest should be below notes with down stem
                                }
                                else if (isUpperVoiceRest) {
                                    linesShift += 1;
                                }
                                else {
                                    linesShift += 2;
                                }
                                if (!duration.includes("8")) { // except for 8th rests, rests are middle-aligned in vexflow (?)
                                    //linesShift += 3;
                                    if (wantedStemDirection === VoiceEntry_1.StemDirectionType.Up && lineShiftDirection === -1) {
                                        linesShift += 1; // quarter rests need a little more below upwards stems. over downwards stems it's fine.
                                    }
                                }
                                if (gveNote.sourceNote.NoteBeam) {
                                    linesShift += 1; // TODO this is of course rather a workaround, but the beams aren't completed yet here.
                                    // instead, we could calculate how many lines are between the notes of the beam,
                                    //   and which stem of which note is longer, so its rest needs that many lines more.
                                    //   this is more of "reverse engineering" or rather "advance engineering" the graphical notes,
                                    //   which are unfortunately not built/drawn yet here.
                                }
                                if (duration.includes("w")) {
                                    linesShift /= 2; // TODO maybe a different fix, whole notes may need another look
                                }
                                linesShift += (Math.ceil(rules.RestCollisionYPadding) * 0.5); // 0.5 is smallest unit
                                linesShift *= lineShiftDirection;
                                note.lineShift = linesShift;
                            }
                        }
                    }
                    if (maxHalftone > 0) {
                        let octaveOffset = 3;
                        const restClefInstruction = note.Clef();
                        switch (restClefInstruction.ClefType) {
                            case ClefInstruction_1.ClefEnum.F:
                                octaveOffset = 5;
                                break;
                            case ClefInstruction_1.ClefEnum.C:
                                octaveOffset = 4;
                                // if (restClefInstruction.Line == 4) // tenor clef quarter rests can be off
                                break;
                            default:
                                break;
                        }
                        restYPitch = Pitch_1.Pitch.fromHalftone(maxHalftone);
                        keys = [VexFlowConverter.pitch(restYPitch, true, restClefInstruction, undefined, octaveOffset)[0]];
                    }
                }
                // vfClefType seems to be undefined for rest notes, but setting it seems to break rest positioning.
                // if (!vfClefType) {
                //     const clef = (note as VexFlowGraphicalNote).Clef();
                //     const vexClef: any = VexFlowConverter.Clef(clef);
                //     vfClefType = vexClef.type;
                // }
                break;
            }
            const pitch = note.vfpitch;
            keys.push(pitch[0]);
            accidentals.push(pitch[1]);
            if (!vfClefType) {
                const vfClef = VexFlowConverter.Clef(pitch[2]);
                vfClefType = vfClef.type;
            }
        }
        for (let i = 0, len = numDots; i < len; ++i) {
            duration += "d";
        }
        if (notes.length === 1 && ((_j = notes[0].sourceNote.Notehead) === null || _j === void 0 ? void 0 : _j.Shape) === Notehead_1.NoteHeadShape.SLASH) {
            //if there are multiple note heads, all of them will be slash note head if done like this
            //  -> see note_type = "s" below
            duration += "s"; // we have to specify a slash note head like this in Vexflow
        }
        if (isRest) {
            // "r" has to be put after the "d"s for rest notes.
            duration += "r";
        }
        let vfnote;
        const vfnoteStruct = {
            align_center: alignCenter,
            auto_stem: true,
            clef: vfClefType,
            duration: duration,
            keys: keys,
            slash: gve.GraceSlash,
        };
        const firstNote = gve.notes[0].sourceNote;
        if (firstNote.IsCueNote) {
            vfnoteStruct.glyph_font_scale = VF.DEFAULT_NOTATION_FONT_SCALE * VF.GraceNote.SCALE;
            vfnoteStruct.stroke_px = VF.GraceNote.LEDGER_LINE_OFFSET;
        }
        if (gve.parentVoiceEntry.IsGrace || gve.notes[0].sourceNote.IsCueNote) {
            vfnote = new VF.GraceNote(vfnoteStruct);
        }
        else {
            vfnote = new VF.StaveNote(vfnoteStruct);
            vfnote.stagger_same_whole_notes = rules.StaggerSameWholeNotes;
            //   it would be nice to only save this once, not for every note, but has to be accessible in stavenote.js
            const lyricsEntries = gve.parentStaffEntry.LyricsEntries;
            if (rules.RenderLyrics && rules.LyricsUseXPaddingForShortNotes && lyricsEntries.length > 0) {
                // VexFlowPatch: add padding to the right for large lyrics,
                //   so that measure doesn't need to be enlarged too much for spacing
                let hasShortNotes = false;
                let paddingMultiplier = 1;
                for (const note of notes) {
                    if (note.sourceNote.Length.RealValue <= 0.125) { // 8th or shorter
                        hasShortNotes = true;
                        if (note.sourceNote.Length.RealValue <= 0.0625) { // 16th or shorter
                            paddingMultiplier = 1.7;
                        }
                        break;
                    }
                }
                if (hasShortNotes) {
                    let addPadding = false;
                    for (const lyricsEntry of lyricsEntries) {
                        const widthThreshold = rules.LyricsXPaddingWidthThreshold;
                        // letters like i and l take less space, so we should use the visual width and not number of characters
                        let currentLyricsWidth = lyricsEntry.GraphicalLabel.PositionAndShape.Size.width;
                        if (lyricsEntry.hasDashFromLyricWord()) {
                            currentLyricsWidth += 1.5;
                        }
                        if (currentLyricsWidth > widthThreshold) {
                            paddingMultiplier *= currentLyricsWidth / widthThreshold;
                            // check if we need padding because next staff entry also has long lyrics or it's the last note in the measure
                            const currentStaffEntry = gve.parentStaffEntry;
                            const measureStaffEntries = currentStaffEntry.parentMeasure.staffEntries;
                            const currentStaffEntryIndex = measureStaffEntries.indexOf(currentStaffEntry);
                            if (currentStaffEntryIndex === measureStaffEntries.length - 1) {
                                // addPadding = true; // last note in the measure
                                // probably unnecessary
                            }
                            else {
                                addPadding = true;
                            }
                            break;
                        }
                        // for situations unlikely to cause overlap we shouldn't add padding,
                        //   e.g. Brooke West sample (OSMD Function Test Chord Symbols) - width ~3.1 in measure 11 on 'ling', no padding needed.
                        //   though Beethoven - Geliebte has only 8ths in measure 2 and is still problematic,
                        //   so unfortunately we can't just check if the next note is 16th or less.
                    }
                    if (addPadding) {
                        vfnote.paddingRight = 10 * rules.LyricsXPaddingFactorForLongLyrics * paddingMultiplier;
                    }
                }
            }
        }
        const lineShift = gve.notes[0].lineShift;
        if (lineShift !== 0) {
            vfnote.getKeyProps()[0].line += lineShift;
        }
        // check for slash noteheads (among other noteheads)
        if (notes.length > 1) {
            // for a single note, we can use duration += "s" (see above).
            //   If we use the below solution for a single note as well, the notehead sometimes goes over the stem.
            for (let n = 0; n < notes.length; n++) {
                const note = notes[n];
                if (((_k = note.sourceNote.Notehead) === null || _k === void 0 ? void 0 : _k.Shape) === Notehead_1.NoteHeadShape.SLASH) {
                    vfnote.note_heads[n].note_type = "s"; // slash notehead
                }
            }
        }
        // Annotate GraphicalNote with which line of the staff it appears on
        vfnote.getKeyProps().forEach(({ line }, i) => gve.notes[i].staffLine = line);
        if (rules.LedgerLineWidth || rules.LedgerLineStrokeStyle) {
            // FIXME should probably use vfnote.setLedgerLineStyle. this doesn't seem to do anything.
            // however, this is also set in VexFlowVoiceEntry.color() anyways.
            if (!(vfnote.ledgerLineStyle)) {
                vfnote.ledgerLineStyle = {};
            }
            if (rules.LedgerLineWidth) {
                vfnote.ledgerLineStyle.lineWidth = rules.LedgerLineWidth;
            }
            if (rules.LedgerLineStrokeStyle) {
                vfnote.ledgerLineStyle.strokeStyle = rules.LedgerLineStrokeStyle;
            }
        }
        if (rules.ColoringEnabled) {
            const defaultColorStem = rules.DefaultColorStem;
            let stemColor = gve.parentVoiceEntry.StemColor;
            if (!stemColor && defaultColorStem) {
                stemColor = defaultColorStem;
            }
            const stemStyle = { fillStyle: stemColor, strokeStyle: stemColor };
            if (stemColor) {
                //gve.parentVoiceEntry.StemColor = stemColor; // this shouldn't be set by DefaultColorStem
                vfnote.setStemStyle(stemStyle);
                if (vfnote.flag && rules.ColorFlags) {
                    vfnote.setFlagStyle(stemStyle);
                }
            }
        }
        vfnote.x_shift = xShift;
        if (gve.parentVoiceEntry.IsGrace && gve.notes[0].sourceNote.NoteBeam) {
            // Vexflow seems to have issues with wanted stem direction for beamed grace notes,
            // when the stem is connected to a beamed main note (e.g. Haydn Concertante bar 57)
            gve.parentVoiceEntry.WantedStemDirection = gve.notes[0].sourceNote.NoteBeam.Notes[0].ParentVoiceEntry.WantedStemDirection;
        }
        if (gve.parentVoiceEntry) {
            const wantedStemDirection = gve.parentVoiceEntry.WantedStemDirection;
            switch (wantedStemDirection) {
                case (VoiceEntry_1.StemDirectionType.Up):
                    vfnote.setStemDirection(VF.Stem.UP);
                    gve.parentVoiceEntry.StemDirection = VoiceEntry_1.StemDirectionType.Up;
                    break;
                case (VoiceEntry_1.StemDirectionType.Down):
                    vfnote.setStemDirection(VF.Stem.DOWN);
                    gve.parentVoiceEntry.StemDirection = VoiceEntry_1.StemDirectionType.Down;
                    break;
                default:
            }
        }
        // add accidentals
        for (let i = 0, len = notes.length; i < len; i += 1) {
            notes[i].setIndex(vfnote, i);
            if (accidentals[i]) {
                if (accidentals[i] === "###") { // triple sharp
                    vfnote.addAccidental(i, new VF.Accidental("##"));
                    vfnote.addAccidental(i, new VF.Accidental("#"));
                    continue;
                }
                else if (accidentals[i] === "bbs") { // triple flat
                    vfnote.addAccidental(i, new VF.Accidental("bb"));
                    vfnote.addAccidental(i, new VF.Accidental("b"));
                    continue;
                }
                vfnote.addAccidental(i, new VF.Accidental(accidentals[i])); // normal accidental
            }
            // add Tremolo strokes (only single note tremolos for now, Vexflow doesn't have beams for two-note tremolos yet)
            const tremoloStrokes = notes[i].sourceNote.TremoloStrokes;
            if (tremoloStrokes > 0) {
                const tremolo = new VF.Tremolo(tremoloStrokes);
                tremolo.extra_stroke_scale = rules.TremoloStrokeScale;
                tremolo.y_spacing_scale = rules.TremoloYSpacingScale;
                vfnote.addModifier(i, tremolo);
            }
        }
        // half note tremolo: set notehead to half note (Vexflow otherwise takes the notehead from duration) (Hack)
        if (firstNote.Length.RealValue === 0.25 && firstNote.Notehead && firstNote.Notehead.Filled === false) {
            const keyProps = vfnote.getKeyProps();
            for (let i = 0; i < keyProps.length; i++) {
                keyProps[i].code = "v81";
            }
        }
        for (let i = 0, len = numDots; i < len; ++i) {
            vfnote.addDotToAll();
        }
        return vfnote;
    }
    static generateArticulations(vfnote, gNote, rules) {
        if (!vfnote || vfnote.getAttribute("type") === "GhostNote") {
            return;
        }
        for (const articulation of gNote.sourceNote.ParentVoiceEntry.Articulations) {
            let vfArtPosition = VF.Modifier.Position.ABOVE;
            if (vfnote.getStemDirection() === VF.Stem.UP) {
                vfArtPosition = VF.Modifier.Position.BELOW;
            }
            let vfArt = undefined;
            const articulationEnum = articulation.articulationEnum;
            if (rules.ArticulationPlacementFromXML) {
                if (articulation.placement === AbstractExpression_1.PlacementEnum.Above) {
                    vfArtPosition = VF.Modifier.Position.ABOVE;
                }
                else if (articulation.placement === AbstractExpression_1.PlacementEnum.Below) {
                    vfArtPosition = VF.Modifier.Position.BELOW;
                } // else if undefined: don't change
            }
            switch (articulationEnum) {
                case VoiceEntry_1.ArticulationEnum.accent: {
                    vfArt = new VF.Articulation("a>");
                    const slurs = gNote.sourceNote.NoteSlurs;
                    for (const slur of slurs) {
                        if (slur.StartNote === gNote.sourceNote) { // && slur.PlacementXml === articulation.placement
                            if (slur.PlacementXml === AbstractExpression_1.PlacementEnum.Above) {
                                vfArt.setYShift(-rules.SlurStartArticulationYOffsetOfArticulation * 10);
                            }
                            else if (slur.PlacementXml === AbstractExpression_1.PlacementEnum.Below) {
                                vfArt.setYShift(rules.SlurStartArticulationYOffsetOfArticulation * 10);
                            }
                        }
                    }
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.breathmark: {
                    vfArt = new VF.Articulation("abr");
                    if (articulation.placement === AbstractExpression_1.PlacementEnum.Above) {
                        vfArtPosition = VF.Modifier.Position.ABOVE;
                    }
                    vfArt.breathMarkDistance = rules.BreathMarkDistance; // default 0.8 = 80% towards next note or staff end
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.downbow: {
                    vfArt = new VF.Articulation("am");
                    if (articulation.placement === undefined) { // downbow/upbow should be above by default
                        vfArtPosition = VF.Modifier.Position.ABOVE;
                        articulation.placement = AbstractExpression_1.PlacementEnum.Above;
                    }
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.fermata: {
                    vfArt = new VF.Articulation("a@a");
                    vfArtPosition = VF.Modifier.Position.ABOVE;
                    articulation.placement = AbstractExpression_1.PlacementEnum.Above;
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.marcatodown: {
                    vfArt = new VF.Articulation("a|"); // Vexflow only knows marcato up, so we use a down stroke here.
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.marcatoup: {
                    vfArt = new VF.Articulation("a^");
                    // according to Gould - Behind Bars, Marcato should always be above the staff, regardless of stem direction.
                    vfArtPosition = VF.Modifier.Position.ABOVE;
                    // alternative: place close to note (below staff if below 3rd line). looks strange though, see test_marcato_position
                    // if (rules.PositionMarcatoCloseToNote) {
                    //     const noteLine: number = vfnote.getLineNumber();
                    //     if (noteLine > 3) {
                    //         vfArtPosition = VF.Modifier.Position.ABOVE;
                    //     } else {
                    //         vfArtPosition = VF.Modifier.Position.BELOW;
                    //     }
                    //     //console.log("measure " + gNote.parentVoiceEntry.parentStaffEntry.parentMeasure.MeasureNumber + ", line " + noteLine);
                    // }
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.invertedfermata: {
                    const pve = gNote.sourceNote.ParentVoiceEntry;
                    const sourceNote = gNote.sourceNote;
                    // find inverted fermata, push it to last voice entry in staffentry list,
                    //   so that it doesn't overlap notes (gets displayed right below higher note)
                    //   TODO this could maybe be moved elsewhere or done more elegantly,
                    //     but on the other hand here it only gets checked if we have an inverted fermata anyways, seems efficient.
                    if (pve !== sourceNote.ParentVoiceEntry.ParentSourceStaffEntry.VoiceEntries.last()) {
                        pve.Articulations = pve.Articulations.slice(pve.Articulations.indexOf(articulation));
                        pve.ParentSourceStaffEntry.VoiceEntries.last().Articulations.push(articulation);
                        continue;
                    }
                    vfArt = new VF.Articulation("a@u");
                    vfArtPosition = VF.Modifier.Position.BELOW;
                    articulation.placement = AbstractExpression_1.PlacementEnum.Below;
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.lefthandpizzicato: {
                    vfArt = new VF.Articulation("a+");
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.naturalharmonic: {
                    vfArt = new VF.Articulation("ah");
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.snappizzicato: {
                    vfArt = new VF.Articulation("ao");
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.staccatissimo: {
                    vfArt = new VF.Articulation("av");
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.staccato: {
                    vfArt = new VF.Articulation("a.");
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.tenuto: {
                    vfArt = new VF.Articulation("a-");
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.upbow: {
                    vfArt = new VF.Articulation("a|");
                    if (articulation.placement === undefined) { // downbow/upbow should be above by default
                        vfArtPosition = VF.Modifier.Position.ABOVE;
                        articulation.placement = AbstractExpression_1.PlacementEnum.Above;
                    }
                    break;
                }
                case VoiceEntry_1.ArticulationEnum.strongaccent: {
                    vfArt = new VF.Articulation("a^");
                    break;
                }
                default: {
                    break;
                }
            }
            if (vfArt) {
                vfArt.setPosition(vfArtPosition);
                vfnote.addModifier(0, vfArt);
            }
        }
    }
    static generateOrnaments(vfnote, oContainer) {
        let vfPosition = VF.Modifier.Position.ABOVE;
        if (oContainer.placement === AbstractExpression_1.PlacementEnum.Below) {
            vfPosition = VF.Modifier.Position.BELOW;
        }
        let vfOrna = undefined;
        switch (oContainer.GetOrnament) {
            case OrnamentContainer_1.OrnamentEnum.DelayedInvertedTurn: {
                vfOrna = new VF.Ornament("turn_inverted");
                vfOrna.setDelayed(true);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.DelayedTurn: {
                vfOrna = new VF.Ornament("turn");
                vfOrna.setDelayed(true);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.InvertedMordent: {
                vfOrna = new VF.Ornament("mordent"); // Vexflow uses baroque, not MusicXML definition
                vfOrna.setDelayed(false);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.InvertedTurn: {
                vfOrna = new VF.Ornament("turn_inverted");
                vfOrna.setDelayed(false);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.Mordent: {
                vfOrna = new VF.Ornament("mordent_inverted");
                vfOrna.setDelayed(false);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.Trill: {
                vfOrna = new VF.Ornament("tr");
                vfOrna.setDelayed(false);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.Turn: {
                vfOrna = new VF.Ornament("turn");
                vfOrna.setDelayed(false);
                break;
            }
            default: {
                loglevel_1.default.warn("unhandled OrnamentEnum type: " + oContainer.GetOrnament);
                return;
            }
        }
        if (vfOrna) {
            if (oContainer.AccidentalBelow !== Pitch_2.AccidentalEnum.NONE) {
                vfOrna.setLowerAccidental(Pitch_1.Pitch.accidentalVexflow(oContainer.AccidentalBelow));
            }
            if (oContainer.AccidentalAbove !== Pitch_2.AccidentalEnum.NONE) {
                vfOrna.setUpperAccidental(Pitch_1.Pitch.accidentalVexflow(oContainer.AccidentalAbove));
            }
            vfOrna.setPosition(vfPosition); // Vexflow draws it above right now in any case, never below
            vfnote.addModifier(0, vfOrna);
        }
    }
    static StrokeTypeFromArpeggioType(arpeggioType) {
        switch (arpeggioType) {
            case Arpeggio_1.ArpeggioType.ARPEGGIO_DIRECTIONLESS:
                return VF.Stroke.Type.ARPEGGIO_DIRECTIONLESS;
            case Arpeggio_1.ArpeggioType.BRUSH_DOWN:
                return VF.Stroke.Type.BRUSH_UP; // TODO somehow up and down are mixed up in Vexflow right now
            case Arpeggio_1.ArpeggioType.BRUSH_UP:
                return VF.Stroke.Type.BRUSH_DOWN; // TODO somehow up and down are mixed up in Vexflow right now
            case Arpeggio_1.ArpeggioType.RASQUEDO_DOWN:
                return VF.Stroke.Type.RASQUEDO_UP;
            case Arpeggio_1.ArpeggioType.RASQUEDO_UP:
                return VF.Stroke.Type.RASQUEDO_DOWN;
            case Arpeggio_1.ArpeggioType.ROLL_DOWN:
                return VF.Stroke.Type.ROLL_UP; // TODO somehow up and down are mixed up in Vexflow right now
            case Arpeggio_1.ArpeggioType.ROLL_UP:
                return VF.Stroke.Type.ROLL_DOWN; // TODO somehow up and down are mixed up in Vexflow right now
            default:
                return VF.Stroke.Type.ARPEGGIO_DIRECTIONLESS;
        }
    }
    /**
     * Convert a set of GraphicalNotes to a VexFlow StaveNote
     * @param notes form a chord on the staff
     * @returns {VF.StaveNote}
     */
    static CreateTabNote(gve) {
        const tabPositions = [];
        const notes = gve.notes.reverse();
        const tabPhrases = [];
        const frac = gve.notes[0].graphicalNoteLength;
        const isTuplet = gve.notes[0].sourceNote.NoteTuplet !== undefined;
        let duration = VexFlowConverter.durations(frac, isTuplet)[0];
        let numDots = 0;
        let tabVibrato = false;
        for (const note of gve.notes) {
            const tabNote = note.sourceNote;
            let tabPosition = { str: tabNote.StringNumberTab, fret: tabNote.FretNumber };
            if (!(note.sourceNote instanceof TabNote_1.TabNote)) {
                loglevel_1.default.info(`invalid tab note: ${note.sourceNote.Pitch.ToString()} in measure ${gve.parentStaffEntry.parentMeasure.MeasureNumber}` +
                    ", likely missing XML string+fret number.");
                tabPosition = { str: 1, fret: 0 }; // random safe values, otherwise it's both undefined for invalid notes
            }
            tabPositions.push(tabPosition);
            if (tabNote.BendArray) {
                tabNote.BendArray.forEach(function (bend) {
                    let phraseText;
                    const phraseStep = bend.bendalter - tabPosition.fret;
                    if (phraseStep > 1) {
                        phraseText = "Full";
                    }
                    else if (phraseStep === 1) {
                        phraseText = "1/2";
                    }
                    else {
                        phraseText = "1/4";
                    }
                    if (bend.direction === "up") {
                        tabPhrases.push({ type: VF.Bend.UP, text: phraseText, width: 10 });
                    }
                    else {
                        tabPhrases.push({ type: VF.Bend.DOWN, text: phraseText, width: 10 });
                    }
                });
            }
            if (tabNote.VibratoStroke) {
                tabVibrato = true;
            }
            if (numDots < note.numberOfDots) {
                numDots = note.numberOfDots;
            }
        }
        for (let i = 0, len = numDots; i < len; ++i) {
            duration += "d";
        }
        const vfnote = new VF.TabNote({
            duration: duration,
            positions: tabPositions,
        });
        for (let i = 0, len = notes.length; i < len; i += 1) {
            notes[i].setIndex(vfnote, i);
        }
        tabPhrases.forEach(function (phrase) {
            if (phrase.type === VF.Bend.UP) {
                vfnote.addModifier(new VF.Bend(phrase.text, false));
            }
            else {
                vfnote.addModifier(new VF.Bend(phrase.text, true));
            }
        });
        if (tabVibrato) {
            vfnote.addModifier(new VF.Vibrato());
        }
        return vfnote;
    }
    /**
     * Convert a ClefInstruction to a string represention of a clef type in VexFlow.
     *
     * @param clef The OSMD object to be converted representing the clef
     * @param size The VexFlow size to be used. Can be `default` or `small`.
     * As soon as #118 is done, this parameter will be dispensable.
     * @returns    A string representation of a VexFlow clef
     * @see        https://github.com/0xfe/vexflow/blob/master/src/clef.js
     * @see        https://github.com/0xfe/vexflow/blob/master/tests/clef_tests.js
     */
    static Clef(clef, size = "default") {
        let type;
        let annotation;
        // Make sure size is either "default" or "small"
        if (size !== "default" && size !== "small") {
            loglevel_1.default.warn(`Invalid VexFlow clef size "${size}" specified. Using "default".`);
            size = "default";
        }
        /*
         * For all of the following conversions, OSMD uses line numbers 1-5 starting from
         * the bottom, while VexFlow uses 0-4 starting from the top.
         */
        switch (clef.ClefType) {
            // G Clef
            case ClefInstruction_1.ClefEnum.G:
                switch (clef.Line) {
                    case 1:
                        type = "french"; // VexFlow line 4
                        break;
                    case 2:
                        type = "treble"; // VexFlow line 3
                        break;
                    default:
                        type = "treble";
                        loglevel_1.default.error(`Clef ${ClefInstruction_1.ClefEnum[clef.ClefType]} on line ${clef.Line} not supported by VexFlow. Using default value "${type}".`);
                }
                break;
            // F Clef
            case ClefInstruction_1.ClefEnum.F:
                switch (clef.Line) {
                    case 4:
                        type = "bass"; // VexFlow line 1
                        break;
                    case 3:
                        type = "baritone-f"; // VexFlow line 2
                        break;
                    case 5:
                        type = "subbass"; // VexFlow line 0
                        break;
                    default:
                        type = "bass";
                        loglevel_1.default.error(`Clef ${ClefInstruction_1.ClefEnum[clef.ClefType]} on line ${clef.Line} not supported by VexFlow. Using default value "${type}".`);
                }
                break;
            // C Clef
            case ClefInstruction_1.ClefEnum.C:
                switch (clef.Line) {
                    case 3:
                        type = "alto"; // VexFlow line 2
                        break;
                    case 4:
                        type = "tenor"; // VexFlow line 1
                        break;
                    case 1:
                        type = "soprano"; // VexFlow line 4
                        break;
                    case 2:
                        type = "mezzo-soprano"; // VexFlow line 3
                        break;
                    default:
                        type = "alto";
                        loglevel_1.default.error(`Clef ${ClefInstruction_1.ClefEnum[clef.ClefType]} on line ${clef.Line} not supported by VexFlow. Using default value "${type}".`);
                }
                break;
            // Percussion Clef
            case ClefInstruction_1.ClefEnum.percussion:
                type = "percussion";
                break;
            // TAB Clef
            case ClefInstruction_1.ClefEnum.TAB:
                // only used currently for creating the notes in the normal stave: There we need a normal treble clef
                type = "treble";
                break;
            default:
                loglevel_1.default.info("bad clef type: " + clef.ClefType);
                type = "treble";
        }
        // annotations in vexflow don't allow bass and 8va. No matter the offset :(
        if (clef.OctaveOffset === 1 && type !== "bass") {
            annotation = "8va";
        }
        else if (clef.OctaveOffset === -1) {
            annotation = "8vb";
        }
        return { type, size, annotation };
    }
    /**
     * Convert a RhythmInstruction to a VexFlow TimeSignature object
     * @param rhythm
     * @returns {VF.TimeSignature}
     * @constructor
     */
    static TimeSignature(rhythm) {
        let timeSpec;
        switch (rhythm.SymbolEnum) {
            case RhythmInstruction_1.RhythmSymbolEnum.NONE:
                timeSpec = rhythm.Rhythm.Numerator + "/" + rhythm.Rhythm.Denominator;
                break;
            case RhythmInstruction_1.RhythmSymbolEnum.COMMON:
                timeSpec = "C";
                break;
            case RhythmInstruction_1.RhythmSymbolEnum.CUT:
                timeSpec = "C|";
                break;
            default:
        }
        return new VF.TimeSignature(timeSpec);
    }
    /**
     * Convert a KeyInstruction to a string representing in VexFlow a key
     * @param key
     * @returns {string}
     */
    static keySignature(key) {
        if (!key) {
            return undefined;
        }
        let ret;
        switch (key.Mode) {
            case KeyInstruction_1.KeyEnum.minor:
                ret = VexFlowConverter.minorMap[key.Key] + "m";
                break;
            case KeyInstruction_1.KeyEnum.major:
                ret = VexFlowConverter.majorMap[key.Key];
                break;
            // some XMLs don't have the mode set despite having a key signature.
            case KeyInstruction_1.KeyEnum.none:
                ret = VexFlowConverter.majorMap[key.Key];
                break;
            default:
                ret = "C";
        }
        return ret;
    }
    /**
     * Converts a lineType to a VexFlow StaveConnector type
     * @param lineType
     * @returns {any}
     */
    static line(lineType, linePosition) {
        switch (lineType) {
            case SystemLinesEnum_1.SystemLinesEnum.SingleThin:
                if (linePosition === SystemLinePosition_1.SystemLinePosition.MeasureBegin) {
                    return VF.StaveConnector.type.SINGLE;
                }
                return VF.StaveConnector.type.SINGLE_RIGHT;
            case SystemLinesEnum_1.SystemLinesEnum.DoubleThin:
                return VF.StaveConnector.type.THIN_DOUBLE;
            case SystemLinesEnum_1.SystemLinesEnum.ThinBold:
                return VF.StaveConnector.type.BOLD_DOUBLE_RIGHT;
            case SystemLinesEnum_1.SystemLinesEnum.BoldThinDots:
                return VF.StaveConnector.type.BOLD_DOUBLE_LEFT;
            case SystemLinesEnum_1.SystemLinesEnum.DotsThinBold:
                return VF.StaveConnector.type.BOLD_DOUBLE_RIGHT;
            case SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots:
                return VF.StaveConnector.type.BOLD_DOUBLE_RIGHT;
            case SystemLinesEnum_1.SystemLinesEnum.None:
                return VF.StaveConnector.type.NONE;
            default:
        }
    }
    /**
     * Construct a string which can be used in a CSS font property
     * @param fontSize
     * @param fontStyle
     * @param font
     * @returns {string}
     */
    static font(fontSize, fontStyle = FontStyles_1.FontStyles.Regular, font = Fonts_1.Fonts.TimesNewRoman, rules, fontFamily = undefined) {
        let style = "normal";
        let weight = "normal";
        let family = `'${rules.DefaultFontFamily}'`; // default "'Times New Roman'"
        switch (fontStyle) {
            case FontStyles_1.FontStyles.Bold:
                weight = "bold";
                break;
            case FontStyles_1.FontStyles.Italic:
                style = "italic";
                break;
            case FontStyles_1.FontStyles.BoldItalic:
                style = "italic";
                weight = "bold";
                break;
            case FontStyles_1.FontStyles.Underlined:
                // TODO
                break;
            default:
                break;
        }
        switch (font) { // currently not used
            case Fonts_1.Fonts.Kokila:
                // TODO Not Supported
                break;
            default:
        }
        if (fontFamily && fontFamily !== "default") {
            family = `'${fontFamily}'`;
        }
        return style + " " + weight + " " + Math.floor(fontSize) + "px " + family;
    }
    /**
     * Converts the style into a string that VexFlow RenderContext can understand
     * as the weight of the font
     */
    static fontStyle(style) {
        switch (style) {
            case FontStyles_1.FontStyles.Bold:
                return "bold";
            case FontStyles_1.FontStyles.Italic:
                return "italic";
            case FontStyles_1.FontStyles.BoldItalic:
                return "italic bold";
            default:
                return "normal";
        }
    }
    /**
     * Convert OutlineAndFillStyle to CSS properties
     * @param styleId
     * @returns {string}
     */
    static style(styleId) {
        const ret = DrawingEnums_1.OUTLINE_AND_FILL_STYLE_DICT.getValue(styleId);
        return ret;
    }
}
exports.VexFlowConverter = VexFlowConverter;
/**
 * Mapping from numbers of alterations on the key signature to major keys
 * @type {[alterationsNo: number]: string; }
 */
VexFlowConverter.majorMap = {
    "-1": "F", "-2": "Bb", "-3": "Eb", "-4": "Ab", "-5": "Db", "-6": "Gb", "-7": "Cb", "-8": "Fb",
    "0": "C", "1": "G", "2": "D", "3": "A", "4": "E", "5": "B", "6": "F#", "7": "C#", "8": "G#"
};
/**
 * Mapping from numbers of alterations on the key signature to minor keys
 * @type {[alterationsNo: number]: string; }
 */
VexFlowConverter.minorMap = {
    "-1": "D", "-2": "G", "-3": "C", "-4": "F", "-5": "Bb", "-6": "Eb", "-7": "Ab", "-8": "Db",
    "0": "A", "1": "E", "2": "B", "3": "F#", "4": "C#", "5": "G#", "6": "D#", "7": "A#", "8": "E#"
};


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowGlissando.ts":
/*!****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowGlissando.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowGlissando = void 0;
const GraphicalGlissando_1 = __webpack_require__(/*! ../GraphicalGlissando */ "./src/MusicalScore/Graphical/GraphicalGlissando.ts");
class VexFlowGlissando extends GraphicalGlissando_1.GraphicalGlissando {
}
exports.VexFlowGlissando = VexFlowGlissando;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalNote.ts":
/*!********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalNote.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowGraphicalNote = void 0;
const GraphicalNote_1 = __webpack_require__(/*! ../GraphicalNote */ "./src/MusicalScore/Graphical/GraphicalNote.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const OctaveShift_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts");
/**
 * The VexFlow version of a [[GraphicalNote]].
 */
class VexFlowGraphicalNote extends GraphicalNote_1.GraphicalNote {
    constructor(note, parent, activeClef, octaveShift = OctaveShift_1.OctaveEnum.NONE, rules, graphicalNoteLength = undefined) {
        super(note, parent, rules, graphicalNoteLength);
        this.clef = activeClef;
        this.octaveShift = octaveShift;
        if (note.Pitch) {
            // TODO: Maybe shift to Transpose function when available
            const drawPitch = note.isRest() ? note.Pitch : OctaveShift_1.OctaveShift.getPitchFromOctaveShift(note.Pitch, octaveShift);
            this.vfpitch = VexFlowConverter_1.VexFlowConverter.pitch(drawPitch, note.isRest(), this.clef, this.sourceNote.Notehead);
            this.vfpitch[1] = undefined;
        }
    }
    /**
     * Update the pitch of this note. Necessary in order to display accidentals correctly.
     * This is called by VexFlowGraphicalSymbolFactory.addGraphicalAccidental.
     * @param pitch
     */
    setAccidental(pitch) {
        // if (this.vfnote) {
        //     let pitchAcc: AccidentalEnum = pitch.Accidental;
        //     const acc: string = Pitch.accidentalVexflow(pitch.Accidental);
        //     if (acc) {
        //         alert(acc);
        //         this.vfnote[0].addAccidental(this.vfnote[1], new VF.Accidental(acc));
        //     }
        // } else {
        // revert octave shift, as the placement of the note is independent of octave brackets
        const drawPitch = this.drawPitch(pitch);
        // recalculate the pitch, and this time don't ignore the accidental:
        this.vfpitch = VexFlowConverter_1.VexFlowConverter.pitch(drawPitch, this.sourceNote.isRest(), this.clef, this.sourceNote.Notehead);
        this.DrawnAccidental = drawPitch.Accidental;
        //}
    }
    drawPitch(pitch) {
        return OctaveShift_1.OctaveShift.getPitchFromOctaveShift(pitch, this.octaveShift);
    }
    Transpose(keyInstruction, activeClef, halfTones, octaveEnum) {
        const tranposedPitch = super.Transpose(keyInstruction, activeClef, halfTones, octaveEnum);
        const drawPitch = OctaveShift_1.OctaveShift.getPitchFromOctaveShift(tranposedPitch, this.octaveShift);
        this.vfpitch = VexFlowConverter_1.VexFlowConverter.pitch(drawPitch, this.sourceNote.isRest(), this.clef, this.sourceNote.Notehead);
        this.vfpitch[1] = undefined;
        return drawPitch;
    }
    /**
     * Set the VexFlow StaveNote corresponding to this GraphicalNote, together with its index in the chord.
     * @param note
     * @param index
     */
    setIndex(note, index) {
        this.vfnote = [note, index];
        this.vfnoteIndex = index;
    }
    notehead(vfNote = undefined) {
        let vfnote = vfNote;
        if (!vfnote) {
            vfnote = this.vfnote[0];
        }
        const noteheads = vfnote.note_heads;
        if (noteheads && noteheads.length > this.vfnoteIndex && noteheads[this.vfnoteIndex]) {
            return vfnote.note_heads[this.vfnoteIndex];
        }
        else {
            return { line: 0 };
        }
    }
    /**
     * Gets the clef for this note
     */
    Clef() {
        return this.clef;
    }
    /**
     * Gets the id of the SVGGElement containing this note, given the SVGRenderer is used.
     * This is for low-level rendering hacks and should be used with caution.
     */
    getSVGId() {
        if (!this.vfnote) {
            return undefined; // e.g. MultiRestMeasure
        }
        return this.vfnote[0].getAttribute("id");
    }
    /**
     * Gets the SVGGElement containing this note, given the SVGRenderer is used.
     * This is for low-level rendering hacks and should be used with caution.
     */
    getSVGGElement() {
        if (!this.vfnote) {
            return undefined; // e.g. MultiRestMeasure
        }
        return this.vfnote[0].getAttribute("el");
    }
    /** Gets the SVG path element of the note's stem. */
    getStemSVG() {
        return document.getElementById("vf-" + this.getSVGId() + "-stem");
        // more correct, but Vex.Prefix() is not in the definitions:
        //return document.getElementById((Vex as any).Prefix(this.getSVGId() + "-stem"));
    }
    /** Gets the SVG path elements of the beams starting on this note. */
    getBeamSVGs() {
        const beamSVGs = [];
        for (let i = 0;; i++) {
            const newSVG = document.getElementById(`vf-${this.getSVGId()}-beam${i}`);
            if (!newSVG) {
                break;
            }
            beamSVGs.push(newSVG);
        }
        return beamSVGs;
    }
}
exports.VexFlowGraphicalNote = VexFlowGraphicalNote;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalSymbolFactory.ts":
/*!*****************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalSymbolFactory.ts ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowGraphicalSymbolFactory = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const VexFlowMusicSystem_1 = __webpack_require__(/*! ./VexFlowMusicSystem */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSystem.ts");
const VexFlowMeasure_1 = __webpack_require__(/*! ./VexFlowMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts");
const VexFlowStaffEntry_1 = __webpack_require__(/*! ./VexFlowStaffEntry */ "./src/MusicalScore/Graphical/VexFlow/VexFlowStaffEntry.ts");
const OctaveShift_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts");
const VexFlowGraphicalNote_1 = __webpack_require__(/*! ./VexFlowGraphicalNote */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalNote.ts");
const GraphicalChordSymbolContainer_1 = __webpack_require__(/*! ../GraphicalChordSymbolContainer */ "./src/MusicalScore/Graphical/GraphicalChordSymbolContainer.ts");
const VexFlowVoiceEntry_1 = __webpack_require__(/*! ./VexFlowVoiceEntry */ "./src/MusicalScore/Graphical/VexFlow/VexFlowVoiceEntry.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const VexFlowTabMeasure_1 = __webpack_require__(/*! ./VexFlowTabMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowTabMeasure.ts");
const VexFlowStaffLine_1 = __webpack_require__(/*! ./VexFlowStaffLine */ "./src/MusicalScore/Graphical/VexFlow/VexFlowStaffLine.ts");
const VexFlowMultiRestMeasure_1 = __webpack_require__(/*! ./VexFlowMultiRestMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMultiRestMeasure.ts");
class VexFlowGraphicalSymbolFactory {
    /**
     * Create a new music system for the given page.
     * Currently only one vertically endless page exists where all systems are put to.
     * @param page
     * @param systemIndex
     * @returns {VexFlowMusicSystem}
     */
    createMusicSystem(systemIndex, rules) {
        return new VexFlowMusicSystem_1.VexFlowMusicSystem(systemIndex, rules);
    }
    /**
     * Create a staffline object containing all staff measures belonging to a given system and staff.
     * @param parentSystem
     * @param parentStaff
     * @returns {VexFlowStaffLine}
     */
    createStaffLine(parentSystem, parentStaff) {
        return new VexFlowStaffLine_1.VexFlowStaffLine(parentSystem, parentStaff);
    }
    /**
     * Construct an empty graphicalMeasure from the given source measure and staff.
     * @param sourceMeasure
     * @param staff
     * @returns {VexFlowMeasure}
     */
    createGraphicalMeasure(sourceMeasure, staff, isTabMeasure = false) {
        return new VexFlowMeasure_1.VexFlowMeasure(staff, sourceMeasure, undefined);
    }
    /**
     * Construct a MultiRestMeasure from the given source measure and staff.
     * @param sourceMeasure
     * @param staff
     * @returns {VexFlowMultiRestMeasure}
     */
    createMultiRestMeasure(sourceMeasure, staff, staffLine) {
        return new VexFlowMultiRestMeasure_1.VexFlowMultiRestMeasure(staff, sourceMeasure, staffLine);
    }
    /**
     * Construct an empty Tab staffMeasure from the given source measure and staff.
     * @param sourceMeasure
     * @param staff
     * @returns {VexFlowTabMeasure}
     */
    createTabStaffMeasure(sourceMeasure, staff) {
        return new VexFlowTabMeasure_1.VexFlowTabMeasure(staff, sourceMeasure);
    }
    /**
     * Create empty measure, which will be used to show key, rhythm changes at the end of the system.
     * @param staffLine
     * @returns {VexFlowMeasure}
     */
    createExtraGraphicalMeasure(staffLine) {
        const extraGraphicalMeasure = new VexFlowMeasure_1.VexFlowMeasure(staffLine.ParentStaff, undefined, staffLine);
        extraGraphicalMeasure.IsExtraGraphicalMeasure = true; // this also means that MeasureNumber < 0 because unchanged
        extraGraphicalMeasure.ExtraGraphicalMeasurePreviousMeasure = staffLine.Measures.last();
        return extraGraphicalMeasure;
    }
    /**
     * Create a staffEntry in the given measure for a given sourceStaffEntry.
     * @param sourceStaffEntry
     * @param measure
     * @returns {VexFlowStaffEntry}
     */
    createStaffEntry(sourceStaffEntry, measure) {
        return new VexFlowStaffEntry_1.VexFlowStaffEntry(measure, sourceStaffEntry, undefined);
    }
    createVoiceEntry(parentVoiceEntry, parentStaffEntry) {
        return new VexFlowVoiceEntry_1.VexFlowVoiceEntry(parentVoiceEntry, parentStaffEntry);
    }
    /**
     * Create a Graphical Note for given note and clef and as part of graphicalStaffEntry.
     * @param note
     * @param numberOfDots  The number of dots the note has to increase its musical duration.
     * @param graphicalStaffEntry
     * @param activeClef    The currently active clef, needed for positioning the note vertically
     * @param octaveShift   The currently active octave transposition enum, needed for positioning the note vertically
     * @returns {GraphicalNote}
     */
    createNote(note, graphicalVoiceEntry, activeClef, octaveShift = OctaveShift_1.OctaveEnum.NONE, rules, graphicalNoteLength = undefined) {
        return new VexFlowGraphicalNote_1.VexFlowGraphicalNote(note, graphicalVoiceEntry, activeClef, octaveShift, rules, graphicalNoteLength);
    }
    /**
     * Create a Graphical Grace Note (smaller head, stem...) for given note and clef and as part of graphicalStaffEntry.
     * @param note
     * @param numberOfDots
     * @param graphicalVoiceEntry
     * @param activeClef
     * @param octaveShift
     * @returns {GraphicalNote}
     */
    createGraceNote(note, graphicalVoiceEntry, activeClef, rules, octaveShift = OctaveShift_1.OctaveEnum.NONE) {
        return new VexFlowGraphicalNote_1.VexFlowGraphicalNote(note, graphicalVoiceEntry, activeClef, octaveShift, rules);
    }
    /**
     * Sets a pitch which will be used for rendering the given graphical note (not changing the original pitch of the note!!!).
     * Will be only called if the displayed accidental is different from the original (e.g. a C# with C# as key instruction)
     * @param graphicalNote
     * @param pitch The pitch which will be rendered.
     */
    addGraphicalAccidental(graphicalNote, pitch) {
        const note = graphicalNote;
        // accidental is added in setPitch
        note.setAccidental(pitch);
    }
    /**
     * Adds a Fermata symbol at the last note of the given tied Note.
     * The last graphical note of this tied note is located at the given graphicalStaffEntry.
     * A Fermata has to be located at the last tied note.
     * @param tiedNote
     * @param graphicalStaffEntry
     */
    addFermataAtTiedEndNote(tiedNote, graphicalStaffEntry) {
        return;
    }
    /**
     * Adds a clef change within a measure before the given staff entry.
     * @param graphicalStaffEntry
     * @param clefInstruction
     */
    createInStaffClef(graphicalStaffEntry, clefInstruction) {
        const se = graphicalStaffEntry;
        const vfClefParams = VexFlowConverter_1.VexFlowConverter.Clef(clefInstruction, "small");
        se.vfClefBefore = new VF.ClefNote(vfClefParams.type, vfClefParams.size, vfClefParams.annotation);
        return;
    }
    /**
     * Adds a chord symbol at the given staff entry
     * @param sourceStaffEntry
     * @param graphicalStaffEntry
     * @param transposeHalftones
     */
    createChordSymbols(sourceStaffEntry, graphicalStaffEntry, keyInstruction, transposeHalftones) {
        const rules = graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules;
        let xShift = 0;
        const chordSymbolSpacing = rules.ChordSymbolXSpacing;
        for (const chordSymbolContainer of sourceStaffEntry.ChordContainers) {
            const graphicalChordSymbolContainer = new GraphicalChordSymbolContainer_1.GraphicalChordSymbolContainer(chordSymbolContainer, graphicalStaffEntry.PositionAndShape, rules.ChordSymbolTextHeight, keyInstruction, transposeHalftones, graphicalStaffEntry.parentMeasure.parentSourceMeasure.Rules // TODO undefined sometimes
            );
            const graphicalLabel = graphicalChordSymbolContainer.GraphicalLabel;
            graphicalLabel.PositionAndShape.RelativePosition.y -= rules.ChordSymbolYOffset;
            graphicalLabel.setLabelPositionAndShapeBorders(); // to get Size.width
            let extraXShiftForShortChordSymbols = 0;
            if (graphicalLabel.PositionAndShape.Size.width < rules.ChordSymbolExtraXShiftWidthThreshold) {
                extraXShiftForShortChordSymbols = rules.ChordSymbolExtraXShiftForShortChordSymbols;
            }
            graphicalLabel.PositionAndShape.RelativePosition.x += xShift + extraXShiftForShortChordSymbols;
            graphicalLabel.setLabelPositionAndShapeBorders();
            // TODO check for available space until next staffEntry or chord symbol? (x direction)
            graphicalChordSymbolContainer.PositionAndShape.calculateBoundingBox();
            graphicalStaffEntry.graphicalChordContainers.push(graphicalChordSymbolContainer);
            xShift += graphicalLabel.PositionAndShape.Size.width + chordSymbolSpacing;
        }
    }
    /**
     * Adds a technical instruction at the given staff entry.
     * @param technicalInstruction
     * @param graphicalStaffEntry
     */
    createGraphicalTechnicalInstruction(technicalInstruction, graphicalStaffEntry) {
        return;
    }
}
exports.VexFlowGraphicalSymbolFactory = VexFlowGraphicalSymbolFactory;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstantaneousDynamicExpression.ts":
/*!*************************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowInstantaneousDynamicExpression.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowInstantaneousDynamicExpression = void 0;
const GraphicalInstantaneousDynamicExpression_1 = __webpack_require__(/*! ../GraphicalInstantaneousDynamicExpression */ "./src/MusicalScore/Graphical/GraphicalInstantaneousDynamicExpression.ts");
const InstantaneousDynamicExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/InstantaneousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts");
const GraphicalLabel_1 = __webpack_require__(/*! ../GraphicalLabel */ "./src/MusicalScore/Graphical/GraphicalLabel.ts");
const Label_1 = __webpack_require__(/*! ../../Label */ "./src/MusicalScore/Label.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
class VexFlowInstantaneousDynamicExpression extends GraphicalInstantaneousDynamicExpression_1.GraphicalInstantaneousDynamicExpression {
    constructor(instantaneousDynamicExpression, staffLine, measure) {
        super(instantaneousDynamicExpression, staffLine, measure);
        const sourceLabel = new Label_1.Label(this.Expression);
        this.label = new GraphicalLabel_1.GraphicalLabel(sourceLabel, this.rules.ContinuousDynamicTextHeight, TextAlignment_1.TextAlignmentEnum.CenterCenter, this.rules, this.PositionAndShape);
        this.label.Label.fontStyle = FontStyles_1.FontStyles.BoldItalic;
        this.label.setLabelPositionAndShapeBorders();
        this.PositionAndShape.calculateBoundingBox();
    }
    get InstantaneousDynamic() {
        return this.mInstantaneousDynamicExpression;
    }
    get Expression() {
        return InstantaneousDynamicExpression_1.DynamicEnum[this.mInstantaneousDynamicExpression.DynEnum];
    }
}
exports.VexFlowInstantaneousDynamicExpression = VexFlowInstantaneousDynamicExpression;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBrace.ts":
/*!**********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBrace.ts ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowInstrumentBrace = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const VexFlowInstrumentBracket_1 = __webpack_require__(/*! ./VexFlowInstrumentBracket */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBracket.ts");
/**
 * Class that defines a instrument bracket at the beginning of a line.
 */
class VexFlowInstrumentBrace extends VexFlowInstrumentBracket_1.VexFlowInstrumentBracket {
    constructor(firstVexFlowStaffLine, lastVexFlowStaffLine, depth = 0) {
        super(firstVexFlowStaffLine, lastVexFlowStaffLine, depth);
        this.vexflowConnector.setType(VF.StaveConnector.type.BRACE);
    }
}
exports.VexFlowInstrumentBrace = VexFlowInstrumentBrace;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBracket.ts":
/*!************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBracket.ts ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowInstrumentBracket = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const GraphicalObject_1 = __webpack_require__(/*! ../GraphicalObject */ "./src/MusicalScore/Graphical/GraphicalObject.ts");
const BoundingBox_1 = __webpack_require__(/*! ../BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
/**
 * Class that defines a instrument bracket at the beginning of a line.
 */
class VexFlowInstrumentBracket extends GraphicalObject_1.GraphicalObject {
    constructor(firstVexFlowStaffLine, lastVexFlowStaffLine, depth = 0) {
        super();
        this.Visible = true;
        this.PositionAndShape = new BoundingBox_1.BoundingBox(this, firstVexFlowStaffLine.ParentMusicSystem.PositionAndShape);
        const firstVexMeasure = firstVexFlowStaffLine.Measures[0];
        const lastVexMeasure = lastVexFlowStaffLine.Measures[0];
        this.addConnector(firstVexMeasure.getVFStave(), lastVexMeasure.getVFStave(), VF.StaveConnector.type.BRACKET, depth);
    }
    /**
     * Render the bracket using the given backend
     * @param ctx Render Vexflow context
     */
    draw(ctx) {
        // Draw vexflow brace. This sets the positions inside the connector.
        if (this.Visible) {
            this.vexflowConnector.setContext(ctx).draw();
        }
        // Set bounding box
        const con = this.vexflowConnector;
        // First line in first stave
        const topY = con.top_stave.getYForLine(0);
        // Last line in last stave
        const botY = con.bottom_stave.getYForLine(con.bottom_stave.getNumLines() - 1) + con.thickness;
        // Set bounding box position and size in OSMD units
        this.PositionAndShape.AbsolutePosition.x = (con.top_stave.getX() - 2 + con.x_shift) / VexFlowMusicSheetDrawer_1.unitInPixels;
        this.PositionAndShape.AbsolutePosition.y = topY / VexFlowMusicSheetDrawer_1.unitInPixels;
        this.PositionAndShape.Size.height = (botY - topY) / VexFlowMusicSheetDrawer_1.unitInPixels;
        this.PositionAndShape.Size.width = 12 / VexFlowMusicSheetDrawer_1.unitInPixels; // width is always 12 -> vexflow implementation
    }
    /**
     * Adds a connector between two staves
     *
     * @param {Stave} stave1: First stave
     * @param {Stave} stave2: Second stave
     * @param {Flow.StaveConnector.type} type: Type of connector
     */
    addConnector(stave1, stave2, type, depth) {
        this.vexflowConnector = new VF.StaveConnector(stave1, stave2)
            .setType(type)
            .setXShift(depth * -5);
    }
}
exports.VexFlowInstrumentBracket = VexFlowInstrumentBracket;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts":
/*!**************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StavePositionEnum = exports.VexFlowMeasure = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const GraphicalMeasure_1 = __webpack_require__(/*! ../GraphicalMeasure */ "./src/MusicalScore/Graphical/GraphicalMeasure.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ../SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const ClefInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const Beam_1 = __webpack_require__(/*! ../../VoiceData/Beam */ "./src/MusicalScore/VoiceData/Beam.ts");
var NoteSubGroup = VF.NoteSubGroup;
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const RepetitionInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/RepetitionInstruction */ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts");
const SystemLinePosition_1 = __webpack_require__(/*! ../SystemLinePosition */ "./src/MusicalScore/Graphical/SystemLinePosition.ts");
const VoiceEntry_1 = __webpack_require__(/*! ../../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const VexFlowVoiceEntry_1 = __webpack_require__(/*! ./VexFlowVoiceEntry */ "./src/MusicalScore/Graphical/VexFlow/VexFlowVoiceEntry.ts");
const Fraction_1 = __webpack_require__(/*! ../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const EngravingRules_1 = __webpack_require__(/*! ../EngravingRules */ "./src/MusicalScore/Graphical/EngravingRules.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const NoteType_1 = __webpack_require__(/*! ../../VoiceData/NoteType */ "./src/MusicalScore/VoiceData/NoteType.ts");
// type StemmableNote = VF.StemmableNote;
class VexFlowMeasure extends GraphicalMeasure_1.GraphicalMeasure {
    constructor(staff, sourceMeasure, staffLine) {
        super(staff, sourceMeasure, staffLine);
        this.isTabMeasure = false;
        /** octaveOffset according to active clef */
        this.octaveOffset = 3;
        /** The VexFlow Voices in the measure */
        this.vfVoices = {};
        /** The VexFlow Ties in the measure */
        this.vfTies = [];
        /** The repetition instructions given as words or symbols (coda, dal segno..) */
        this.vfRepetitionWords = [];
        this.hasMetronomeMark = false;
        /** VexFlow StaveConnectors (vertical lines) */
        this.connectors = [];
        /** Intermediate object to construct beams */
        this.beams = {};
        /** Beams created by (optional) autoBeam function. */
        this.autoVfBeams = [];
        /** Beams of tuplet notes created by (optional) autoBeam function. */
        this.autoTupletVfBeams = [];
        /** VexFlow Beams */
        this.vfbeams = {};
        /** Intermediate object to construct tuplets */
        this.tuplets = {};
        /** VexFlow Tuplets */
        this.vftuplets = {};
        this.minimumStaffEntriesWidth = -1;
        /*
         * There is no case in which `staffLine === undefined && sourceMeasure === undefined` holds.
         * Hence, it is not necessary to specify an `else` case.
         * One can verify this through a usage search for this constructor.
         */
        if (staffLine) {
            this.rules = staffLine.ParentMusicSystem.rules;
        }
        else if (sourceMeasure) {
            this.rules = sourceMeasure.Rules;
        }
        else {
            this.rules = new EngravingRules_1.EngravingRules();
        }
        this.resetLayout();
    }
    // Sets the absolute coordinates of the VFStave on the canvas
    setAbsoluteCoordinates(x, y) {
        this.stave.setX(x).setY(y);
    }
    /**
     * Reset all the geometric values and parameters of this measure and put it in an initialized state.
     * This is needed to evaluate a measure a second time by system builder.
     */
    resetLayout() {
        // Take into account some space for the begin and end lines of the stave
        // Will be changed when repetitions will be implemented
        //this.beginInstructionsWidth = 20 / UnitInPixels;
        //this.endInstructionsWidth = 20 / UnitInPixels;
        // TODO save beginning and end bar type, set these again after new stave.
        this.stave = new VF.Stave(0, 0, 0, {
            fill_style: this.rules.StaffLineColor,
            space_above_staff_ln: 0,
            space_below_staff_ln: 0
        });
        if (this.InitiallyActiveClef) {
            this.stave.clef = VexFlowConverter_1.VexFlowConverter.Clef(this.InitiallyActiveClef).type;
            // Vexflow sets stave.clef to treble by default. It needs this info e.g. for key signature accidentals on new key sig
        }
        this.stave.MeasureNumber = this.MeasureNumber; // for debug info. vexflow automatically uses stave.measure for rendering measure numbers
        // also see VexFlowMusicSheetDrawer.drawSheet() for some other vexflow default value settings (like default font scale)
        this.hasMetronomeMark = false;
        if (this.ParentStaff) {
            this.setLineNumber(this.ParentStaff.StafflineCount);
        }
        // constructor sets beginning and end bar type to standard
        this.stave.setBegBarType(VF.Barline.type.NONE); // technically not correct, but we'd need to set the next measure's beginning bar type
        if (this.parentSourceMeasure && this.parentSourceMeasure.endingBarStyleEnum === SystemLinesEnum_1.SystemLinesEnum.None) {
            // fix for vexflow ignoring ending barline style after new stave, apparently
            this.stave.setEndBarType(VF.Barline.type.NONE);
        }
        // the correct bar types seem to be set later
        this.updateInstructionWidth();
    }
    clean() {
        this.vfTies.length = 0;
        this.connectors = [];
        // Clean up instructions
        this.resetLayout();
    }
    /**
     * returns the x-width (in units) of a given measure line {SystemLinesEnum}.
     * @param line
     * @returns the x-width in osmd units
     */
    getLineWidth(line) {
        switch (line) {
            // return 0 for the normal lines, as the line width will be considered at the updateInstructionWidth() method using the stavemodifiers.
            // case SystemLinesEnum.SingleThin:
            //     return 5.0 / unitInPixels;
            // case SystemLinesEnum.DoubleThin:
            //     return 5.0 / unitInPixels;
            //     case SystemLinesEnum.ThinBold:
            //     return 5.0 / unitInPixels;
            // but just add a little extra space for repetitions (cosmetics):
            case SystemLinesEnum_1.SystemLinesEnum.BoldThinDots:
            case SystemLinesEnum_1.SystemLinesEnum.DotsThinBold:
                return 10.0 / VexFlowMusicSheetDrawer_1.unitInPixels;
            case SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots: // :||: = repeat ends, another repeat starts in next measure
                return 10.0 / VexFlowMusicSheetDrawer_1.unitInPixels + this.rules.RepeatEndStartPadding;
            default:
                return 0;
        }
    }
    /**
     * adds the given clef to the begin of the measure.
     * This has to update/increase BeginInstructionsWidth.
     * @param clef
     */
    addClefAtBegin(clef) {
        if (!this.rules.RenderClefsAtBeginningOfStaffline) {
            return;
        }
        this.octaveOffset = clef.OctaveOffset;
        if (clef.ClefType === ClefInstruction_1.ClefEnum.TAB) {
            this.stave.addClef("tab", undefined, undefined, undefined);
        }
        else {
            const vfclef = VexFlowConverter_1.VexFlowConverter.Clef(clef, "default");
            this.stave.addClef(vfclef.type, vfclef.size, vfclef.annotation, VF.StaveModifier.Position.BEGIN);
        }
        this.updateInstructionWidth();
    }
    /**
     * Sets the number of stafflines that are rendered, so that they are centered properly
     * @param lineNumber
     */
    setLineNumber(lineNumber) {
        if (lineNumber !== 5) {
            if (lineNumber === 0) {
                this.stave.setNumLines(0);
                this.stave.getBottomLineY = function () {
                    return this.getYForLine(this.options.num_lines);
                };
            }
            else if (lineNumber === 1) {
                // VF.Stave.setNumLines hides all but the top line.
                // this is better
                this.stave.options.line_config = [
                    { visible: false },
                    { visible: false },
                    { visible: true },
                    { visible: false },
                    { visible: false },
                ];
                //quick fix to see if this matters for calculation. Doesn't seem to
                this.stave.getBottomLineY = function () {
                    return this.getYForLine(2);
                };
                //lines (which isn't this case here)
                //this.stave.options.num_lines = parseInt(lines, 10);
            }
            else if (lineNumber === 2) {
                this.stave.options.line_config = [
                    { visible: false },
                    { visible: false },
                    { visible: true },
                    { visible: true },
                    { visible: false },
                ];
                this.stave.getBottomLineY = function () {
                    return this.getYForLine(3);
                };
            }
            else if (lineNumber === 3) {
                this.stave.options.line_config = [
                    { visible: false },
                    { visible: true },
                    { visible: true },
                    { visible: true },
                    { visible: false },
                ];
                this.stave.getBottomLineY = function () {
                    return this.getYForLine(2);
                };
            }
            else {
                this.stave.setNumLines(lineNumber);
                this.stave.getBottomLineY = function () {
                    return this.getYForLine(this.options.num_lines);
                };
            }
        }
    }
    /**
     * adds the given key to the begin of the measure.
     * This has to update/increase BeginInstructionsWidth.
     * @param currentKey the new valid key.
     * @param previousKey the old cancelled key. Needed to show which accidentals are not valid any more.
     * @param currentClef the valid clef. Needed to put the accidentals on the right y-positions.
     */
    addKeyAtBegin(currentKey, previousKey, currentClef) {
        var _a;
        if (!this.rules.RenderKeySignatures || !this.ShowKeySignature) {
            return;
        }
        if (((_a = this.parentSourceMeasure) === null || _a === void 0 ? void 0 : _a.isReducedToMultiRest) && !this.rules.MultipleRestMeasureAddKeySignature) {
            return;
        }
        this.stave.setKeySignature(VexFlowConverter_1.VexFlowConverter.keySignature(currentKey), VexFlowConverter_1.VexFlowConverter.keySignature(previousKey), undefined);
        this.updateInstructionWidth();
    }
    /**
     * adds the given rhythm to the begin of the measure.
     * This has to update/increase BeginInstructionsWidth.
     * @param rhythm
     */
    addRhythmAtBegin(rhythm) {
        const timeSig = VexFlowConverter_1.VexFlowConverter.TimeSignature(rhythm);
        this.stave.addModifier(timeSig, VF.StaveModifier.Position.BEGIN);
        if (!this.ShowTimeSignature) {
            // extends Element is missing from class StaveModifier in DefinitelyTyped definitions, so setStyle isn't found
            timeSig.setStyle({ fillStyle: "#00000000" }); // transparent. requires VexflowPatch
        }
        this.updateInstructionWidth();
    }
    /**
     * adds the given clef to the end of the measure.
     * This has to update/increase EndInstructionsWidth.
     * @param clef
     */
    addClefAtEnd(clef, visible = true) {
        const vfclef = VexFlowConverter_1.VexFlowConverter.Clef(clef, "small");
        if (!visible && this.stave.endClef) {
            return; // don't overwrite existing clef with invisible clef
        }
        this.stave.setEndClef(vfclef.type, vfclef.size, vfclef.annotation);
        for (const modifier of this.stave.getModifiers()) {
            if (!visible) {
                // make clef invisible in vexflow. (only rendered to correct layout and staffentry boundingbox)
                if (modifier.getCategory() === "clefs" && modifier.getPosition() === VF.StaveModifier.Position.END) {
                    if (modifier.type === vfclef.type) { // any = VF.Clef
                        const transparentStyle = "#12345600";
                        const originalStyle = modifier.getStyle();
                        if (originalStyle) {
                            modifier.originalStrokeStyle = originalStyle.strokeStyle;
                            modifier.originalFillStyle = originalStyle.fillStyle;
                        }
                        modifier.setStyle({ strokeStyle: transparentStyle, fillStyle: transparentStyle });
                    }
                }
            }
            else {
                // reset invisible style
                const originalStrokeStyle = modifier.originalStrokeStyle;
                const originalFillStyle = modifier.originalFillStyle;
                if (modifier.getStyle()) {
                    if (originalStrokeStyle && originalFillStyle) {
                        modifier.getStyle().strokeStyle = originalStrokeStyle;
                        modifier.getStyle().fillStyle = originalFillStyle;
                    }
                    else {
                        modifier.getStyle().strokeStyle = null;
                        modifier.getStyle().fillStyle = null;
                    }
                }
            }
        }
        this.parentSourceMeasure.hasEndClef = true;
        return this.updateInstructionWidth();
    }
    // Render initial line is whether or not to render a single bar line at the beginning (if the repeat line we are drawing is
    // offset by a clef, for ex.)
    addMeasureLine(lineType, linePosition, renderInitialLine = true) {
        switch (linePosition) {
            case SystemLinePosition_1.SystemLinePosition.MeasureBegin:
                switch (lineType) {
                    case SystemLinesEnum_1.SystemLinesEnum.BoldThinDots:
                        //customize the barline draw function if repeat is beginning of system
                        if (!renderInitialLine) {
                            this.stave.modifiers[0].draw = function (stave) {
                                stave.checkContext();
                                this.setRendered();
                                switch (this.type) {
                                    case VF.Barline.type.SINGLE:
                                        this.drawVerticalBar(stave, this.x, false);
                                        break;
                                    case VF.Barline.type.DOUBLE:
                                        this.drawVerticalBar(stave, this.x, true);
                                        break;
                                    case VF.Barline.type.END:
                                        this.drawVerticalEndBar(stave, this.x);
                                        break;
                                    case VF.Barline.type.REPEAT_BEGIN:
                                        //removed the vertical line rendering that exists in VF codebase
                                        this.drawRepeatBar(stave, this.x, true);
                                        break;
                                    case VF.Barline.type.REPEAT_END:
                                        this.drawRepeatBar(stave, this.x, false);
                                        break;
                                    case VF.Barline.type.REPEAT_BOTH:
                                        this.drawRepeatBar(stave, this.x, false);
                                        this.drawRepeatBar(stave, this.x, true);
                                        break;
                                    default:
                                        // Default is NONE, so nothing to draw
                                        break;
                                }
                            };
                        }
                        this.stave.setBegBarType(VF.Barline.type.REPEAT_BEGIN);
                        break;
                    default:
                        //this.stave.setBegBarType(VF.Barline.type.NONE); // not necessary, it seems
                        break;
                }
                break;
            case SystemLinePosition_1.SystemLinePosition.MeasureEnd:
                switch (lineType) {
                    case SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots:
                        this.stave.setEndBarType(VF.Barline.type.REPEAT_BOTH);
                        break;
                    case SystemLinesEnum_1.SystemLinesEnum.DotsThinBold:
                        this.stave.setEndBarType(VF.Barline.type.REPEAT_END);
                        break;
                    case SystemLinesEnum_1.SystemLinesEnum.DoubleThin:
                        this.stave.setEndBarType(VF.Barline.type.DOUBLE);
                        break;
                    case SystemLinesEnum_1.SystemLinesEnum.ThinBold:
                        this.stave.setEndBarType(VF.Barline.type.END);
                        break;
                    case SystemLinesEnum_1.SystemLinesEnum.None:
                        this.stave.setEndBarType(VF.Barline.type.NONE);
                        break;
                    // TODO: Add support for additional Barline types when VexFlow supports them
                    default:
                        break;
                }
                break;
            default:
                break;
        }
    }
    /**
     * Adds a measure number to the top left corner of the measure
     * This method is not used currently in favor of the calculateMeasureNumberPlacement
     * method in the MusicSheetCalculator.ts
     */
    addMeasureNumber() {
        const text = this.MeasureNumber.toString();
        const position = StavePositionEnum.ABOVE; //VF.StaveModifier.Position.ABOVE;
        this.stave.setText(text, position, {
            justification: 1,
            shift_x: 0,
            shift_y: 0,
        });
    }
    addWordRepetition(repetitionInstruction) {
        let instruction;
        let position = VF.StaveModifier.Position.END;
        const xShift = this.beginInstructionsWidth;
        switch (repetitionInstruction.type) {
            case RepetitionInstruction_1.RepetitionInstructionEnum.Segno:
                // create Segno Symbol:
                instruction = VF.Repetition.type.SEGNO_LEFT;
                position = VF.StaveModifier.Position.LEFT;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.Coda:
                // create Coda Symbol:
                instruction = VF.Repetition.type.CODA_LEFT;
                position = VF.StaveModifier.Position.LEFT;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DaCapo:
                instruction = VF.Repetition.type.DC;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegno:
                instruction = VF.Repetition.type.DS;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.Fine:
                instruction = VF.Repetition.type.FINE;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.ToCoda:
                instruction = VF.Repetition.type.TO_CODA;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlFine:
                instruction = VF.Repetition.type.DC_AL_FINE;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlCoda:
                instruction = VF.Repetition.type.DC_AL_CODA;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlFine:
                instruction = VF.Repetition.type.DS_AL_FINE;
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda:
                instruction = VF.Repetition.type.DS_AL_CODA;
                break;
            default:
                break;
        }
        if (instruction) {
            const repetition = new VF.Repetition(instruction, xShift, -this.rules.RepetitionSymbolsYOffset);
            repetition.xShiftAsPercentOfStaveWidth = this.rules.RepetitionEndInstructionXShiftAsPercentOfStaveWidth;
            this.stave.addModifier(repetition, position);
            return;
        }
        this.addVolta(repetitionInstruction);
    }
    addVolta(repetitionInstruction) {
        var _a;
        let voltaType = VF.Volta.type.BEGIN;
        if (repetitionInstruction.type === RepetitionInstruction_1.RepetitionInstructionEnum.Ending) {
            switch (repetitionInstruction.alignment) {
                case RepetitionInstruction_1.AlignmentType.Begin:
                    if (this.parentSourceMeasure.endsRepetitionEnding()) {
                        voltaType = VF.Volta.type.BEGIN_END;
                    }
                    else {
                        voltaType = VF.Volta.type.BEGIN;
                    }
                    break;
                case RepetitionInstruction_1.AlignmentType.End:
                    if (this.parentSourceMeasure.beginsRepetitionEnding()) {
                        //voltaType = VF.Volta.type.BEGIN_END;
                        // don't add BEGIN_END volta a second time:
                        return;
                    }
                    else {
                        voltaType = VF.Volta.type.END;
                    }
                    break;
                default:
                    break;
            }
            const skyBottomLineCalculator = this.ParentStaffLine.SkyBottomLineCalculator;
            //Because of loss of accuracy when sampling (see SkyBottomLineCalculator.updateInRange), measures tend to overlap
            //This causes getSkyLineMinInRange to return an incorrect min value (one from the previous measure, which has been modified)
            //We need to offset the end of what we are measuring by a bit to prevent this, otherwise volta pairs step up
            const start = this.PositionAndShape.AbsolutePosition.x + this.PositionAndShape.BorderMarginLeft + 0.4;
            const end = Math.max(this.PositionAndShape.AbsolutePosition.x + this.PositionAndShape.BorderMarginRight, start + 0.4);
            //2 unit gap, since volta is positioned from y center it seems.
            //This prevents cases where the volta is rendered over another element
            const skylineMinForMeasure = skyBottomLineCalculator.getSkyLineMinInRange(start, end) - 2;
            //-6 OSMD units is the 0 value that the volta is placed on. .1 extra so the skyline goes above the volta
            //instead of on the line itself
            let newSkylineValueForMeasure = -6.1 + this.rules.VoltaOffset;
            let vexFlowVoltaHeight = this.rules.VoltaOffset;
            //EngravingRules default offset is 2.5, can be user set.
            //2.5 gives us a good default value to work with.
            //if we calculate that the minimum skyline allowed by elements is above the default volta position, need to adjust volta up further
            if (skylineMinForMeasure < newSkylineValueForMeasure) {
                const skylineDifference = skylineMinForMeasure - newSkylineValueForMeasure;
                vexFlowVoltaHeight += skylineDifference;
                newSkylineValueForMeasure = skylineMinForMeasure;
            }
            let prevMeasure = undefined;
            //if we already have a volta in the prev measure, should match it's height, or if we are higher, it should match ours
            //find previous sibling measure that may have volta
            const currentMeasureNumber = this.parentSourceMeasure.MeasureNumber;
            for (let i = 0; i < this.ParentStaffLine.Measures.length; i++) {
                const tempMeasure = this.ParentStaffLine.Measures[i];
                if (!(tempMeasure instanceof VexFlowMeasure)) {
                    // can happen for MultipleRestMeasures
                    continue;
                }
                if (tempMeasure.MeasureNumber === currentMeasureNumber - 1 ||
                    tempMeasure.MeasureNumber + ((_a = tempMeasure.parentSourceMeasure) === null || _a === void 0 ? void 0 : _a.multipleRestMeasures) === currentMeasureNumber) {
                    //We found the previous top measure
                    prevMeasure = tempMeasure;
                }
            }
            if (prevMeasure) {
                const prevStaveModifiers = prevMeasure.stave.getModifiers();
                for (let i = 0; i < prevStaveModifiers.length; i++) {
                    const nextStaveModifier = prevStaveModifiers[i];
                    if (nextStaveModifier.hasOwnProperty("volta")) {
                        const prevskyBottomLineCalculator = prevMeasure.ParentStaffLine.SkyBottomLineCalculator;
                        const prevStart = prevMeasure.PositionAndShape.AbsolutePosition.x + prevMeasure.PositionAndShape.BorderMarginLeft + 0.4;
                        const prevEnd = Math.max(prevMeasure.PositionAndShape.AbsolutePosition.x + prevMeasure.PositionAndShape.BorderMarginRight, prevStart + 0.4);
                        const prevMeasureSkyline = prevskyBottomLineCalculator.getSkyLineMinInRange(prevStart, prevEnd);
                        //if prev skyline is higher, use it
                        if (prevMeasureSkyline <= newSkylineValueForMeasure) {
                            const skylineDifference = prevMeasureSkyline - newSkylineValueForMeasure;
                            vexFlowVoltaHeight += skylineDifference;
                            newSkylineValueForMeasure = prevMeasureSkyline;
                        }
                        else { //otherwise, we are higher. Need to adjust prev
                            nextStaveModifier.y_shift = vexFlowVoltaHeight * VexFlowMusicSheetDrawer_1.unitInPixels;
                            prevMeasure.ParentStaffLine.SkyBottomLineCalculator.updateSkyLineInRange(prevStart, prevEnd, newSkylineValueForMeasure);
                        }
                    }
                }
            }
            //convert to VF units (pixels)
            vexFlowVoltaHeight *= 10;
            this.stave.setVoltaType(voltaType, repetitionInstruction.endingIndices[0], vexFlowVoltaHeight);
            skyBottomLineCalculator.updateSkyLineInRange(start, end, newSkylineValueForMeasure);
        }
    }
    /**
     * Sets the overall x-width of the measure.
     * @param width
     */
    setWidth(width) {
        super.setWidth(width);
        // Set the width of the VF.Stave
        this.stave.setWidth(width * VexFlowMusicSheetDrawer_1.unitInPixels);
        // Force the width of the Begin Instructions
        //this.stave.setNoteStartX(this.beginInstructionsWidth * UnitInPixels);
    }
    /**
     * This method is called after the StaffEntriesScaleFactor has been set.
     * Here the final x-positions of the staff entries have to be set.
     * (multiply the minimal positions with the scaling factor, considering the BeginInstructionsWidth)
     */
    layoutSymbols() {
        // vexflow does the x-layout
    }
    /**
     * Draw this measure on a VexFlow CanvasContext
     * @param ctx
     */
    draw(ctx) {
        // Draw stave lines
        this.stave.setContext(ctx).draw();
        // Draw all voices
        for (const voiceID in this.vfVoices) {
            if (this.vfVoices.hasOwnProperty(voiceID)) {
                ctx.save();
                this.vfVoices[voiceID].draw(ctx, this.stave);
                ctx.restore();
                // this.vfVoices[voiceID].tickables.forEach(t => t.getBoundingBox().draw(ctx));
                // this.vfVoices[voiceID].tickables.forEach(t => t.getBoundingBox().draw(ctx));
            }
        }
        // Draw beams
        for (const voiceID in this.vfbeams) {
            if (this.vfbeams.hasOwnProperty(voiceID)) {
                for (const beam of this.vfbeams[voiceID]) {
                    beam.setContext(ctx).draw();
                }
            }
        }
        // Draw auto-generated beams from Beam.generateBeams()
        if (this.autoVfBeams) {
            for (const beam of this.autoVfBeams) {
                beam.setContext(ctx).draw();
            }
        }
        if (!this.isTabMeasure || this.rules.TupletNumbersInTabs) {
            if (this.autoTupletVfBeams) {
                for (const beam of this.autoTupletVfBeams) {
                    beam.setContext(ctx).draw();
                }
            }
            // Draw tuplets
            for (const voiceID in this.vftuplets) {
                if (this.vftuplets.hasOwnProperty(voiceID)) {
                    for (let i = 0; i < this.tuplets[voiceID].length; i++) {
                        const tuplet = this.tuplets[voiceID][i][0];
                        const vftuplet = this.vftuplets[voiceID][i];
                        if (!tuplet.RenderTupletNumber) {
                            // (vftuplet as any).numerator_glyphs_stored = [...(vftuplet as any).numerator_glyphs];
                            // (vftuplet as any).numerator_glyphs = [];
                            vftuplet.RenderTupletNumber = false;
                        }
                        else {
                            // issue with restoring glyphs (version without vexflowpatch): need to deep copy array, otherwise the reference is overwritten
                            // (vftuplet as any).numerator_glyphs = [...(vftuplet as any).numerator_glyphs_stored];
                            // (vftuplet as any).numerator_glyphs_stored = undefined;
                            vftuplet.RenderTupletNumber = true;
                        }
                        vftuplet.setContext(ctx).draw();
                    }
                }
            }
        }
        // Draw ties
        for (const tie of this.vfTies) {
            if (tie instanceof VF.TabSlide) {
                return; // rendered later in VexFlowMusicSheetDrawer.drawGlissandi(), when all staffline measures are rendered
            }
            tie.setContext(ctx);
            tie.draw();
        }
        // Draw vertical lines
        for (const connector of this.connectors) {
            connector.setContext(ctx).draw();
        }
        this.correctNotePositions();
    }
    // this currently formats multiple measures, see VexFlowMusicSheetCalculator.formatMeasures()
    format() {
        // If this is the first stave in the vertical measure, call the format
        // method to set the width of all the voices
        if (this.formatVoices) {
            // set the width of the voices to the current measure width:
            // (The width of the voices does not include the instructions (StaveModifiers))
            this.formatVoices((this.PositionAndShape.Size.width - this.beginInstructionsWidth - this.endInstructionsWidth) * VexFlowMusicSheetDrawer_1.unitInPixels, this);
        }
        // this.correctNotePositions(); // now done at the end of draw()
    }
    // correct position / bounding box (note.setIndex() needs to have been called)
    correctNotePositions() {
        if (this.isTabMeasure) {
            return;
        }
        for (const voice of this.getVoicesWithinMeasure()) {
            for (const ve of voice.VoiceEntries) {
                for (const note of ve.Notes) {
                    const gNote = this.rules.GNote(note);
                    if (!(gNote === null || gNote === void 0 ? void 0 : gNote.vfnote)) { // can happen were invisible, then multi rest measure. TODO fix multi rest measure not removed
                        return;
                    }
                    const vfnote = gNote.vfnote[0];
                    // if (note.isRest()) // TODO somehow there are never rest notes in ve.Notes
                    // TODO also, grace notes are not included here, need to be fixed as well. (and a few triple beamed notes in Bach Air)
                    let relPosY = 0;
                    if (gNote.parentVoiceEntry.parentVoiceEntry.StemDirection === VoiceEntry_1.StemDirectionType.Up && gNote.vfnote[0].getDuration() !== "w") {
                        relPosY += 3.5; // about 3.5 lines too high. this seems to be related to the default stem height, not actual stem height.
                        // alternate calculation using actual stem height: somehow wildly varying.
                        // if (ve.Notes.length > 1) {
                        //     const stemHeight: number = vfnote.getStem().getHeight();
                        //     // relPosY += shortFactor * stemHeight / unitInPixels - 3.5;
                        //     relPosY += stemHeight / unitInPixels - 3.5; // for some reason this varies in its correctness between similar notes
                        // } else {
                        //     relPosY += 3.5;
                        // }
                    }
                    else {
                        relPosY += 0.5; // center-align bbox
                    }
                    const line = -gNote.notehead(vfnote).line; // vexflow y direction is opposite of osmd's
                    relPosY += line + gNote.parentVoiceEntry.notes.last().notehead().line; // don't move for first note: - (-vexline)
                    gNote.PositionAndShape.RelativePosition.y = relPosY;
                }
            }
        }
    }
    /**
     * Returns all the voices that are present in this measure
     */
    getVoicesWithinMeasure() {
        const voices = [];
        for (const gse of this.staffEntries) {
            for (const gve of gse.graphicalVoiceEntries) {
                if (voices.indexOf(gve.parentVoiceEntry.ParentVoice) === -1) {
                    voices.push(gve.parentVoiceEntry.ParentVoice);
                }
            }
        }
        return voices;
    }
    /**
     * Returns all the graphicalVoiceEntries of a given Voice.
     * @param voice the voice for which the graphicalVoiceEntries shall be returned.
     */
    getGraphicalVoiceEntriesPerVoice(voice) {
        const voiceEntries = [];
        for (const gse of this.staffEntries) {
            for (const gve of gse.graphicalVoiceEntries) {
                if (gve.parentVoiceEntry.ParentVoice === voice) {
                    voiceEntries.push(gve);
                }
            }
        }
        return voiceEntries;
    }
    /**
     * Finds the gaps between the existing notes within a measure.
     * Problem here is, that the graphicalVoiceEntry does not exist yet and
     * that Tied notes are not present in the normal voiceEntries.
     * To handle this, calculation with absolute timestamps is needed.
     * And the graphical notes have to be analysed directly (and not the voiceEntries, as it actually should be -> needs refactoring)
     * @param voice the voice for which the ghost notes shall be searched.
     */
    getRestFilledVexFlowStaveNotesPerVoice(voice) {
        let latestVoiceTimestamp;
        let gvEntries = this.getGraphicalVoiceEntriesPerVoice(voice);
        for (let idx = 0; idx < gvEntries.length; idx++) {
            const gve = gvEntries[idx];
            const gNotesStartTimestamp = gve.notes[0].sourceNote.getAbsoluteTimestamp();
            // find the voiceEntry end timestamp:
            let gNotesEndTimestamp = new Fraction_1.Fraction();
            for (const graphicalNote of gve.notes) {
                const noteEnd = Fraction_1.Fraction.plus(graphicalNote.sourceNote.getAbsoluteTimestamp(), graphicalNote.sourceNote.Length);
                if (gNotesEndTimestamp.lt(noteEnd)) {
                    gNotesEndTimestamp = noteEnd;
                }
            }
            // check if this voice has just been found the first time:
            if (!latestVoiceTimestamp) {
                // if this voice is new, check for a gap from measure start to the start of the current voice entry:
                const gapFromMeasureStart = Fraction_1.Fraction.minus(gNotesStartTimestamp, this.parentSourceMeasure.AbsoluteTimestamp);
                if (gapFromMeasureStart.RealValue > 0) {
                    loglevel_1.default.trace(`Ghost Found at start (measure ${this.MeasureNumber})`); // happens too often for valid measures to be logged to debug
                    const ghostGves = this.createGhostGves(gapFromMeasureStart);
                    gvEntries.splice(0, 0, ...ghostGves);
                    idx += ghostGves.length;
                }
            }
            else {
                // get the length of the empty space between notes:
                const inBetweenLength = Fraction_1.Fraction.minus(gNotesStartTimestamp, latestVoiceTimestamp);
                if (inBetweenLength.RealValue > 0) {
                    loglevel_1.default.trace(`Ghost Found in between (measure ${this.MeasureNumber})`); // happens too often for valid measures to be logged to debug
                    const ghostGves = this.createGhostGves(inBetweenLength);
                    // add elements before current element:
                    gvEntries.splice(idx, 0, ...ghostGves);
                    // and increase index, as we added elements:
                    idx += ghostGves.length;
                }
            }
            // finally set the latest timestamp of this voice to the end timestamp of the longest note in the current voiceEntry:
            latestVoiceTimestamp = gNotesEndTimestamp;
        }
        const measureEndTimestamp = Fraction_1.Fraction.plus(this.parentSourceMeasure.AbsoluteTimestamp, this.parentSourceMeasure.Duration);
        const restLength = Fraction_1.Fraction.minus(measureEndTimestamp, latestVoiceTimestamp);
        if (restLength.RealValue > 0) {
            // fill the gap with a rest ghost note
            // starting from lastFraction
            // with length restLength:
            loglevel_1.default.trace(`Ghost Found at end (measure ${this.MeasureNumber})`); // happens too often for valid measures to be logged to debug
            const ghostGves = this.createGhostGves(restLength);
            gvEntries = gvEntries.concat(ghostGves);
        }
        return gvEntries;
    }
    createGhostGves(duration) {
        const vfghosts = VexFlowConverter_1.VexFlowConverter.GhostNotes(duration);
        const ghostGves = [];
        for (const vfghost of vfghosts) {
            const ghostGve = new VexFlowVoiceEntry_1.VexFlowVoiceEntry(undefined, undefined, this.rules);
            ghostGve.vfStaveNote = vfghost;
            ghostGves.push(ghostGve);
        }
        return ghostGves;
    }
    /**
     * Add a note to a beam
     * @param graphicalNote
     * @param beam
     */
    handleBeam(graphicalNote, beam) {
        const voiceID = graphicalNote.sourceNote.ParentVoiceEntry.ParentVoice.VoiceId;
        let beams = this.beams[voiceID];
        if (!beams) {
            beams = this.beams[voiceID] = [];
        }
        let data;
        for (const mybeam of beams) {
            if (mybeam[0] === beam) {
                data = mybeam;
            }
        }
        if (!data) {
            data = [beam, []];
            beams.push(data);
        }
        const parent = graphicalNote.parentVoiceEntry;
        if (data[1].indexOf(parent) < 0) {
            data[1].push(parent);
        }
    }
    handleTuplet(graphicalNote, tuplet) {
        const voiceID = graphicalNote.sourceNote.ParentVoiceEntry.ParentVoice.VoiceId;
        tuplet = graphicalNote.sourceNote.NoteTuplet;
        let tuplets = this.tuplets[voiceID];
        if (!tuplets) {
            tuplets = this.tuplets[voiceID] = [];
        }
        let currentTupletBuilder;
        for (const t of tuplets) {
            if (t[0] === tuplet) {
                currentTupletBuilder = t;
            }
        }
        if (!currentTupletBuilder) {
            currentTupletBuilder = [tuplet, []];
            tuplets.push(currentTupletBuilder);
        }
        const parent = graphicalNote.parentVoiceEntry;
        if (currentTupletBuilder[1].indexOf(parent) < 0) {
            currentTupletBuilder[1].push(parent);
        }
    }
    /**
     * Complete the creation of VexFlow Beams in this measure
     */
    finalizeBeams() {
        // The following line resets the created Vex.Flow Beams and
        // created them brand new. Is this needed? And more importantly,
        // should the old beams be removed manually by the notes?
        this.vfbeams = {};
        const beamedNotes = []; // already beamed notes, will be ignored by this.autoBeamNotes()
        for (const voiceID in this.beams) {
            if (this.beams.hasOwnProperty(voiceID)) {
                let vfbeams = this.vfbeams[voiceID];
                if (!vfbeams) {
                    vfbeams = this.vfbeams[voiceID] = [];
                }
                for (const beam of this.beams[voiceID]) {
                    let beamHasQuarterNoteOrLonger = false;
                    for (const note of beam[0].Notes) {
                        if (note.Length.RealValue >= new Fraction_1.Fraction(1, 4).RealValue
                            // check whether the note has a TypeLength that's also not suitable for a beam (bigger than an eigth)
                            && (!note.TypeLength || note.TypeLength.RealValue > 0.125)) {
                            beamHasQuarterNoteOrLonger = true;
                            break;
                        }
                    }
                    if (beamHasQuarterNoteOrLonger) {
                        loglevel_1.default.debug("Beam between note >= quarter, likely tremolo, currently unsupported. continuing.");
                        continue;
                    }
                    const notes = [];
                    const psBeam = beam[0];
                    const voiceEntries = beam[1];
                    let autoStemBeam = true;
                    for (const gve of voiceEntries) {
                        if (gve.parentVoiceEntry.ParentVoice === psBeam.Notes[0].ParentVoiceEntry.ParentVoice) {
                            autoStemBeam = gve.parentVoiceEntry.WantedStemDirection === VoiceEntry_1.StemDirectionType.Undefined;
                            // if (psBeam.Notes[0].NoteTuplet) {
                            //     autoStemBeam = true;
                            //     // this fix seemed temporarily necessary for tuplets with beams, see test_drum_tublet_beams
                            //     break;
                            // }
                        }
                    }
                    let isGraceBeam = false;
                    let beamColor;
                    const stemColors = [];
                    for (const entry of voiceEntries) {
                        const note = entry.vfStaveNote;
                        if (note) {
                            notes.push(note);
                            beamedNotes.push(note);
                        }
                        if (entry.parentVoiceEntry.IsGrace) {
                            isGraceBeam = true;
                        }
                        if (entry.parentVoiceEntry.StemColor && this.rules.ColoringEnabled) {
                            stemColors.push(entry.parentVoiceEntry.StemColor);
                        }
                    }
                    if (notes.length > 1) {
                        const vfBeam = new VF.Beam(notes, autoStemBeam);
                        if (isGraceBeam) {
                            // smaller beam, as in Vexflow.GraceNoteGroup.beamNotes()
                            vfBeam.render_options.beam_width = 3;
                            vfBeam.render_options.partial_beam_length = 4;
                        }
                        if (stemColors.length >= 2 && this.rules.ColorBeams) {
                            beamColor = stemColors[0];
                            for (const stemColor of stemColors) {
                                if (stemColor !== beamColor) {
                                    beamColor = undefined;
                                    break;
                                }
                            }
                            vfBeam.setStyle({ fillStyle: beamColor, strokeStyle: beamColor });
                        }
                        if (this.rules.FlatBeams) {
                            vfBeam.render_options.flat_beams = true;
                            vfBeam.render_options.flat_beam_offset = this.rules.FlatBeamOffset;
                            vfBeam.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;
                        }
                        vfbeams.push(vfBeam);
                    }
                    else {
                        loglevel_1.default.debug("Warning! Beam with no notes!");
                    }
                }
            }
        }
        if (this.rules.AutoBeamNotes) {
            this.autoBeamNotes(beamedNotes); // try to autobeam notes except those that are already beamed (beamedNotes).
        }
    }
    /** Automatically creates beams for notes except beamedNotes, using Vexflow's Beam.generateBeams().
     *  Takes options from this.rules.AutoBeamOptions.
     * @param beamedNotes notes that will not be autobeamed (usually because they are already beamed)
     */
    autoBeamNotes(beamedNotes) {
        if (!this.rules.AutoBeamTabs && this.isTabMeasure) { // could also use an option tabBeams to disable beams there completely
            return;
        }
        let autoBeamId = 60; // start with 60 to not collide (ids) with xml beams
        let notesToAutoBeam = [];
        let consecutiveBeamableNotes = [];
        let currentTuplet;
        let tupletNotesToAutoBeam = [];
        this.autoTupletVfBeams = [];
        const separateAutoBeams = []; // a set of separate beams, each having a set of notes (StemmableNote[]).
        this.autoVfBeams = []; // final VF.Beams will be pushed/collected into this
        let timeSignature = this.parentSourceMeasure.ActiveTimeSignature;
        if (!timeSignature) { // this doesn't happen in OSMD, but maybe in a SourceGenerator
            timeSignature = this.parentSourceMeasure.Duration; // suboptimal, can be 1/1 in a 4/4 time signature
        }
        /*if (this.parentSourceMeasure.FirstInstructionsStaffEntries[0]) {
            for (const instruction of this.parentSourceMeasure.FirstInstructionsStaffEntries[0].Instructions) {
                if (instruction instanceof RhythmInstruction) { // there is not always a RhythmInstruction, but this could be useful some time.
                    timeSignature = (instruction as RhythmInstruction).Rhythm;
                }
            }
        }*/
        for (const staffEntry of this.staffEntries) {
            for (const gve of staffEntry.graphicalVoiceEntries) {
                const vfStaveNote = gve.vfStaveNote;
                const gNote = gve.notes[0]; // TODO check for all notes within the graphical voice entry
                const linkedNote = {
                    vfStaveNote: vfStaveNote,
                    sourceNote: gNote.sourceNote
                };
                const isOnBeat = staffEntry.relInMeasureTimestamp.isOnBeat(timeSignature);
                const haveTwoOrMoreNotesToBeamAlready = consecutiveBeamableNotes.length >= 2;
                //const noteIsQuarterOrLonger: boolean = gNote.sourceNote.Length.CompareTo(new Fraction(1, 4)) >= 0; // trusting Fraction class, no float check
                const noteIsQuarterOrLonger = gNote.sourceNote.Length.RealValue - new Fraction_1.Fraction(1, 4).RealValue > (-Fraction_1.Fraction.FloatInaccuracyTolerance);
                const unbeamableNote = gve.parentVoiceEntry.IsGrace || // don't beam grace notes
                    noteIsQuarterOrLonger || // don't beam quarter or longer notes
                    beamedNotes.contains(vfStaveNote);
                if (unbeamableNote || isOnBeat) { // end beam
                    if (haveTwoOrMoreNotesToBeamAlready) {
                        // if we already have at least 2 notes to beam, beam them. don't beam notes surrounded by quarter notes etc.
                        for (const note of consecutiveBeamableNotes) {
                            notesToAutoBeam.push(note); // "flush" already beamed notes
                        }
                        separateAutoBeams.push(notesToAutoBeam.slice()); // copy array, otherwise this beam gets the next notes of next beam later
                        notesToAutoBeam = []; // reset notesToAutoBeam, otherwise the next beam includes the previous beam's notes too
                    }
                    consecutiveBeamableNotes = []; // reset notes to beam
                    if (unbeamableNote) {
                        continue;
                    }
                    // else, note will be pushed to consecutiveBeamableNotes after tuplet check, also for note on new beat
                }
                // create beams for tuplets separately
                const noteTuplet = gve.notes[0].sourceNote.NoteTuplet;
                if (noteTuplet) {
                    // check if there are quarter notes or longer in the tuplet, then don't beam.
                    // (TODO: check for consecutiveBeamableNotes inside tuplets like for non-tuplet notes above
                    //   e.g quarter eigth eighth -> beam the two eigth notes)
                    let tupletContainsUnbeamableNote = false;
                    for (const notes of noteTuplet.Notes) {
                        for (const note of notes) {
                            //const stavenote: StemmableNote = (gve as VexFlowVoiceEntry).vfStaveNote;
                            //console.log("note " + note.ToString() + ", stavenote type: " + stavenote.getNoteType());
                            if (note.NoteTypeXml >= NoteType_1.NoteType.QUARTER || // quarter note or longer: don't beam
                                // TODO: don't take Note (head) type from XML, but from current model,
                                //   so that rendering can react dynamically to changes compared to the XML.
                                //   however, taking the note length as fraction is tricky because of tuplets.
                                //   a quarter in a triplet has length < quarter, but quarter note head, which Vexflow can't beam.
                                note.ParentVoiceEntry.IsGrace ||
                                note.isRest() && !this.rules.AutoBeamOptions.beam_rests) {
                                tupletContainsUnbeamableNote = true;
                                break;
                            }
                        }
                        if (tupletContainsUnbeamableNote) {
                            break;
                        }
                    }
                    if (!currentTuplet) {
                        currentTuplet = noteTuplet;
                    }
                    else {
                        if (currentTuplet !== noteTuplet) { // new tuplet, finish old one
                            if (tupletNotesToAutoBeam.length > 1) {
                                const beamVFNotes = [];
                                for (const tupletNote of tupletNotesToAutoBeam) {
                                    beamVFNotes.push(tupletNote.vfStaveNote);
                                }
                                const vfBeam = new VF.Beam(beamVFNotes, true);
                                if (this.rules.FlatBeams) {
                                    vfBeam.render_options.flat_beams = true;
                                    vfBeam.render_options.flat_beam_offset = this.rules.FlatBeamOffset;
                                    vfBeam.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;
                                }
                                this.autoTupletVfBeams.push(vfBeam);
                                const osmdBeam = new Beam_1.Beam(autoBeamId++);
                                osmdBeam.AutoGenerated = true;
                                for (const tupletNote of tupletNotesToAutoBeam) {
                                    osmdBeam.addNoteToBeam(tupletNote.sourceNote);
                                }
                            }
                            tupletNotesToAutoBeam = [];
                            currentTuplet = noteTuplet;
                        }
                    }
                    if (!tupletContainsUnbeamableNote) {
                        tupletNotesToAutoBeam.push(linkedNote);
                    }
                    continue;
                }
                else {
                    currentTuplet = undefined;
                }
                consecutiveBeamableNotes.push(linkedNote); // also happens on new beat
            }
        }
        if (tupletNotesToAutoBeam.length >= 2) {
            const beamVFNotes = [];
            for (const tupletNote of tupletNotesToAutoBeam) {
                beamVFNotes.push(tupletNote.vfStaveNote);
            }
            const vfBeam = new VF.Beam(beamVFNotes, true);
            if (this.rules.FlatBeams) {
                vfBeam.render_options.flat_beams = true;
                vfBeam.render_options.flat_beam_offset = this.rules.FlatBeamOffset;
                vfBeam.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;
            }
            this.autoTupletVfBeams.push(vfBeam);
            const osmdBeam = new Beam_1.Beam(autoBeamId++);
            osmdBeam.AutoGenerated = true;
            for (const tupletNote of tupletNotesToAutoBeam) {
                osmdBeam.addNoteToBeam(tupletNote.sourceNote);
            }
        }
        if (consecutiveBeamableNotes.length >= 2) {
            for (const note of consecutiveBeamableNotes) {
                notesToAutoBeam.push(note);
            }
            separateAutoBeams.push(notesToAutoBeam);
        }
        // create options for generateBeams
        const autoBeamOptions = this.rules.AutoBeamOptions;
        const generateBeamOptions = {
            beam_middle_only: autoBeamOptions.beam_middle_rests_only,
            beam_rests: autoBeamOptions.beam_rests,
            maintain_stem_directions: autoBeamOptions.maintain_stem_directions,
        };
        if (autoBeamOptions.groups && autoBeamOptions.groups.length) {
            const groups = [];
            for (const fraction of autoBeamOptions.groups) {
                groups.push(new VF.Fraction(fraction[0], fraction[1]));
            }
            generateBeamOptions.groups = groups;
        }
        for (const notesForSeparateAutoBeam of separateAutoBeams) {
            const beamVFNotes = [];
            for (const linkedNote of notesForSeparateAutoBeam) {
                beamVFNotes.push(linkedNote.vfStaveNote);
            }
            const newBeams = VF.Beam.generateBeams(beamVFNotes, generateBeamOptions);
            for (const vfBeam of newBeams) {
                if (this.rules.FlatBeams) {
                    vfBeam.render_options.flat_beams = true;
                    vfBeam.render_options.flat_beam_offset = this.rules.FlatBeamOffset;
                    vfBeam.render_options.flat_beam_offset_per_beam = this.rules.FlatBeamOffsetPerBeam;
                }
                this.autoVfBeams.push(vfBeam);
            }
        }
    }
    /**
     * Complete the creation of VexFlow Tuplets in this measure
     */
    finalizeTuplets() {
        // The following line resets the created VF Tuplets and
        // created them brand new. Is this needed? And more importantly,
        // should the old tuplets be removed manually from the notes?
        this.vftuplets = {};
        for (const voiceID in this.tuplets) {
            if (this.tuplets.hasOwnProperty(voiceID)) {
                let vftuplets = this.vftuplets[voiceID];
                if (!vftuplets) {
                    vftuplets = this.vftuplets[voiceID] = [];
                }
                for (const tupletBuilder of this.tuplets[voiceID]) {
                    const tupletStaveNotes = [];
                    const tupletVoiceEntries = tupletBuilder[1];
                    for (const tupletVoiceEntry of tupletVoiceEntries) {
                        tupletStaveNotes.push((tupletVoiceEntry).vfStaveNote);
                    }
                    if (tupletStaveNotes.length > 1) {
                        const tuplet = tupletBuilder[0];
                        const notesOccupied = tuplet.Notes[0][0].NormalNotes;
                        const bracketed = tuplet.shouldBeBracketed(this.rules.TupletsBracketedUseXMLValue, this.rules.TupletsBracketed, this.rules.TripletsBracketed);
                        let location = VF.Tuplet.LOCATION_TOP;
                        if (tuplet.tupletLabelNumberPlacement === AbstractExpression_1.PlacementEnum.Below) {
                            location = VF.Tuplet.LOCATION_BOTTOM;
                        }
                        const vftuplet = new VF.Tuplet(tupletStaveNotes, {
                            bracketed: bracketed,
                            location: location,
                            notes_occupied: notesOccupied,
                            num_notes: tuplet.TupletLabelNumber,
                            ratioed: this.rules.TupletsRatioed,
                        });
                        vftuplets.push(vftuplet);
                    }
                    else {
                        loglevel_1.default.debug("Warning! Tuplet with no notes! Trying to ignore, but this is a serious problem.");
                    }
                }
            }
        }
    }
    layoutStaffEntry(graphicalStaffEntry) {
        return;
    }
    graphicalMeasureCreatedCalculations() {
        let graceSlur;
        let graceGVoiceEntriesBefore = [];
        const graveGVoiceEntriesAdded = [];
        for (const graphicalStaffEntry of this.staffEntries) {
            graceSlur = false;
            graceGVoiceEntriesBefore = [];
            // create vex flow Stave Notes:
            for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
                if (gve.parentVoiceEntry.IsGrace) {
                    // save grace notes for the next non-grace note
                    graceGVoiceEntriesBefore.push(gve);
                    graveGVoiceEntriesAdded.push(gve);
                    if (!graceSlur) {
                        graceSlur = gve.parentVoiceEntry.GraceSlur;
                    }
                    continue;
                }
                gve.vfStaveNote = VexFlowConverter_1.VexFlowConverter.StaveNote(gve);
                //if (!gve.notes[0].sourceNote.PrintObject) {
                // note can now also be added as StaveNote instead of GhostNote, because we set it to transparent
                // previous method: add as GhostNote instead of StaveNote. Can cause formatting issues if critical notes are missing in the measure
                // don't render note. add ghost note, otherwise Vexflow can have issues with layouting when voices not complete.
                //(gve as VexFlowVoiceEntry).vfStaveNote = VexFlowConverter.GhostNote(gve.notes[0].sourceNote.Length);
                //graceGVoiceEntriesBefore = []; // if note is not rendered, its grace notes shouldn't be rendered, might need to be removed
                //continue;
                //}
                if (graceGVoiceEntriesBefore.length > 0) {
                    // add grace notes that came before this main note to a GraceNoteGroup in Vexflow, attached to the main note
                    const graceNotes = [];
                    for (let i = 0; i < graceGVoiceEntriesBefore.length; i++) {
                        const gveGrace = graceGVoiceEntriesBefore[i];
                        //if (gveGrace.notes[0].sourceNote.PrintObject) {
                        // grace notes should generally be rendered independently of main note instead of skipped if main note is invisible
                        // could be an option to make grace notes transparent if main note is transparent. set grace notes' PrintObject to false then.
                        gveGrace.GraceSlash = gveGrace.parentVoiceEntry.GraceNoteSlash;
                        if (i > 0) {
                            gveGrace.GraceSlash = false; // without this, Vexflow draws multiple grace slashes, which looks wrong.
                        }
                        const vfStaveNote = VexFlowConverter_1.VexFlowConverter.StaveNote(gveGrace);
                        gveGrace.vfStaveNote = vfStaveNote;
                        graceNotes.push(vfStaveNote);
                    }
                    const graceNoteGroup = new VF.GraceNoteGroup(graceNotes, graceSlur);
                    graceNoteGroup.spacing = this.rules.GraceNoteGroupXMargin * 10;
                    gve.vfStaveNote.addModifier(0, graceNoteGroup);
                    graceGVoiceEntriesBefore = [];
                }
            }
        }
        // remaining grace notes at end of measure, turned into stand-alone grace notes:
        if (graceGVoiceEntriesBefore.length > 0) {
            for (const graceGve of graceGVoiceEntriesBefore) {
                graceGve.vfStaveNote = VexFlowConverter_1.VexFlowConverter.StaveNote(graceGve);
                graceGve.parentVoiceEntry.GraceAfterMainNote = true;
            }
        }
        // const t0: number = performance.now();
        this.finalizeBeams();
        // const t1: number = performance.now();
        // console.log("Call to finalizeBeams in VexFlowMeasure took " + (t1 - t0) + " milliseconds.");
        this.finalizeTuplets();
        const voices = this.getVoicesWithinMeasure();
        // Calculate offsets for fingerings
        if (this.rules.RenderFingerings) {
            for (const graphicalStaffEntry of this.staffEntries) {
                graphicalStaffEntry.setModifierXOffsets();
            }
        }
        for (const voice of voices) {
            if (!voice) {
                continue;
            }
            //const isMainVoice: boolean = !(voice instanceof LinkedVoice);
            // add a vexFlow voice for this voice:
            this.vfVoices[voice.VoiceId] = new VF.Voice({
                beat_value: this.parentSourceMeasure.ActiveTimeSignature.Denominator,
                num_beats: this.parentSourceMeasure.ActiveTimeSignature.Numerator,
                resolution: VF.RESOLUTION,
            }).setMode(VF.Voice.Mode.SOFT);
            const restFilledEntries = this.getRestFilledVexFlowStaveNotesPerVoice(voice);
            // .sort((a,b) => a.)
            // create vex flow voices and add tickables to it:
            for (const voiceEntry of restFilledEntries) {
                if (voiceEntry.parentVoiceEntry) {
                    if (voiceEntry.parentVoiceEntry.IsGrace && !voiceEntry.parentVoiceEntry.GraceAfterMainNote) {
                        continue;
                    }
                }
                const vexFlowVoiceEntry = voiceEntry;
                if (vexFlowVoiceEntry.vfStaveNote.getTicks().denominator === 0) {
                    vexFlowVoiceEntry.vfStaveNote.getTicks().denominator = 1;
                    // TODO not sure why the ticks aren't calculated correctly, see #1073
                    // if denominator === 0, addTickable() below goes into an infinite loop.
                    // continue; // previous solution, but can lead to valid notes skipped, further problems, see #1073
                }
                if (voiceEntry.notes.length === 0 || !voiceEntry.notes[0] || !voiceEntry.notes[0].sourceNote.PrintObject) {
                    // GhostNote, don't add modifiers like in-measure clefs
                    this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);
                    continue;
                }
                // check for in-measure clefs:
                // Note: we used to only add clefs in main voice to not add them twice,
                //   but there are many legitimate clefs e.g. in 2nd voices, and this doesn't seem to cause issues.
                //if (isMainVoice) {
                const vfse = vexFlowVoiceEntry.parentStaffEntry;
                if (vfse && vfse.vfClefBefore) {
                    // add clef as NoteSubGroup so that we get modifier layouting
                    const clefModifier = new NoteSubGroup([vfse.vfClefBefore]);
                    // The cast is necesary because...vexflow -> see types
                    if (vexFlowVoiceEntry.vfStaveNote.getCategory && vexFlowVoiceEntry.vfStaveNote.getCategory() === "stavenotes") {
                        // GhostNotes and other StemmableNotes don't have this function
                        vexFlowVoiceEntry.vfStaveNote.addModifier(0, clefModifier);
                    }
                }
                // add fingering
                if (voiceEntry.parentVoiceEntry && this.rules.RenderFingerings) {
                    if (this.rules.FingeringPosition === AbstractExpression_1.PlacementEnum.Left ||
                        this.rules.FingeringPosition === AbstractExpression_1.PlacementEnum.Right) {
                        this.createFingerings(voiceEntry);
                    } // else created in MusicSheetCalculater.createFingerings() as Labels
                    this.createStringNumber(voiceEntry);
                }
                // add Arpeggio
                this.createArpeggio(voiceEntry);
                this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);
            }
        }
        this.setStemDirectionFromVexFlow();
        for (const graceGVoiceEntry of graveGVoiceEntriesAdded) {
            this.createFingerings(graceGVoiceEntry);
            this.createStringNumber(graceGVoiceEntry);
            this.createArpeggio(graceGVoiceEntry);
        }
        this.createArticulations();
        this.createOrnaments();
    }
    createArpeggio(voiceEntry) {
        if (voiceEntry.parentVoiceEntry && voiceEntry.parentVoiceEntry.Arpeggio) {
            const arpeggio = voiceEntry.parentVoiceEntry.Arpeggio;
            // TODO right now our arpeggio object has all arpeggio notes from arpeggios across all voices.
            // see VoiceGenerator. Doesn't matter for Vexflow for now though
            if (voiceEntry.notes && voiceEntry.notes.length > 1) {
                const type = VexFlowConverter_1.VexFlowConverter.StrokeTypeFromArpeggioType(arpeggio.type);
                const stroke = new VF.Stroke(type, {
                    all_voices: this.rules.ArpeggiosGoAcrossVoices
                    // default: false. This causes arpeggios to always go across all voices, which is often unwanted.
                    // also, this can cause infinite height of stroke, see #546
                });
                //if (arpeggio.notes.length === vexFlowVoiceEntry.notes.length) { // different workaround for endless y bug
                if (this.rules.RenderArpeggios) {
                    voiceEntry.vfStaveNote.addStroke(0, stroke);
                }
            }
            else {
                loglevel_1.default.debug(`[OSMD] arpeggio in measure ${this.MeasureNumber} could not be drawn.
                voice entry had less than two notes, arpeggio is likely between voice entries, not currently supported in Vexflow.`);
                // TODO: create new arpeggio with all the arpeggio's notes (arpeggio.notes), perhaps with GhostNotes in a new vfStaveNote. not easy.
            }
        }
    }
    /**
     * Copy the stem directions chosen by VexFlow to the StemDirection variable of the graphical notes
     */
    setStemDirectionFromVexFlow() {
        //if StemDirection was not set then read out what VexFlow has chosen
        for (const vfStaffEntry of this.staffEntries) {
            for (const gVoiceEntry of vfStaffEntry.graphicalVoiceEntries) {
                for (const gnote of gVoiceEntry.notes) {
                    const vfnote = gnote.vfnote;
                    if (!vfnote || !vfnote[0]) {
                        continue;
                    }
                    const vfStemDir = vfnote[0].getStemDirection();
                    switch (vfStemDir) {
                        case (VF.Stem.UP):
                            gVoiceEntry.parentVoiceEntry.StemDirection = VoiceEntry_1.StemDirectionType.Up;
                            break;
                        case (VF.Stem.DOWN):
                            gVoiceEntry.parentVoiceEntry.StemDirection = VoiceEntry_1.StemDirectionType.Down;
                            break;
                        default:
                    }
                }
            }
        }
    }
    /**
     * Create the articulations for all notes of the current staff entry
     */
    createArticulations() {
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            // create vex flow articulation:
            const graphicalVoiceEntries = graphicalStaffEntry.graphicalVoiceEntries;
            for (const gve of graphicalVoiceEntries) {
                const vfStaveNote = gve.vfStaveNote;
                VexFlowConverter_1.VexFlowConverter.generateArticulations(vfStaveNote, gve.notes[0], this.rules);
            }
        }
    }
    /**
     * Create the ornaments for all notes of the current staff entry
     */
    createOrnaments() {
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            const gvoices = graphicalStaffEntry.graphicalVoiceEntries;
            for (const voiceID in gvoices) {
                if (gvoices.hasOwnProperty(voiceID)) {
                    const vfStaveNote = gvoices[voiceID].vfStaveNote;
                    const ornamentContainer = gvoices[voiceID].notes[0].sourceNote.ParentVoiceEntry.OrnamentContainer;
                    if (ornamentContainer) {
                        VexFlowConverter_1.VexFlowConverter.generateOrnaments(vfStaveNote, ornamentContainer);
                    }
                }
            }
        }
    }
    createFingerings(voiceEntry) {
        const vexFlowVoiceEntry = voiceEntry;
        let numberOfFingerings = 0;
        // count total number of fingerings
        for (const note of voiceEntry.notes) {
            const fingering = note.sourceNote.Fingering;
            if (fingering) {
                numberOfFingerings++;
            }
        }
        let fingeringIndex = -1;
        for (const note of voiceEntry.notes) {
            const fingering = note.sourceNote.Fingering;
            if (!fingering) {
                fingeringIndex++;
                continue;
            }
            fingeringIndex++; // 0 for first fingering
            let fingeringPosition = this.rules.FingeringPosition;
            //currently only relevant for grace notes, because we create other fingerings above/below in MusicSheetCalculator.createFingerings
            if (this.rules.FingeringPositionGrace === AbstractExpression_1.PlacementEnum.AboveOrBelow) {
                //if (this.rules.FingeringPosition === PlacementEnum.AboveOrBelow) {
                if (this.isUpperStaffOfInstrument()) { // (e.g. piano right hand)
                    fingeringPosition = AbstractExpression_1.PlacementEnum.Above;
                }
                else if (this.isLowerStaffOfInstrument()) {
                    fingeringPosition = AbstractExpression_1.PlacementEnum.Below;
                }
            }
            if (fingering.placement !== AbstractExpression_1.PlacementEnum.NotYetDefined) {
                fingeringPosition = fingering.placement;
            }
            let offsetX = this.rules.FingeringOffsetX;
            let modifierPosition; // VF.Stavemodifier.Position
            switch (fingeringPosition) {
                default:
                case AbstractExpression_1.PlacementEnum.Left:
                    modifierPosition = VF.StaveModifier.Position.LEFT;
                    offsetX -= note.baseFingeringXOffset * VexFlowMusicSheetDrawer_1.unitInPixels;
                    break;
                case AbstractExpression_1.PlacementEnum.Right:
                    modifierPosition = VF.StaveModifier.Position.RIGHT;
                    offsetX += note.baseFingeringXOffset * VexFlowMusicSheetDrawer_1.unitInPixels;
                    break;
                case AbstractExpression_1.PlacementEnum.Above:
                    modifierPosition = VF.StaveModifier.Position.ABOVE;
                    break;
                case AbstractExpression_1.PlacementEnum.Below:
                    modifierPosition = VF.StaveModifier.Position.BELOW;
                    break;
                case AbstractExpression_1.PlacementEnum.NotYetDefined: // automatic fingering placement, could be more complex/customizable
                    const sourceStaff = voiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff;
                    if (voiceEntry.notes.length > 1 || voiceEntry.parentStaffEntry.graphicalVoiceEntries.length > 1) {
                        modifierPosition = VF.StaveModifier.Position.LEFT;
                    }
                    else if (sourceStaff.idInMusicSheet === 0) {
                        modifierPosition = VF.StaveModifier.Position.ABOVE;
                        fingeringPosition = AbstractExpression_1.PlacementEnum.Above;
                    }
                    else {
                        modifierPosition = VF.StaveModifier.Position.BELOW;
                        fingeringPosition = AbstractExpression_1.PlacementEnum.Below;
                    }
            }
            const fretFinger = new VF.FretHandFinger(fingering.value);
            fretFinger.setPosition(modifierPosition);
            fretFinger.setOffsetX(offsetX);
            if (fingeringPosition === AbstractExpression_1.PlacementEnum.Above || fingeringPosition === AbstractExpression_1.PlacementEnum.Below) {
                const offsetYSign = fingeringPosition === AbstractExpression_1.PlacementEnum.Above ? -1 : 1; // minus y is up
                const ordering = fingeringPosition === AbstractExpression_1.PlacementEnum.Above ? fingeringIndex :
                    numberOfFingerings - 1 - fingeringIndex; // reverse order for fingerings below staff
                if (this.rules.FingeringInsideStafflines && numberOfFingerings > 1) { // y-shift for single fingering is ok
                    // experimental, bounding boxes wrong for fretFinger above/below, better would be creating Labels
                    // set y-shift. vexflow fretfinger simply places directly above/below note
                    const perFingeringShift = fretFinger.getWidth() / 2;
                    const shiftCount = numberOfFingerings * 2.5;
                    fretFinger.setOffsetY(offsetYSign * (ordering + shiftCount) * perFingeringShift);
                }
                else if (!this.rules.FingeringInsideStafflines) { // use StringNumber for placement above/below stafflines
                    const stringNumber = new VF.StringNumber(fingering.value);
                    stringNumber.radius = 0; // hack to remove the circle around the number
                    stringNumber.setPosition(modifierPosition);
                    stringNumber.setOffsetY(offsetYSign * ordering * stringNumber.getWidth() * 2 / 3);
                    // Vexflow made a mess with the addModifier signature that changes through each class so we just cast to any :(
                    vexFlowVoiceEntry.vfStaveNote.addModifier(fingeringIndex, stringNumber);
                    continue;
                }
            }
            // if (vexFlowVoiceEntry.vfStaveNote.getCategory() === "tabnotes") {
            // TODO this doesn't work yet for tabnotes. don't add fingering for tabs for now.
            // vexFlowVoiceEntry.vfStaveNote.addModifier(fretFinger, fingeringIndex);
            // Vexflow made a mess with the addModifier signature that changes through each class so we just cast to any :(
            vexFlowVoiceEntry.vfStaveNote.addModifier(fingeringIndex, fretFinger);
        }
    }
    createStringNumber(voiceEntry) {
        if (!this.rules.RenderStringNumbersClassical) {
            return;
        }
        const vexFlowVoiceEntry = voiceEntry;
        voiceEntry.notes.forEach((note, stringIndex) => {
            const stringInstruction = note.sourceNote.StringInstruction;
            if (stringInstruction) {
                let stringNumber = stringInstruction.value;
                switch (stringNumber) {
                    case "1":
                        stringNumber = "I";
                        break;
                    case "2":
                        stringNumber = "II";
                        break;
                    case "3":
                        stringNumber = "III";
                        break;
                    case "4":
                        stringNumber = "IV";
                        break;
                    case "5":
                        stringNumber = "V";
                        break;
                    case "6":
                        stringNumber = "VI";
                        break;
                    default:
                    // log.warn("stringNumber > 6 not supported"); // TODO do we need to support more?
                    // leave stringNumber as is, warning not really necessary
                }
                const vfStringNumber = new VF.StringNumber(stringNumber);
                // Remove circle from string number. Not needed for
                // disambiguation from fingerings since we use Roman
                // Numerals for RenderStringNumbersClassical
                vfStringNumber.radius = 0;
                const offsetY = -this.rules.StringNumberOffsetY;
                // if (note.sourceNote.halfTone < 50) { // place string number a little higher for notes with ledger lines below staff
                //     // TODO also check for treble clef (adjust for viola, cello, etc)
                //     offsetY += 10;
                // }
                if (voiceEntry.notes.length > 1 || voiceEntry.parentStaffEntry.graphicalVoiceEntries.length > 1) {
                    vfStringNumber.setOffsetX(note.baseStringNumberXOffset * 13);
                    vfStringNumber.setPosition(VF.Modifier.Position.RIGHT);
                }
                else {
                    vfStringNumber.setPosition(VF.Modifier.Position.ABOVE);
                }
                vfStringNumber.setOffsetY(offsetY);
                vexFlowVoiceEntry.vfStaveNote.addModifier(stringIndex, vfStringNumber); // see addModifier() above
            }
        });
    }
    /**
     * Creates a line from 'top' to this measure, of type 'lineType'
     * @param top
     * @param lineType
     */
    lineTo(top, lineType) {
        const connector = new VF.StaveConnector(top.getVFStave(), this.stave);
        connector.setType(lineType);
        this.connectors.push(connector);
    }
    /**
     * Return the VexFlow Stave corresponding to this graphicalMeasure
     * @returns {VF.Stave}
     */
    getVFStave() {
        return this.stave;
    }
    /**
     * After re-running the formatting on the VexFlow Stave, update the
     * space needed by Instructions (in VexFlow: StaveModifiers)
     */
    updateInstructionWidth() {
        let vfBeginInstructionsWidth = 0;
        let vfEndInstructionsWidth = 0;
        const modifiers = this.stave.getModifiers();
        for (const mod of modifiers) {
            if (mod.getPosition() === StavePositionEnum.BEGIN) { //VF.StaveModifier.Position.BEGIN) {
                vfBeginInstructionsWidth += mod.getWidth() + mod.getPadding(undefined);
            }
            else if (mod.getPosition() === StavePositionEnum.END) { //VF.StaveModifier.Position.END) {
                vfEndInstructionsWidth += mod.getWidth() + mod.getPadding(undefined);
            }
        }
        this.beginInstructionsWidth = (vfBeginInstructionsWidth !== null && vfBeginInstructionsWidth !== void 0 ? vfBeginInstructionsWidth : 0) / VexFlowMusicSheetDrawer_1.unitInPixels;
        this.endInstructionsWidth = (vfEndInstructionsWidth !== null && vfEndInstructionsWidth !== void 0 ? vfEndInstructionsWidth : 0) / VexFlowMusicSheetDrawer_1.unitInPixels;
    }
    addStaveTie(stavetie, graphicalTie) {
        this.vfTies.push(stavetie);
        graphicalTie.vfTie = stavetie;
        if (graphicalTie.Tie.TieDirection === AbstractExpression_1.PlacementEnum.Below) {
            stavetie.setDirection(1);
        }
    }
}
exports.VexFlowMeasure = VexFlowMeasure;
// Gives the position of the Stave - replaces the function get Position() in the description of class StaveModifier in vexflow.d.ts
// The latter gave an error because function cannot be defined in the class descriptions in vexflow.d.ts
var StavePositionEnum;
(function (StavePositionEnum) {
    StavePositionEnum[StavePositionEnum["LEFT"] = 1] = "LEFT";
    StavePositionEnum[StavePositionEnum["RIGHT"] = 2] = "RIGHT";
    StavePositionEnum[StavePositionEnum["ABOVE"] = 3] = "ABOVE";
    StavePositionEnum[StavePositionEnum["BELOW"] = 4] = "BELOW";
    StavePositionEnum[StavePositionEnum["BEGIN"] = 5] = "BEGIN";
    StavePositionEnum[StavePositionEnum["END"] = 6] = "END";
})(StavePositionEnum = exports.StavePositionEnum || (exports.StavePositionEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowMultiRestMeasure.ts":
/*!***********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowMultiRestMeasure.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowMultiRestMeasure = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const VexFlowMeasure_1 = __webpack_require__(/*! ./VexFlowMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts");
// type StemmableNote = VF.StemmableNote;
/** A GraphicalMeasure drawing a multiple-rest measure in Vexflow.
 *  Mostly copied from VexFlowMeasure.
 *  Even though most of those functions aren't needed, apparently you can't remove the layoutStaffEntry function.
 */
class VexFlowMultiRestMeasure extends VexFlowMeasure_1.VexFlowMeasure {
    constructor(staff, sourceMeasure = undefined, staffLine = undefined) {
        super(staff, sourceMeasure, staffLine);
        this.minimumStaffEntriesWidth = -1;
        /*
         * There is no case in which `staffLine === undefined && sourceMeasure === undefined` holds.
         * Hence, it is not necessary to specify an `else` case.
         * One can verify this through a usage search for this constructor.
         */
        if (staffLine) {
            this.rules = staffLine.ParentMusicSystem.rules;
        }
        else if (sourceMeasure) {
            this.rules = sourceMeasure.Rules;
        }
        this.resetLayout();
        this.multiRestElement = new VF.MultiMeasureRest(sourceMeasure.multipleRestMeasures, {
        // number_line: 3
        });
    }
    /**
     * Draw this measure on a VexFlow CanvasContext
     * @param ctx
     */
    draw(ctx) {
        // Draw stave lines
        this.stave.setContext(ctx).draw();
        this.multiRestElement.setStave(this.stave);
        this.multiRestElement.setContext(ctx);
        this.multiRestElement.draw();
        // Draw vertical lines
        for (const connector of this.connectors) {
            connector.setContext(ctx).draw();
        }
    }
    format() {
        // like most of the following methods, not necessary / can be simplified for MultiRestMeasure.
    }
    /**
     * Returns all the voices that are present in this measure
     */
    getVoicesWithinMeasure() {
        return []; // we should still return a list here, not undefined, i guess.
    }
    /**
     * Returns all the graphicalVoiceEntries of a given Voice.
     * @param voice the voice for which the graphicalVoiceEntries shall be returned.
     */
    getGraphicalVoiceEntriesPerVoice(voice) {
        return [];
    }
    /**
     * Finds the gaps between the existing notes within a measure.
     * Problem here is, that the graphicalVoiceEntry does not exist yet and
     * that Tied notes are not present in the normal voiceEntries.
     * To handle this, calculation with absolute timestamps is needed.
     * And the graphical notes have to be analysed directly (and not the voiceEntries, as it actually should be -> needs refactoring)
     * @param voice the voice for which the ghost notes shall be searched.
     */
    getRestFilledVexFlowStaveNotesPerVoice(voice) {
        return [];
    }
    /**
     * Add a note to a beam
     * @param graphicalNote
     * @param beam
     */
    handleBeam(graphicalNote, beam) {
        return;
    }
    handleTuplet(graphicalNote, tuplet) {
        return;
    }
    /**
     * Complete the creation of VexFlow Beams in this measure
     */
    finalizeBeams() {
        return;
    }
    /**
     * Complete the creation of VexFlow Tuplets in this measure
     */
    finalizeTuplets() {
        return;
    }
    // this needs to exist, for some reason, or it won't be found, even though i can't find the usage.
    layoutStaffEntry(graphicalStaffEntry) {
        return;
    }
    graphicalMeasureCreatedCalculations() {
        return;
    }
    /**
     * Create the articulations for all notes of the current staff entry
     */
    createArticulations() {
        return;
    }
    /**
     * Create the ornaments for all notes of the current staff entry
     */
    createOrnaments() {
        return;
    }
    createFingerings(voiceEntry) {
        return;
    }
    /**
     * Return the VexFlow Stave corresponding to this graphicalMeasure
     * @returns {VF.Stave}
     */
    getVFStave() {
        return this.stave;
    }
}
exports.VexFlowMultiRestMeasure = VexFlowMultiRestMeasure;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator.ts":
/*!***************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowMusicSheetCalculator = void 0;
const MusicSheetCalculator_1 = __webpack_require__(/*! ../MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
const VexFlowGraphicalSymbolFactory_1 = __webpack_require__(/*! ./VexFlowGraphicalSymbolFactory */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalSymbolFactory.ts");
const SkyBottomLineBatchCalculator_1 = __webpack_require__(/*! ../SkyBottomLineBatchCalculator */ "./src/MusicalScore/Graphical/SkyBottomLineBatchCalculator.ts");
const GraphicalTie_1 = __webpack_require__(/*! ../GraphicalTie */ "./src/MusicalScore/Graphical/GraphicalTie.ts");
const VexFlowTextMeasurer_1 = __webpack_require__(/*! ./VexFlowTextMeasurer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowTextMeasurer.ts");
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const GraphicalLyricEntry_1 = __webpack_require__(/*! ../GraphicalLyricEntry */ "./src/MusicalScore/Graphical/GraphicalLyricEntry.ts");
const GraphicalLyricWord_1 = __webpack_require__(/*! ../GraphicalLyricWord */ "./src/MusicalScore/Graphical/GraphicalLyricWord.ts");
const VexFlowOctaveShift_1 = __webpack_require__(/*! ./VexFlowOctaveShift */ "./src/MusicalScore/Graphical/VexFlow/VexFlowOctaveShift.ts");
const VexFlowInstantaneousDynamicExpression_1 = __webpack_require__(/*! ./VexFlowInstantaneousDynamicExpression */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstantaneousDynamicExpression.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const GraphicalSlur_1 = __webpack_require__(/*! ../GraphicalSlur */ "./src/MusicalScore/Graphical/GraphicalSlur.ts");
const VexFlowContinuousDynamicExpression_1 = __webpack_require__(/*! ./VexFlowContinuousDynamicExpression */ "./src/MusicalScore/Graphical/VexFlow/VexFlowContinuousDynamicExpression.ts");
const InstantaneousTempoExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/InstantaneousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts");
const OSMDOptions_1 = __webpack_require__(/*! ../../../OpenSheetMusicDisplay/OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
const VexflowStafflineNoteCalculator_1 = __webpack_require__(/*! ./VexflowStafflineNoteCalculator */ "./src/MusicalScore/Graphical/VexFlow/VexflowStafflineNoteCalculator.ts");
const NoteType_1 = __webpack_require__(/*! ../../VoiceData/NoteType */ "./src/MusicalScore/VoiceData/NoteType.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const Expressions_1 = __webpack_require__(/*! ../../VoiceData/Expressions */ "./src/MusicalScore/VoiceData/Expressions/index.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ../SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const VexFlowPedal_1 = __webpack_require__(/*! ./VexFlowPedal */ "./src/MusicalScore/Graphical/VexFlow/VexFlowPedal.ts");
const MusicSymbol_1 = __webpack_require__(/*! ../MusicSymbol */ "./src/MusicalScore/Graphical/MusicSymbol.ts");
const CollectionUtil_1 = __webpack_require__(/*! ../../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
const VexFlowGlissando_1 = __webpack_require__(/*! ./VexFlowGlissando */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGlissando.ts");
class VexFlowMusicSheetCalculator extends MusicSheetCalculator_1.MusicSheetCalculator {
    constructor(rules) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super();
        this.beamsNeedUpdate = false;
        this.rules = rules;
        MusicSheetCalculator_1.MusicSheetCalculator.symbolFactory = new VexFlowGraphicalSymbolFactory_1.VexFlowGraphicalSymbolFactory();
        MusicSheetCalculator_1.MusicSheetCalculator.TextMeasurer = new VexFlowTextMeasurer_1.VexFlowTextMeasurer(this.rules);
        MusicSheetCalculator_1.MusicSheetCalculator.stafflineNoteCalculator = new VexflowStafflineNoteCalculator_1.VexflowStafflineNoteCalculator(this.rules);
        // prepare Vexflow font (doesn't affect Vexflow 1.x). It seems like this has to be done here for now, otherwise it's too slow for the generateImages script.
        //   (first image will have the non-updated font, in this case the Vexflow default Bravura, while we want Gonville here)
        if (((_a = this.rules.DefaultVexFlowNoteFont) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "gonville") {
            vexflow_1.default.Flow.DEFAULT_FONT_STACK = [(_b = vexflow_1.default.Flow.Fonts) === null || _b === void 0 ? void 0 : _b.Gonville, (_c = vexflow_1.default.Flow.Fonts) === null || _c === void 0 ? void 0 : _c.Bravura, (_d = vexflow_1.default.Flow.Fonts) === null || _d === void 0 ? void 0 : _d.Custom];
        }
        else if (((_e = this.rules.DefaultVexFlowNoteFont) === null || _e === void 0 ? void 0 : _e.toLowerCase()) === "petaluma") {
            vexflow_1.default.Flow.DEFAULT_FONT_STACK = [(_f = vexflow_1.default.Flow.Fonts) === null || _f === void 0 ? void 0 : _f.Petaluma, (_g = vexflow_1.default.Flow.Fonts) === null || _g === void 0 ? void 0 : _g.Gonville, (_h = vexflow_1.default.Flow.Fonts) === null || _h === void 0 ? void 0 : _h.Bravura];
        }
        // else keep new vexflow default Bravura (more cursive, bold)
    }
    clearRecreatedObjects() {
        super.clearRecreatedObjects();
        MusicSheetCalculator_1.MusicSheetCalculator.stafflineNoteCalculator = new VexflowStafflineNoteCalculator_1.VexflowStafflineNoteCalculator(this.rules);
        for (const graphicalMeasures of this.graphicalMusicSheet.MeasureList) {
            for (const graphicalMeasure of graphicalMeasures) {
                graphicalMeasure === null || graphicalMeasure === void 0 ? void 0 : graphicalMeasure.clean();
            }
        }
    }
    formatMeasures() {
        // let totalFinalizeBeamsTime: number = 0;
        for (const verticalMeasureList of this.graphicalMusicSheet.MeasureList) {
            if (!verticalMeasureList || !verticalMeasureList[0]) {
                continue;
            }
            const firstVisibleMeasure = verticalMeasureList.find(measure => measure === null || measure === void 0 ? void 0 : measure.isVisible());
            // first measure has formatting method as lambda function object, but formats all measures. TODO this could be refactored
            firstVisibleMeasure.format();
            for (const measure of verticalMeasureList) {
                for (const staffEntry of measure.staffEntries) {
                    staffEntry.calculateXPosition();
                }
                // const t0: number = performance.now();
                if (true) {
                    // finalizeBeams takes a few milliseconds, so we can save some performance here sometimes,
                    // but we'd have to check for every setting change that would affect beam rendering. See #843
                    measure.finalizeBeams(); // without this, when zooming a lot (e.g. 250%), beams keep their old, now wrong slope.
                    // totalFinalizeBeamsTime += performance.now() - t0;
                    // console.log("Total calls to finalizeBeams in VexFlowMusicSheetCalculator took " + totalFinalizeBeamsTime + " milliseconds.");
                }
            }
        }
        this.beamsNeedUpdate = false;
    }
    //protected clearSystemsAndMeasures(): void {
    //    for (let measure of measures) {
    //
    //    }
    //}
    /**
     * Calculates the x layout of the staff entries within the staff measures belonging to one source measure.
     * All staff entries are x-aligned throughout all vertically aligned staff measures.
     * This method is called within calculateXLayout.
     * The staff entries are aligned with minimum needed x distances.
     * The MinimumStaffEntriesWidth of every measure will be set - needed for system building.
     * Prepares the VexFlow formatter for later formatting
     * Does not calculate measure width from lyrics (which is called from MusicSheetCalculator)
     * @param measures
     * @returns the minimum required x width of the source measure (=list of staff measures)
     */
    calculateMeasureXLayout(measures) {
        const visibleMeasures = [];
        for (const measure of measures) {
            if (measure) {
                visibleMeasures.push(measure);
            }
        }
        if (visibleMeasures.length === 0) { // e.g. after Multiple Rest measures (VexflowMultiRestMeasure)
            return 0;
        }
        measures = visibleMeasures;
        // Format the voices
        const allVoices = [];
        const formatter = new VF.Formatter({
            // maxIterations: 2,
            softmaxFactor: this.rules.SoftmaxFactorVexFlow // this setting is only applied in Vexflow 3.x. also this needs @types/vexflow ^3.0.0
        });
        let maxStaffEntries = measures[0].staffEntries.length;
        let maxStaffEntriesPlusAccidentals = 1;
        for (const measure of measures) {
            if (!measure) {
                continue;
            }
            let measureAccidentals = 0;
            for (const staffEntry of measure.staffEntries) {
                measureAccidentals += staffEntry.setMaxAccidentals(); // staffEntryAccidentals
            }
            // TODO the if is a TEMP change to show pure diff for pickup measures, should be done for all measures, but increases spacing
            if (measure.parentSourceMeasure.ImplicitMeasure) {
                maxStaffEntries = Math.max(measure.staffEntries.length, maxStaffEntries);
                maxStaffEntriesPlusAccidentals = Math.max(measure.staffEntries.length + measureAccidentals, maxStaffEntriesPlusAccidentals);
            }
            const mvoices = measure.vfVoices;
            const voices = [];
            for (const voiceID in mvoices) {
                if (mvoices.hasOwnProperty(voiceID)) {
                    const mvoice = mvoices[voiceID];
                    if (measure.hasOnlyRests && !mvoice.ticksUsed.equals(mvoice.totalTicks)) {
                        // fix layouting issues with whole measure rests in one staff and notes in other. especially in 12/8 rthythm (#1187)
                        mvoice.ticksUsed = mvoice.totalTicks;
                        // Vexflow 1.2.93: needs VexFlowPatch for formatter.js (see #1187)
                    }
                    voices.push(mvoice);
                    allVoices.push(mvoice);
                }
            }
            if (voices.length === 0) {
                loglevel_1.default.debug("Found a measure with no voices. Continuing anyway.", mvoices);
                // no need to log this, measures with no voices/notes are fine. see OSMDOptions.fillEmptyMeasuresWithWholeRest
                continue;
            }
            // all voices that belong to one stave are collectively added to create a common context in VexFlow.
            formatter.joinVoices(voices);
        }
        let minStaffEntriesWidth = 12; // a typical measure has roughly a length of 3*StaffHeight (3*4 = 12)
        const parentSourceMeasure = measures[0].parentSourceMeasure;
        // the voicing space bonus addition makes the voicing more relaxed. With a bonus of 0 the notes are basically completely squeezed together.
        const staffEntryFactor = 0.3;
        if (allVoices.length > 0) {
            minStaffEntriesWidth = formatter.preCalculateMinTotalWidth(allVoices) / VexFlowMusicSheetDrawer_1.unitInPixels
                * this.rules.VoiceSpacingMultiplierVexflow
                + this.rules.VoiceSpacingAddendVexflow
                + maxStaffEntries * staffEntryFactor; // TODO use maxStaffEntriesPlusAccidentals here as well, adjust spacing
            if (parentSourceMeasure === null || parentSourceMeasure === void 0 ? void 0 : parentSourceMeasure.ImplicitMeasure) {
                // shrink width in the ratio that the pickup measure is shorter compared to a full measure('s time signature):
                minStaffEntriesWidth = parentSourceMeasure.Duration.RealValue / parentSourceMeasure.ActiveTimeSignature.RealValue * minStaffEntriesWidth;
                // e.g. a 1/4 pickup measure in a 3/4 time signature should be 1/4 / 3/4 = 1/3 as long (a third)
                // it seems like this should be respected by staffEntries.length and preCaculateMinTotalWidth, but apparently not,
                //   without this the pickup measures were always too long.
                let barlineSpacing = 0;
                const measureListIndex = parentSourceMeasure.measureListIndex;
                if (measureListIndex > 1) {
                    // only give this implicit measure more space if the previous one had a thick barline (e.g. repeat end)
                    for (const gMeasure of this.graphicalMusicSheet.MeasureList[measureListIndex - 1]) {
                        const endingBarStyleEnum = gMeasure === null || gMeasure === void 0 ? void 0 : gMeasure.parentSourceMeasure.endingBarStyleEnum;
                        if (endingBarStyleEnum === SystemLinesEnum_1.SystemLinesEnum.ThinBold ||
                            endingBarStyleEnum === SystemLinesEnum_1.SystemLinesEnum.DotsThinBold) {
                            barlineSpacing = this.rules.PickupMeasureRepetitionSpacing;
                            break;
                        }
                    }
                }
                minStaffEntriesWidth += barlineSpacing;
                // add more than the original staffEntries scaling again: (removing it above makes it too short)
                if (maxStaffEntries > 1) { // not necessary for only 1 StaffEntry
                    minStaffEntriesWidth += maxStaffEntriesPlusAccidentals * staffEntryFactor * 1.5; // don't scale this for implicit measures
                    // in fact overscale it, this needs a lot of space the more staffEntries (and modifiers like accidentals) there are
                }
                else if (measureListIndex > 1 && maxStaffEntries === 1) {
                    // do this also for measures not after repetitions:
                    minStaffEntriesWidth += this.rules.PickupMeasureSpacingSingleNoteAddend;
                }
                minStaffEntriesWidth *= this.rules.PickupMeasureWidthMultiplier;
            }
            // TODO this could use some fine-tuning. currently using *1.5 + 1 by default, results in decent spacing.
            // firstMeasure.formatVoices = (w: number) => {
            //     formatter.format(allVoices, w);
            // };
            MusicSheetCalculator_1.MusicSheetCalculator.setMeasuresMinStaffEntriesWidth(measures, minStaffEntriesWidth);
            const formatVoicesDefault = (w, p) => {
                formatter.formatToStave(allVoices, p.getVFStave());
            };
            const formatVoicesAlignRests = (w, p) => {
                formatter.formatToStave(allVoices, p.getVFStave(), {
                    align_rests: true,
                    context: undefined
                });
            };
            for (const measure of measures) {
                // determine whether to align rests
                if (this.rules.AlignRests === OSMDOptions_1.AlignRestOption.Never) {
                    measure.formatVoices = formatVoicesDefault;
                }
                else if (this.rules.AlignRests === OSMDOptions_1.AlignRestOption.Always) {
                    measure.formatVoices = formatVoicesAlignRests;
                }
                else if (this.rules.AlignRests === OSMDOptions_1.AlignRestOption.Auto) {
                    let alignRests = false;
                    for (const staffEntry of measure.staffEntries) {
                        let collidableVoiceEntries = 0;
                        let numberOfRests = 0;
                        for (const voiceEntry of staffEntry.graphicalVoiceEntries) {
                            if (!voiceEntry.parentVoiceEntry.IsGrace) {
                                if (voiceEntry && voiceEntry.notes && voiceEntry.notes[0] && voiceEntry.notes[0].sourceNote) { // TODO null chaining, TS 3.7
                                    if (voiceEntry.notes[0].sourceNote.PrintObject) { // only respect collision when not invisible
                                        collidableVoiceEntries++;
                                    }
                                }
                            }
                            if (voiceEntry && voiceEntry.notes && voiceEntry.notes[0] && voiceEntry.notes[0].sourceNote) { // TODO null chaining, TS 3.7
                                if (voiceEntry.notes[0].sourceNote.isRest() && voiceEntry.notes[0].sourceNote.PrintObject) {
                                    numberOfRests++; // only align rests if there is actually a rest (which could collide)
                                }
                            }
                            if (collidableVoiceEntries > 1 && numberOfRests >= 1) {
                                // TODO could add further checks like if any of the already checked voice entries actually collide
                                alignRests = true;
                                break;
                            }
                        }
                        if (alignRests) {
                            break;
                        }
                    }
                    // set measure's format function
                    if (alignRests) {
                        measure.formatVoices = formatVoicesAlignRests;
                    }
                    else {
                        measure.formatVoices = formatVoicesDefault;
                    }
                }
                // format first measure with minimum width
                if (measure === measures[0]) {
                    const vexflowMeasure = measure;
                    // prepare format function for voices, will be called later for formatting measure again
                    //vexflowMeasure.formatVoices = formatVoicesDefault;
                    // format now for minimum width, calculateMeasureWidthFromLyrics later
                    vexflowMeasure.formatVoices(minStaffEntriesWidth * VexFlowMusicSheetDrawer_1.unitInPixels, vexflowMeasure);
                }
                else {
                    //(measure as VexFlowMeasure).formatVoices = undefined;
                    // TODO why was the formatVoices function disabled for other measures? would now disable the new align rests option.
                }
            }
        }
        for (const graphicalMeasure of measures) {
            if (!graphicalMeasure) {
                continue;
            }
            for (const staffEntry of graphicalMeasure.staffEntries) {
                // here the measure modifiers are not yet set, therefore the begin instruction width will be empty
                staffEntry.calculateXPosition();
            }
        }
        //Can't quite figure out why, but this is the calculation that needs redone to have consistent rendering.
        //The first render of a sheet vs. subsequent renders are calculated differently by vexflow without this re-joining of the voices
        for (const measure of measures) {
            if (!measure) {
                continue;
            }
            const mvoices = measure.vfVoices;
            const voices = [];
            for (const voiceID in mvoices) {
                if (mvoices.hasOwnProperty(voiceID)) {
                    voices.push(mvoices[voiceID]);
                }
            }
            if (voices.length === 0) {
                loglevel_1.default.debug("Found a measure with no voices. Continuing anyway.", mvoices);
                // no need to log this, measures with no voices/notes are fine. see OSMDOptions.fillEmptyMeasuresWithWholeRest
                continue;
            }
            // all voices that belong to one stave are collectively added to create a common context in VexFlow.
            formatter.joinVoices(voices);
        }
        // calculateMeasureWidthFromLyrics() will be called from MusicSheetCalculator after this
        return minStaffEntriesWidth;
    }
    calculateElongationFactor(containers, staffEntry, lastEntryDict, oldMinimumStaffEntriesWidth, elongationFactorForMeasureWidth, measureNumber, oldMinSpacing, nextMeasureOverlap) {
        let newElongationFactorForMeasureWidth = elongationFactorForMeasureWidth;
        let currentContainerIndex = 0;
        for (const container of containers) {
            const alignment = container.GraphicalLabel.Label.textAlignment;
            let minSpacing = oldMinSpacing;
            let overlapAllowedIntoNextMeasure = nextMeasureOverlap;
            if (container instanceof GraphicalLyricEntry_1.GraphicalLyricEntry && container.ParentLyricWord) {
                // spacing for multi-syllable words
                if (container.LyricsEntry.SyllableIndex > 0) { // syllables after first
                    // give a little more spacing for dash between syllables
                    minSpacing = this.rules.BetweenSyllableMinimumDistance;
                    if (TextAlignment_1.TextAlignment.IsCenterAligned(alignment)) {
                        minSpacing += 1.0; // TODO check for previous lyric alignment too. though center is not standard
                        // without this, there's not enough space for dashes between long syllables on eigth notes
                    }
                }
                const syllables = container.ParentLyricWord.GetLyricWord.Syllables;
                if (syllables.length > 1) {
                    if (container.LyricsEntry.SyllableIndex < syllables.length - 1) {
                        // if a middle syllable of a word, give less measure overlap into next measure, to give room for dash
                        if (this.dashSpace === undefined) { // don't replace undefined check
                            this.dashSpace = 1.5;
                            // better method, doesn't work:
                            // this.dashLength = new GraphicalLabel(new Label("-"), this.rules.LyricsHeight, TextAlignmentEnum.CenterBottom)
                            //   .PositionAndShape.Size.width; // always returns 0
                        }
                        overlapAllowedIntoNextMeasure -= this.dashSpace;
                    }
                }
            }
            const bBox = container instanceof GraphicalLyricEntry_1.GraphicalLyricEntry ? container.GraphicalLabel.PositionAndShape : container.PositionAndShape;
            const labelWidth = bBox.Size.width;
            const staffEntryXPosition = staffEntry.PositionAndShape.RelativePosition.x;
            const xPosition = staffEntryXPosition + bBox.BorderMarginLeft;
            if (lastEntryDict[currentContainerIndex] !== undefined) {
                if (lastEntryDict[currentContainerIndex].extend) {
                    // TODO handle extend of last entry (extend is stored in lyrics entry of preceding syllable)
                    // only necessary for center alignment
                }
            }
            let spacingNeededToLastContainer;
            let currentSpacingToLastContainer; // undefined for first container in measure
            if (lastEntryDict[currentContainerIndex]) {
                currentSpacingToLastContainer = xPosition - lastEntryDict[currentContainerIndex].xPosition;
            }
            let currentSpacingToMeasureEnd;
            let spacingNeededToMeasureEnd;
            const maxXInMeasure = oldMinimumStaffEntriesWidth * elongationFactorForMeasureWidth;
            if (TextAlignment_1.TextAlignment.IsCenterAligned(alignment)) {
                overlapAllowedIntoNextMeasure /= 4; // reserve space for overlap from next measure. its first note can't be spaced.
                currentSpacingToMeasureEnd = maxXInMeasure - xPosition;
                spacingNeededToMeasureEnd = (labelWidth / 2) - overlapAllowedIntoNextMeasure;
                // spacing to last lyric only done if not first lyric in measure:
                if (lastEntryDict[currentContainerIndex]) {
                    spacingNeededToLastContainer =
                        lastEntryDict[currentContainerIndex].labelWidth / 2 + labelWidth / 2 + minSpacing;
                }
            }
            else if (TextAlignment_1.TextAlignment.IsLeft(alignment)) {
                currentSpacingToMeasureEnd = maxXInMeasure - xPosition;
                spacingNeededToMeasureEnd = labelWidth - overlapAllowedIntoNextMeasure;
                if (lastEntryDict[currentContainerIndex]) {
                    spacingNeededToLastContainer = lastEntryDict[currentContainerIndex].labelWidth + minSpacing;
                }
            }
            // get factor of how much we need to stretch the measure to space the current lyric
            let elongationFactorForMeasureWidthForCurrentContainer = 1;
            const elongationFactorNeededForMeasureEnd = spacingNeededToMeasureEnd / currentSpacingToMeasureEnd;
            let elongationFactorNeededForLastContainer = 1;
            if (container instanceof GraphicalLyricEntry_1.GraphicalLyricEntry && container.LyricsEntry) {
                if (lastEntryDict[currentContainerIndex]) { // if previous lyric needs more spacing than measure end, take that spacing
                    const lastNoteDuration = lastEntryDict[currentContainerIndex].sourceNoteDuration;
                    elongationFactorNeededForLastContainer = spacingNeededToLastContainer / currentSpacingToLastContainer;
                    if ((lastNoteDuration.Denominator) > 4) {
                        elongationFactorNeededForLastContainer *= 1.1; // from 1.2 upwards, this unnecessarily bloats shorter measures
                        // spacing in Vexflow depends on note duration, our minSpacing is calibrated for quarter notes
                        // if we double the measure length, the distance between eigth notes only gets half of the added length
                        // compared to a quarter note.
                    }
                }
            }
            else if (lastEntryDict[currentContainerIndex]) {
                elongationFactorNeededForLastContainer =
                    spacingNeededToLastContainer / currentSpacingToLastContainer;
            }
            elongationFactorForMeasureWidthForCurrentContainer = Math.max(elongationFactorNeededForMeasureEnd, elongationFactorNeededForLastContainer);
            newElongationFactorForMeasureWidth = Math.max(newElongationFactorForMeasureWidth, elongationFactorForMeasureWidthForCurrentContainer);
            let overlap = Math.max((spacingNeededToLastContainer - currentSpacingToLastContainer) || 0, 0);
            if (lastEntryDict[currentContainerIndex]) {
                overlap += lastEntryDict[currentContainerIndex].cumulativeOverlap;
            }
            // set up information about this lyric entry of verse j for next lyric entry of verse j
            lastEntryDict[currentContainerIndex] = {
                cumulativeOverlap: overlap,
                extend: container instanceof GraphicalLyricEntry_1.GraphicalLyricEntry ? container.LyricsEntry.extend : false,
                labelWidth: labelWidth,
                measureNumber: measureNumber,
                sourceNoteDuration: container instanceof GraphicalLyricEntry_1.GraphicalLyricEntry ? (container.LyricsEntry && container.LyricsEntry.Parent.Notes[0].Length) : false,
                text: container instanceof GraphicalLyricEntry_1.GraphicalLyricEntry ? container.LyricsEntry.Text : container.GraphicalLabel.Label.text,
                xPosition: xPosition,
            };
            currentContainerIndex++;
        }
        return newElongationFactorForMeasureWidth;
    }
    calculateElongationFactorFromStaffEntries(staffEntries, oldMinimumStaffEntriesWidth, elongationFactorForMeasureWidth, measureNumber) {
        let newElongationFactorForMeasureWidth = elongationFactorForMeasureWidth;
        const lastLyricEntryDict = {}; // holds info about last lyric entries for all verses j???
        const lastChordEntryDict = {}; // holds info about last chord entries for all verses j???
        // for all staffEntries i, each containing the lyric entry for all verses at that timestamp in the measure
        for (const staffEntry of staffEntries) {
            if (staffEntry.LyricsEntries.length > 0 && this.rules.RenderLyrics) {
                newElongationFactorForMeasureWidth =
                    this.calculateElongationFactor(staffEntry.LyricsEntries, staffEntry, lastLyricEntryDict, oldMinimumStaffEntriesWidth, newElongationFactorForMeasureWidth, measureNumber, this.rules.HorizontalBetweenLyricsDistance, this.rules.LyricOverlapAllowedIntoNextMeasure);
            }
            if (staffEntry.graphicalChordContainers.length > 0 && this.rules.RenderChordSymbols) {
                newElongationFactorForMeasureWidth =
                    this.calculateElongationFactor(staffEntry.graphicalChordContainers, staffEntry, lastChordEntryDict, oldMinimumStaffEntriesWidth, newElongationFactorForMeasureWidth, measureNumber, this.rules.ChordSymbolXSpacing, this.rules.ChordOverlapAllowedIntoNextMeasure);
            }
        }
        return newElongationFactorForMeasureWidth;
    }
    calculateMeasureWidthFromStaffEntries(measuresVertical, oldMinimumStaffEntriesWidth) {
        let elongationFactorForMeasureWidth = 1;
        for (const measure of measuresVertical) {
            if (!measure || measure.staffEntries.length === 0) {
                continue;
            }
            elongationFactorForMeasureWidth =
                this.calculateElongationFactorFromStaffEntries(measure.staffEntries, oldMinimumStaffEntriesWidth, elongationFactorForMeasureWidth, measure.MeasureNumber);
        }
        elongationFactorForMeasureWidth = Math.min(elongationFactorForMeasureWidth, this.rules.MaximumLyricsElongationFactor);
        // TODO check when this is > 2.0. there seems to be an error here where this is unnecessarily > 2 in Beethoven Geliebte.
        const newMinimumStaffEntriesWidth = oldMinimumStaffEntriesWidth * elongationFactorForMeasureWidth;
        return newMinimumStaffEntriesWidth;
    }
    createGraphicalTie(tie, startGse, endGse, startNote, endNote) {
        return new GraphicalTie_1.GraphicalTie(tie, startNote, endNote);
    }
    updateStaffLineBorders(staffLine) {
        staffLine.SkyBottomLineCalculator.updateStaffLineBorders();
    }
    graphicalMeasureCreatedCalculations(measure) {
        measure.rules = this.rules;
        measure.graphicalMeasureCreatedCalculations();
    }
    /**
     * Can be used to calculate articulations, stem directions, helper(ledger) lines, and overlapping note x-displacement.
     * Is Excecuted per voice entry of a staff entry.
     * After that layoutStaffEntry is called.
     * @param voiceEntry
     * @param graphicalNotes
     * @param graphicalStaffEntry
     * @param hasPitchedNote
     */
    layoutVoiceEntry(voiceEntry, graphicalNotes, graphicalStaffEntry, hasPitchedNote) {
        for (let i = 0; i < graphicalNotes.length; i++) {
            graphicalNotes[i] = MusicSheetCalculator_1.MusicSheetCalculator.stafflineNoteCalculator.positionNote(graphicalNotes[i]);
        }
    }
    /**
     * Do all layout calculations that have to be done per staff entry, like dots, ornaments, arpeggios....
     * This method is called after the voice entries are handled by layoutVoiceEntry().
     * @param graphicalStaffEntry
     */
    layoutStaffEntry(graphicalStaffEntry) {
        graphicalStaffEntry.parentMeasure.layoutStaffEntry(graphicalStaffEntry);
    }
    /**
     * Is called at the begin of the method for creating the vertically aligned staff measures belonging to one source measure.
     */
    initGraphicalMeasuresCreation() {
        return;
    }
    /**
     * add here all given articulations to the VexFlowGraphicalStaffEntry and prepare them for rendering.
     * @param articulations
     * @param voiceEntry
     * @param graphicalStaffEntry
     */
    layoutArticulationMarks(articulations, voiceEntry, graphicalStaffEntry) {
        // uncomment this when implementing:
        // let vfse: VexFlowStaffEntry = (graphicalStaffEntry as VexFlowStaffEntry);
        return;
    }
    /**
     * Calculate the shape (Bezier curve) for this tie.
     * @param tie
     * @param tieIsAtSystemBreak
     * @param isTab Whether this tie is for a tab note (guitar tabulature)
     */
    layoutGraphicalTie(tie, tieIsAtSystemBreak, isTab) {
        const startNote = tie.StartNote;
        const endNote = tie.EndNote;
        let vfStartNote = undefined;
        let startNoteIndexInTie = 0;
        if (startNote && startNote.vfnote && startNote.vfnote.length >= 2) {
            vfStartNote = startNote.vfnote[0];
            startNoteIndexInTie = startNote.vfnote[1];
        }
        let vfEndNote = undefined;
        let endNoteIndexInTie = 0;
        if (endNote && endNote.vfnote && endNote.vfnote.length >= 2) {
            vfEndNote = endNote.vfnote[0];
            endNoteIndexInTie = endNote.vfnote[1];
        }
        if (tieIsAtSystemBreak) {
            // split tie into two ties:
            if (vfStartNote) { // first_note or last_note must be not null in Vexflow
                const vfTie1 = new VF.StaveTie({
                    first_indices: [startNoteIndexInTie],
                    first_note: vfStartNote
                });
                const measure1 = startNote.parentVoiceEntry.parentStaffEntry.parentMeasure;
                measure1.addStaveTie(vfTie1, tie);
            }
            if (vfEndNote) {
                const vfTie2 = new VF.StaveTie({
                    last_indices: [endNoteIndexInTie],
                    last_note: vfEndNote
                });
                const measure2 = endNote.parentVoiceEntry.parentStaffEntry.parentMeasure;
                measure2.addStaveTie(vfTie2, tie);
            }
        }
        else {
            // normal case
            if (vfStartNote || vfEndNote) { // one of these must be not null in Vexflow
                let vfTie;
                if (isTab) {
                    if (tie.Tie.Type === "S") {
                        //calculate direction
                        const startTieNote = tie.StartNote.sourceNote;
                        const endTieNote = tie.EndNote.sourceNote;
                        let slideDirection = 1;
                        if (startTieNote.FretNumber > endTieNote.FretNumber) {
                            slideDirection = -1;
                        }
                        vfTie = new VF.TabSlide({
                            first_indices: [startNoteIndexInTie],
                            first_note: vfStartNote,
                            last_indices: [endNoteIndexInTie],
                            last_note: vfEndNote,
                        }, slideDirection);
                    }
                    else {
                        vfTie = new VF.TabTie({
                            first_indices: [startNoteIndexInTie],
                            first_note: vfStartNote,
                            last_indices: [endNoteIndexInTie],
                            last_note: vfEndNote,
                        }, tie.Tie.Type);
                    }
                }
                else { // not Tab (guitar), normal StaveTie
                    vfTie = new VF.StaveTie({
                        first_indices: [startNoteIndexInTie],
                        first_note: vfStartNote,
                        last_indices: [endNoteIndexInTie],
                        last_note: vfEndNote
                    });
                    const tieDirection = tie.Tie.getTieDirection(startNote.sourceNote);
                    if (tieDirection === Expressions_1.PlacementEnum.Below) {
                        vfTie.setDirection(1); // + is down in vexflow
                    }
                    else if (tieDirection === Expressions_1.PlacementEnum.Above) {
                        vfTie.setDirection(-1);
                    }
                }
                const measure = endNote.parentVoiceEntry.parentStaffEntry.parentMeasure;
                measure.addStaveTie(vfTie, tie);
            }
        }
    }
    calculateDynamicExpressionsForMultiExpression(multiExpression, measureIndex, staffIndex) {
        if (measureIndex < this.rules.MinMeasureToDrawIndex || measureIndex > this.rules.MaxMeasureToDrawIndex) {
            return;
            // we do already use the min/max in MusicSheetCalculator.calculateDynamicsExpressions,
            // but this may be necessary for StaffLinkedExpressions, not tested.
        }
        // calculate absolute Timestamp
        const absoluteTimestamp = multiExpression.AbsoluteTimestamp;
        const measures = this.graphicalMusicSheet.MeasureList[measureIndex];
        const staffLine = measures[staffIndex].ParentStaffLine;
        const startMeasure = measures[staffIndex];
        // start position in staffline:
        // const useStaffEntryBorderLeft: boolean = multiExpression.StartingContinuousDynamic?.DynamicType === ContDynamicEnum.diminuendo;
        const continuousDynamic = multiExpression.StartingContinuousDynamic;
        const useStaffEntryBorderLeft = continuousDynamic !== undefined && !continuousDynamic.IsStartOfSoftAccent;
        const dynamicStartPosition = this.getRelativePositionInStaffLineFromTimestamp(absoluteTimestamp, staffIndex, staffLine, staffLine === null || staffLine === void 0 ? void 0 : staffLine.isPartOfMultiStaffInstrument(), undefined, useStaffEntryBorderLeft);
        if (dynamicStartPosition.x <= 0) {
            dynamicStartPosition.x = startMeasure.beginInstructionsWidth + this.rules.RhythmRightMargin;
        }
        if (multiExpression.InstantaneousDynamic) {
            const graphicalInstantaneousDynamic = new VexFlowInstantaneousDynamicExpression_1.VexFlowInstantaneousDynamicExpression(multiExpression.InstantaneousDynamic, staffLine, startMeasure);
            // compare with multiExpression.InstantaneousDynamic.InMeasureTimestamp or add a relative timestamp? if we ever need a separate timestamp
            this.calculateGraphicalInstantaneousDynamicExpression(graphicalInstantaneousDynamic, dynamicStartPosition, absoluteTimestamp);
            this.dynamicExpressionMap.set(absoluteTimestamp.RealValue, graphicalInstantaneousDynamic.PositionAndShape);
        }
        if (continuousDynamic) {
            const graphicalContinuousDynamic = new VexFlowContinuousDynamicExpression_1.VexFlowContinuousDynamicExpression(continuousDynamic, staffLine, startMeasure.parentSourceMeasure);
            graphicalContinuousDynamic.StartMeasure = startMeasure;
            graphicalContinuousDynamic.IsSoftAccent = multiExpression.StartingContinuousDynamic.IsStartOfSoftAccent;
            //graphicalContinuousDynamic.StartIsEnd = multiExpression.StartingContinuousDynamic.EndMultiExpression === multiExpression;
            if (!graphicalContinuousDynamic.IsVerbal && continuousDynamic.EndMultiExpression) {
                try {
                    this.calculateGraphicalContinuousDynamic(graphicalContinuousDynamic, dynamicStartPosition);
                    graphicalContinuousDynamic.updateSkyBottomLine();
                }
                catch (e) {
                    // TODO this sometimes fails when the measure range to draw doesn't include all the dynamic's measures, method needs to be adjusted
                    //   see calculateGraphicalContinuousDynamic(), also in MusicSheetCalculator.
                }
            }
            else if (graphicalContinuousDynamic.IsVerbal) {
                this.calculateGraphicalVerbalContinuousDynamic(graphicalContinuousDynamic, dynamicStartPosition);
            }
            else {
                loglevel_1.default.warn("This continuous dynamic is not covered. measure" + multiExpression.SourceMeasureParent.MeasureNumber);
            }
        }
    }
    createMetronomeMark(metronomeExpression) {
        var _a, _b;
        // note: sometimes MeasureNumber is 0 here, e.g. in Christbaum, maybe because of pickup measure (auftakt)
        const measureNumber = Math.max(metronomeExpression.ParentMultiTempoExpression.SourceMeasureParent.MeasureNumber - 1, 0);
        const staffNumber = Math.max(metronomeExpression.StaffNumber - 1, 0);
        const firstMetronomeMark = measureNumber === 0 && staffNumber === 0;
        const vfMeasure = this.graphicalMusicSheet.MeasureList[measureNumber][staffNumber];
        if (vfMeasure.hasMetronomeMark) {
            return; // don't create more than one metronome mark per measure;
            // TODO some measures still seem to have two metronome marks, one less bold than the other (or not bold),
            //   might be because of both <sound> node and <per-minute> node (within <metronome>) creating metronome marks
        }
        const vfStave = vfMeasure.getVFStave();
        //vfStave.addModifier(new VF.StaveTempo( // needs Vexflow PR
        let vexflowDuration = "q";
        if (metronomeExpression.beatUnit) {
            const duration = NoteType_1.NoteTypeHandler.getNoteDurationFromType(metronomeExpression.beatUnit);
            vexflowDuration = VexFlowConverter_1.VexFlowConverter.durations(duration, false)[0];
        }
        let yShift = this.rules.MetronomeMarkYShift;
        let hasExpressionsAboveStaffline = false;
        for (const expression of metronomeExpression.parentMeasure.TempoExpressions) {
            const isMetronomeExpression = ((_a = expression.InstantaneousTempo) === null || _a === void 0 ? void 0 : _a.Enum) === InstantaneousTempoExpression_1.TempoEnum.metronomeMark;
            if (expression.getPlacementOfFirstEntry() === Expressions_1.PlacementEnum.Above &&
                !isMetronomeExpression) {
                hasExpressionsAboveStaffline = true;
                break;
            }
        }
        if (hasExpressionsAboveStaffline) {
            yShift -= 1.4;
            // TODO improve this with proper skyline / collision detection. unfortunately we don't have a skyline here yet.
            // let maxSkylineBeginning: number = 0;
            // for (let i = 0; i < skyline.length / 1; i++) { // search in first 3rd, disregard end of measure
            //   maxSkylineBeginning = Math.max(skyline[i], maxSkylineBeginning);
            // }
            // console.log('max skyline: ' + maxSkylineBeginning);
        }
        const skyline = (_b = this.graphicalMusicSheet.MeasureList[0][0].ParentStaffLine) === null || _b === void 0 ? void 0 : _b.SkyLine;
        vfStave.setTempo({
            bpm: metronomeExpression.TempoInBpm,
            dots: metronomeExpression.dotted,
            duration: vexflowDuration
        }, yShift * VexFlowMusicSheetDrawer_1.unitInPixels);
        // -50, -30), 0); //needs Vexflow PR
        //.setShiftX(-50);
        const xShift = firstMetronomeMark ? this.rules.MetronomeMarkXShift * VexFlowMusicSheetDrawer_1.unitInPixels : 0;
        vfStave.getModifiers()[vfStave.getModifiers().length - 1].setShiftX(xShift);
        vfMeasure.hasMetronomeMark = true;
        if (skyline) {
            // TODO calculate bounding box of metronome mark instead of hacking skyline to fix lyricist collision
            skyline[0] = Math.min(skyline[0], -4.5 + yShift);
        }
        // somehow this is called repeatedly in Clementi, so skyline[0] = Math.min instead of -=
    }
    calculateRehearsalMark(measure) {
        var _a;
        const rehearsalExpression = measure.rehearsalExpression;
        if (!rehearsalExpression) {
            return;
        }
        const firstMeasureNumber = this.graphicalMusicSheet.MeasureList[0][0].MeasureNumber; // 0 for pickup, 1 otherwise
        const measureNumber = Math.max(measure.MeasureNumber - firstMeasureNumber, 0);
        const staffNumber = 0;
        const vfStave = (_a = this.graphicalMusicSheet.MeasureList[measureNumber][staffNumber]) === null || _a === void 0 ? void 0 : _a.getVFStave();
        if (!vfStave) { // potentially multi measure rest
            return;
        }
        const yOffset = -this.rules.RehearsalMarkYOffsetDefault - this.rules.RehearsalMarkYOffset;
        let xOffset = this.rules.RehearsalMarkXOffsetDefault + this.rules.RehearsalMarkXOffset;
        if (measure.IsSystemStartMeasure) {
            xOffset += this.rules.RehearsalMarkXOffsetSystemStartMeasure;
        }
        // const section: VF.StaveSection = new VF.StaveSection(rehearsalExpression.label, vfStave.getX(), yOffset);
        // (vfStave as any).modifiers.push(section);
        const fontSize = this.rules.RehearsalMarkFontSize;
        vfStave.setSection(rehearsalExpression.label, yOffset, xOffset, fontSize); // fontSize is an extra argument from VexFlowPatch
    }
    /**
     * Calculate a single OctaveShift for a [[MultiExpression]].
     * @param sourceMeasure
     * @param multiExpression
     * @param measureIndex
     * @param staffIndex
     */
    calculateSingleOctaveShift(sourceMeasure, multiExpression, measureIndex, staffIndex) {
        var _a;
        // calculate absolute Timestamp and startStaffLine (and EndStaffLine if needed)
        const octaveShift = multiExpression.OctaveShiftStart;
        const startTimeStamp = octaveShift.ParentStartMultiExpression.Timestamp;
        const endTimeStamp = (_a = octaveShift.ParentEndMultiExpression) === null || _a === void 0 ? void 0 : _a.Timestamp;
        const minMeasureToDrawIndex = this.rules.MinMeasureToDrawIndex;
        const maxMeasureToDrawIndex = this.rules.MaxMeasureToDrawIndex;
        let startStaffLine = this.graphicalMusicSheet.MeasureList[measureIndex][staffIndex].ParentStaffLine;
        if (!startStaffLine) { // fix for rendering range set. all of these can probably done cleaner.
            startStaffLine = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex].ParentStaffLine;
        }
        let endMeasure = undefined;
        if (octaveShift.ParentEndMultiExpression) {
            endMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(octaveShift.ParentEndMultiExpression.SourceMeasureParent, staffIndex);
        }
        else {
            endMeasure = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(staffIndex, true); // get last rendered measure
        }
        if (endMeasure.MeasureNumber > maxMeasureToDrawIndex + 1) { // octaveshift ends in measure not rendered
            endMeasure = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(staffIndex, true);
        }
        let startMeasure = undefined;
        if (octaveShift.ParentEndMultiExpression) {
            startMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(octaveShift.ParentStartMultiExpression.SourceMeasureParent, staffIndex);
        }
        else {
            startMeasure = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex]; // first rendered measure
        }
        if (startMeasure.MeasureNumber < minMeasureToDrawIndex + 1) { // octaveshift starts before range of measures selected to render
            startMeasure = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex]; // first rendered measure
        }
        if (startMeasure.MeasureNumber < minMeasureToDrawIndex + 1 ||
            startMeasure.MeasureNumber > maxMeasureToDrawIndex + 1 ||
            endMeasure.MeasureNumber < minMeasureToDrawIndex + 1 ||
            endMeasure.MeasureNumber > maxMeasureToDrawIndex + 1) {
            // octave shift completely out of drawing range, don't draw anything
            return;
        }
        let endStaffLine = endMeasure.ParentStaffLine;
        if (!endStaffLine) {
            endStaffLine = startStaffLine;
        }
        if (endMeasure && startStaffLine && endStaffLine) {
            // calculate GraphicalOctaveShift and RelativePositions
            const graphicalOctaveShift = new VexFlowOctaveShift_1.VexFlowOctaveShift(octaveShift, startStaffLine.PositionAndShape);
            if (!graphicalOctaveShift.startNote) { // fix for rendering range set
                let startGse;
                for (const gse of startMeasure.staffEntries) {
                    if (gse) {
                        startGse = gse;
                        break;
                    } // sometimes the first graphical staff entry is undefined, not sure why.
                }
                if (!startGse) {
                    return; // couldn't find a start staffentry, don't draw the octave shift
                }
                graphicalOctaveShift.setStartNote(startGse);
                if (!graphicalOctaveShift.startNote) {
                    return; // couldn't find a start note, don't draw the octave shift
                }
            }
            if (!graphicalOctaveShift.endNote) { // fix for rendering range set
                let endGse;
                for (let i = endMeasure.staffEntries.length - 1; i >= 0; i++) {
                    // search backwards from end of measure
                    if (endMeasure.staffEntries[i]) {
                        endGse = endMeasure.staffEntries[i];
                        break;
                    }
                }
                graphicalOctaveShift.setEndNote(endGse);
                if (!graphicalOctaveShift.endNote) {
                    return;
                }
            }
            // calculate RelativePosition and Dashes
            let startStaffEntry = startMeasure.findGraphicalStaffEntryFromTimestamp(startTimeStamp);
            if (!startStaffEntry) { // fix for rendering range set
                startStaffEntry = startMeasure.staffEntries[0];
            }
            let endStaffEntry = endMeasure.findGraphicalStaffEntryFromTimestamp(endTimeStamp);
            if (!endStaffEntry) { // fix for rendering range set
                endStaffEntry = endMeasure.staffEntries[endMeasure.staffEntries.length - 1];
            }
            graphicalOctaveShift.setStartNote(startStaffEntry);
            if (endStaffLine !== startStaffLine) {
                graphicalOctaveShift.endsOnDifferentStaffLine = true;
                let lastMeasureOfFirstShift = this.findLastStafflineMeasure(startStaffLine);
                if (lastMeasureOfFirstShift === undefined) { // TODO handle this case correctly (e.g. when no staffentries found above or drawUpToMeasureNumber set)
                    lastMeasureOfFirstShift = endMeasure;
                }
                const lastNoteOfFirstShift = lastMeasureOfFirstShift.staffEntries[lastMeasureOfFirstShift.staffEntries.length - 1];
                graphicalOctaveShift.setEndNote(lastNoteOfFirstShift);
                graphicalOctaveShift.graphicalEndAtMeasureEnd = true;
                graphicalOctaveShift.endMeasure = lastMeasureOfFirstShift;
                const systemsInBetweenCount = endStaffLine.ParentMusicSystem.Id - startStaffLine.ParentMusicSystem.Id;
                if (systemsInBetweenCount > 0) {
                    //Loop through the stafflines in between to the end
                    for (let i = startStaffLine.ParentMusicSystem.Id; i < endStaffLine.ParentMusicSystem.Id; i++) {
                        const idx = i + 1;
                        const nextShiftMusicSystem = this.musicSystems[idx];
                        const nextShiftStaffline = nextShiftMusicSystem.StaffLines[staffIndex];
                        const nextShiftFirstMeasure = nextShiftStaffline.Measures[0];
                        // Shift starts on the first measure
                        const nextOctaveShift = new VexFlowOctaveShift_1.VexFlowOctaveShift(octaveShift, nextShiftFirstMeasure.PositionAndShape);
                        let nextShiftLastMeasure = this.findLastStafflineMeasure(nextShiftStaffline);
                        if (i < systemsInBetweenCount - 1) {
                            // if not - 1, the last octaveshift will always go to the end of the staffline
                            nextOctaveShift.endsOnDifferentStaffLine = true;
                            nextOctaveShift.graphicalEndAtMeasureEnd = true;
                            nextOctaveShift.endMeasure = nextShiftLastMeasure;
                        }
                        const firstNote = nextShiftFirstMeasure.staffEntries[0];
                        let lastNote = nextShiftLastMeasure.staffEntries[nextShiftLastMeasure.staffEntries.length - 1];
                        //If the is the ending staffline, this endMeasure is the end of the shift
                        if (endMeasure.ParentStaffLine === nextShiftStaffline) {
                            nextShiftLastMeasure = endMeasure;
                            lastNote = endStaffEntry;
                        }
                        if (lastNote.graphicalVoiceEntries.length === 1 &&
                            lastNote.graphicalVoiceEntries[0].notes.length === 1 &&
                            lastNote.graphicalVoiceEntries[0].notes[0].sourceNote.isWholeMeasureNote()) {
                            // also draw octaveshift until end of measure if we have a whole note that goes over the whole measure
                            nextOctaveShift.graphicalEndAtMeasureEnd = true;
                            nextOctaveShift.endMeasure = nextShiftLastMeasure;
                        }
                        const logPrefix = "VexFlowMusicSheetCalculator.calculateSingleOctaveShift: ";
                        if (!firstNote) {
                            loglevel_1.default.warn(logPrefix + "no firstNote found");
                        }
                        if (!lastNote) {
                            loglevel_1.default.warn(logPrefix + "no lastNote found");
                        }
                        nextOctaveShift.setStartNote(firstNote);
                        nextOctaveShift.setEndNote(lastNote);
                        nextShiftStaffline.OctaveShifts.push(nextOctaveShift);
                        this.calculateOctaveShiftSkyBottomLine(firstNote, lastNote, nextOctaveShift, nextShiftStaffline);
                    }
                }
                this.calculateOctaveShiftSkyBottomLine(startStaffEntry, lastNoteOfFirstShift, graphicalOctaveShift, startStaffLine);
            }
            else {
                graphicalOctaveShift.setEndNote(endStaffEntry);
                this.calculateOctaveShiftSkyBottomLine(startStaffEntry, endStaffEntry, graphicalOctaveShift, startStaffLine);
            }
            startStaffLine.OctaveShifts.push(graphicalOctaveShift);
        }
        else {
            loglevel_1.default.warn("End measure or staffLines for octave shift are undefined! This should not happen!");
        }
    }
    /** Finds the last staffline measure that has staffentries. (staffentries necessary for octaveshift and pedal) */
    findLastStafflineMeasure(staffline) {
        for (let i = staffline.Measures.length - 1; i >= 0; i--) {
            const measure = staffline.Measures[i];
            if (measure.staffEntries.length > 0) {
                return measure;
                // a measure can have no staff entries if e.g. measure.IsExtraGraphicalMeasure, used to show key/rhythm changes.
            }
            // else continue with the measure before this one
        }
    }
    calculateSinglePedal(sourceMeasure, multiExpression, measureIndex, staffIndex) {
        var _a;
        // calculate absolute Timestamp and startStaffLine (and EndStaffLine if needed)
        const pedal = multiExpression.PedalStart;
        const startTimeStamp = pedal.ParentStartMultiExpression.Timestamp;
        const endTimeStamp = (_a = pedal.ParentEndMultiExpression) === null || _a === void 0 ? void 0 : _a.Timestamp;
        const minMeasureToDrawIndex = this.rules.MinMeasureToDrawIndex;
        const maxMeasureToDrawIndex = this.rules.MaxMeasureToDrawIndex;
        let startStaffLine = this.graphicalMusicSheet.MeasureList[measureIndex][staffIndex].ParentStaffLine;
        if (!startStaffLine) { // fix for rendering range set. all of these can probably be done cleaner.
            startStaffLine = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex].ParentStaffLine;
        }
        let endMeasure = undefined;
        if (pedal.ParentEndMultiExpression) {
            endMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(pedal.ParentEndMultiExpression.SourceMeasureParent, staffIndex);
        }
        else {
            //return; // also possible: don't handle faulty pedal without end
            endMeasure = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(staffIndex, true); // get last rendered measure
        }
        if (endMeasure.MeasureNumber > maxMeasureToDrawIndex + 1) { //  ends in measure not rendered
            endMeasure = this.graphicalMusicSheet.getLastGraphicalMeasureFromIndex(staffIndex, true);
        }
        let startMeasure = undefined;
        if (pedal.ParentEndMultiExpression) {
            startMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(pedal.ParentStartMultiExpression.SourceMeasureParent, staffIndex);
        }
        else {
            startMeasure = this.graphicalMusicSheet.getGraphicalMeasureFromSourceMeasureAndIndex(pedal.ParentStartMultiExpression.SourceMeasureParent, staffIndex);
            if (!startMeasure) {
                startMeasure = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex]; // first rendered measure
            }
            //console.log("no end multi expression for start measure " + startMeasure.MeasureNumber);
        }
        if (startMeasure.MeasureNumber < minMeasureToDrawIndex + 1) { //  starts before range of measures selected to render
            startMeasure = this.graphicalMusicSheet.MeasureList[minMeasureToDrawIndex][staffIndex]; // first rendered measure
        }
        if (startMeasure.parentSourceMeasure.measureListIndex < minMeasureToDrawIndex ||
            startMeasure.parentSourceMeasure.measureListIndex > maxMeasureToDrawIndex ||
            endMeasure.parentSourceMeasure.measureListIndex < minMeasureToDrawIndex ||
            endMeasure.parentSourceMeasure.measureListIndex > maxMeasureToDrawIndex) {
            // completely out of drawing range, don't draw anything
            return;
        }
        let endStaffLine = endMeasure.ParentStaffLine;
        if (!endStaffLine) {
            endStaffLine = startStaffLine;
        }
        if (endMeasure && startStaffLine && endStaffLine) {
            let openEnd = false;
            if (startStaffLine !== endStaffLine) {
                openEnd = true;
            }
            // calculate GraphicalPedal and RelativePositions
            const graphicalPedal = new VexFlowPedal_1.VexFlowPedal(pedal, startStaffLine.PositionAndShape, false, openEnd);
            graphicalPedal.setEndsStave(endMeasure, endTimeStamp); // unfortunately this can't already be checked in ExpressionReader
            // calculate RelativePosition
            let startStaffEntry = startMeasure.findGraphicalStaffEntryFromTimestamp(startTimeStamp);
            if (!startStaffEntry) { // fix for rendering range set
                startStaffEntry = startMeasure.staffEntries[0];
            }
            let endStaffEntry = endMeasure.findGraphicalStaffEntryFromTimestamp(endTimeStamp);
            if (!endStaffEntry) { // fix for rendering range set
                endStaffEntry = endMeasure.staffEntries[endMeasure.staffEntries.length - 1];
                // TODO can be undefined if no notes in end measure
            }
            if (!graphicalPedal.setStartNote(startStaffEntry)) {
                return;
            }
            graphicalPedal.setBeginsStave(graphicalPedal.startNote.isRest(), startTimeStamp);
            if (endStaffLine !== startStaffLine) {
                if (graphicalPedal.pedalSymbol === MusicSymbol_1.MusicSymbol.PEDAL_SYMBOL) {
                    graphicalPedal.setEndNote(endStaffEntry);
                    graphicalPedal.setEndMeasure(endMeasure);
                    graphicalPedal.ReleaseText = " ";
                    graphicalPedal.CalculateBoundingBox();
                    this.calculatePedalSkyBottomLine(graphicalPedal.startVfVoiceEntry, graphicalPedal.endVfVoiceEntry, graphicalPedal, startStaffLine);
                    const nextPedalFirstMeasure = endStaffLine.Measures[0];
                    // pedal starts on the first measure
                    const nextPedal = new VexFlowPedal_1.VexFlowPedal(pedal, nextPedalFirstMeasure.PositionAndShape);
                    graphicalPedal.setEndsStave(endMeasure, endTimeStamp);
                    const firstNote = nextPedalFirstMeasure.staffEntries[0];
                    if (!nextPedal.setStartNote(firstNote)) {
                        return;
                    }
                    nextPedal.setEndNote(endStaffEntry);
                    graphicalPedal.setEndMeasure(endMeasure);
                    endStaffLine.Pedals.push(nextPedal);
                    nextPedal.CalculateBoundingBox();
                    nextPedal.DepressText = " ";
                    this.calculatePedalSkyBottomLine(nextPedal.startVfVoiceEntry, nextPedal.endVfVoiceEntry, nextPedal, endStaffLine);
                }
                else {
                    let lastMeasureOfFirstShift = this.findLastStafflineMeasure(startStaffLine);
                    if (lastMeasureOfFirstShift === undefined) { // TODO handle this case correctly (when drawUpToMeasureNumber etc set)
                        lastMeasureOfFirstShift = endMeasure;
                    }
                    const lastNoteOfFirstShift = lastMeasureOfFirstShift.staffEntries[lastMeasureOfFirstShift.staffEntries.length - 1];
                    graphicalPedal.setEndNote(lastNoteOfFirstShift);
                    graphicalPedal.setEndMeasure(endMeasure);
                    graphicalPedal.ChangeEnd = false;
                    const systemsInBetweenCount = endStaffLine.ParentMusicSystem.Id - startStaffLine.ParentMusicSystem.Id;
                    if (systemsInBetweenCount > 0) {
                        //Loop through the stafflines in between to the end
                        let currentCount = 1;
                        for (let i = startStaffLine.ParentMusicSystem.Id; i < endStaffLine.ParentMusicSystem.Id; i++) {
                            const nextPedalMusicSystem = this.musicSystems[i + 1];
                            const nextPedalStaffline = nextPedalMusicSystem.StaffLines[staffIndex];
                            const nextPedalFirstMeasure = nextPedalStaffline.Measures[0];
                            let nextOpenEnd = false;
                            let nextChangeEndFromParent = false;
                            if (currentCount < systemsInBetweenCount) {
                                nextOpenEnd = true;
                            }
                            else {
                                nextChangeEndFromParent = true;
                            }
                            currentCount++;
                            // pedal starts on the first measure
                            const nextPedal = new VexFlowPedal_1.VexFlowPedal(pedal, nextPedalFirstMeasure.PositionAndShape, true, nextOpenEnd);
                            graphicalPedal.setEndsStave(endMeasure, endTimeStamp);
                            nextPedal.ChangeBegin = false;
                            if (nextChangeEndFromParent) {
                                nextPedal.ChangeEnd = pedal.ChangeEnd;
                            }
                            else {
                                nextPedal.ChangeEnd = false;
                            }
                            let nextPedalLastMeasure = this.findLastStafflineMeasure(nextPedalStaffline);
                            const firstNote = nextPedalFirstMeasure.staffEntries[0];
                            let lastNote = nextPedalLastMeasure.staffEntries[nextPedalLastMeasure.staffEntries.length - 1];
                            //If the end measure's staffline is the ending staffline, this endMeasure is the end of the pedal
                            if (endMeasure.ParentStaffLine === nextPedalStaffline) {
                                nextPedalLastMeasure = endMeasure;
                                nextPedal.setEndMeasure(endMeasure);
                                lastNote = endStaffEntry;
                            }
                            else {
                                nextPedal.setEndMeasure(nextPedalStaffline.Measures.last());
                            }
                            if (!nextPedal.setStartNote(firstNote)) {
                                break;
                            }
                            nextPedal.setEndNote(lastNote);
                            graphicalPedal.setEndMeasure(endMeasure);
                            nextPedalStaffline.Pedals.push(nextPedal);
                            nextPedal.CalculateBoundingBox();
                            this.calculatePedalSkyBottomLine(nextPedal.startVfVoiceEntry, nextPedal.endVfVoiceEntry, nextPedal, nextPedalStaffline);
                        }
                    }
                    graphicalPedal.CalculateBoundingBox();
                    this.calculatePedalSkyBottomLine(graphicalPedal.startVfVoiceEntry, graphicalPedal.endVfVoiceEntry, graphicalPedal, startStaffLine);
                }
            }
            else {
                graphicalPedal.setEndNote(endStaffEntry);
                graphicalPedal.setEndMeasure(endMeasure);
                graphicalPedal.CalculateBoundingBox();
                this.calculatePedalSkyBottomLine(graphicalPedal.startVfVoiceEntry, graphicalPedal.endVfVoiceEntry, graphicalPedal, startStaffLine);
            }
            startStaffLine.Pedals.push(graphicalPedal);
        }
        else {
            loglevel_1.default.warn("End measure or staffLines for pedal are undefined! This should not happen!");
        }
    }
    calculatePedalSkyBottomLine(startVfVoiceEntry, endVfVoiceEntry, vfPedal, parentStaffline) {
        var _a, _b, _c, _d;
        let endBbox = endVfVoiceEntry === null || endVfVoiceEntry === void 0 ? void 0 : endVfVoiceEntry.PositionAndShape;
        if (!endBbox) {
            endBbox = vfPedal.endMeasure.PositionAndShape;
        }
        //Just for shorthand. Easier readability below
        const PEDAL_STYLES_ENUM = vexflow_1.default.Flow.PedalMarking.Styles;
        const pedalMarking = vfPedal.getPedalMarking();
        //VF adds 3 lines to whatever the pedal line is set to.
        //VF also measures from the bottom line, whereas our bottom line is from the top staff line
        const yLineForPedalMarking = (pedalMarking.line + 3 + (parentStaffline.StaffLines.length - 1));
        //VF Uses a margin offset for rendering. Take this into account
        const pedalMarkingMarginXOffset = pedalMarking.render_options.text_margin_right / 10;
        //TODO: Most of this should be in the bounding box calculation
        let startX = startVfVoiceEntry.PositionAndShape.AbsolutePosition.x - pedalMarkingMarginXOffset;
        if (pedalMarking.style === PEDAL_STYLES_ENUM.MIXED ||
            pedalMarking.style === PEDAL_STYLES_ENUM.MIXED_OPEN_END ||
            pedalMarking.style === PEDAL_STYLES_ENUM.TEXT) {
            //Accomodate the Ped. sign
            startX -= 1;
        }
        let stopX = undefined;
        let footroom = (parentStaffline.StaffLines.length - 1);
        //Find the highest foot room in our staffline
        for (const otherPedal of parentStaffline.Pedals) {
            const vfOtherPedal = otherPedal;
            const otherPedalMarking = vfOtherPedal.getPedalMarking();
            const yLineForOtherPedalMarking = (otherPedalMarking.line + 3 + (parentStaffline.StaffLines.length - 1));
            footroom = Math.max(yLineForOtherPedalMarking, footroom);
        }
        //We have the two seperate symbols, with two bounding boxes
        if (vfPedal.EndSymbolPositionAndShape) {
            const symbolHalfHeight = pedalMarking.render_options.glyph_point_size / 20;
            //Width of the Ped. symbol
            stopX = startX + 3.4;
            const startX2 = endBbox.AbsolutePosition.x - pedalMarkingMarginXOffset;
            //Width of * symbol
            const stopX2 = startX2 + 1.5;
            footroom = Math.max(parentStaffline.SkyBottomLineCalculator.getBottomLineMaxInRange(startX, stopX), footroom);
            footroom = Math.max(yLineForPedalMarking + symbolHalfHeight * 2, footroom);
            const footroom2 = parentStaffline.SkyBottomLineCalculator.getBottomLineMaxInRange(startX2, stopX2);
            //If Depress text is set, means we are not rendering the begin label (we are just rendering the end one)
            if (!vfPedal.DepressText) {
                footroom = Math.max(footroom, footroom2);
            }
            vfPedal.setLine(footroom - 3 - (parentStaffline.StaffLines.length - 1));
            parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(startX, stopX, footroom + symbolHalfHeight);
            parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(startX2, stopX2, footroom + symbolHalfHeight);
        }
        else {
            const bracketHeight = pedalMarking.render_options.bracket_height / 10;
            if (pedalMarking.EndsStave) {
                if (endVfVoiceEntry) {
                    stopX = endVfVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.AbsolutePosition.x +
                        endVfVoiceEntry.parentStaffEntry.parentMeasure.PositionAndShape.Size.width - pedalMarkingMarginXOffset;
                }
                else {
                    stopX = endBbox.AbsolutePosition.x + endBbox.Size.width;
                }
            }
            else {
                switch (pedalMarking.style) {
                    case PEDAL_STYLES_ENUM.BRACKET_OPEN_END:
                    case PEDAL_STYLES_ENUM.BRACKET_OPEN_BOTH:
                    case PEDAL_STYLES_ENUM.MIXED_OPEN_END:
                        stopX = endBbox.AbsolutePosition.x + endBbox.BorderRight - pedalMarkingMarginXOffset;
                        break;
                    default:
                        stopX = endBbox.AbsolutePosition.x + endBbox.BorderLeft - pedalMarkingMarginXOffset;
                        break;
                }
            }
            //Take into account in-staff clefs associated with the staff entry (they modify the bounding box position)
            const vfClefBefore = (_a = endVfVoiceEntry === null || endVfVoiceEntry === void 0 ? void 0 : endVfVoiceEntry.parentStaffEntry) === null || _a === void 0 ? void 0 : _a.vfClefBefore;
            if (vfClefBefore) {
                const clefWidth = vfClefBefore.getWidth() / 10;
                stopX += clefWidth;
            }
            footroom = Math.max(parentStaffline.SkyBottomLineCalculator.getBottomLineMaxInRange(startX, stopX), footroom);
            if (footroom === Infinity) { // will cause Vexflow error
                return;
            }
            //Whatever is currently lower - the set render height of the begin vf stave, the set render height of the end vf stave,
            //or the bottom line. Use that as the render height of both staves
            footroom = Math.max(footroom, yLineForPedalMarking + bracketHeight);
            vfPedal.setLine(footroom - 3 - (parentStaffline.StaffLines.length - 1));
            if (startX > stopX) { // TODO hotfix for skybottomlinecalculator after pedal no endNote fix
                const newStart = stopX;
                stopX = startX;
                startX = newStart;
            }
            parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(startX, stopX, footroom + bracketHeight);
        }
        //If our current pedal is below the other pedals in this staffline, set them all to this height
        for (const otherPedal of parentStaffline.Pedals) {
            const vfOtherPedal = otherPedal;
            const otherPedalMarking = vfOtherPedal.getPedalMarking();
            const yLineForOtherPedalMarking = (otherPedalMarking.line + 3 + (parentStaffline.StaffLines.length - 1));
            //Only do these changes if current footroom is higher
            if (footroom > yLineForOtherPedalMarking) {
                const otherPedalMarkingMarginXOffset = otherPedalMarking.render_options.text_margin_right / 10;
                let otherPedalStartX = vfOtherPedal.startVfVoiceEntry.PositionAndShape.AbsolutePosition.x - otherPedalMarkingMarginXOffset;
                let otherPedalStopX = undefined;
                vfOtherPedal.setLine(footroom - 3 - (parentStaffline.StaffLines.length - 1));
                let otherPedalEndBBox = (_b = vfOtherPedal.endVfVoiceEntry) === null || _b === void 0 ? void 0 : _b.PositionAndShape;
                if (!otherPedalEndBBox) {
                    otherPedalEndBBox = vfOtherPedal.endMeasure.PositionAndShape;
                }
                if (vfOtherPedal.EndSymbolPositionAndShape) {
                    const otherSymbolHalfHeight = pedalMarking.render_options.glyph_point_size / 20;
                    //Width of the Ped. symbol
                    otherPedalStopX = otherPedalStartX + 3.4;
                    const otherPedalStartX2 = otherPedalEndBBox.AbsolutePosition.x - otherPedalMarkingMarginXOffset;
                    //Width of * symbol
                    const otherPedalStopX2 = otherPedalStartX2 + 1.5;
                    parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(otherPedalStartX, otherPedalStopX, footroom + otherSymbolHalfHeight);
                    parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(otherPedalStartX2, otherPedalStopX2, footroom + otherSymbolHalfHeight);
                }
                else {
                    const otherPedalBracketHeight = otherPedalMarking.render_options.bracket_height / 10;
                    if (otherPedalMarking.EndsStave) {
                        otherPedalStopX = otherPedalEndBBox.AbsolutePosition.x + otherPedalEndBBox.Size.width - otherPedalMarkingMarginXOffset;
                    }
                    else {
                        switch (pedalMarking.style) {
                            case PEDAL_STYLES_ENUM.BRACKET_OPEN_END:
                            case PEDAL_STYLES_ENUM.BRACKET_OPEN_BOTH:
                            case PEDAL_STYLES_ENUM.MIXED_OPEN_END:
                                otherPedalStopX = otherPedalEndBBox.AbsolutePosition.x + otherPedalEndBBox.BorderRight - otherPedalMarkingMarginXOffset;
                                break;
                            default:
                                otherPedalStopX = otherPedalEndBBox.AbsolutePosition.x + otherPedalEndBBox.BorderLeft - otherPedalMarkingMarginXOffset;
                                break;
                        }
                    }
                    //Take into account in-staff clefs associated with the staff entry (they modify the bounding box position)
                    const vfOtherClefBefore = (_d = (_c = vfOtherPedal.endVfVoiceEntry) === null || _c === void 0 ? void 0 : _c.parentStaffEntry) === null || _d === void 0 ? void 0 : _d.vfClefBefore;
                    if (vfOtherClefBefore) {
                        const otherClefWidth = vfOtherClefBefore.getWidth() / 10;
                        otherPedalStopX += otherClefWidth;
                    }
                    if (otherPedalStartX > otherPedalStopX) {
                        // TODO this shouldn't happen, though this fixes the SkyBottomLineCalculator error for now (startIndex needs to be <= endIndex)
                        // switch startX and stopX
                        const otherStartX = otherPedalStartX;
                        otherPedalStartX = otherPedalStopX;
                        otherPedalStopX = otherStartX;
                    }
                    parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(otherPedalStartX, otherPedalStopX, footroom + otherPedalBracketHeight);
                }
            }
        }
    }
    calculateOctaveShiftSkyBottomLine(startStaffEntry, endStaffEntry, vfOctaveShift, parentStaffline) {
        if (!endStaffEntry) {
            loglevel_1.default.warn("octaveshift: no endStaffEntry");
            return;
        }
        let endBbox = endStaffEntry.PositionAndShape;
        if (vfOctaveShift.graphicalEndAtMeasureEnd) {
            endBbox = endStaffEntry.parentMeasure.PositionAndShape;
        }
        let startXOffset = startStaffEntry.PositionAndShape.Size.width;
        let endXOffset = endBbox.Size.width;
        //Vexflow renders differently with rests
        if (startStaffEntry.hasOnlyRests()) {
            startXOffset = -startXOffset;
        }
        else {
            startXOffset /= 2;
        }
        if (!vfOctaveShift.graphicalEndAtMeasureEnd) {
            if (!endStaffEntry.hasOnlyRests()) {
                endXOffset /= 2;
            }
            else {
                endXOffset *= 2;
            }
            if (startStaffEntry === endStaffEntry) {
                endXOffset *= 2;
            }
        }
        let startX = startStaffEntry.PositionAndShape.AbsolutePosition.x - startXOffset;
        let stopX = endBbox.AbsolutePosition.x + endXOffset;
        if (startX > stopX) {
            // very rare case of the start staffentry being before end staffentry. would lead to error in skybottomline. See #1281
            // reverse startX and endX
            const oldStartX = startX;
            startX = stopX;
            stopX = oldStartX;
        }
        vfOctaveShift.PositionAndShape.Size.width = stopX - startX;
        const textBracket = vfOctaveShift.getTextBracket();
        const fontSize = textBracket.font.size / 10;
        if (textBracket.position === VF.TextBracket.Positions.TOP) {
            const headroom = Math.ceil(parentStaffline.SkyBottomLineCalculator.getSkyLineMinInRange(startX, stopX));
            if (headroom === Infinity) { // will cause Vexflow error
                return;
            }
            textBracket.start.getStave().options.top_text_position = Math.abs(headroom);
            parentStaffline.SkyBottomLineCalculator.updateSkyLineInRange(startX, stopX, headroom - fontSize * 2);
        }
        else {
            const footroom = parentStaffline.SkyBottomLineCalculator.getBottomLineMaxInRange(startX, stopX);
            if (footroom === Infinity) { // will cause Vexflow error
                return;
            }
            textBracket.start.getStave().options.bottom_text_position = footroom;
            //Vexflow positions top vs. bottom text in a slightly inconsistent way it seems
            parentStaffline.SkyBottomLineCalculator.updateBottomLineInRange(startX, stopX, footroom + fontSize * 1.5);
        }
    }
    /**
     * Calculate all the textual and symbolic [[RepetitionInstruction]]s (e.g. dal segno) for a single [[SourceMeasure]].
     * @param repetitionInstruction
     * @param measureIndex
     */
    calculateWordRepetitionInstruction(repetitionInstruction, measureIndex) {
        // find first visible StaffLine
        let uppermostMeasure = undefined;
        const measures = this.graphicalMusicSheet.MeasureList[measureIndex];
        for (let idx = 0, len = measures.length; idx < len; ++idx) {
            const graphicalMeasure = measures[idx];
            if (graphicalMeasure && graphicalMeasure.ParentStaffLine && graphicalMeasure.ParentStaff.ParentInstrument.Visible) {
                uppermostMeasure = graphicalMeasure;
                break;
            }
        }
        // ToDo: feature/Repetitions
        // now create corresponding graphical symbol or Text in VexFlow:
        // use top measure and staffline for positioning.
        if (uppermostMeasure) {
            uppermostMeasure.addWordRepetition(repetitionInstruction);
        }
    }
    calculateSkyBottomLines() {
        const staffLines = CollectionUtil_1.CollectionUtil.flat(this.musicSystems.map(musicSystem => musicSystem.StaffLines));
        //const numMeasures: number = staffLines.map(staffLine => staffLine.Measures.length).reduce((a, b) => a + b, 0);
        let numMeasures = 0; // number of graphical measures that are rendered
        for (const staffline of staffLines) {
            for (const measure of staffline.Measures) {
                if (measure) { // can be undefined and not rendered in multi-measure rest
                    numMeasures++;
                }
            }
        }
        if (this.rules.AlwaysSetPreferredSkyBottomLineBackendAutomatically) {
            this.rules.setPreferredSkyBottomLineBackendAutomatically(numMeasures);
        }
        if (numMeasures >= this.rules.SkyBottomLineBatchMinMeasures) {
            const calculator = new SkyBottomLineBatchCalculator_1.SkyBottomLineBatchCalculator(staffLines, this.rules.PreferredSkyBottomLineBatchCalculatorBackend);
            calculator.calculateLines();
        }
        else {
            for (const staffLine of staffLines) {
                staffLine.SkyBottomLineCalculator.calculateLines();
            }
        }
    }
    /**
     * Re-adjust the x positioning of expressions. Update the skyline afterwards
     */
    calculateExpressionAlignements() {
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                try {
                    staffLine.AlignmentManager.alignDynamicExpressions();
                    staffLine.AbstractExpressions.forEach(ae => {
                        ae.updateSkyBottomLine();
                    });
                }
                catch (e) {
                    // TODO still necessary when calculation of expression fails, see calculateDynamicExpressionsForMultiExpression()
                    //   see calculateGraphicalContinuousDynamic(), also in MusicSheetCalculator.
                }
            }
        }
    }
    /**
     * Check if the tied graphical note belongs to any beams or tuplets and react accordingly.
     * @param tiedGraphicalNote
     * @param beams
     * @param activeClef
     * @param octaveShiftValue
     * @param graphicalStaffEntry
     * @param duration
     * @param openTie
     * @param isLastTieNote
     */
    handleTiedGraphicalNote(tiedGraphicalNote, beams, activeClef, octaveShiftValue, graphicalStaffEntry, duration, openTie, isLastTieNote) {
        return;
    }
    /**
     * Is called if a note is part of a beam.
     * @param graphicalNote
     * @param beam
     * @param openBeams a list of all currently open beams
     */
    handleBeam(graphicalNote, beam, openBeams) {
        graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure.handleBeam(graphicalNote, beam);
    }
    handleVoiceEntryLyrics(voiceEntry, graphicalStaffEntry, lyricWords) {
        voiceEntry.LyricsEntries.forEach((key, lyricsEntry) => {
            const graphicalLyricEntry = new GraphicalLyricEntry_1.GraphicalLyricEntry(lyricsEntry, graphicalStaffEntry, this.rules.LyricsHeight, this.rules.StaffHeight);
            graphicalStaffEntry.LyricsEntries.push(graphicalLyricEntry);
            // create corresponding GraphicalLabel
            const graphicalLabel = graphicalLyricEntry.GraphicalLabel;
            graphicalLabel.setLabelPositionAndShapeBorders();
            if (lyricsEntry.Word) {
                const lyricsEntryIndex = lyricsEntry.Word.Syllables.indexOf(lyricsEntry);
                let index = lyricWords.indexOf(lyricsEntry.Word);
                if (index === -1) {
                    lyricWords.push(lyricsEntry.Word);
                    index = lyricWords.indexOf(lyricsEntry.Word);
                }
                if (this.graphicalLyricWords.length === 0 || index > this.graphicalLyricWords.length - 1) {
                    const graphicalLyricWord = new GraphicalLyricWord_1.GraphicalLyricWord(lyricsEntry.Word);
                    graphicalLyricEntry.ParentLyricWord = graphicalLyricWord;
                    graphicalLyricWord.GraphicalLyricsEntries[lyricsEntryIndex] = graphicalLyricEntry;
                    this.graphicalLyricWords.push(graphicalLyricWord);
                }
                else {
                    const graphicalLyricWord = this.graphicalLyricWords[index];
                    graphicalLyricEntry.ParentLyricWord = graphicalLyricWord;
                    graphicalLyricWord.GraphicalLyricsEntries[lyricsEntryIndex] = graphicalLyricEntry;
                    if (graphicalLyricWord.isFilled()) {
                        lyricWords.splice(index, 1);
                        this.graphicalLyricWords.splice(this.graphicalLyricWords.indexOf(graphicalLyricWord), 1);
                    }
                }
            }
        });
    }
    handleVoiceEntryOrnaments(ornamentContainer, voiceEntry, graphicalStaffEntry) {
        return;
    }
    /**
     * Add articulations to the given vexflow staff entry.
     * @param articulations
     * @param voiceEntry
     * @param graphicalStaffEntry
     */
    handleVoiceEntryArticulations(articulations, voiceEntry, staffEntry) {
        // uncomment this when implementing:
        // let vfse: VexFlowStaffEntry = (graphicalStaffEntry as VexFlowStaffEntry);
        return;
    }
    /**
     * Add technical instructions to the given vexflow staff entry.
     * @param technicalInstructions
     * @param voiceEntry
     * @param staffEntry
     */
    handleVoiceEntryTechnicalInstructions(technicalInstructions, voiceEntry, staffEntry) {
        // uncomment this when implementing:
        // let vfse: VexFlowStaffEntry = (graphicalStaffEntry as VexFlowStaffEntry);
        return;
    }
    /**
     * Is called if a note is part of a tuplet.
     * @param graphicalNote
     * @param tuplet
     * @param openTuplets a list of all currently open tuplets
     */
    handleTuplet(graphicalNote, tuplet, openTuplets) {
        graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure.handleTuplet(graphicalNote, tuplet);
    }
    /**
     * Find the Index of the item of the array of all VexFlow Slurs that holds a specified slur
     * @param gSlurs
     * @param slur
     */
    findIndexGraphicalSlurFromSlur(gSlurs, slur) {
        for (let slurIndex = 0; slurIndex < gSlurs.length; slurIndex++) {
            if (gSlurs[slurIndex].slur === slur) {
                return slurIndex;
            }
        }
        return -1;
    }
    indexOfGraphicalGlissFromGliss(gGlissandi, glissando) {
        for (let glissIndex = 0; glissIndex < gGlissandi.length; glissIndex++) {
            if (gGlissandi[glissIndex].Glissando === glissando) {
                return glissIndex;
            }
        }
        return -1;
    }
    /* VexFlow Version - for later use
    public findIndexVFSlurFromSlur(vfSlurs: VexFlowSlur[], slur: Slur): number {
          for (let slurIndex: number = 0; slurIndex < vfSlurs.length; slurIndex++) {
              if (vfSlurs[slurIndex].vfSlur === slur) {
                  return slurIndex;
              }
          }
    }
    */
    // Generate all Graphical Slurs and attach them to the staffline
    calculateSlurs() {
        const openSlursDict = {};
        for (const graphicalMeasure of this.graphicalMusicSheet.MeasureList[0]) { //let i: number = 0; i < this.graphicalMusicSheet.MeasureList[0].length; i++) {
            openSlursDict[graphicalMeasure.ParentStaff.idInMusicSheet] = [];
        }
        /* VexFlow Version - for later use
        // Generate an empty dictonary to index an array of VexFlowSlur classes
        const vfOpenSlursDict: { [staffId: number]: VexFlowSlur[]; } = {}; //VexFlowSlur[]; } = {};
        // use first SourceMeasure to get all graphical measures to know how many staves are currently visible in this musicsheet
        // foreach stave: create an empty array. It can later hold open slurs.
        // Measure how many staves are visible and reserve space for them.
        for (const graphicalMeasure of this.graphicalMusicSheet.MeasureList[0]) { //let i: number = 0; i < this.graphicalMusicSheet.MeasureList[0].length; i++) {
            vfOpenSlursDict[graphicalMeasure.ParentStaff.idInMusicSheet] = [];
        }
        */
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                // if a graphical slur reaches out of the last musicsystem, we have to create another graphical slur reaching into this musicsystem
                // (one slur needs 2 graphical slurs)
                const openGraphicalSlurs = openSlursDict[staffLine.ParentStaff.idInMusicSheet];
                for (let slurIndex = 0; slurIndex < openGraphicalSlurs.length; slurIndex++) {
                    const oldGSlur = openGraphicalSlurs[slurIndex];
                    const newGSlur = new GraphicalSlur_1.GraphicalSlur(oldGSlur.slur, this.rules); //Graphicalslur.createFromSlur(oldSlur);
                    staffLine.addSlurToStaffline(newGSlur); // every VFSlur is added to the array in the VFStaffline!
                    openGraphicalSlurs[slurIndex] = newGSlur;
                }
                /* VexFlow Version - for later use
                const vfOpenSlurs: VexFlowSlur[] = vfOpenSlursDict[staffLine.ParentStaff.idInMusicSheet];
                const vfStaffLine: VexFlowStaffLine = <VexFlowStaffLine> staffLine;
                for (let slurIndex: number = 0; slurIndex < vfOpenSlurs.length; slurIndex++) {
                    const oldVFSlur: VexFlowSlur = vfOpenSlurs[slurIndex];
                    const newVFSlur: VexFlowSlur = VexFlowSlur.createFromVexflowSlur(oldVFSlur);
                    newVFSlur.vfStartNote = undefined;
                    vfStaffLine.addVFSlurToVFStaffline(newVFSlur); // every VFSlur is added to the array in the VFStaffline!
                    vfOpenSlurs[slurIndex] = newVFSlur;
                }
                */
                // add reference of slur array to the VexFlowStaffline class
                for (const graphicalMeasure of staffLine.Measures) {
                    for (const graphicalStaffEntry of graphicalMeasure.staffEntries) {
                        // loop over "normal" notes (= no gracenotes)
                        for (const graphicalVoiceEntry of graphicalStaffEntry.graphicalVoiceEntries) {
                            for (const graphicalNote of graphicalVoiceEntry.notes) {
                                for (const slur of graphicalNote.sourceNote.NoteSlurs) {
                                    // extra check for some MusicSheets that have openSlurs (because only the first Page is available -> Recordare files)
                                    if (!slur.EndNote || !slur.StartNote) {
                                        continue;
                                    }
                                    // add new VexFlowSlur to List
                                    if (slur.StartNote === graphicalNote.sourceNote) {
                                        // TODO the following seems to have been intended to prevent unnecessary slurs that overlap ties,
                                        //   but it simply leads to correct slurs being left out where the tie end note is the slur start note.
                                        //   visual regression tests simply show valid slurs being left out in 4 samples.
                                        // if (graphicalNote.sourceNote.NoteTie) {
                                        //   if (graphicalNote.parentVoiceEntry.parentStaffEntry.getAbsoluteTimestamp() !==
                                        //     graphicalNote.sourceNote.NoteTie.StartNote.getAbsoluteTimestamp()) {
                                        //     break;
                                        //   }
                                        // }
                                        // Add a Graphical Slur to the staffline, if the recent note is the Startnote of a slur
                                        const gSlur = new GraphicalSlur_1.GraphicalSlur(slur, this.rules);
                                        openGraphicalSlurs.push(gSlur);
                                        staffLine.addSlurToStaffline(gSlur);
                                        /* VexFlow Version - for later use
                                        const vfSlur: VexFlowSlur = new VexFlowSlur(slur);
                                        vfOpenSlurs.push(vfSlur); //add open... adding / removing is JUST DONE in the open... array
                                        vfSlur.vfStartNote = (graphicalVoiceEntry as VexFlowVoiceEntry).vfStaveNote;
                                        vfStaffLine.addVFSlurToVFStaffline(vfSlur); // every VFSlur is added to the array in the VFStaffline!
                                        */
                                    }
                                    if (slur.EndNote === graphicalNote.sourceNote) {
                                        // Remove the Graphical Slur from the staffline if the note is the Endnote of a slur
                                        const index = this.findIndexGraphicalSlurFromSlur(openGraphicalSlurs, slur);
                                        if (index >= 0) {
                                            // save Voice Entry in VFSlur and then remove it from array of open VFSlurs
                                            const gSlur = openGraphicalSlurs[index];
                                            if (gSlur.staffEntries.indexOf(graphicalStaffEntry) === -1) {
                                                gSlur.staffEntries.push(graphicalStaffEntry);
                                            }
                                            openGraphicalSlurs.splice(index, 1);
                                        }
                                        /* VexFlow Version - for later use
                                        const vfIndex: number = this.findIndexVFSlurFromSlur(vfOpenSlurs, slur);
                                        if (vfIndex !== undefined) {
                                            // save Voice Entry in VFSlur and then remove it from array of open VFSlurs
                                            const vfSlur: VexFlowSlur = vfOpenSlurs[vfIndex];
                                            vfSlur.vfEndNote = (graphicalVoiceEntry as VexFlowVoiceEntry).vfStaveNote;
                                            vfSlur.createVexFlowCurve();
                                            vfOpenSlurs.splice(vfIndex, 1);
                                        }
                                        */
                                    }
                                }
                            }
                        }
                        //add the present Staffentry to all open slurs that don't contain this Staffentry already
                        for (const gSlur of openGraphicalSlurs) {
                            if (gSlur.staffEntries.indexOf(graphicalStaffEntry) === -1) {
                                gSlur.staffEntries.push(graphicalStaffEntry);
                            }
                        }
                    } // loop over StaffEntries
                } // loop over Measures
            } // loop over StaffLines
            // Attach vfSlur array to the vfStaffline to be drawn
            //vfStaffLine.SlursInVFStaffLine = vfSlurs;
        } // loop over MusicSystems
        // order slurs that were saved to the Staffline
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                // Sort all gSlurs in the staffline using the Compare function in class GraphicalSlurSorter
                const sortedGSlurs = staffLine.GraphicalSlurs.sort(GraphicalSlur_1.GraphicalSlur.Compare);
                for (const gSlur of sortedGSlurs) {
                    // crossed slurs will be handled later:
                    if (gSlur.slur.isCrossed()) {
                        continue;
                    }
                    gSlur.calculateCurve(this.rules);
                }
            }
        }
    }
    calculateGlissandi() {
        const openGlissDict = {};
        for (const graphicalMeasure of this.graphicalMusicSheet.MeasureList[0]) { //let i: number = 0; i < this.graphicalMusicSheet.MeasureList[0].length; i++) {
            openGlissDict[graphicalMeasure.ParentStaff.idInMusicSheet] = [];
        }
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                // if a glissando reaches out of the last musicsystem, we have to create another glissando reaching into this musicsystem
                // (one gliss needs 2 graphical gliss)
                // const isTab: boolean = staffLine.ParentStaff.isTab;
                const openGlissandi = openGlissDict[staffLine.ParentStaff.idInMusicSheet];
                for (let glissIndex = 0; glissIndex < openGlissandi.length; glissIndex++) {
                    const oldGliss = openGlissandi[glissIndex];
                    const newGliss = new VexFlowGlissando_1.VexFlowGlissando(oldGliss.Glissando);
                    staffLine.addGlissandoToStaffline(newGliss);
                    openGlissandi[glissIndex] = newGliss;
                }
                // add reference of gliss array to the VexFlowStaffline class
                for (const graphicalMeasure of staffLine.Measures) {
                    for (const graphicalStaffEntry of graphicalMeasure.staffEntries) {
                        // loop over "normal" notes (= no gracenotes)
                        for (const graphicalVoiceEntry of graphicalStaffEntry.graphicalVoiceEntries) {
                            for (const graphicalNote of graphicalVoiceEntry.notes) {
                                const gliss = graphicalNote.sourceNote.NoteGlissando;
                                // extra check for some MusicSheets that have openSlurs (because only the first Page is available -> Recordare files)
                                if (!(gliss === null || gliss === void 0 ? void 0 : gliss.EndNote) || !(gliss === null || gliss === void 0 ? void 0 : gliss.StartNote)) {
                                    continue;
                                }
                                // add new VexFlowGlissando to List
                                if (gliss.StartNote === graphicalNote.sourceNote) {
                                    // Add a Graphical Glissando to the staffline, if the recent note is the Startnote of a slur
                                    const gGliss = new VexFlowGlissando_1.VexFlowGlissando(gliss);
                                    openGlissandi.push(gGliss);
                                    //gGliss.staffEntries.push(graphicalStaffEntry);
                                    staffLine.addGlissandoToStaffline(gGliss);
                                }
                                if (gliss.EndNote === graphicalNote.sourceNote) {
                                    // Remove the gliss from the staffline if the note is the Endnote of a gliss
                                    const index = this.indexOfGraphicalGlissFromGliss(openGlissandi, gliss);
                                    if (index >= 0) {
                                        // save Voice Entry in gliss and then remove it from array of open glissandi
                                        const gGliss = openGlissandi[index];
                                        if (gGliss.staffEntries.indexOf(graphicalStaffEntry) === -1) {
                                            gGliss.staffEntries.push(graphicalStaffEntry);
                                        }
                                        openGlissandi.splice(index, 1);
                                    }
                                }
                            }
                        }
                        // probably unnecessary, as a gliss only has 2 staffentries
                        //add the present Staffentry to all open slurs that don't contain this Staffentry already
                        for (const gGliss of openGlissandi) {
                            if (gGliss.staffEntries.indexOf(graphicalStaffEntry) === -1) {
                                gGliss.staffEntries.push(graphicalStaffEntry);
                            }
                        }
                    } // loop over StaffEntries
                } // loop over Measures
            } // loop over StaffLines
        } // loop over MusicSystems
        for (const musicSystem of this.musicSystems) {
            for (const staffLine of musicSystem.StaffLines) {
                // order glissandi that were saved to the Staffline
                // TODO? Sort all gSlurs in the staffline using the Compare function in class GraphicalSlurSorter
                //const sortedGSlurs: GraphicalSlur[] = staffLine.GraphicalSlurs.sort(GraphicalSlur.Compare);
                for (const gGliss of staffLine.GraphicalGlissandi) {
                    const isTab = staffLine.ParentStaff.isTab;
                    if (isTab) {
                        const startNote = gGliss.Glissando.StartNote;
                        const endNote = gGliss.Glissando.EndNote;
                        const vfStartNote = gGliss.staffEntries[0].findGraphicalNoteFromNote(startNote);
                        const vfEndNote = gGliss.staffEntries.last().findGraphicalNoteFromNote(endNote);
                        if (!vfStartNote && !vfEndNote) {
                            return; // otherwise causes Vexflow error
                        }
                        let slideDirection = 1;
                        if (startNote.FretNumber > endNote.FretNumber) {
                            slideDirection = -1;
                        }
                        let first_indices = undefined;
                        let last_indices = undefined;
                        let startStemmableNote = undefined;
                        // let startNoteIndexInTie: number = 0;
                        if (vfStartNote && vfStartNote.vfnote && vfStartNote.vfnote.length >= 2) {
                            startStemmableNote = vfStartNote.vfnote[0]; // otherwise needs to be undefined in TabSlide constructor!
                            first_indices = [0];
                            // startNoteIndexInTie = vfStartNote.vfnote[1];
                        }
                        let endStemmableNote = undefined;
                        // let endNoteIndexInTie: number = 0;
                        if (vfEndNote && vfEndNote.vfnote && vfEndNote.vfnote.length >= 2) {
                            endStemmableNote = vfEndNote.vfnote[0];
                            last_indices = [0];
                            // endNoteIndexInTie = vfEndNote.vfnote[1];
                        }
                        const vfTie = new VF.TabSlide({
                            first_indices: first_indices,
                            first_note: startStemmableNote,
                            last_indices: last_indices,
                            last_note: endStemmableNote,
                        }, slideDirection);
                        const startMeasure = vfStartNote === null || vfStartNote === void 0 ? void 0 : vfStartNote.parentVoiceEntry.parentStaffEntry.parentMeasure;
                        if (startMeasure) {
                            startMeasure.vfTies.push(vfTie);
                            gGliss.vfTie = vfTie;
                        }
                        const endMeasure = vfEndNote === null || vfEndNote === void 0 ? void 0 : vfEndNote.parentVoiceEntry.parentStaffEntry.parentMeasure;
                        if (endMeasure) {
                            endMeasure.vfTies.push(vfTie);
                            gGliss.vfTie = vfTie;
                        }
                    }
                    else {
                        //gGliss.calculateLine(this.rules);
                    }
                }
            }
        }
    }
}
exports.VexFlowMusicSheetCalculator = VexFlowMusicSheetCalculator;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts":
/*!***********************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowMusicSheetDrawer = exports.unitInPixels = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
const MusicSheetDrawer_1 = __webpack_require__(/*! ../MusicSheetDrawer */ "./src/MusicalScore/Graphical/MusicSheetDrawer.ts");
const RectangleF2D_1 = __webpack_require__(/*! ../../../Common/DataObjects/RectangleF2D */ "./src/Common/DataObjects/RectangleF2D.ts");
const PointF2D_1 = __webpack_require__(/*! ../../../Common/DataObjects/PointF2D */ "./src/Common/DataObjects/PointF2D.ts");
const VexFlowTextMeasurer_1 = __webpack_require__(/*! ./VexFlowTextMeasurer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowTextMeasurer.ts");
const DrawingEnums_1 = __webpack_require__(/*! ../DrawingEnums */ "./src/MusicalScore/Graphical/DrawingEnums.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const GraphicalInstantaneousTempoExpression_1 = __webpack_require__(/*! ../GraphicalInstantaneousTempoExpression */ "./src/MusicalScore/Graphical/GraphicalInstantaneousTempoExpression.ts");
const GraphicalInstantaneousDynamicExpression_1 = __webpack_require__(/*! ../GraphicalInstantaneousDynamicExpression */ "./src/MusicalScore/Graphical/GraphicalInstantaneousDynamicExpression.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const GraphicalContinuousDynamicExpression_1 = __webpack_require__(/*! ../GraphicalContinuousDynamicExpression */ "./src/MusicalScore/Graphical/GraphicalContinuousDynamicExpression.ts");
const DrawingParameters_1 = __webpack_require__(/*! ../DrawingParameters */ "./src/MusicalScore/Graphical/DrawingParameters.ts");
const GraphicalUnknownExpression_1 = __webpack_require__(/*! ../GraphicalUnknownExpression */ "./src/MusicalScore/Graphical/GraphicalUnknownExpression.ts");
const SvgVexFlowBackend_1 = __webpack_require__(/*! ./SvgVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/SvgVexFlowBackend.ts");
const CanvasVexFlowBackend_1 = __webpack_require__(/*! ./CanvasVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts");
/**
 * This is a global constant which denotes the height in pixels of the space between two lines of the stave
 * (when zoom = 1.0)
 * @type number
 */
exports.unitInPixels = 10;
class VexFlowMusicSheetDrawer extends MusicSheetDrawer_1.MusicSheetDrawer {
    constructor(drawingParameters = new DrawingParameters_1.DrawingParameters()) {
        super(new VexFlowTextMeasurer_1.VexFlowTextMeasurer(drawingParameters.Rules), drawingParameters);
        this.backends = [];
        this.zoom = 1.0;
        this.pageIdx = 0; // this is a bad solution, should use MusicPage.PageNumber instead.
    }
    get Backends() {
        return this.backends;
    }
    drawSheet(graphicalMusicSheet) {
        var _a, _b, _c;
        // vexflow 3.x: change default font
        if (this.rules.DefaultVexFlowNoteFont === "gonville") {
            vexflow_1.default.Flow.DEFAULT_FONT_STACK = [(_a = vexflow_1.default.Flow.Fonts) === null || _a === void 0 ? void 0 : _a.Gonville, (_b = vexflow_1.default.Flow.Fonts) === null || _b === void 0 ? void 0 : _b.Bravura, (_c = vexflow_1.default.Flow.Fonts) === null || _c === void 0 ? void 0 : _c.Custom];
        } // else keep new vexflow default Bravura (more cursive, bold).
        // sizing defaults in Vexflow
        vexflow_1.default.Flow.STAVE_LINE_THICKNESS = this.rules.StaffLineWidth * exports.unitInPixels;
        vexflow_1.default.Flow.STEM_WIDTH = this.rules.StemWidth * exports.unitInPixels;
        // sets scale/size of notes/rest notes:
        vexflow_1.default.Flow.DEFAULT_NOTATION_FONT_SCALE = this.rules.VexFlowDefaultNotationFontScale; // default 39
        vexflow_1.default.Flow.DEFAULT_TAB_FONT_SCALE = this.rules.VexFlowDefaultTabFontScale; // default 39 // TODO doesn't seem to do anything
        this.pageIdx = 0;
        for (const graphicalMusicPage of graphicalMusicSheet.MusicPages) {
            if (graphicalMusicPage.PageNumber > this.rules.MaxPageToDrawNumber) {
                break;
            }
            const backend = this.backends[this.pageIdx];
            backend.graphicalMusicPage = graphicalMusicPage;
            backend.scale(this.zoom);
            //backend.resize(graphicalMusicSheet.ParentMusicSheet.pageWidth * unitInPixels * this.zoom,
            //               EngravingRules.Rules.PageHeight * unitInPixels * this.zoom);
            this.pageIdx += 1;
        }
        this.pageIdx = 0;
        this.backend = this.backends[0];
        super.drawSheet(graphicalMusicSheet);
    }
    drawPage(page) {
        if (!page) {
            return;
        }
        this.backend = this.backends[page.PageNumber - 1]; // TODO we may need to set this in a couple of other places. this.pageIdx is a bad solution
        super.drawPage(page);
        this.pageIdx += 1;
    }
    clear() {
        for (const backend of this.backends) {
            backend.clear();
        }
    }
    setZoom(zoom) {
        this.zoom = zoom;
    }
    /**
     * Converts a distance from unit to pixel space.
     * @param unitDistance the distance in units
     * @returns {number} the distance in pixels
     */
    calculatePixelDistance(unitDistance) {
        return unitDistance * exports.unitInPixels;
    }
    drawStaffLine(staffLine) {
        super.drawStaffLine(staffLine);
        const absolutePos = staffLine.PositionAndShape.AbsolutePosition;
        if (this.rules.RenderSlurs) {
            this.drawSlurs(staffLine, absolutePos);
        }
        if (this.rules.RenderGlissandi) {
            this.drawGlissandi(staffLine, absolutePos);
        }
    }
    drawSlurs(vfstaffLine, absolutePos) {
        for (const graphicalSlur of vfstaffLine.GraphicalSlurs) {
            // don't draw crossed slurs, as their curve calculation is not implemented yet:
            if (graphicalSlur.slur.isCrossed()) {
                continue;
            }
            this.drawSlur(graphicalSlur, absolutePos);
        }
    }
    drawGlissandi(vfStaffLine, absolutePos) {
        for (const gGliss of vfStaffLine.GraphicalGlissandi) {
            this.drawGlissando(gGliss, absolutePos);
        }
    }
    drawGlissando(gGliss, abs) {
        if (!gGliss.StaffLine.ParentStaff.isTab) {
            gGliss.calculateLine(this.rules);
        }
        if (gGliss.Line) {
            const newStart = new PointF2D_1.PointF2D(gGliss.Line.Start.x + abs.x, gGliss.Line.Start.y);
            const newEnd = new PointF2D_1.PointF2D(gGliss.Line.End.x + abs.x, gGliss.Line.End.y);
            // note that we do not add abs.y, because GraphicalGlissando.calculateLine() uses AbsolutePosition for y,
            //   because unfortunately RelativePosition seems imprecise.
            this.drawLine(newStart, newEnd, gGliss.Color, gGliss.Width);
        }
        else {
            const vfTie = gGliss.vfTie;
            if (vfTie) {
                const context = this.backend.getContext();
                vfTie.setContext(context);
                vfTie.draw();
            }
        }
    }
    drawSlur(graphicalSlur, abs) {
        const curvePointsInPixels = [];
        // 1) create inner or original curve:
        const p1 = new PointF2D_1.PointF2D(graphicalSlur.bezierStartPt.x + abs.x, graphicalSlur.bezierStartPt.y + abs.y);
        const p2 = new PointF2D_1.PointF2D(graphicalSlur.bezierStartControlPt.x + abs.x, graphicalSlur.bezierStartControlPt.y + abs.y);
        const p3 = new PointF2D_1.PointF2D(graphicalSlur.bezierEndControlPt.x + abs.x, graphicalSlur.bezierEndControlPt.y + abs.y);
        const p4 = new PointF2D_1.PointF2D(graphicalSlur.bezierEndPt.x + abs.x, graphicalSlur.bezierEndPt.y + abs.y);
        // put screen transformed points into array
        curvePointsInPixels.push(this.applyScreenTransformation(p1));
        curvePointsInPixels.push(this.applyScreenTransformation(p2));
        curvePointsInPixels.push(this.applyScreenTransformation(p3));
        curvePointsInPixels.push(this.applyScreenTransformation(p4));
        //DEBUG: Render control points
        /*
        for (const point of curvePointsInPixels) {
            const pointRect: RectangleF2D = new RectangleF2D(point.x - 2, point.y - 2, 4, 4);
            this.backend.renderRectangle(pointRect, 3, "#000000", 1);
        }*/
        // 2) create second outer curve to create a thickness for the curve:
        if (graphicalSlur.placement === AbstractExpression_1.PlacementEnum.Above) {
            p1.y -= 0.05;
            p2.y -= 0.3;
            p3.y -= 0.3;
            p4.y -= 0.05;
        }
        else {
            p1.y += 0.05;
            p2.y += 0.3;
            p3.y += 0.3;
            p4.y += 0.05;
        }
        // put screen transformed points into array
        curvePointsInPixels.push(this.applyScreenTransformation(p1));
        curvePointsInPixels.push(this.applyScreenTransformation(p2));
        curvePointsInPixels.push(this.applyScreenTransformation(p3));
        curvePointsInPixels.push(this.applyScreenTransformation(p4));
        graphicalSlur.SVGElement = this.backend.renderCurve(curvePointsInPixels);
    }
    drawMeasure(measure) {
        measure.setAbsoluteCoordinates(measure.PositionAndShape.AbsolutePosition.x * exports.unitInPixels, measure.PositionAndShape.AbsolutePosition.y * exports.unitInPixels);
        try {
            measure.draw(this.backend.getContext());
            // Vexflow errors can happen here. If we don't catch errors, rendering will stop after this measure.
        }
        catch (ex) {
            loglevel_1.default.warn("VexFlowMusicSheetDrawer.drawMeasure", ex);
        }
        let newBuzzRollId = 0;
        // Draw the StaffEntries
        for (const staffEntry of measure.staffEntries) {
            this.drawStaffEntry(staffEntry);
            newBuzzRollId = this.drawBuzzRolls(staffEntry, newBuzzRollId);
        }
    }
    drawBuzzRolls(staffEntry, newBuzzRollId) {
        var _a;
        for (const gve of staffEntry.graphicalVoiceEntries) {
            for (const note of gve.notes) {
                if ((_a = note.sourceNote.TremoloInfo) === null || _a === void 0 ? void 0 : _a.tremoloUnmeasured) {
                    const thickness = this.rules.TremoloBuzzRollThickness;
                    const baseLength = 0.9;
                    const baseHeight = 0.5;
                    const vfNote = note;
                    let stemTip;
                    let stemHeight;
                    const directionSign = vfNote.vfnote[0].getStemDirection(); // 1 or -1
                    if (this.backend instanceof SvgVexFlowBackend_1.SvgVexFlowBackend) {
                        const stemElement = vfNote.getStemSVG();
                        const rect = stemElement.getBBox();
                        stemTip = new PointF2D_1.PointF2D(rect.x / 10, rect.y / 10);
                        stemHeight = rect.height / 10;
                    }
                    else if (this.backend instanceof CanvasVexFlowBackend_1.CanvasVexFlowBackend) {
                        stemHeight = vfNote.vfnote[0].getStemLength() / 10;
                        stemTip = new PointF2D_1.PointF2D(vfNote.vfnote[0].getStem().x_begin / 10, vfNote.vfnote[0].getStem().y_top / 10);
                        if (directionSign === 1) {
                            stemTip.y -= stemHeight;
                        }
                    }
                    // this.DrawOverlayLine(stemTip, new PointF2D(stemTip.x + 5, stemTip.y), vfNote.ParentMusicPage); // debug
                    let startHeight = stemTip.y + stemHeight / 3;
                    if (vfNote.vfnote[0].getBeamCount() > 1) {
                        startHeight = stemTip.y + (stemHeight / 2);
                        if (directionSign === -1) {
                            // downwards stem, z paints in downwards direction, so we need to start further up
                            startHeight -= (baseHeight + 0.2);
                        }
                        // note that buzz rolls usually don't appear on notes smaller than 16ths, rather on longer ones
                    }
                    const buzzStartX = stemTip.x - 0.5; // top left start point
                    const buzzStartY = startHeight;
                    const pathPoints = [];
                    // movements to draw the "z" point by point: (drawing by numbers)
                    const movements = [
                        new PointF2D_1.PointF2D(0, -thickness),
                        new PointF2D_1.PointF2D(baseLength - thickness, 0),
                        new PointF2D_1.PointF2D(-baseLength + thickness, -baseHeight),
                        new PointF2D_1.PointF2D(0, -thickness),
                        new PointF2D_1.PointF2D(baseLength, 0),
                        new PointF2D_1.PointF2D(0, thickness),
                        new PointF2D_1.PointF2D(-baseLength + thickness, 0),
                        new PointF2D_1.PointF2D(baseLength - thickness, baseHeight),
                        new PointF2D_1.PointF2D(0, thickness),
                        new PointF2D_1.PointF2D(-baseLength, 0)
                    ];
                    let currentPoint = new PointF2D_1.PointF2D(buzzStartX, buzzStartY);
                    pathPoints.push(currentPoint);
                    for (const movement of movements) {
                        currentPoint = pathPoints.last();
                        pathPoints.push(new PointF2D_1.PointF2D(currentPoint.x + movement.x, currentPoint.y - movement.y));
                    }
                    this.DrawPath(pathPoints, vfNote.ParentMusicPage, true, `buzzRoll${newBuzzRollId}`);
                    newBuzzRollId++;
                }
            }
        }
        return newBuzzRollId;
    }
    // private drawPixel(coord: PointF2D): void {
    //     coord = this.applyScreenTransformation(coord);
    //     const ctx: any = this.backend.getContext();
    //     const oldStyle: string = ctx.fillStyle;
    //     ctx.fillStyle = "#00FF00FF";
    //     ctx.fillRect( coord.x, coord.y, 2, 2 );
    //     ctx.fillStyle = oldStyle;
    // }
    /** Draws a line in the current backend. Only usable while pages are drawn sequentially, because backend reference is updated in that process.
     *  To add your own lines after rendering, use DrawOverlayLine.
     */
    drawLine(start, stop, color = "#000000FF", lineWidth = 0.2) {
        // TODO maybe the backend should be given as an argument here as well, otherwise this can't be used after rendering of multiple pages is done.
        start = this.applyScreenTransformation(start);
        stop = this.applyScreenTransformation(stop);
        /*if (!this.backend) {
            this.backend = this.backends[0];
        }*/
        return this.backend.renderLine(start, stop, color, lineWidth * exports.unitInPixels);
    }
    /** Lets a user/developer draw an overlay line on the score. Use this instead of drawLine, which is for OSMD internally only.
     *  The MusicPage has to be specified, because each page and Vexflow backend has its own relative coordinates.
     *  (the AbsolutePosition of a GraphicalNote is relative to its backend)
     *  To get a MusicPage, use GraphicalNote.ParentMusicPage.
     */
    DrawOverlayLine(start, stop, musicPage, color = "#FF0000FF", lineWidth = 0.2, id) {
        if (!musicPage.PageNumber || musicPage.PageNumber > this.backends.length || musicPage.PageNumber < 1) {
            console.log("VexFlowMusicSheetDrawer.drawOverlayLine: invalid page number / music page number doesn't correspond to an existing backend.");
            return;
        }
        const musicPageIndex = musicPage.PageNumber - 1;
        const backendToUse = this.backends[musicPageIndex];
        start = this.applyScreenTransformation(start);
        stop = this.applyScreenTransformation(stop);
        if (!id) {
            id = `overlayLine ${start.x}/${start.y}`;
        }
        return backendToUse.renderLine(start, stop, color, lineWidth * exports.unitInPixels, id);
    }
    DrawPath(inputPoints, musicPage, fill = true, id) {
        const musicPageIndex = musicPage.PageNumber - 1;
        const backendToUse = this.backends[musicPageIndex];
        const transformedPoints = [];
        for (const inputPoint of inputPoints) {
            transformedPoints.push(this.applyScreenTransformation(inputPoint));
        }
        return backendToUse.renderPath(transformedPoints, fill, id);
    }
    drawSkyLine(staffline) {
        const startPosition = staffline.PositionAndShape.AbsolutePosition;
        const width = staffline.PositionAndShape.Size.width;
        this.drawSampledLine(staffline.SkyLine, startPosition, width);
    }
    drawBottomLine(staffline) {
        const startPosition = new PointF2D_1.PointF2D(staffline.PositionAndShape.AbsolutePosition.x, staffline.PositionAndShape.AbsolutePosition.y);
        const width = staffline.PositionAndShape.Size.width;
        this.drawSampledLine(staffline.BottomLine, startPosition, width, "#0000FFFF");
    }
    /**
     * Draw a line with a width and start point in a chosen color (used for skyline/bottom line debugging) from
     * a simple array
     * @param line numeric array. 0 marks the base line. Direction given by sign. Dimensions in units
     * @param startPosition Start position in units
     * @param width Max line width in units
     * @param color Color to paint in. Default is red
     */
    drawSampledLine(line, startPosition, width, color = "#FF0000FF") {
        const indices = [];
        let currentValue = 0;
        //Loops through bottom line, grabs all indices that don't equal the previously grabbed index
        //Starting with 0 (gets index of all line changes)
        for (let i = 0; i < line.length; i++) {
            if (line[i] !== currentValue) {
                indices.push(i);
                currentValue = line[i];
            }
        }
        const absolute = startPosition;
        if (indices.length > 0) {
            const samplingUnit = this.rules.SamplingUnit;
            let horizontalStart = new PointF2D_1.PointF2D(absolute.x, absolute.y);
            let horizontalEnd = new PointF2D_1.PointF2D(indices[0] / samplingUnit + absolute.x, absolute.y);
            this.drawLine(horizontalStart, horizontalEnd, color);
            let verticalStart;
            let verticalEnd;
            if (line[0] >= 0) {
                verticalStart = new PointF2D_1.PointF2D(indices[0] / samplingUnit + absolute.x, absolute.y);
                verticalEnd = new PointF2D_1.PointF2D(indices[0] / samplingUnit + absolute.x, absolute.y + line[indices[0]]);
                this.drawLine(verticalStart, verticalEnd, color);
            }
            for (let i = 1; i < indices.length; i++) {
                horizontalStart = new PointF2D_1.PointF2D(indices[i - 1] / samplingUnit + absolute.x, absolute.y + line[indices[i - 1]]);
                horizontalEnd = new PointF2D_1.PointF2D(indices[i] / samplingUnit + absolute.x, absolute.y + line[indices[i - 1]]);
                this.drawLine(horizontalStart, horizontalEnd, color);
                verticalStart = new PointF2D_1.PointF2D(indices[i] / samplingUnit + absolute.x, absolute.y + line[indices[i - 1]]);
                verticalEnd = new PointF2D_1.PointF2D(indices[i] / samplingUnit + absolute.x, absolute.y + line[indices[i]]);
                this.drawLine(verticalStart, verticalEnd, color);
            }
            if (indices[indices.length - 1] < line.length) {
                horizontalStart = new PointF2D_1.PointF2D(indices[indices.length - 1] / samplingUnit + absolute.x, absolute.y + line[indices[indices.length - 1]]);
                horizontalEnd = new PointF2D_1.PointF2D(absolute.x + width, absolute.y + line[indices[indices.length - 1]]);
                this.drawLine(horizontalStart, horizontalEnd, color);
            }
            else {
                horizontalStart = new PointF2D_1.PointF2D(indices[indices.length - 1] / samplingUnit + absolute.x, absolute.y);
                horizontalEnd = new PointF2D_1.PointF2D(absolute.x + width, absolute.y);
                this.drawLine(horizontalStart, horizontalEnd, color);
            }
        }
        else {
            // Flat line
            const start = new PointF2D_1.PointF2D(absolute.x, absolute.y);
            const end = new PointF2D_1.PointF2D(absolute.x + width, absolute.y);
            this.drawLine(start, end, color);
        }
    }
    drawStaffEntry(staffEntry) {
        if (staffEntry.FingeringEntries.length > 0) {
            for (const fingeringEntry of staffEntry.FingeringEntries) {
                fingeringEntry.SVGNode = this.drawLabel(fingeringEntry, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
        // Draw ChordSymbols
        if (staffEntry.graphicalChordContainers !== undefined && staffEntry.graphicalChordContainers.length > 0) {
            for (const graphicalChordContainer of staffEntry.graphicalChordContainers) {
                const label = graphicalChordContainer.GraphicalLabel;
                label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
        if (this.rules.RenderLyrics) {
            if (staffEntry.LyricsEntries.length > 0) {
                this.drawLyrics(staffEntry.LyricsEntries, DrawingEnums_1.GraphicalLayers.Notes);
            }
        }
    }
    /**
     * Draw all lyrics to the canvas
     * @param lyricEntries Array of lyric entries to be drawn
     * @param layer Number of the layer that the lyrics should be drawn in
     */
    drawLyrics(lyricEntries, layer) {
        lyricEntries.forEach(lyricsEntry => {
            const label = lyricsEntry.GraphicalLabel;
            label.Label.colorDefault = this.rules.DefaultColorLyrics;
            label.SVGNode = this.drawLabel(label, layer);
        });
    }
    drawInstrumentBrace(brace, system) {
        // Draw InstrumentBrackets at beginning of line
        const vexBrace = brace;
        vexBrace.draw(this.backend.getContext());
    }
    drawGroupBracket(bracket, system) {
        // Draw InstrumentBrackets at beginning of line
        const vexBrace = bracket;
        vexBrace.draw(this.backend.getContext());
    }
    drawOctaveShifts(staffLine) {
        for (const graphicalOctaveShift of staffLine.OctaveShifts) {
            if (graphicalOctaveShift) {
                const vexFlowOctaveShift = graphicalOctaveShift;
                const ctx = this.backend.getContext();
                const textBracket = vexFlowOctaveShift.getTextBracket();
                if (this.rules.DefaultColorMusic) {
                    textBracket.render_options.color = this.rules.DefaultColorMusic;
                }
                textBracket.setContext(ctx);
                try {
                    textBracket.draw();
                }
                catch (ex) {
                    loglevel_1.default.warn(ex);
                }
            }
        }
    }
    drawPedals(staffLine) {
        for (const graphicalPedal of staffLine.Pedals) {
            if (graphicalPedal) {
                const vexFlowPedal = graphicalPedal;
                const ctx = this.backend.getContext();
                const pedalMarking = vexFlowPedal.getPedalMarking();
                pedalMarking.render_options.color = this.rules.DefaultColorMusic;
                pedalMarking.setContext(ctx);
                pedalMarking.draw();
            }
        }
    }
    drawExpressions(staffline) {
        // Draw all Expressions
        for (const abstractGraphicalExpression of staffline.AbstractExpressions) {
            // Draw InstantaniousDynamics
            if (abstractGraphicalExpression instanceof GraphicalInstantaneousDynamicExpression_1.GraphicalInstantaneousDynamicExpression) {
                this.drawInstantaneousDynamic(abstractGraphicalExpression);
                // Draw InstantaniousTempo
            }
            else if (abstractGraphicalExpression instanceof GraphicalInstantaneousTempoExpression_1.GraphicalInstantaneousTempoExpression) {
                const label = abstractGraphicalExpression.GraphicalLabel;
                label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
                // Draw ContinuousDynamics
            }
            else if (abstractGraphicalExpression instanceof GraphicalContinuousDynamicExpression_1.GraphicalContinuousDynamicExpression) {
                this.drawContinuousDynamic(abstractGraphicalExpression);
                // Draw ContinuousTempo
                // } else if (abstractGraphicalExpression instanceof GraphicalContinuousTempoExpression) {
                //     this.drawLabel((abstractGraphicalExpression as GraphicalContinuousTempoExpression).GraphicalLabel, GraphicalLayers.Notes);
                // // Draw Mood
                // } else if (abstractGraphicalExpression instanceof GraphicalMoodExpression) {
                //     GraphicalMoodExpression; graphicalMood = (GraphicalMoodExpression); abstractGraphicalExpression;
                //     drawLabel(graphicalMood.GetGraphicalLabel, <number>GraphicalLayers.Notes);
                // Draw Unknown
            }
            else if (abstractGraphicalExpression instanceof GraphicalUnknownExpression_1.GraphicalUnknownExpression) {
                const label = abstractGraphicalExpression.Label;
                label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
            }
            else {
                loglevel_1.default.warn("Unkown type of expression!");
            }
        }
    }
    drawInstantaneousDynamic(instantaneousDynamic) {
        const label = instantaneousDynamic.Label;
        label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
    }
    drawContinuousDynamic(graphicalExpression) {
        var _a;
        if (graphicalExpression.IsVerbal) {
            const label = graphicalExpression.Label;
            label.SVGNode = this.drawLabel(label, DrawingEnums_1.GraphicalLayers.Notes);
        }
        else {
            for (const line of graphicalExpression.Lines) {
                const start = new PointF2D_1.PointF2D(graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.x + line.Start.x, graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.y + line.Start.y);
                const end = new PointF2D_1.PointF2D(graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.x + line.End.x, graphicalExpression.ParentStaffLine.PositionAndShape.AbsolutePosition.y + line.End.y);
                this.drawLine(start, end, (_a = line.colorHex) !== null && _a !== void 0 ? _a : "#000000", line.Width);
                // the null check for colorHex is not strictly necessary anymore, but the previous default color was red.
            }
        }
    }
    /**
     * Renders a Label to the screen (e.g. Title, composer..)
     * @param graphicalLabel holds the label string, the text height in units and the font parameters
     * @param layer is the current rendering layer. There are many layers on top of each other to which can be rendered. Not needed for now.
     * @param bitmapWidth Not needed for now.
     * @param bitmapHeight Not needed for now.
     * @param heightInPixel the height of the text in screen coordinates
     * @param screenPosition the position of the lower left corner of the text in screen coordinates
     */
    renderLabel(graphicalLabel, layer, bitmapWidth, bitmapHeight, fontHeightInPixel, screenPosition) {
        var _a;
        if (!graphicalLabel.Label.print) {
            return undefined;
        }
        const height = graphicalLabel.Label.fontHeight * exports.unitInPixels;
        const { font } = graphicalLabel.Label;
        let color;
        if (this.rules.ColoringEnabled) {
            color = graphicalLabel.Label.colorDefault;
            if (!color) {
                color = this.rules.DefaultColorLabel;
            }
        }
        let { fontStyle, fontFamily } = graphicalLabel.Label;
        if (!fontStyle) {
            fontStyle = this.rules.DefaultFontStyle;
        }
        if (!fontFamily) {
            fontFamily = this.rules.DefaultFontFamily;
        }
        let node;
        for (let i = 0; i < ((_a = graphicalLabel.TextLines) === null || _a === void 0 ? void 0 : _a.length); i++) {
            const currLine = graphicalLabel.TextLines[i];
            const xOffsetInPixel = this.calculatePixelDistance(currLine.xOffset);
            const linePosition = new PointF2D_1.PointF2D(screenPosition.x + xOffsetInPixel, screenPosition.y);
            const newNode = this.backend.renderText(height, fontStyle, font, currLine.text, fontHeightInPixel, linePosition, color, graphicalLabel.Label.fontFamily);
            if (!node) {
                node = newNode;
            }
            else {
                node.appendChild(newNode);
            }
            screenPosition.y = screenPosition.y + fontHeightInPixel;
            if (graphicalLabel.TextLines.length > 1) {
                screenPosition.y += this.rules.SpacingBetweenTextLines;
            }
        }
        // font currently unused, replaced by fontFamily
        return node; // alternatively, return Node[] and refactor annotationElementMap to handle node array instead of single node
    }
    /**
     * Renders a rectangle with the given style to the screen.
     * It is given in screen coordinates.
     * @param rectangle the rect in screen coordinates
     * @param layer is the current rendering layer. There are many layers on top of each other to which can be rendered. Not needed for now.
     * @param styleId the style id
     * @param alpha alpha value between 0 and 1
     */
    renderRectangle(rectangle, layer, styleId, colorHex, alpha) {
        return this.backend.renderRectangle(rectangle, styleId, colorHex, alpha);
    }
    /**
     * Converts a point from unit to pixel space.
     * @param point
     * @returns {PointF2D}
     */
    applyScreenTransformation(point) {
        return new PointF2D_1.PointF2D(point.x * exports.unitInPixels, point.y * exports.unitInPixels);
    }
    /**
     * Converts a rectangle from unit to pixel space.
     * @param rectangle
     * @returns {RectangleF2D}
     */
    applyScreenTransformationForRect(rectangle) {
        return new RectangleF2D_1.RectangleF2D(rectangle.x * exports.unitInPixels, rectangle.y * exports.unitInPixels, rectangle.width * exports.unitInPixels, rectangle.height * exports.unitInPixels);
    }
}
exports.VexFlowMusicSheetDrawer = VexFlowMusicSheetDrawer;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSystem.ts":
/*!******************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSystem.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowMusicSystem = void 0;
const MusicSystem_1 = __webpack_require__(/*! ../MusicSystem */ "./src/MusicalScore/Graphical/MusicSystem.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ../SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
const SystemLine_1 = __webpack_require__(/*! ../SystemLine */ "./src/MusicalScore/Graphical/SystemLine.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const VexFlowInstrumentBracket_1 = __webpack_require__(/*! ./VexFlowInstrumentBracket */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBracket.ts");
const VexFlowInstrumentBrace_1 = __webpack_require__(/*! ./VexFlowInstrumentBrace */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBrace.ts");
class VexFlowMusicSystem extends MusicSystem_1.MusicSystem {
    constructor(id, rules) {
        super(id);
        this.rules = rules;
    }
    calculateBorders(rules) {
        if (this.staffLines.length === 0) {
            return;
        }
        const width = this.calcBracketsWidth();
        this.boundingBox.BorderLeft = -width;
        this.boundingBox.BorderMarginLeft = -width;
        //this.boundingBox.BorderRight = this.rules.SystemRightMargin;
        this.boundingBox.XBordersHaveBeenSet = true;
        const topSkyBottomLineCalculator = this.staffLines[0].SkyBottomLineCalculator;
        const top = topSkyBottomLineCalculator.getSkyLineMin();
        this.boundingBox.BorderTop = top;
        this.boundingBox.BorderMarginTop = top;
        const lastStaffLine = this.staffLines[this.staffLines.length - 1];
        const bottomSkyBottomLineCalculator = lastStaffLine.SkyBottomLineCalculator;
        const bottom = bottomSkyBottomLineCalculator.getBottomLineMax()
            + lastStaffLine.PositionAndShape.RelativePosition.y;
        this.boundingBox.BorderBottom = bottom;
        this.boundingBox.BorderMarginBottom = bottom;
        this.boundingBox.XBordersHaveBeenSet = true;
        this.boundingBox.YBordersHaveBeenSet = true;
    }
    /**
     * This method creates all the graphical lines and dots needed to render a system line (e.g. bold-thin-dots..).
     * @param xPosition
     * @param lineWidth
     * @param lineType
     * @param linePosition indicates if the line belongs to start or end of measure
     * @param musicSystem
     * @param topMeasure
     * @param bottomMeasure
     */
    createSystemLine(xPosition, lineWidth, lineType, linePosition, musicSystem, topMeasure, bottomMeasure = undefined) {
        const vfTopMeasure = topMeasure;
        let renderInitialLine = false;
        if (bottomMeasure) {
            renderInitialLine = true;
            // create here the correct lines according to the given lineType.
            bottomMeasure.lineTo(topMeasure, VexFlowConverter_1.VexFlowConverter.line(lineType, linePosition));
            bottomMeasure.addMeasureLine(lineType, linePosition);
            //Double repeat. VF doesn't have concept of double repeat. Need to add stave connector to begin of next measure
            if (lineType === SystemLinesEnum_1.SystemLinesEnum.DotsBoldBoldDots) {
                const nextIndex = bottomMeasure.ParentStaffLine.Measures.indexOf(bottomMeasure) + 1;
                const nextBottomMeasure = bottomMeasure.ParentStaffLine.Measures[nextIndex];
                const nextTopMeasure = topMeasure.ParentStaffLine.Measures[nextIndex];
                if (nextBottomMeasure && nextTopMeasure) {
                    nextBottomMeasure.lineTo(nextTopMeasure, VexFlowConverter_1.VexFlowConverter.line(SystemLinesEnum_1.SystemLinesEnum.BoldThinDots, linePosition));
                    nextBottomMeasure.addMeasureLine(SystemLinesEnum_1.SystemLinesEnum.BoldThinDots, linePosition);
                }
            }
        }
        if (vfTopMeasure) {
            vfTopMeasure.addMeasureLine(lineType, linePosition, renderInitialLine);
        }
        return new SystemLine_1.SystemLine(lineType, linePosition, this, topMeasure, bottomMeasure);
    }
    /**
     * creates an instrument brace for the given dimension.
     * The height and positioning can be inferred from the given staff lines.
     * @param firstStaffLine the upper StaffLine (use a cast to get the VexFlowStaffLine) of the brace to create
     * @param lastStaffLine the lower StaffLine (use a cast to get the VexFlowStaffLine) of the brace to create
     */
    createInstrumentBracket(firstStaffLine, lastStaffLine) {
        // You could write this in one line but the linter doesn't let me.
        const firstVexStaff = firstStaffLine;
        const lastVexStaff = lastStaffLine;
        const vexFlowBracket = new VexFlowInstrumentBrace_1.VexFlowInstrumentBrace(firstVexStaff, lastVexStaff);
        this.InstrumentBrackets.push(vexFlowBracket);
        return;
    }
    /**
     * creates an instrument group bracket for the given dimension.
     * There can be cascaded bracket (e.g. a group of 2 in a group of 4) -
     * The recursion depth informs about the current depth level (needed for positioning)
     * @param firstStaffLine the upper staff line of the bracket to create
     * @param lastStaffLine the lower staff line of the bracket to create
     * @param recursionDepth
     */
    createGroupBracket(firstStaffLine, lastStaffLine, recursionDepth) {
        const firstVexStaff = firstStaffLine;
        const lastVexStaff = lastStaffLine;
        if (recursionDepth === 0) {
            const vexFlowBracket = new VexFlowInstrumentBracket_1.VexFlowInstrumentBracket(firstVexStaff, lastVexStaff, recursionDepth);
            this.GroupBrackets.push(vexFlowBracket);
        }
        else {
            const vexFlowBrace = new VexFlowInstrumentBrace_1.VexFlowInstrumentBrace(firstVexStaff, lastVexStaff, recursionDepth);
            this.GroupBrackets.push(vexFlowBrace);
        }
        return;
    }
}
exports.VexFlowMusicSystem = VexFlowMusicSystem;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowOctaveShift.ts":
/*!******************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowOctaveShift.ts ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowOctaveShift = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const GraphicalOctaveShift_1 = __webpack_require__(/*! ../GraphicalOctaveShift */ "./src/MusicalScore/Graphical/GraphicalOctaveShift.ts");
const OctaveShift_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
/**
 * The vexflow adaptation of a graphical shift.
 */
class VexFlowOctaveShift extends GraphicalOctaveShift_1.GraphicalOctaveShift {
    /**
     * Create a new vexflow ocatve shift
     * @param octaveShift the object read by the ExpressionReader
     * @param parent the bounding box of the parent
     */
    constructor(octaveShift, parent) {
        super(octaveShift, parent);
        switch (octaveShift.Type) {
            case OctaveShift_1.OctaveEnum.VA8:
                this.position = VF.TextBracket.Positions.TOP;
                this.supscript = "va";
                this.text = "8";
                break;
            case OctaveShift_1.OctaveEnum.MA15:
                this.position = VF.TextBracket.Positions.TOP;
                this.supscript = "ma";
                this.text = "15";
                break;
            case OctaveShift_1.OctaveEnum.VB8:
                this.position = VF.TextBracket.Positions.BOTTOM;
                this.supscript = "vb";
                this.text = "8";
                break;
            case OctaveShift_1.OctaveEnum.MB15:
                this.position = VF.TextBracket.Positions.BOTTOM;
                this.supscript = "mb";
                this.text = "15";
                break;
            default:
                loglevel_1.default.error("Unknown or NONE octaveshift. This should not be called!");
                break;
        }
    }
    /**
     * Set a start note using a staff entry
     * @param graphicalStaffEntry the staff entry that holds the start note
     */
    setStartNote(graphicalStaffEntry) {
        for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
            const vve = gve;
            if (vve === null || vve === void 0 ? void 0 : vve.vfStaveNote) {
                this.startNote = vve.vfStaveNote;
                return true;
            }
        }
        return false; // couldn't find a startNote
    }
    /**
     * Set an end note using a staff entry
     * @param graphicalStaffEntry the staff entry that holds the end note
     */
    setEndNote(graphicalStaffEntry) {
        // this is duplicate code from setStartNote, but if we make one general method, we add a lot of branching.
        for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
            const vve = gve;
            if (vve === null || vve === void 0 ? void 0 : vve.vfStaveNote) {
                this.endNote = vve.vfStaveNote;
                return true;
            }
        }
        return false; // couldn't find an endNote
    }
    /**
     * Get the actual vexflow text bracket used for drawing
     */
    getTextBracket() {
        let stop = this.endNote;
        let stopObject;
        const self = this;
        if (this.graphicalEndAtMeasureEnd) {
            // draw until end of measure (measure end barline):
            //   hack for Vexflow 1.2.93 (will need to be adjusted for Vexflow 4+):
            //   create a mock object with all the data Vexflow uses for the TextBracket
            //   (Vexflow theoretically expects a note here, from which it takes position and width)
            stopObject = {
                getAbsoluteX() {
                    return (self.endMeasure.PositionAndShape.AbsolutePosition.x + self.endMeasure.PositionAndShape.Size.width) * 10;
                },
                getGlyph() {
                    return {
                        getWidth() {
                            return 0;
                        }
                    };
                }
            };
        }
        if (stopObject) {
            stop = stopObject;
        }
        const vfBracket = new VF.TextBracket({
            position: this.position,
            start: this.startNote,
            stop: stop,
            superscript: this.supscript,
            text: this.text,
        });
        if (this.endsOnDifferentStaffLine) {
            // make bracket open-ended (--- instead of ---|) if not ending on current staffline
            vfBracket.render_options.show_bracket = false;
        }
        return vfBracket;
    }
}
exports.VexFlowOctaveShift = VexFlowOctaveShift;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowPedal.ts":
/*!************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowPedal.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowPedal = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
const BoundingBox_1 = __webpack_require__(/*! ../BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
const GraphicalPedal_1 = __webpack_require__(/*! ../GraphicalPedal */ "./src/MusicalScore/Graphical/GraphicalPedal.ts");
const MusicSymbol_1 = __webpack_require__(/*! ../MusicSymbol */ "./src/MusicalScore/Graphical/MusicSymbol.ts");
/**
 * The vexflow adaptation of a pedal marking
 */
class VexFlowPedal extends GraphicalPedal_1.GraphicalPedal {
    /**
     * Create a new vexflow pedal marking
     * @param pedal the object read by the ExpressionReader
     * @param parent the bounding box of the parent
     */
    constructor(pedal, parent, openBegin = false, openEnd = false) {
        super(pedal, parent);
        this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET;
        this.ChangeBegin = false;
        this.ChangeEnd = false;
        this.line = -3;
        this.EndSymbolPositionAndShape = undefined;
        this.ChangeBegin = pedal.ChangeBegin;
        this.ChangeEnd = pedal.ChangeEnd;
        switch (this.pedalSymbol) {
            case MusicSymbol_1.MusicSymbol.PEDAL_SYMBOL:
                //This renders the pedal symbols in VF.
                this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.TEXT;
                this.EndSymbolPositionAndShape = new BoundingBox_1.BoundingBox(this, parent);
                break;
            case MusicSymbol_1.MusicSymbol.PEDAL_MIXED:
                if (openBegin && openEnd) {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BOTH;
                }
                else if (openBegin) {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BEGIN;
                }
                else if (openEnd) {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.MIXED_OPEN_END;
                }
                else {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.MIXED;
                }
                break;
            case MusicSymbol_1.MusicSymbol.PEDAL_BRACKET:
            default:
                if (openBegin && openEnd) {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BOTH;
                }
                else if (openBegin) {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET_OPEN_BEGIN;
                }
                else if (openEnd) {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET_OPEN_END;
                }
                else {
                    this.vfStyle = vexflow_1.default.Flow.PedalMarking.Styles.BRACKET;
                }
                break;
        }
    }
    /**
     * Set a start note using a staff entry
     * @param graphicalStaffEntry the staff entry that holds the start note
     */
    setStartNote(graphicalStaffEntry) {
        if (!graphicalStaffEntry) {
            return false;
        }
        for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
            const vve = gve;
            if (vve === null || vve === void 0 ? void 0 : vve.vfStaveNote) {
                this.startNote = vve.vfStaveNote;
                this.startVfVoiceEntry = vve;
                return true;
            }
        }
        return false; // couldn't find a startNote
    }
    /**
     * Set an end note using a staff entry
     * @param graphicalStaffEntry the staff entry that holds the end note
     */
    setEndNote(graphicalStaffEntry) {
        // this is duplicate code from setStartNote, but if we make one general method, we add a lot of branching.
        if (!graphicalStaffEntry) {
            return false;
        }
        for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
            const vve = gve;
            if (vve === null || vve === void 0 ? void 0 : vve.vfStaveNote) {
                this.endNote = vve.vfStaveNote;
                this.endVfVoiceEntry = vve;
                return true;
            }
        }
        return false; // couldn't find an endNote
    }
    setEndMeasure(graphicalMeasure) {
        this.endMeasure = graphicalMeasure;
    }
    CalculateBoundingBox() {
        //TODO?
    }
    setLine(line) {
        this.line = line;
    }
    /**
     * Get the actual vexflow Pedal Marking used for drawing
     */
    getPedalMarking() {
        const pedalMarking = new vexflow_1.default.Flow.PedalMarking([this.startNote, this.endNote]);
        if (this.endMeasure) {
            pedalMarking.setEndStave(this.endMeasure.getVFStave());
        }
        pedalMarking.setStyle(this.vfStyle);
        pedalMarking.setLine(this.line);
        pedalMarking.setCustomText(this.DepressText, this.ReleaseText);
        //If our end note is at the end of a stave, set that value
        if (!this.endVfVoiceEntry ||
            this.getPedal.EndsStave
        //|| this.endVfVoiceEntry?.parentStaffEntry === this.endVfVoiceEntry?.parentStaffEntry?.parentMeasure?.staffEntries.last()
        //   the above condition prevents the ability to stop BEFORE the last staff entry.
        //   see test_pedal_stop_before_last_staffentry and OSMD Function test - Color, compare with Beethoven - Geliebte (pedal symbols vs lines)
        ) {
            pedalMarking.EndsStave = true;
        }
        if (this.getPedal.BeginsStave) {
            pedalMarking.BeginsStave = true;
        }
        pedalMarking.ChangeBegin = this.ChangeBegin;
        pedalMarking.ChangeEnd = this.ChangeEnd;
        return pedalMarking;
    }
    setEndsStave(endMeasure, endTimeStamp) {
        if (endTimeStamp === null || endTimeStamp === void 0 ? void 0 : endTimeStamp.gte(endMeasure.parentSourceMeasure.Duration)) {
            this.getPedal.EndsStave = true;
        }
    }
    setBeginsStave(isRest, startTimeStamp) {
        if (isRest && startTimeStamp.RealValue === 0) {
            this.getPedal.BeginsStave = true;
        }
    }
}
exports.VexFlowPedal = VexFlowPedal;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowSlur.ts":
/*!***********************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowSlur.ts ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowSlur = exports.CurvePositionEnum = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
var CurvePositionEnum;
(function (CurvePositionEnum) {
    CurvePositionEnum[CurvePositionEnum["NEAR_HEAD"] = 1] = "NEAR_HEAD";
    CurvePositionEnum[CurvePositionEnum["NEAR_TOP"] = 2] = "NEAR_TOP";
})(CurvePositionEnum = exports.CurvePositionEnum || (exports.CurvePositionEnum = {}));
class VexFlowSlur {
    constructor(parentslur) {
        this.vfStartNote = undefined;
        this.vfEndNote = undefined;
        this.parentSlur = parentslur;
    }
    /**
     * Copy constructor: generate a VexFlowSlur from an existing one
     */
    static createFromVexflowSlur(vfSlur) {
        return new VexFlowSlur(vfSlur.parentSlur);
    }
    get vfSlur() {
        return this.parentSlur;
    }
    curve_Options() {
        return {
            cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }],
            invert: false,
            position: CurvePositionEnum.NEAR_TOP,
            position_end: CurvePositionEnum.NEAR_TOP,
            spacing: 2,
            thickness: 2,
            x_shift: 0,
            y_shift: 10
        };
    }
    // public createVexFlowCurve(): void {
    //     if (this.voiceentrySlurStart || this.voiceentrySlurEnd) {
    //         this.vfCurve = new VF.Curve( (this.voiceentrySlurStart as VexFlowVoiceEntry).vfStaveNote,
    //                                            (this.voiceentrySlurEnd as VexFlowVoiceEntry).vfStaveNote,
    //                                            this.curve_Options()
    //                                         );
    //     }
    // }
    createVexFlowCurve() {
        this.vfCurve = new VF.Curve(this.vfStartNote, this.vfEndNote, undefined //this.curve_Options()
        );
    }
}
exports.VexFlowSlur = VexFlowSlur;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowStaffEntry.ts":
/*!*****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowStaffEntry.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowStaffEntry = void 0;
const GraphicalStaffEntry_1 = __webpack_require__(/*! ../GraphicalStaffEntry */ "./src/MusicalScore/Graphical/GraphicalStaffEntry.ts");
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
class VexFlowStaffEntry extends GraphicalStaffEntry_1.GraphicalStaffEntry {
    constructor(measure, sourceStaffEntry, staffEntryParent) {
        super(measure, sourceStaffEntry, staffEntryParent);
    }
    /**
     * Calculates the staff entry positions from the VexFlow stave information and the tickabels inside the staff.
     * This is needed in order to set the OSMD staff entries (which are almost the same as tickables) to the correct positions.
     * It is also needed to be done after formatting!
     */
    calculateXPosition() {
        const stave = this.parentMeasure.getVFStave();
        // sets the vexflow x positions back into the bounding boxes of the staff entries in the osmd object model.
        // The positions are needed for cursor placement and mouse/tap interactions
        let lastBorderLeft = 0;
        for (const gve of this.graphicalVoiceEntries) {
            if (gve.vfStaveNote) {
                gve.vfStaveNote.setStave(stave);
                if (!gve.vfStaveNote.preFormatted) {
                    continue;
                }
                gve.applyBordersFromVexflow();
                if (this.parentMeasure.ParentStaff.isTab) {
                    // the x-position could be finetuned for the cursor.
                    // somehow, gve.vfStaveNote.getBoundingBox() is null for a TabNote (which is a StemmableNote).
                    this.PositionAndShape.RelativePosition.x = (gve.vfStaveNote.getAbsoluteX() + gve.vfStaveNote.glyph.getWidth()) / VexFlowMusicSheetDrawer_1.unitInPixels;
                }
                else {
                    this.PositionAndShape.RelativePosition.x = gve.vfStaveNote.getBoundingBox().getX() / VexFlowMusicSheetDrawer_1.unitInPixels;
                }
                const sourceNote = gve.notes[0].sourceNote;
                if (sourceNote.isRest() && sourceNote.Length.RealValue === this.parentMeasure.parentSourceMeasure.ActiveTimeSignature.RealValue) {
                    // whole rest: length = measure length. (4/4 in a 4/4 time signature, 3/4 in a 3/4 time signature, 1/4 in a 1/4 time signature, etc.)
                    // see Note.isWholeRest(), which is currently not safe
                    this.PositionAndShape.RelativePosition.x +=
                        this.parentMeasure.parentSourceMeasure.Rules.WholeRestXShiftVexflow - 0.1; // xShift from VexFlowConverter
                    gve.PositionAndShape.BorderLeft = -0.7;
                    gve.PositionAndShape.BorderRight = 0.7;
                }
                if (gve.PositionAndShape.BorderLeft < lastBorderLeft) {
                    lastBorderLeft = gve.PositionAndShape.BorderLeft;
                }
            }
        }
        this.PositionAndShape.RelativePosition.x -= lastBorderLeft;
        this.PositionAndShape.calculateBoundingBox();
    }
    setMaxAccidentals() {
        for (const gve of this.graphicalVoiceEntries) {
            for (const note of gve.notes) {
                if (note.DrawnAccidental !== Pitch_1.AccidentalEnum.NONE) {
                    //TODO continue checking for double accidentals in other notes?
                    return this.MaxAccidentals = 1;
                }
                // live calculation if the note was changed:
                // let pitch: Pitch = note.sourceNote.Pitch;
                // pitch = (note as VexFlowGraphicalNote).drawPitch(pitch);
                // if (pitch) {
                //     const accidental: AccidentalEnum = pitch.Accidental;
                //     if (accidental !== AccidentalEnum.NONE) {
                //         this.maxAccidentals = 1;
                //         return this.maxAccidentals;
                //     }
                // }
            }
        }
        return this.MaxAccidentals = 0;
    }
    // should be called after VexFlowConverter.StaveNote
    setModifierXOffsets() {
        let notes = [];
        for (const gve of this.graphicalVoiceEntries) {
            notes = notes.concat(gve.notes);
        }
        const staffLines = notes.map(n => n.staffLine);
        const stringNumberOffsets = this.calculateModifierXOffsets(staffLines, 1);
        const fingeringOffsets = this.calculateModifierXOffsets(staffLines, 0.5);
        notes.forEach((note, i) => {
            note.baseFingeringXOffset = fingeringOffsets[i];
            note.baseStringNumberXOffset = stringNumberOffsets[i];
        });
    }
    /**
     * Calculate x offsets for overlapping string and fingering modifiers in a chord.
     */
    calculateModifierXOffsets(staffLines, collisionDistance) {
        const offsets = [];
        for (let i = 0; i < staffLines.length; i++) {
            let offset = 0;
            let collisionFound = true;
            while (collisionFound) {
                for (let j = i; j >= 0; j--) {
                    const lineDiff = Math.abs(staffLines[i] - staffLines[j]);
                    if (lineDiff <= collisionDistance && offset === offsets[j]) {
                        offset++;
                        collisionFound = true;
                        break;
                    }
                    collisionFound = false;
                }
            }
            offsets.push(offset);
        }
        return offsets;
    }
}
exports.VexFlowStaffEntry = VexFlowStaffEntry;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowStaffLine.ts":
/*!****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowStaffLine.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowStaffLine = void 0;
const StaffLine_1 = __webpack_require__(/*! ../StaffLine */ "./src/MusicalScore/Graphical/StaffLine.ts");
const AlignmentManager_1 = __webpack_require__(/*! ./AlignmentManager */ "./src/MusicalScore/Graphical/VexFlow/AlignmentManager.ts");
class VexFlowStaffLine extends StaffLine_1.StaffLine {
    constructor(parentSystem, parentStaff) {
        super(parentSystem, parentStaff);
        this.slursInVFStaffLine = [];
        this.alignmentManager = new AlignmentManager_1.AlignmentManager(this);
    }
    get SlursInVFStaffLine() {
        return this.slursInVFStaffLine;
    }
    addVFSlurToVFStaffline(vfSlur) {
        this.slursInVFStaffLine.push(vfSlur);
    }
    get AlignmentManager() {
        return this.alignmentManager;
    }
}
exports.VexFlowStaffLine = VexFlowStaffLine;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowTabMeasure.ts":
/*!*****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowTabMeasure.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowTabMeasure = void 0;
const vexflow_1 = __importDefault(__webpack_require__(/*! vexflow */ "./node_modules/vexflow/src/index.js"));
var VF = vexflow_1.default.Flow;
const VexFlowMeasure_1 = __webpack_require__(/*! ./VexFlowMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts");
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class VexFlowTabMeasure extends VexFlowMeasure_1.VexFlowMeasure {
    constructor(staff, sourceMeasure = undefined, staffLine = undefined) {
        super(staff, sourceMeasure, staffLine);
        this.isTabMeasure = true;
    }
    /**
     * Reset all the geometric values and parameters of this measure and put it in an initialized state.
     * This is needed to evaluate a measure a second time by system builder.
     */
    resetLayout() {
        var _a;
        // Take into account some space for the begin and end lines of the stave
        // Will be changed when repetitions will be implemented
        //this.beginInstructionsWidth = 20 / UnitInPixels;
        //this.endInstructionsWidth = 20 / UnitInPixels;
        const stafflineCount = (_a = this.ParentStaff.StafflineCount) !== null && _a !== void 0 ? _a : 6; // if undefined, 6 by default (same as Vexflow default)
        this.stave = new VF.TabStave(0, 0, 0, {
            space_above_staff_ln: 0,
            space_below_staff_ln: 0,
            num_lines: stafflineCount
        });
        // also see VexFlowMusicSheetDrawer.drawSheet() for some other vexflow default value settings (like default font scale)
        this.updateInstructionWidth();
    }
    graphicalMeasureCreatedCalculations() {
        for (let idx = 0, len = this.staffEntries.length; idx < len; ++idx) {
            const graphicalStaffEntry = this.staffEntries[idx];
            // create vex flow Notes:
            for (const gve of graphicalStaffEntry.graphicalVoiceEntries) {
                if (gve.notes[0].sourceNote.isRest()) {
                    gve.vfStaveNote = VexFlowConverter_1.VexFlowConverter.GhostNotes(gve.notes[0].sourceNote.Length)[0];
                }
                else {
                    gve.vfStaveNote = VexFlowConverter_1.VexFlowConverter.CreateTabNote(gve);
                }
            }
        }
        if (this.rules.TupletNumbersInTabs) { // default false, don't show tuplets in tab measures
            this.finalizeTuplets();
        }
        const voices = this.getVoicesWithinMeasure();
        for (const voice of voices) {
            if (!voice) {
                continue;
            }
            // add a vexFlow voice for this voice:
            this.vfVoices[voice.VoiceId] = new VF.Voice({
                beat_value: this.parentSourceMeasure.Duration.Denominator,
                num_beats: this.parentSourceMeasure.Duration.Numerator,
                resolution: VF.RESOLUTION,
            }).setMode(VF.Voice.Mode.SOFT);
            const restFilledEntries = this.getRestFilledVexFlowStaveNotesPerVoice(voice);
            // create vex flow voices and add tickables to it:
            for (const voiceEntry of restFilledEntries) {
                if (voiceEntry.parentVoiceEntry) {
                    if (voiceEntry.parentVoiceEntry.IsGrace && !voiceEntry.parentVoiceEntry.GraceAfterMainNote) {
                        continue;
                    }
                }
                const vexFlowVoiceEntry = voiceEntry;
                if (voiceEntry.notes.length === 0 || !voiceEntry.notes[0] || !voiceEntry.notes[0].sourceNote.PrintObject) {
                    // GhostNote, don't add modifiers like in-measure clefs
                    this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);
                    continue;
                }
                // don't add non-tab fingerings for tab measures (doesn't work yet for tabnotes in vexflow, see VexFlowMeasure.createFingerings())
                // if (voiceEntry.parentVoiceEntry && this.rules.RenderFingerings) {
                //     this.createFingerings(voiceEntry);
                // }
                // add Arpeggio
                if (voiceEntry.parentVoiceEntry && voiceEntry.parentVoiceEntry.Arpeggio) {
                    const arpeggio = voiceEntry.parentVoiceEntry.Arpeggio;
                    // TODO right now our arpeggio object has all arpeggio notes from arpeggios across all voices.
                    // see VoiceGenerator. Doesn't matter for Vexflow for now though
                    if (voiceEntry.notes && voiceEntry.notes.length > 1) {
                        const type = VexFlowConverter_1.VexFlowConverter.StrokeTypeFromArpeggioType(arpeggio.type);
                        const stroke = new VF.Stroke(type, {
                            all_voices: this.rules.ArpeggiosGoAcrossVoices
                            // default: false. This causes arpeggios to always go across all voices, which is often unwanted.
                            // also, this can cause infinite height of stroke, see #546
                        });
                        //if (arpeggio.notes.length === vexFlowVoiceEntry.notes.length) { // different workaround for endless y bug
                        if (this.rules.RenderArpeggios) {
                            vexFlowVoiceEntry.vfStaveNote.addStroke(0, stroke);
                        }
                    }
                    else {
                        loglevel_1.default.debug(`[OSMD] arpeggio in measure ${this.MeasureNumber} could not be drawn.
                        voice entry had less than two notes, arpeggio is likely between voice entries, not currently supported in Vexflow.`);
                        // TODO: create new arpeggio with all the arpeggio's notes (arpeggio.notes), perhaps with GhostNotes in a new vfStaveNote. not easy.
                    }
                }
                this.vfVoices[voice.VoiceId].addTickable(vexFlowVoiceEntry.vfStaveNote);
            }
        }
        //this.createArticulations();
        //this.createOrnaments();
    }
}
exports.VexFlowTabMeasure = VexFlowTabMeasure;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowTextMeasurer.ts":
/*!*******************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowTextMeasurer.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowTextMeasurer = void 0;
const VexFlowConverter_1 = __webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts");
/**
 * Created by Matthias on 21.06.2016.
 */
class VexFlowTextMeasurer {
    constructor(rules) {
        this.fontSize = 20;
        this.fontSizeStandard = this.fontSize;
        const canvas = document.createElement("canvas");
        this.context = canvas.getContext("2d");
        this.rules = rules;
    }
    /**
     *
     * @param text
     * @param font
     * @param style
     * @returns {number}
     */
    computeTextWidthToHeightRatio(text, font, style, fontFamily = undefined, fontSize = this.fontSize) {
        this.context.font = VexFlowConverter_1.VexFlowConverter.font(fontSize, style, font, this.rules, fontFamily);
        return this.context.measureText(text).width / fontSize;
    }
    setFontSize(fontSize = this.fontSizeStandard) {
        this.fontSize = fontSize;
        return fontSize;
    }
}
exports.VexFlowTextMeasurer = VexFlowTextMeasurer;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexFlowVoiceEntry.ts":
/*!*****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexFlowVoiceEntry.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexFlowVoiceEntry = void 0;
const GraphicalVoiceEntry_1 = __webpack_require__(/*! ../GraphicalVoiceEntry */ "./src/MusicalScore/Graphical/GraphicalVoiceEntry.ts");
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const DrawingParameters_1 = __webpack_require__(/*! ./../DrawingParameters */ "./src/MusicalScore/Graphical/DrawingParameters.ts");
class VexFlowVoiceEntry extends GraphicalVoiceEntry_1.GraphicalVoiceEntry {
    constructor(parentVoiceEntry, parentStaffEntry, rules) {
        super(parentVoiceEntry, parentStaffEntry, rules);
    }
    applyBordersFromVexflow() {
        var _a;
        const staveNote = this.vfStaveNote;
        if (!staveNote.getNoteHeadBeginX) {
            return;
        }
        const boundingBox = staveNote.getBoundingBox();
        const modifierWidth = staveNote.getNoteHeadBeginX() - boundingBox.x;
        this.PositionAndShape.RelativePosition.y = boundingBox.y / VexFlowMusicSheetDrawer_1.unitInPixels;
        this.PositionAndShape.BorderTop = 0;
        this.PositionAndShape.BorderBottom = boundingBox.h / VexFlowMusicSheetDrawer_1.unitInPixels;
        const halfStavenoteWidth = (staveNote.width - ((_a = staveNote.paddingRight) !== null && _a !== void 0 ? _a : 0)) / 2;
        this.PositionAndShape.BorderLeft = -(modifierWidth + halfStavenoteWidth) / VexFlowMusicSheetDrawer_1.unitInPixels; // Left of our X origin is the modifier
        this.PositionAndShape.BorderRight = (boundingBox.w - modifierWidth) / VexFlowMusicSheetDrawer_1.unitInPixels; // Right of x origin is the note
    }
    set vfStaveNote(value) {
        this.mVexFlowStaveNote = value;
    }
    get vfStaveNote() {
        return this.mVexFlowStaveNote;
    }
    /** (Re-)color notes and stems by setting their Vexflow styles.
     * Could be made redundant by a Vexflow PR, but Vexflow needs more solid and permanent color methods/variables for that
     * See VexFlowConverter.StaveNote()
     */
    color() {
        var _a;
        const defaultColorNotehead = this.rules.DefaultColorNotehead;
        const defaultColorRest = this.rules.DefaultColorRest;
        const defaultColorStem = this.rules.DefaultColorStem;
        const transparentColor = "#00000000"; // transparent color in vexflow
        let noteheadColor; // if null: no noteheadcolor to set (stays black)
        let sourceNoteNoteheadColor;
        const vfStaveNote = this.vfStaveNote;
        for (let i = 0; i < this.notes.length; i++) {
            const note = this.notes[i];
            sourceNoteNoteheadColor = note.sourceNote.NoteheadColor;
            noteheadColor = sourceNoteNoteheadColor;
            // Switch between XML colors and automatic coloring
            if (this.rules.ColoringMode === DrawingParameters_1.ColoringModes.AutoColoring ||
                this.rules.ColoringMode === DrawingParameters_1.ColoringModes.CustomColorSet) {
                if (note.sourceNote.isRest()) {
                    noteheadColor = this.rules.ColoringSetCurrent.getValue(-1);
                }
                else {
                    const fundamentalNote = note.sourceNote.Pitch.FundamentalNote;
                    noteheadColor = this.rules.ColoringSetCurrent.getValue(fundamentalNote);
                }
            }
            if (!note.sourceNote.PrintObject) {
                noteheadColor = transparentColor; // transparent
            }
            else if (!noteheadColor // revert transparency after PrintObject was set to false, then true again
                || noteheadColor === "#000000" // questionable, because you might want to set specific notes to black,
            // but unfortunately some programs export everything explicitly as black
            ) {
                noteheadColor = this.rules.DefaultColorNotehead;
            }
            // DEBUG runtime coloring test
            /*const testColor: string = "#FF0000";
            if (i === 2 && Math.random() < 0.1 && note.sourceNote.NoteheadColor !== testColor) {
                const measureNumber: number = note.parentVoiceEntry.parentStaffEntry.parentMeasure.MeasureNumber;
                noteheadColor = testColor;
                console.log("color changed to " + noteheadColor + " of this note:\n" + note.sourceNote.Pitch.ToString() +
                    ", in measure #" + measureNumber);
            }*/
            if (!sourceNoteNoteheadColor && this.rules.ColoringMode === DrawingParameters_1.ColoringModes.XML && note.sourceNote.PrintObject) {
                if (!note.sourceNote.isRest() && defaultColorNotehead) {
                    noteheadColor = defaultColorNotehead;
                }
                else if (note.sourceNote.isRest() && defaultColorRest) {
                    noteheadColor = defaultColorRest;
                }
            }
            if (noteheadColor && note.sourceNote.PrintObject) {
                note.sourceNote.NoteheadColorCurrentlyRendered = noteheadColor;
            }
            else if (!noteheadColor) {
                continue;
            }
            // color notebeam if all noteheads have same color and stem coloring enabled
            if (this.rules.ColoringEnabled && note.sourceNote.NoteBeam && this.rules.ColorBeams) {
                const beamNotes = note.sourceNote.NoteBeam.Notes;
                let colorBeam = true;
                for (let j = 0; j < beamNotes.length; j++) {
                    if (beamNotes[j].NoteheadColorCurrentlyRendered !== noteheadColor) {
                        colorBeam = false;
                    }
                }
                if (colorBeam) {
                    if ((_a = vfStaveNote === null || vfStaveNote === void 0 ? void 0 : vfStaveNote.beam) === null || _a === void 0 ? void 0 : _a.setStyle) {
                        vfStaveNote.beam.setStyle({ fillStyle: noteheadColor, strokeStyle: noteheadColor });
                    }
                }
            }
            if (vfStaveNote) {
                if (vfStaveNote.note_heads) { // see VexFlowConverter, needs Vexflow PR
                    const notehead = vfStaveNote.note_heads[i];
                    if (notehead) {
                        notehead.setStyle({ fillStyle: noteheadColor, strokeStyle: noteheadColor });
                    }
                }
                // set ledger line color. TODO coordinate this with VexFlowConverter.StaveNote(), where there's also still code for this, maybe unnecessarily.
                if (vfStaveNote.setLedgerLineStyle) { // setLedgerLineStyle doesn't exist on TabNote or rest, would throw error.
                    if (noteheadColor === transparentColor) {
                        vfStaveNote.setLedgerLineStyle({ fillStyle: noteheadColor, strokeStyle: noteheadColor, lineWidth: this.rules.LedgerLineWidth });
                    }
                    else {
                        vfStaveNote.setLedgerLineStyle({
                            fillStyle: this.rules.LedgerLineColorDefault,
                            lineWidth: this.rules.LedgerLineWidth,
                            strokeStyle: this.rules.LedgerLineColorDefault
                        });
                        // we could give the color (style) as noteheadColor, but then we need to figure out which note has the ledger line.
                        // otherwise ledger lines get the color of the top note, see Function Test Color.
                    }
                }
            }
        }
        // color stems
        let stemColor = defaultColorStem; // reset to black/default when coloring was disabled. maybe needed elsewhere too
        let setVoiceEntryStemColor = false;
        if (this.rules.ColoringEnabled) {
            stemColor = this.parentVoiceEntry.StemColor; // TODO: once coloringSetCustom gets stem color, respect it
            if (!stemColor
                || stemColor === "#000000") { // see above, noteheadColor === "#000000"
                stemColor = defaultColorStem;
            }
            if (this.rules.ColorStemsLikeNoteheads && noteheadColor) {
                // condition could be even more fine-grained by only recoloring if there was no custom StemColor set. will be more complex though
                stemColor = noteheadColor;
                setVoiceEntryStemColor = true;
            }
        }
        let stemTransparent = true;
        for (const note of this.parentVoiceEntry.Notes) {
            if (note.PrintObject) {
                stemTransparent = false;
                break;
            }
        }
        if (stemTransparent) {
            stemColor = transparentColor;
        }
        const stemStyle = { fillStyle: stemColor, strokeStyle: stemColor };
        if (vfStaveNote && vfStaveNote.setStemStyle) {
            if (!stemTransparent && setVoiceEntryStemColor) {
                this.parentVoiceEntry.StemColor = stemColor; // this shouldn't be set by DefaultColorStem
            }
            vfStaveNote.setStemStyle(stemStyle);
            if (vfStaveNote.flag && vfStaveNote.setFlagStyle && this.rules.ColorFlags) {
                vfStaveNote.setFlagStyle(stemStyle);
            }
        }
    }
}
exports.VexFlowVoiceEntry = VexFlowVoiceEntry;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/VexflowStafflineNoteCalculator.ts":
/*!******************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/VexflowStafflineNoteCalculator.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VexflowStafflineNoteCalculator = void 0;
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const VexFlowGraphicalNote_1 = __webpack_require__(/*! ./VexFlowGraphicalNote */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalNote.ts");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
const ClefInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const VoiceEntry_1 = __webpack_require__(/*! ../../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
class VexflowStafflineNoteCalculator {
    constructor(rules) {
        this.staffPitchListMapping = new typescript_collections_1.Dictionary();
        //These render on the single line by default
        this.baseLineNote = Pitch_1.NoteEnum.B;
        this.baseLineOctave = 1;
        this.rules = rules;
    }
    /**
     * This method is called for each note during the calc phase. We want to track all possible positions to make decisions
     * during layout about where notes should be positioned.
     * This directly puts notes that share a line to the same position, regardless of voice
     * @param graphicalNote The note to be checked/positioned
     * @param staffIndex The staffline the note is on
     */
    trackNote(graphicalNote) {
        if (!(graphicalNote instanceof VexFlowGraphicalNote_1.VexFlowGraphicalNote) || graphicalNote.Clef().ClefType !== ClefInstruction_1.ClefEnum.percussion ||
            graphicalNote.sourceNote.isRest() || this.rules.PercussionOneLineCutoff === 0 ||
            this.rules.PercussionForceVoicesOneLineCutoff === -1) {
            return;
        }
        const staffIndex = graphicalNote.parentVoiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff.idInMusicSheet;
        let currentPitchList = undefined;
        if (!this.staffPitchListMapping.containsKey(staffIndex)) {
            this.staffPitchListMapping.setValue(staffIndex, new Array());
        }
        currentPitchList = this.staffPitchListMapping.getValue(staffIndex);
        const pitch = graphicalNote.sourceNote.Pitch;
        VexflowStafflineNoteCalculator.findOrInsert(currentPitchList, pitch);
    }
    static PitchIndexOf(array, pitch, start = 0) {
        if (start > array.length - 1) {
            return -1;
        }
        for (let i = start; i < array.length; i++) {
            const p2 = array[i];
            if (pitch.OperatorEquals(p2)) {
                return i;
            }
        }
        return -1;
    }
    static findOrInsert(array, pitch) {
        for (let i = 0; i < array.length; i++) {
            const p2 = array[i];
            if (pitch.OperatorEquals(p2)) {
                return i;
            }
            else {
                if (pitch.OperatorFundamentalLessThan(p2)) {
                    array.splice(i, 0, pitch);
                    return i;
                }
            }
        }
        //If we reach here, we've reached the end of the array.
        //Means its the greatest pitch
        array.push(pitch);
        return array.length - 1;
    }
    /**
     * This method is called for each note, and should make any necessary position changes based on the number of stafflines, clef, etc.
     * @param graphicalNote The note to be checked/positioned
     * @param staffIndex The staffline that this note exists on
     * @returns the newly positioned note
     */
    positionNote(graphicalNote) {
        const staffIndex = graphicalNote.parentVoiceEntry.parentStaffEntry.sourceStaffEntry.ParentStaff.idInMusicSheet;
        if (!(graphicalNote instanceof VexFlowGraphicalNote_1.VexFlowGraphicalNote) || graphicalNote.sourceNote.isRest()
            || !this.staffPitchListMapping.containsKey(staffIndex)) {
            return graphicalNote;
        }
        const currentPitchList = this.staffPitchListMapping.getValue(staffIndex);
        //const xmlSingleStaffline: boolean = graphicalNote.parentVoiceEntry.parentStaffEntry.parentMeasure.ParentStaff.StafflineCount === 1;
        const positionByXml = this.rules.PercussionUseXMLDisplayStep &&
            graphicalNote.sourceNote.displayStepUnpitched !== undefined;
        if (currentPitchList.length > this.rules.PercussionOneLineCutoff && !positionByXml && !this.rules.PercussionUseCajon2NoteSystem) {
            //Don't need to position notes. We aren't under the cutoff
            return graphicalNote;
        }
        const vfGraphicalNote = graphicalNote;
        const notePitch = graphicalNote.sourceNote.Pitch;
        let displayNote = this.baseLineNote;
        let displayOctave = this.baseLineOctave;
        if (this.rules.PercussionUseCajon2NoteSystem) {
            if (notePitch.FundamentalNote === Pitch_1.NoteEnum.C) {
                displayNote = Pitch_1.NoteEnum.G;
                displayOctave = 1;
            }
        }
        else if (this.rules.PercussionUseXMLDisplayStep
            && graphicalNote.sourceNote.displayStepUnpitched !== undefined) {
            //&& xmlSingleStaffline) {
            displayNote = graphicalNote.sourceNote.displayStepUnpitched;
            displayOctave = graphicalNote.sourceNote.displayOctaveUnpitched + this.rules.PercussionOneLineXMLDisplayStepOctaveOffset;
        }
        //If we only need to render on one line
        if (currentPitchList.length <= this.rules.PercussionForceVoicesOneLineCutoff) {
            vfGraphicalNote.setAccidental(new Pitch_1.Pitch(displayNote, displayOctave, notePitch.Accidental));
        }
        else {
            const pitchIndex = VexflowStafflineNoteCalculator.PitchIndexOf(currentPitchList, notePitch);
            if (pitchIndex > -1) {
                const half = Math.ceil(currentPitchList.length / 2);
                if (!this.rules.PercussionUseXMLDisplayStep) {
                    if (pitchIndex >= half) {
                        //position above
                        displayOctave = 2;
                        switch ((pitchIndex - half) % 5) {
                            case 1:
                                displayNote = Pitch_1.NoteEnum.E;
                                break;
                            case 2:
                                displayNote = Pitch_1.NoteEnum.G;
                                break;
                            case 3:
                                displayNote = Pitch_1.NoteEnum.B;
                                break;
                            case 4:
                                displayNote = Pitch_1.NoteEnum.D;
                                displayOctave = 3;
                                break;
                            default:
                                displayNote = Pitch_1.NoteEnum.C;
                                break;
                        }
                    }
                    else { //position below
                        switch (pitchIndex % 5) {
                            case 1:
                                displayNote = Pitch_1.NoteEnum.F;
                                break;
                            case 2:
                                displayNote = Pitch_1.NoteEnum.D;
                                break;
                            case 3:
                                displayNote = Pitch_1.NoteEnum.B;
                                displayOctave = 0;
                                break;
                            case 4:
                                displayNote = Pitch_1.NoteEnum.G;
                                displayOctave = 0;
                                break;
                            default:
                                displayNote = Pitch_1.NoteEnum.A;
                                break;
                        }
                    }
                }
                const mappedPitch = new Pitch_1.Pitch(displayNote, displayOctave, notePitch.Accidental);
                //Map the pitch, set stems properly
                vfGraphicalNote.setAccidental(mappedPitch);
                const parentVoiceEntry = vfGraphicalNote.parentVoiceEntry.parentVoiceEntry;
                // Only switch stems if we aren't sharing stems with another note
                if (!this.rules.SetWantedStemDirectionByXml && parentVoiceEntry.Notes.length < 2) {
                    if (mappedPitch.Octave > this.baseLineOctave ||
                        (mappedPitch.FundamentalNote === this.baseLineNote && mappedPitch.Octave === this.baseLineOctave)) {
                        vfGraphicalNote.parentVoiceEntry.parentVoiceEntry.WantedStemDirection = VoiceEntry_1.StemDirectionType.Up;
                    }
                    else {
                        vfGraphicalNote.parentVoiceEntry.parentVoiceEntry.WantedStemDirection = VoiceEntry_1.StemDirectionType.Down;
                    }
                }
            }
        }
        return vfGraphicalNote;
    }
    /**
     * Get the number of unique "voices" or note positions
     * @param staffIndex The Staffline to get the count of
     */
    getStafflineUniquePositionCount(staffIndex) {
        if (this.staffPitchListMapping.containsKey(staffIndex)) {
            return this.staffPitchListMapping.getValue(staffIndex).length;
        }
        return 0;
    }
}
exports.VexflowStafflineNoteCalculator = VexflowStafflineNoteCalculator;


/***/ }),

/***/ "./src/MusicalScore/Graphical/VexFlow/index.ts":
/*!*****************************************************!*\
  !*** ./src/MusicalScore/Graphical/VexFlow/index.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./AlignmentManager */ "./src/MusicalScore/Graphical/VexFlow/AlignmentManager.ts"), exports);
__exportStar(__webpack_require__(/*! ./CanvasVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts"), exports);
__exportStar(__webpack_require__(/*! ./SvgVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/SvgVexFlowBackend.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/VexFlowBackend.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowContinuousDynamicExpression */ "./src/MusicalScore/Graphical/VexFlow/VexFlowContinuousDynamicExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowConverter */ "./src/MusicalScore/Graphical/VexFlow/VexFlowConverter.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowGlissando */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGlissando.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowGraphicalNote */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalNote.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowGraphicalSymbolFactory */ "./src/MusicalScore/Graphical/VexFlow/VexFlowGraphicalSymbolFactory.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowInstantaneousDynamicExpression */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstantaneousDynamicExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowInstrumentBrace */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBrace.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowInstrumentBracket */ "./src/MusicalScore/Graphical/VexFlow/VexFlowInstrumentBracket.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMeasure.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowMultiRestMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMultiRestMeasure.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowMusicSheetCalculator */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowMusicSystem */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSystem.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowOctaveShift */ "./src/MusicalScore/Graphical/VexFlow/VexFlowOctaveShift.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowSlur */ "./src/MusicalScore/Graphical/VexFlow/VexFlowSlur.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowStaffEntry */ "./src/MusicalScore/Graphical/VexFlow/VexFlowStaffEntry.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowStaffLine */ "./src/MusicalScore/Graphical/VexFlow/VexFlowStaffLine.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexflowStafflineNoteCalculator */ "./src/MusicalScore/Graphical/VexFlow/VexflowStafflineNoteCalculator.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowTabMeasure */ "./src/MusicalScore/Graphical/VexFlow/VexFlowTabMeasure.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowTextMeasurer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowTextMeasurer.ts"), exports);
__exportStar(__webpack_require__(/*! ./VexFlowVoiceEntry */ "./src/MusicalScore/Graphical/VexFlow/VexFlowVoiceEntry.ts"), exports);


/***/ }),

/***/ "./src/MusicalScore/Graphical/WebGLSkyBottomLineBatchCalculatorBackend.ts":
/*!********************************************************************************!*\
  !*** ./src/MusicalScore/Graphical/WebGLSkyBottomLineBatchCalculatorBackend.ts ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WebGLSkyBottomLineBatchCalculatorBackend = void 0;
const SkyBottomLineCalculationResult_1 = __webpack_require__(/*! ./SkyBottomLineCalculationResult */ "./src/MusicalScore/Graphical/SkyBottomLineCalculationResult.ts");
const SkyBottomLineBatchCalculatorBackend_1 = __webpack_require__(/*! ./SkyBottomLineBatchCalculatorBackend */ "./src/MusicalScore/Graphical/SkyBottomLineBatchCalculatorBackend.ts");
const VertexShader_glsl_1 = __importDefault(__webpack_require__(/*! ./Shaders/VertexShader.glsl */ "./src/MusicalScore/Graphical/Shaders/VertexShader.glsl"));
const FragmentShader_glsl_1 = __importDefault(__webpack_require__(/*! ./Shaders/FragmentShader.glsl */ "./src/MusicalScore/Graphical/Shaders/FragmentShader.glsl"));
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const CollectionUtil_1 = __webpack_require__(/*! ../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
// WebGL helper functions
function createShader(gl, type, source) {
    const shader = gl.createShader(type);
    if (!shader) {
        loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: Could not create a WebGL shader");
        throw new Error("Could not create a WebGL shader");
    }
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        loglevel_1.default.warn("Shader compilation failed\n" + gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        throw new Error("WebGL shader compilation failed");
    }
    return shader;
}
function createProgram(gl, vertexShader, fragmentShader) {
    const program = gl.createProgram();
    if (!program) {
        loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: Could not create a WebGL program");
        throw new Error("Could not create a WebGL program");
    }
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL program link failed\n" + gl.getProgramInfoLog(program));
        gl.deleteProgram(program);
        throw new Error("WebGL program link failed");
    }
    return program;
}
function createVertexBuffer(gl, program, attributeName, vertices) {
    const vertexBuffer = gl.createBuffer();
    if (!vertexBuffer) {
        loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL buffer creation failed");
        throw new Error("WebGL buffer creation failed");
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(CollectionUtil_1.CollectionUtil.flat(vertices)), gl.STATIC_DRAW);
    gl.useProgram(program);
    const positionAttributeLocation = gl.getAttribLocation(program, attributeName);
    gl.enableVertexAttribArray(positionAttributeLocation);
    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, // no nomralization
    0, // stride = 0
    0);
    return vertexBuffer;
}
function createTexture(gl, program, textureIdx, uniformName) {
    const texture = gl.createTexture();
    if (!texture) {
        loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL texture creation failed");
        throw new Error("WebGL texture creation failed");
    }
    gl.activeTexture(gl.TEXTURE0 + textureIdx);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    const uniformLocation = gl.getUniformLocation(program, uniformName);
    if (!uniformLocation) {
        loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: WebGL invalid uniform name");
        throw new Error("WebGL invalid uniform name");
    }
    gl.uniform1i(uniformLocation, textureIdx);
    return texture;
}
function updateMacroConstantsInShaderSource(source, constants) {
    let result = source;
    for (const [macroName, macroValue] of Object.entries(constants)) {
        const regex = new RegExp(`#define ${macroName} .*`);
        result = result.replace(regex, `#define ${macroName} ${macroValue}`);
    }
    return result;
}
function getMaximumTextureSize() {
    const canvas = document.createElement("canvas");
    const gl = canvas.getContext("webgl");
    return gl.getParameter(gl.MAX_TEXTURE_SIZE);
}
/**
 * This class calculates the skylines and the bottom lines by using WebGL acceleration.
 */
class WebGLSkyBottomLineBatchCalculatorBackend extends SkyBottomLineBatchCalculatorBackend_1.SkyBottomLineBatchCalculatorBackend {
    constructor(rules, measures) {
        super(rules, measures);
    }
    getPreferredRenderingConfiguration(maxWidth, elementHeight) {
        const maxTextureSize = Math.min(4096, getMaximumTextureSize());
        const elementWidth = Math.ceil(maxWidth);
        const numColumns = Math.min(5, Math.floor(maxTextureSize / elementWidth));
        const numRows = Math.min(5, Math.floor(maxTextureSize / elementHeight));
        return { elementWidth, numColumns, numRows };
    }
    onInitialize(tableConfiguration) {
        const { elementWidth, elementHeight, numColumns, numRows } = tableConfiguration;
        const canvas = document.createElement("canvas");
        canvas.width = elementWidth * numColumns;
        canvas.height = numRows;
        const gl = canvas.getContext("webgl");
        if (!gl) {
            loglevel_1.default.warn("WebGLSkyBottomLineCalculatorBackend: No WebGL support");
            throw new Error("No WebGL support");
        }
        this.gl = gl;
        const vertexShader = createShader(gl, gl.VERTEX_SHADER, VertexShader_glsl_1.default);
        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, updateMacroConstantsInShaderSource(FragmentShader_glsl_1.default, {
            NUM_ROWS: numRows,
            ELEMENT_HEIGHT: elementHeight,
        }));
        const program = createProgram(gl, vertexShader, fragmentShader);
        createVertexBuffer(gl, program, "a_position", [
            [-1, -1],
            [1, -1],
            [1, 1],
            [-1, -1],
            [1, 1],
            [-1, 1],
        ]);
        this.texture = createTexture(gl, program, 0, "u_image");
    }
    calculateFromCanvas(canvas, _, measures, samplingUnit, tableConfiguration) {
        const gl = this.gl;
        const rgbaLength = 4;
        const { elementWidth, elementHeight, numColumns } = tableConfiguration;
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
        gl.drawArrays(gl.TRIANGLES, 0, 6);
        const pixels = new Uint8Array(gl.canvas.width * gl.canvas.height * rgbaLength);
        gl.readPixels(0, 0, gl.canvas.width, gl.canvas.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        const result = [];
        for (let i = 0; i < measures.length; ++i) {
            const measure = measures[i];
            const measureWidth = Math.floor(measure.getVFStave().getWidth());
            const measureArrayLength = Math.max(Math.ceil(measure.PositionAndShape.Size.width * samplingUnit), 1);
            const u = i % numColumns;
            const v = Math.floor(i / numColumns);
            const xOffset = u * elementWidth * rgbaLength;
            const yOffset = v * elementWidth * numColumns * rgbaLength;
            const skyLine = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);
            const bottomLine = new Array(Math.max(measureArrayLength, measureWidth)).fill(0);
            for (let x = 0; x < measureWidth; ++x) {
                const r = pixels[x * rgbaLength + xOffset + yOffset];
                const g = pixels[x * rgbaLength + xOffset + yOffset + 1];
                const b = pixels[x * rgbaLength + xOffset + yOffset + 2];
                const skyLinePixel = r + (Math.floor(b / 16) * 256);
                const bottomLinePixel = g + (b % 16 * 256);
                skyLine[x] = skyLinePixel;
                bottomLine[x] = bottomLinePixel;
            }
            const lowestSkyLine = Math.max(...skyLine);
            const highestBottomLine = Math.min(...bottomLine);
            for (let x = 0; x < measureWidth; ++x) {
                skyLine[x] = skyLine[x] === 0 ? lowestSkyLine : skyLine[x];
                bottomLine[x] = bottomLine[x] === elementHeight ? highestBottomLine : bottomLine[x];
            }
            result.push(new SkyBottomLineCalculationResult_1.SkyBottomLineCalculationResult(skyLine, bottomLine));
        }
        return result;
    }
}
exports.WebGLSkyBottomLineBatchCalculatorBackend = WebGLSkyBottomLineBatchCalculatorBackend;


/***/ }),

/***/ "./src/MusicalScore/Instrument.ts":
/*!****************************************!*\
  !*** ./src/MusicalScore/Instrument.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Instrument = void 0;
const InstrumentalGroup_1 = __webpack_require__(/*! ./InstrumentalGroup */ "./src/MusicalScore/InstrumentalGroup.ts");
const Label_1 = __webpack_require__(/*! ./Label */ "./src/MusicalScore/Label.ts");
const Staff_1 = __webpack_require__(/*! ./VoiceData/Staff */ "./src/MusicalScore/VoiceData/Staff.ts");
class Instrument extends InstrumentalGroup_1.InstrumentalGroup {
    constructor(id, idString, musicSheet, parent) {
        super(undefined, musicSheet, parent);
        /** Transposition halftones for this instrument only.
         *  This is additive to osmd.Sheet.Transpose (MusicSheet).
         *  osmd.TransposeCaculator needs to be defined/created for this to take effect. (just set it with new TransposeCalculator())
         * You need to call osmd.updateGraphic() before the next render() (assuming this is set after load()).
         */
        this.Transpose = 0;
        this.voices = [];
        this.staves = [];
        this.hasLyrics = false;
        this.hasChordSymbols = false;
        this.lyricVersesNumbers = [];
        this.subInstruments = [];
        this.id = id;
        this.idString = idString;
        this.nameLabel = new Label_1.Label(idString);
    }
    get Voices() {
        return this.voices;
    }
    get Staves() {
        return this.staves;
    }
    get NameLabel() {
        return this.nameLabel;
    }
    get HasLyrics() {
        return this.hasLyrics;
    }
    set HasLyrics(value) {
        this.hasLyrics = value;
    }
    get HasChordSymbols() {
        return this.hasChordSymbols;
    }
    set HasChordSymbols(value) {
        this.hasChordSymbols = value;
    }
    get LyricVersesNumbers() {
        return this.lyricVersesNumbers;
    }
    set LyricVersesNumbers(value) {
        this.lyricVersesNumbers = value;
    }
    get Name() {
        return this.nameLabel.text;
    }
    set Name(value) {
        this.nameLabel.text = value;
    }
    get IdString() {
        return this.idString;
    }
    get Id() {
        return this.id;
    }
    get MidiInstrumentId() {
        return this.subInstruments[0].midiInstrumentID;
    }
    set MidiInstrumentId(value) {
        this.subInstruments[0].midiInstrumentID = value;
    }
    get Volume() {
        return this.subInstruments[0].volume;
    }
    set Volume(value) {
        for (let idx = 0, len = this.subInstruments.length; idx < len; ++idx) {
            const subInstrument = this.subInstruments[idx];
            subInstrument.volume = value;
        }
    }
    get PlaybackTranspose() {
        return this.playbackTranspose;
    }
    set PlaybackTranspose(value) {
        this.playbackTranspose = value;
    }
    get SubInstruments() {
        return this.subInstruments;
    }
    getSubInstrument(subInstrumentIdString) {
        for (let idx = 0, len = this.subInstruments.length; idx < len; ++idx) {
            const subInstrument = this.subInstruments[idx];
            if (subInstrument.idString === subInstrumentIdString) {
                return subInstrument;
            }
        }
        return undefined;
    }
    get PartAbbreviation() {
        return this.partAbbreviation;
    }
    set PartAbbreviation(value) {
        this.partAbbreviation = value;
    }
    get Visible() {
        if (this.voices.length > 0) {
            return this.Voices[0].Visible;
        }
        else {
            return false;
        }
    }
    set Visible(value) {
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            v.Visible = value;
        }
    }
    get Audible() {
        let result = false;
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            result = result || v.Audible;
        }
        return result;
    }
    set Audible(value) {
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            v.Audible = value;
        }
        for (let idx = 0, len = this.staves.length; idx < len; ++idx) {
            const staff = this.staves[idx];
            staff.audible = value;
        }
    }
    get Following() {
        let result = false;
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            result = result || v.Following;
        }
        return result;
    }
    set Following(value) {
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            v.Following = value;
        }
        for (let idx = 0, len = this.staves.length; idx < len; ++idx) {
            const staff = this.staves[idx];
            staff.following = value;
        }
    }
    SetVoiceAudible(voiceId, audible) {
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            if (v.VoiceId === voiceId) {
                v.Audible = audible;
                break;
            }
        }
    }
    SetVoiceFollowing(voiceId, following) {
        for (let idx = 0, len = this.Voices.length; idx < len; ++idx) {
            const v = this.Voices[idx];
            if (v.VoiceId === voiceId) {
                v.Following = following;
                break;
            }
        }
    }
    SetStaffAudible(staffId, audible) {
        const staff = this.staves[staffId - 1];
        staff.audible = audible;
        // hack for now:
        // activate all voices needed so that the staff notes will be played
        if (audible) {
            for (let idx = 0, len = staff.Voices.length; idx < len; ++idx) {
                const v = staff.Voices[idx];
                v.Audible = true;
            }
        }
        else {
            for (let idx = 0, len = staff.Voices.length; idx < len; ++idx) {
                const voice = staff.Voices[idx];
                let isAudibleInOtherStaves = false;
                for (let idx2 = 0, len2 = this.Staves.length; idx2 < len2; ++idx2) {
                    const st = this.Staves[idx2];
                    if (st.Id === staffId || !st.audible) {
                        continue;
                    }
                    for (let idx3 = 0, len3 = st.Voices.length; idx3 < len3; ++idx3) {
                        const v = st.Voices[idx3];
                        if (v === voice) {
                            isAudibleInOtherStaves = true;
                        }
                    }
                }
                if (!isAudibleInOtherStaves) {
                    voice.Audible = false;
                }
            }
        }
    }
    SetStaffFollow(staffId, follow) {
        const staff = this.staves[staffId - 1];
        staff.following = follow;
        if (follow) {
            for (let idx = 0, len = staff.Voices.length; idx < len; ++idx) {
                const v = staff.Voices[idx];
                v.Following = true;
            }
        }
        else {
            for (let idx = 0, len = staff.Voices.length; idx < len; ++idx) {
                const voice = staff.Voices[idx];
                let isFollowingInOtherStaves = false;
                for (let idx2 = 0, len2 = this.Staves.length; idx2 < len2; ++idx2) {
                    const st = this.Staves[idx2];
                    if (st.Id === staffId || !st.following) {
                        continue;
                    }
                    for (let idx3 = 0, len3 = st.Voices.length; idx3 < len3; ++idx3) {
                        const v = st.Voices[idx3];
                        if (v === voice) {
                            isFollowingInOtherStaves = true;
                        }
                    }
                }
                if (!isFollowingInOtherStaves) {
                    voice.Following = false;
                }
            }
        }
    }
    areAllVoiceVisible() {
        for (const voice of this.Voices) {
            if (!voice.Visible) {
                return false;
            }
        }
        return true;
    }
    createStaves(numberOfStaves) {
        for (let i = 0; i < numberOfStaves; i++) {
            this.staves.push(new Staff_1.Staff(this, i + 1));
        }
    }
    // necessary to be unique for MusicSystem.labels Dictionary
    toString() {
        return `${this.Name} , id: ${this.id}, idstring: ${this.idString}`;
    }
}
exports.Instrument = Instrument;


/***/ }),

/***/ "./src/MusicalScore/InstrumentalGroup.ts":
/*!***********************************************!*\
  !*** ./src/MusicalScore/InstrumentalGroup.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InstrumentalGroup = void 0;
class InstrumentalGroup {
    constructor(name, musicSheet, parent) {
        this.instrumentalGroups = [];
        this.name = name;
        this.musicSheet = musicSheet;
        this.parent = parent;
    }
    get InstrumentalGroups() {
        return this.instrumentalGroups;
    }
    get Parent() {
        return this.parent;
    }
    get Name() {
        return this.name;
    }
    set Name(value) {
        this.name = value;
    }
    get GetMusicSheet() {
        return this.musicSheet;
    }
}
exports.InstrumentalGroup = InstrumentalGroup;


/***/ }),

/***/ "./src/MusicalScore/Interfaces/AClassHierarchyTrackable.ts":
/*!*****************************************************************!*\
  !*** ./src/MusicalScore/Interfaces/AClassHierarchyTrackable.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AClassHierarchyTrackable = void 0;
class AClassHierarchyTrackable {
    //TODO: This pattern doesn't account for interfaces, only classes.
    //At present, it seems that interfaces need tested manually when they are needed.
    //Perhaps there is a better solution, but right now I don't see it. This is fine for our requirements currently
    isInstanceOfClass(className) {
        let proto = this.constructor.prototype;
        while (proto) {
            if (className === proto.constructor.name) {
                return true;
            }
            proto = proto.__proto__;
        }
        return false;
    }
}
exports.AClassHierarchyTrackable = AClassHierarchyTrackable;


/***/ }),

/***/ "./src/MusicalScore/Interfaces/ITextTranslation.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/Interfaces/ITextTranslation.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ITextTranslation = void 0;
class ITextTranslation {
    static translateText(tag, text) {
        if (!this.defaultTextTranslation) {
            return text;
        }
        //return this.DefaultTextTranslation.translate(tag, text);
    }
}
exports.ITextTranslation = ITextTranslation;


/***/ }),

/***/ "./src/MusicalScore/Label.ts":
/*!***********************************!*\
  !*** ./src/MusicalScore/Label.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Label = void 0;
const TextAlignment_1 = __webpack_require__(/*! ../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
/**
 * A text label on the graphical music sheet.
 * It is used e.g. for titles, composer names, instrument names and dynamic instructions.
 */
class Label {
    constructor(text = "", alignment = TextAlignment_1.TextAlignmentEnum.CenterBottom, font = undefined, print = true) {
        this.IsCreditLabel = false;
        this.text = text;
        this.print = print;
        this.textAlignment = alignment;
        this.font = font;
        this.fontFamily = undefined; // default value, will use EngravingRules.DefaultFontFamily at rendering
    }
    ToString() {
        return this.text;
    }
}
exports.Label = Label;


/***/ }),

/***/ "./src/MusicalScore/MusicParts/MusicPartManager.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/MusicParts/MusicPartManager.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TimestampTransform = exports.MusicPartManager = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const MusicPartManagerIterator_1 = __webpack_require__(/*! ./MusicPartManagerIterator */ "./src/MusicalScore/MusicParts/MusicPartManagerIterator.ts");
class MusicPartManager /*implements ISelectionListener*/ {
    constructor(musicSheet) {
        this.musicSheet = musicSheet;
    }
    /**
     * This method is called from CoreContainer when the user changes a Repetitions's userNumberOfRepetitions.
     */
    reInit() {
        this.init();
    }
    /**
     * Main initialize method for MusicPartManager.
     */
    init() {
        this.parts = this.musicSheet.Repetitions.slice(); // slice=arrayCopy
        this.sheetStart = this.musicSheet.SelectionStart = new Fraction_1.Fraction(0, 1);
        this.sheetEnd = this.musicSheet.SelectionEnd = this.musicSheet.SheetEndTimestamp;
        this.calcMapping();
    }
    getCurrentRepetitionTimestampTransform(curEnrolledTimestamp) {
        let curTransform = undefined;
        for (let i = this.timestamps.length - 1; i >= 0; i--) {
            curTransform = this.timestamps[i];
            if (curEnrolledTimestamp.gte(curTransform.$from)) {
                return curTransform;
            }
        }
        return this.timestamps[0];
    }
    absoluteEnrolledToSheetTimestamp(timestamp) {
        if (this.timestamps.length === 0) {
            return timestamp;
        }
        const transform = this.getCurrentRepetitionTimestampTransform(timestamp);
        return Fraction_1.Fraction.plus(timestamp, Fraction_1.Fraction.minus(transform.to, transform.$from)); // FIXME
    }
    get Parts() {
        return this.parts;
    }
    get MusicSheet() {
        return this.musicSheet;
    }
    getIterator(start) {
        if (!start) {
            return new MusicPartManagerIterator_1.MusicPartManagerIterator(this.musicSheet, this.musicSheet.SelectionStart, this.musicSheet.SelectionEnd);
        }
        return new MusicPartManagerIterator_1.MusicPartManagerIterator(this.musicSheet, start, undefined);
    }
    setSelectionStart(beginning) {
        this.musicSheet.SelectionStart = beginning;
        this.musicSheet.SelectionEnd = undefined;
    }
    setSelectionRange(start, end) {
        this.musicSheet.SelectionStart = start !== null && start !== void 0 ? start : this.sheetStart;
        this.musicSheet.SelectionEnd = end !== null && end !== void 0 ? end : this.sheetEnd;
    }
    calcMapping() {
        const timestamps = [];
        const iterator = this.getIterator();
        let currentRepetition = iterator.CurrentRepetition;
        let curTimestampTransform = new TimestampTransform(iterator.CurrentEnrolledTimestamp.clone(), iterator.CurrentSourceTimestamp.clone(), undefined, 0);
        timestamps.push(curTimestampTransform);
        while (!iterator.EndReached) {
            if (iterator.JumpOccurred || currentRepetition !== iterator.CurrentRepetition) {
                currentRepetition = iterator.CurrentRepetition;
                // if we are still in the same repetition but in a different repetition run, we remember
                // that we have to jump backwards at this position
                if (iterator.backJumpOccurred) {
                    const jumpRep = iterator.JumpResponsibleRepetition;
                    curTimestampTransform.nextBackJump = iterator.CurrentEnrolledTimestamp;
                    curTimestampTransform.curRepetition = jumpRep;
                    curTimestampTransform.curRepetitionIteration = iterator.CurrentJumpResponsibleRepetitionIterationBeforeJump;
                    for (let i = this.timestamps.length - 2; i >= 0; i--) {
                        if (timestamps[i].to.lt(jumpRep.AbsoluteTimestamp) || timestamps[i].curRepetition) {
                            break;
                        }
                        timestamps[i].nextBackJump = curTimestampTransform.nextBackJump;
                        timestamps[i].curRepetition = jumpRep;
                        timestamps[i].curRepetitionIteration = curTimestampTransform.curRepetitionIteration;
                    }
                }
                curTimestampTransform = new TimestampTransform(iterator.CurrentEnrolledTimestamp.clone(), iterator.CurrentSourceTimestamp.clone(), undefined, 0);
                timestamps.push(curTimestampTransform);
            }
            iterator.moveToNext();
        }
        this.timestamps = timestamps;
    }
}
exports.MusicPartManager = MusicPartManager;
class TimestampTransform {
    constructor(sourceTimestamp, enrolledTimestamp, repetition, curRepetitionIteration) {
        this.$from = sourceTimestamp;
        this.to = enrolledTimestamp;
        this.curRepetition = repetition;
        this.curRepetitionIteration = curRepetitionIteration;
        this.nextBackJump = undefined;
        this.nextForwardJump = undefined;
    }
}
exports.TimestampTransform = TimestampTransform;


/***/ }),

/***/ "./src/MusicalScore/MusicParts/MusicPartManagerIterator.ts":
/*!*****************************************************************!*\
  !*** ./src/MusicalScore/MusicParts/MusicPartManagerIterator.ts ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicPartManagerIterator = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const DynamicsContainer_1 = __webpack_require__(/*! ../VoiceData/HelperObjects/DynamicsContainer */ "./src/MusicalScore/VoiceData/HelperObjects/DynamicsContainer.ts");
const RhythmInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const ContinuousDynamicExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class MusicPartManagerIterator {
    constructor(musicSheet, startTimestamp, endTimestamp) {
        this.currentMeasureIndex = 0;
        this.currentPartIndex = 0;
        this.currentVoiceEntryIndex = -1;
        this.currentDynamicEntryIndex = 0;
        this.currentTempoEntryIndex = 0;
        this.currentDynamicChangingExpressions = [];
        this.currentRepetition = undefined;
        this.endReached = false;
        this.frontReached = false;
        this.currentTimeStamp = new Fraction_1.Fraction(0, 1);
        this.currentEnrolledMeasureTimestamp = new Fraction_1.Fraction(0, 1);
        this.currentRelativeInMeasureTimestamp = new Fraction_1.Fraction(0, 1);
        this.currentVerticalContainerInMeasureTimestamp = new Fraction_1.Fraction(0, 1);
        this.jumpResponsibleRepetition = undefined;
        this.activeDynamicExpressions = [];
        this.SkipInvisibleNotes = true;
        try {
            this.frontReached = true;
            this.musicSheet = musicSheet;
            this.currentVoiceEntries = undefined;
            this.frontReached = false;
            for (const rep of this.musicSheet.Repetitions) {
                this.setRepetitionIterationCount(rep, 1);
            }
            this.activeDynamicExpressions = new Array(this.musicSheet.getCompleteNumberOfStaves());
            this.currentMeasure = this.musicSheet.SourceMeasures[0];
            if (!startTimestamp) {
                return;
            }
            do {
                this.moveToNext();
            } while ((!this.currentVoiceEntries || this.currentTimeStamp.lt(startTimestamp)) && !this.endReached);
            for (let staffIndex = 0; staffIndex < this.activeDynamicExpressions.length; staffIndex++) {
                if (this.activeDynamicExpressions[staffIndex]) {
                    if (this.activeDynamicExpressions[staffIndex] instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
                        const continuousDynamic = this.activeDynamicExpressions[staffIndex];
                        this.currentDynamicChangingExpressions.push(new DynamicsContainer_1.DynamicsContainer(continuousDynamic, staffIndex));
                    }
                    else {
                        const instantaneousDynamic = this.activeDynamicExpressions[staffIndex];
                        this.currentDynamicChangingExpressions.push(new DynamicsContainer_1.DynamicsContainer(instantaneousDynamic, staffIndex));
                    }
                }
            }
            this.currentTempoChangingExpression = this.activeTempoExpression;
        }
        catch (err) {
            loglevel_1.default.info("MusicPartManagerIterator: " + err);
        }
    }
    get EndReached() {
        return this.endReached;
    }
    get FrontReached() {
        return this.frontReached;
    }
    get CurrentMeasure() {
        return this.currentMeasure;
    }
    get CurrentRepetition() {
        return this.currentRepetition;
    }
    get CurrentRepetitionIteration() {
        if (this.CurrentRepetition) {
            return this.getRepetitionIterationCount(this.CurrentRepetition);
        }
        return 0;
    }
    get CurrentJumpResponsibleRepetitionIterationBeforeJump() {
        if (this.jumpResponsibleRepetition) {
            return this.getRepetitionIterationCount(this.jumpResponsibleRepetition) - 1;
        }
        return 0;
    }
    get CurrentBpm() {
        return this.currentBpm;
    }
    get CurrentVoiceEntries() {
        return this.currentVoiceEntries;
    }
    get CurrentMeasureIndex() {
        return this.currentMeasureIndex;
    }
    get CurrentEnrolledTimestamp() {
        return Fraction_1.Fraction.plus(this.currentEnrolledMeasureTimestamp, this.currentVerticalContainerInMeasureTimestamp);
    }
    get CurrentSourceTimestamp() {
        return this.currentTimeStamp;
    }
    get CurrentRelativeInMeasureTimestamp() {
        return this.currentRelativeInMeasureTimestamp;
    }
    get JumpOccurred() {
        return this.backJumpOccurred || this.forwardJumpOccurred;
    }
    get ActiveTempoExpression() {
        return this.activeTempoExpression;
    }
    get ActiveDynamicExpressions() {
        return this.activeDynamicExpressions;
    }
    get CurrentTempoChangingExpression() {
        return this.currentTempoChangingExpression;
    }
    get JumpResponsibleRepetition() {
        return this.jumpResponsibleRepetition;
    }
    /**
     * Creates a clone of this iterator which has the same actual position.
     */
    clone(startTimeStamp = undefined, endTimeStamp = undefined) {
        const ret = new MusicPartManagerIterator(this.musicSheet, startTimeStamp !== null && startTimeStamp !== void 0 ? startTimeStamp : this.currentTimeStamp, endTimeStamp);
        ret.currentVoiceEntryIndex = this.currentVoiceEntryIndex;
        ret.currentMappingPart = this.currentMappingPart;
        ret.currentPartIndex = this.currentPartIndex;
        ret.currentVoiceEntries = this.currentVoiceEntries;
        ret.endReached = this.endReached;
        ret.frontReached = this.frontReached;
        // alternative method to set currentTimeStamp? may not fully affect current iterator position
        // ret.currentTimeStamp = this.currentTimeStamp;
        return ret;
    }
    /**
     * Returns the visible voice entries for the provided instrument of the current iterator position.
     * @param instrument
     * Returns: A List of voiceEntries. If there are no entries the List has a Count of 0 (it does not return null).
     */
    CurrentVisibleVoiceEntries(instrument) {
        const voiceEntries = [];
        if (!this.currentVoiceEntries) {
            return voiceEntries;
        }
        if (instrument) {
            for (const entry of this.currentVoiceEntries) {
                if (entry.ParentVoice.Parent.IdString === instrument.IdString) {
                    this.getVisibleEntries(entry, voiceEntries);
                    return voiceEntries;
                }
            }
        }
        else {
            for (const entry of this.currentVoiceEntries) {
                this.getVisibleEntries(entry, voiceEntries);
            }
        }
        return voiceEntries;
    }
    /**
     * Returns the visible voice entries for the provided instrument of the current iterator position.
     * @param instrument
     * Returns: A List of voiceEntries. If there are no entries the List has a Count of 0 (it does not return null).
     */
    CurrentAudibleVoiceEntries(instrument) {
        const voiceEntries = [];
        if (!this.currentVoiceEntries) {
            return voiceEntries;
        }
        if (instrument) {
            for (const entry of this.currentVoiceEntries) {
                if (entry.ParentVoice.Parent.IdString === instrument.IdString) {
                    this.getAudibleEntries(entry, voiceEntries);
                    return voiceEntries;
                }
            }
        }
        else {
            for (const entry of this.currentVoiceEntries) {
                this.getAudibleEntries(entry, voiceEntries);
            }
        }
        return voiceEntries;
    }
    /**
     * Returns the audible dynamics of the current iterator position.
     * Returns: A List of Dynamics. If there are no entries the List has a Count of 0 (it does not return null).
     */
    getCurrentDynamicChangingExpressions() {
        return this.currentDynamicChangingExpressions;
    }
    /**
     * Returns the score following voice entries for the provided instrument of the current iterator position.
     * @param instrument
     * Returns: A List of voiceEntries. If there are no entries the List has a Count of 0
     * (it does not return null).
     */
    CurrentScoreFollowingVoiceEntries(instrument) {
        const voiceEntries = [];
        if (!this.currentVoiceEntries) {
            return voiceEntries;
        }
        if (instrument) {
            for (const entry of this.currentVoiceEntries) {
                if (entry.ParentVoice.Parent.IdString === instrument.IdString) {
                    this.getScoreFollowingEntries(entry, voiceEntries);
                    return voiceEntries;
                }
            }
        }
        else {
            for (const entry of this.currentVoiceEntries) {
                this.getScoreFollowingEntries(entry, voiceEntries);
            }
        }
        return voiceEntries;
    }
    //public currentPlaybackSettings(): PlaybackSettings {
    //    return this.manager.MusicSheet.SheetPlaybackSetting;
    //}
    // move to previous
    moveToPrevious() {
        // this.forwardJumpOccurred = this.backJumpOccurred = false;
        if (this.frontReached) {
            return;
        }
        if (this.currentVoiceEntries) {
            this.currentVoiceEntries = [];
        }
        this.recursiveMoveBack();
    }
    moveToPreviousVisibleVoiceEntry(notesOnly) {
        while (!this.frontReached) {
            this.moveToPrevious();
            if (this.checkEntries(notesOnly)) {
                return;
            }
        }
    }
    moveToNext() {
        this.forwardJumpOccurred = this.backJumpOccurred = false;
        if (this.endReached) {
            return;
        }
        if (this.frontReached) {
            this.frontReached = false;
            this.currentVoiceEntryIndex = -1;
        }
        if (this.currentVoiceEntries) {
            this.currentVoiceEntries = [];
        }
        this.recursiveMove();
        if (!this.currentMeasure) {
            this.currentTimeStamp = new Fraction_1.Fraction(99999, 1);
            this.currentMeasure = this.musicSheet.SourceMeasures.last();
        }
    }
    moveToNextVisibleVoiceEntry(notesOnly) {
        while (!this.endReached) {
            this.moveToNext();
            if (this.checkEntries(notesOnly)) {
                return;
            }
        }
    }
    resetRepetitionIterationCount(repetition) {
        this.setRepetitionIterationCount(repetition, 1);
        return 1;
    }
    incrementRepetitionIterationCount(repetition) {
        if (this.repetitionIterationCountDictKeys.indexOf(repetition) === -1) {
            return this.setRepetitionIterationCount(repetition, 1);
        }
        else {
            return this.setRepetitionIterationCount(repetition, this.getRepetitionIterationCount(repetition) + 1);
        }
    }
    setRepetitionIterationCount(repetition, iterationCount) {
        const i = this.repetitionIterationCountDictKeys.indexOf(repetition);
        if (i === -1) {
            this.repetitionIterationCountDictKeys.push(repetition);
            this.repetitionIterationCountDictValues.push(iterationCount);
        }
        else {
            this.repetitionIterationCountDictValues[i] = iterationCount;
        }
        return iterationCount;
    }
    getRepetitionIterationCount(rep) {
        const i = this.repetitionIterationCountDictKeys.indexOf(rep);
        if (i !== -1) {
            return this.repetitionIterationCountDictValues[i];
        }
    }
    /*    private moveTempoIndexToTimestamp(measureNumber: number): void {
            for (let index: number = 0; index < this.manager.MusicSheet.TimestampSortedTempoExpressionsList.length; index++) {
                if (this.manager.MusicSheet.TimestampSortedTempoExpressionsList[index].SourceMeasureParent.MeasureNumber >= measureNumber) {
                    this.currentTempoEntryIndex = Math.Max(-1, index - 1);
                    return
                }
            }
        }
        private getNextTempoEntryTimestamp(): Fraction {
            if (this.currentTempoEntryIndex >= this.manager.MusicSheet.TimestampSortedTempoExpressionsList.length - 1) {
                return new Fraction(99999, 1);
            }
            return this.manager.MusicSheet.TimestampSortedTempoExpressionsList[this.currentTempoEntryIndex + 1].SourceMeasureParent.AbsoluteTimestamp +
            this.manager.MusicSheet.TimestampSortedTempoExpressionsList[this.currentTempoEntryIndex + 1].Timestamp;
        }
        private moveToNextDynamic(): void {
            this.currentDynamicEntryIndex++;
            this.currentDynamicChangingExpressions.Clear();
            let curDynamicEntry: DynamicsContainer = this.manager.MusicSheet.TimestampSortedDynamicExpressionsList[this.currentDynamicEntryIndex];
            this.currentDynamicChangingExpressions.push(curDynamicEntry);
            let tsNow: Fraction = curDynamicEntry.parMultiExpression().AbsoluteTimestamp;
            for (let i: number = this.currentDynamicEntryIndex + 1; i < this.manager.MusicSheet.TimestampSortedDynamicExpressionsList.length; i++) {
                curDynamicEntry = this.manager.MusicSheet.TimestampSortedDynamicExpressionsList[i];
                if ((curDynamicEntry.parMultiExpression().AbsoluteTimestamp !== tsNow)) { break; }
                this.currentDynamicEntryIndex = i;
                this.currentDynamicChangingExpressions.push(curDynamicEntry);
            }
        }
        private moveDynamicIndexToTimestamp(absoluteTimestamp: Fraction): void {
            let dynamics: DynamicsContainer[] = this.manager.MusicSheet.TimestampSortedDynamicExpressionsList;
            for (let index: number = 0; index < dynamics.length; index++) {
                if (dynamics[index].parMultiExpression().AbsoluteTimestamp.gte(absoluteTimestamp)) {
                    this.currentDynamicEntryIndex = Math.Max(0, index - 1);
                    return
                }
            }
        }
        private getNextDynamicsEntryTimestamp(): Fraction {
            if (this.currentDynamicEntryIndex >= this.manager.MusicSheet.TimestampSortedDynamicExpressionsList.length - 1) {
                return new Fraction(99999, 1);
            }
            return this.manager.MusicSheet.TimestampSortedDynamicExpressionsList[this.currentDynamicEntryIndex + 1].parMultiExpression().AbsoluteTimestamp;
        }
        */
    handleRepetitionsAtMeasureBegin() {
        for (let idx = 0, len = this.currentMeasure.FirstRepetitionInstructions.length; idx < len; ++idx) {
            const repetitionInstruction = this.currentMeasure.FirstRepetitionInstructions[idx];
            if (!repetitionInstruction.parentRepetition) {
                continue;
            }
            const currentRepetition = repetitionInstruction.parentRepetition;
            this.currentRepetition = currentRepetition;
            if (currentRepetition.StartIndex === this.currentMeasureIndex) {
                if (this.JumpResponsibleRepetition !== undefined &&
                    currentRepetition !== this.JumpResponsibleRepetition &&
                    currentRepetition.StartIndex >= this.JumpResponsibleRepetition.StartIndex &&
                    currentRepetition.EndIndex <= this.JumpResponsibleRepetition.EndIndex) {
                    this.resetRepetitionIterationCount(currentRepetition);
                }
            }
        }
    }
    handleRepetitionsAtMeasureEnd() {
        for (let idx = 0, len = this.currentMeasure.LastRepetitionInstructions.length; idx < len; ++idx) {
            const repetitionInstruction = this.currentMeasure.LastRepetitionInstructions[idx];
            const currentRepetition = repetitionInstruction.parentRepetition;
            if (!currentRepetition) {
                continue;
            }
            if (currentRepetition.BackwardJumpInstructions.indexOf(repetitionInstruction) > -1) {
                if (this.getRepetitionIterationCount(currentRepetition) < currentRepetition.UserNumberOfRepetitions) {
                    this.doBackJump(currentRepetition);
                    this.backJumpOccurred = true;
                    return;
                }
            }
            if (repetitionInstruction === currentRepetition.forwardJumpInstruction) {
                if (this.JumpResponsibleRepetition !== undefined
                    && currentRepetition !== this.JumpResponsibleRepetition
                    && currentRepetition.StartIndex >= this.JumpResponsibleRepetition.StartIndex
                    && currentRepetition.EndIndex <= this.JumpResponsibleRepetition.EndIndex) {
                    this.resetRepetitionIterationCount(currentRepetition);
                }
                const forwardJumpTargetMeasureIndex = currentRepetition.getForwardJumpTargetForIteration(this.getRepetitionIterationCount(currentRepetition));
                if (forwardJumpTargetMeasureIndex >= 0) {
                    this.currentMeasureIndex = forwardJumpTargetMeasureIndex;
                    this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];
                    this.currentVoiceEntryIndex = -1;
                    this.jumpResponsibleRepetition = currentRepetition;
                    this.forwardJumpOccurred = true;
                    return;
                }
                if (forwardJumpTargetMeasureIndex === -2) {
                    this.endReached = true;
                }
            }
        }
        this.currentMeasureIndex++;
        if (this.JumpResponsibleRepetition !== undefined && this.currentMeasureIndex > this.JumpResponsibleRepetition.EndIndex) {
            this.jumpResponsibleRepetition = undefined;
        }
    }
    doBackJump(currentRepetition) {
        this.currentMeasureIndex = currentRepetition.getBackwardJumpTarget();
        this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];
        this.currentVoiceEntryIndex = -1;
        this.incrementRepetitionIterationCount(currentRepetition);
        this.jumpResponsibleRepetition = currentRepetition;
    }
    activateCurrentRhythmInstructions() {
        if (this.currentMeasure !== undefined &&
            this.currentMeasure.FirstInstructionsStaffEntries.length > 0 &&
            this.currentMeasure.FirstInstructionsStaffEntries[0] !== undefined) {
            const instructions = this.currentMeasure.FirstInstructionsStaffEntries[0].Instructions;
            for (let idx = 0, len = instructions.length; idx < len; ++idx) {
                const abstractNotationInstruction = instructions[idx];
                if (abstractNotationInstruction instanceof RhythmInstruction_1.RhythmInstruction) {
                    this.musicSheet.SheetPlaybackSetting.rhythm = abstractNotationInstruction.Rhythm;
                }
            }
        }
    }
    activateCurrentDynamicOrTempoInstructions() {
        const timeSortedDynamics = this.musicSheet.TimestampSortedDynamicExpressionsList;
        while (this.currentDynamicEntryIndex > 0 && (this.currentDynamicEntryIndex >= timeSortedDynamics.length ||
            this.CurrentSourceTimestamp.lte(timeSortedDynamics[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp))) {
            this.currentDynamicEntryIndex--;
        }
        while (this.currentDynamicEntryIndex < timeSortedDynamics.length &&
            timeSortedDynamics[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp.lt(this.CurrentSourceTimestamp)) {
            this.currentDynamicEntryIndex++;
        }
        while (this.currentDynamicEntryIndex < timeSortedDynamics.length
            && timeSortedDynamics[this.currentDynamicEntryIndex].parMultiExpression().AbsoluteTimestamp.Equals(this.CurrentSourceTimestamp)) {
            const dynamicsContainer = timeSortedDynamics[this.currentDynamicEntryIndex];
            const staffIndex = dynamicsContainer.staffNumber;
            if (this.CurrentSourceTimestamp.Equals(dynamicsContainer.parMultiExpression().AbsoluteTimestamp)) {
                if (dynamicsContainer.continuousDynamicExpression) {
                    this.activeDynamicExpressions[staffIndex] = dynamicsContainer.continuousDynamicExpression;
                }
                else if (dynamicsContainer.instantaneousDynamicExpression) {
                    this.activeDynamicExpressions[staffIndex] = dynamicsContainer.instantaneousDynamicExpression;
                }
            }
            this.currentDynamicEntryIndex++;
        }
        this.currentDynamicChangingExpressions = [];
        for (let staffIndex = 0; staffIndex < this.activeDynamicExpressions.length; staffIndex++) {
            if (this.activeDynamicExpressions[staffIndex]) {
                let startTime;
                let endTime;
                if (this.activeDynamicExpressions[staffIndex] instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
                    const continuousDynamic = this.activeDynamicExpressions[staffIndex];
                    startTime = continuousDynamic.StartMultiExpression.AbsoluteTimestamp;
                    endTime = continuousDynamic.EndMultiExpression.AbsoluteTimestamp;
                    if (startTime.lte(this.CurrentSourceTimestamp) && this.CurrentSourceTimestamp.lte(endTime)) {
                        this.currentDynamicChangingExpressions.push(new DynamicsContainer_1.DynamicsContainer(continuousDynamic, staffIndex));
                    }
                }
                else {
                    const instantaneousDynamic = this.activeDynamicExpressions[staffIndex];
                    if (this.CurrentSourceTimestamp.Equals(instantaneousDynamic.ParentMultiExpression.AbsoluteTimestamp)) {
                        this.currentDynamicChangingExpressions.push(new DynamicsContainer_1.DynamicsContainer(instantaneousDynamic, staffIndex));
                    }
                }
            }
        }
        const timeSortedTempoExpressions = this.musicSheet.TimestampSortedTempoExpressionsList;
        while (this.currentTempoEntryIndex > 0 && (this.currentTempoEntryIndex >= timeSortedTempoExpressions.length
            || this.CurrentSourceTimestamp.lte(timeSortedTempoExpressions[this.currentTempoEntryIndex].AbsoluteTimestamp))) {
            this.currentTempoEntryIndex--;
        }
        while (this.currentTempoEntryIndex < timeSortedTempoExpressions.length &&
            timeSortedTempoExpressions[this.currentTempoEntryIndex].AbsoluteTimestamp.lt(this.CurrentSourceTimestamp)) {
            this.currentTempoEntryIndex++;
        }
        while (this.currentTempoEntryIndex < timeSortedTempoExpressions.length
            && timeSortedTempoExpressions[this.currentTempoEntryIndex].AbsoluteTimestamp.Equals(this.CurrentSourceTimestamp)) {
            this.activeTempoExpression = timeSortedTempoExpressions[this.currentTempoEntryIndex];
            this.currentTempoEntryIndex++;
        }
        this.currentTempoChangingExpression = undefined;
        if (this.activeTempoExpression) {
            let endTime = this.activeTempoExpression.AbsoluteTimestamp;
            if (this.activeTempoExpression.ContinuousTempo) {
                endTime = this.activeTempoExpression.ContinuousTempo.AbsoluteEndTimestamp;
            }
            if (this.activeTempoExpression.AbsoluteTimestamp.lte(this.CurrentSourceTimestamp)
                || this.CurrentSourceTimestamp.lte(endTime)) {
                this.currentTempoChangingExpression = this.activeTempoExpression;
            }
        }
    }
    recursiveMoveBack() {
        if (this.currentVoiceEntryIndex > 0) {
            this.currentVoiceEntryIndex--;
            const currentContainer = this.currentMeasure.VerticalSourceStaffEntryContainers[this.currentVoiceEntryIndex];
            this.currentVoiceEntries = this.getVoiceEntries(currentContainer);
            this.currentVerticalContainerInMeasureTimestamp = currentContainer.Timestamp;
            this.currentTimeStamp = Fraction_1.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp);
            this.activateCurrentDynamicOrTempoInstructions();
            // re-check endReached
            const selectionEnd = this.musicSheet.SelectionEnd;
            if (selectionEnd && this.currentTimeStamp.lt(selectionEnd)) {
                this.endReached = false;
            }
            this.currentMeasureIndex = this.musicSheet.SourceMeasures.indexOf(this.CurrentMeasure);
            return;
        }
        else if (this.currentVoiceEntryIndex === 0 && this.currentMeasureIndex !== 0) {
            const m = this.musicSheet.SourceMeasures[this.currentMeasureIndex - 1];
            this.currentMeasureIndex--;
            this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];
            const currentContainer = m.VerticalSourceStaffEntryContainers[m.VerticalSourceStaffEntryContainers.length - 1];
            this.currentVoiceEntries = this.getVoiceEntries(currentContainer);
            this.currentVerticalContainerInMeasureTimestamp = currentContainer.Timestamp;
            this.currentVoiceEntryIndex = m.VerticalSourceStaffEntryContainers.length - 1;
            this.currentTimeStamp = Fraction_1.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, currentContainer.Timestamp);
            this.activateCurrentDynamicOrTempoInstructions();
            // re-check endReached
            const selectionEnd = this.musicSheet.SelectionEnd;
            if (selectionEnd && this.currentTimeStamp.lt(selectionEnd)) {
                this.endReached = false;
            }
            return;
        }
        // we reached the beginning
        this.frontReached = true;
        this.currentTimeStamp = new Fraction_1.Fraction(-1, 1);
    }
    recursiveMove() {
        this.currentVoiceEntryIndex++; // TODO handle hidden part: skip hidden voice if requested by parameter
        if (this.currentVoiceEntryIndex === 0) {
            this.handleRepetitionsAtMeasureBegin();
            this.activateCurrentRhythmInstructions();
        }
        // everything fine, no complications
        if (this.currentVoiceEntryIndex >= 0 && this.currentVoiceEntryIndex < this.currentMeasure.VerticalSourceStaffEntryContainers.length) {
            const currentContainer = this.currentMeasure.VerticalSourceStaffEntryContainers[this.currentVoiceEntryIndex];
            this.currentVoiceEntries = this.getVoiceEntries(currentContainer);
            this.currentVerticalContainerInMeasureTimestamp = currentContainer.Timestamp;
            this.currentTimeStamp = Fraction_1.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp);
            const selectionEnd = this.musicSheet.SelectionEnd;
            // TODO handle selectionEnd undefined, can happen in Beethoven Ferne Geliebte
            if (selectionEnd && this.currentTimeStamp.gte(selectionEnd)) {
                this.endReached = true;
            }
            this.activateCurrentDynamicOrTempoInstructions();
            return;
        }
        this.currentEnrolledMeasureTimestamp.Add(this.currentMeasure.Duration);
        this.handleRepetitionsAtMeasureEnd();
        if (this.currentMeasureIndex >= 0 && this.currentMeasureIndex < this.musicSheet.SourceMeasures.length) {
            this.currentMeasure = this.musicSheet.SourceMeasures[this.currentMeasureIndex];
            this.currentTimeStamp = Fraction_1.Fraction.plus(this.currentMeasure.AbsoluteTimestamp, this.currentVerticalContainerInMeasureTimestamp);
            this.currentVoiceEntryIndex = -1;
            this.recursiveMove();
            return;
        }
        // we reached the end
        this.currentVerticalContainerInMeasureTimestamp = new Fraction_1.Fraction();
        this.currentMeasure = undefined;
        this.currentVoiceEntries = undefined;
        this.endReached = true;
    }
    /**
     * helper function for moveToNextVisibleVoiceEntry and moveToPreviousVisibleVoiceEntry
     * Get all entries and check if there is at least one valid entry in the list
     * @param notesOnly
     */
    checkEntries(notesOnly) {
        const tlist = this.CurrentVisibleVoiceEntries();
        if (tlist.length > 0) {
            if (!notesOnly) {
                return true;
            }
            for (let idx = 0, len = tlist.length; idx < len; ++idx) {
                const entry = tlist[idx];
                if (entry.Notes[0].Pitch) {
                    return true;
                }
            }
        }
        return false;
    }
    getVisibleEntries(entry, visibleEntries) {
        if (entry.ParentVoice.Visible) {
            let anyNoteVisible = false;
            for (const note of entry.Notes) {
                if (note.PrintObject) {
                    anyNoteVisible = true;
                    break;
                }
            }
            if (!anyNoteVisible && this.SkipInvisibleNotes) {
                return;
            }
            visibleEntries.push(entry);
        }
    }
    getAudibleEntries(entry, audibleEntries) {
        if (entry.ParentVoice.Audible) {
            audibleEntries.push(entry);
        }
    }
    getScoreFollowingEntries(entry, followingEntries) {
        if (entry.ParentVoice.Following && entry.ParentVoice.Parent.Following) {
            followingEntries.push(entry);
        }
    }
    getVoiceEntries(container) {
        const entries = [];
        for (const sourceStaffEntry of container.StaffEntries) {
            if (!sourceStaffEntry) {
                continue;
            }
            for (const voiceEntry of sourceStaffEntry.VoiceEntries) {
                entries.push(voiceEntry);
            }
        }
        return entries;
    }
}
exports.MusicPartManagerIterator = MusicPartManagerIterator;


/***/ }),

/***/ "./src/MusicalScore/MusicSheet.ts":
/*!****************************************!*\
  !*** ./src/MusicalScore/MusicSheet.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSheet = exports.PlaybackSettings = void 0;
const Fraction_1 = __webpack_require__(/*! ../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const MusicPartManager_1 = __webpack_require__(/*! ./MusicParts/MusicPartManager */ "./src/MusicalScore/MusicParts/MusicPartManager.ts");
const Repetition_1 = __webpack_require__(/*! ./MusicSource/Repetition */ "./src/MusicalScore/MusicSource/Repetition.ts");
const Label_1 = __webpack_require__(/*! ./Label */ "./src/MusicalScore/Label.ts");
const Voice_1 = __webpack_require__(/*! ./VoiceData/Voice */ "./src/MusicalScore/VoiceData/Voice.ts");
const MusicSheetErrors_1 = __webpack_require__(/*! ../Common/DataObjects/MusicSheetErrors */ "./src/Common/DataObjects/MusicSheetErrors.ts");
const EngravingRules_1 = __webpack_require__(/*! ./Graphical/EngravingRules */ "./src/MusicalScore/Graphical/EngravingRules.ts");
const DrawingEnums_1 = __webpack_require__(/*! ./Graphical/DrawingEnums */ "./src/MusicalScore/Graphical/DrawingEnums.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const TextAlignment_1 = __webpack_require__(/*! ../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
// FIXME Andrea: Commented out some unnecessary/not-ported-yet code, have a look at (*)
class PlaybackSettings {
}
exports.PlaybackSettings = PlaybackSettings;
/**
 * This is the representation of a complete piece of sheet music.
 * It includes the contents of a MusicXML file after the reading.
 * Notes: the musicsheet might not need the Rules, e.g. in the testframework. The EngravingRules Constructor
 * fails when no FontInfo exists, which needs a TextMeasurer
 */
class MusicSheet /*implements ISettableMusicSheet, IComparable<MusicSheet>*/ {
    constructor() {
        this.idString = "uninitialized";
        this.sourceMeasures = [];
        this.repetitions = [];
        this.dynListStaves = [];
        this.timestampSortedDynamicExpressionsList = [];
        this.timestampSortedTempoExpressionsList = [];
        this.instrumentalGroups = [];
        /** The parts in the sheet, e.g. piano left hand, or piano right hand, or violin. */
        this.instruments = []; // Should be renamed from instruments to parts and part, though this will be a big refactor
        // private languages: Language[] = [];
        // private activeLanguage: Language;
        this.musicPartManager = undefined;
        this.musicSheetErrors = new MusicSheetErrors_1.MusicSheetErrors();
        this.staves = [];
        this.transpose = 0;
        this.defaultStartTempoInBpm = 0;
        this.drawErroneousMeasures = false;
        this.hasBeenOpenedForTheFirstTime = false;
        this.currentEnrolledPosition = new Fraction_1.Fraction(0, 1);
        this.playbackSettings = new PlaybackSettings();
        // FIXME?
        // initialize SheetPlaybackSetting with default values
        this.playbackSettings.rhythm = new Fraction_1.Fraction(4, 4, 0, false);
        this.userStartTempoInBPM = 100;
        this.pageWidth = 120;
        // create MusicPartManager
        this.MusicPartManager = new MusicPartManager_1.MusicPartManager(this);
        this.hasBPMInfo = false;
    }
    /**
     * Get the global index within the music sheet for this staff.
     * @param staff
     * @returns {number}
     */
    static getIndexFromStaff(staff) {
        return staff.idInMusicSheet;
    }
    get SourceMeasures() {
        return this.sourceMeasures;
    }
    set SourceMeasures(value) {
        this.sourceMeasures = value;
    }
    get Repetitions() {
        return this.repetitions;
    }
    set Repetitions(value) {
        this.repetitions = value;
    }
    get DynListStaves() {
        return this.dynListStaves;
    }
    get TimestampSortedTempoExpressionsList() {
        return this.timestampSortedTempoExpressionsList;
    }
    get TimestampSortedDynamicExpressionsList() {
        return this.timestampSortedDynamicExpressionsList;
    }
    get InstrumentalGroups() {
        return this.instrumentalGroups;
    }
    get Parts() {
        return this.instruments;
    }
    get Instruments() {
        // this method name should remain for a while to maintain compatibility even when Instrument is renamed to Part
        return this.instruments;
    }
    get SheetPlaybackSetting() {
        return this.playbackSettings;
    }
    set SheetPlaybackSetting(value) {
        this.playbackSettings = value;
    }
    get DrawErroneousMeasures() {
        return this.drawErroneousMeasures;
    }
    set DrawErroneousMeasures(value) {
        this.drawErroneousMeasures = value;
    }
    get HasBeenOpenedForTheFirstTime() {
        return this.hasBeenOpenedForTheFirstTime;
    }
    set HasBeenOpenedForTheFirstTime(value) {
        this.hasBeenOpenedForTheFirstTime = value;
    }
    InitializeStartTempoInBPM(startTempo) {
        // (*) this.playbackSettings.BeatsPerMinute = startTempo;
        this.userStartTempoInBPM = startTempo;
    }
    get DefaultStartTempoInBpm() {
        return this.defaultStartTempoInBpm;
    }
    set DefaultStartTempoInBpm(value) {
        this.defaultStartTempoInBpm = value;
        this.InitializeStartTempoInBPM(value);
    }
    get Path() {
        return this.path;
    }
    set Path(value) {
        this.path = value;
    }
    get Staves() {
        return this.staves;
    }
    get TitleString() {
        if (this.title) {
            return this.title.text;
        }
        else {
            return "";
        }
    }
    set TitleString(value) {
        this.Title = new Label_1.Label(value);
    }
    get SubtitleString() {
        if (this.subtitle) {
            return this.subtitle.text;
        }
        else {
            return "";
        }
    }
    set SubtitleString(value) {
        this.Subtitle = new Label_1.Label(value);
    }
    get ComposerString() {
        if (this.composer) {
            return this.composer.text;
        }
        else {
            return "";
        }
    }
    set ComposerString(value) {
        this.Composer = new Label_1.Label(value);
    }
    get LyricistString() {
        if (this.lyricist) {
            return this.lyricist.text;
        }
        else {
            return "";
        }
    }
    set LyricistString(value) {
        this.Lyricist = new Label_1.Label(value);
    }
    get CopyrightString() {
        if (this.copyright) {
            return this.copyright.text;
        }
        else {
            return "";
        }
    }
    set CopyrightString(value) {
        this.Copyright = new Label_1.Label(value, TextAlignment_1.TextAlignmentEnum.CenterBottom, undefined, true);
    }
    get Title() {
        return this.title;
    }
    set Title(value) {
        this.title = value;
    }
    get Subtitle() {
        return this.subtitle;
    }
    set Subtitle(value) {
        this.subtitle = value;
    }
    get Composer() {
        return this.composer;
    }
    set Composer(value) {
        this.composer = value;
    }
    get Lyricist() {
        return this.lyricist;
    }
    set Lyricist(value) {
        this.lyricist = value;
    }
    get Copyright() {
        return this.copyright;
    }
    set Copyright(value) {
        this.copyright = value;
    }
    get Rules() {
        if (!this.rules) {
            loglevel_1.default.debug("warning: sheet.Rules was undefined. Creating new EngravingRules.");
            this.rules = new EngravingRules_1.EngravingRules();
        }
        return this.rules;
    }
    set Rules(value) {
        this.rules = value;
    }
    get SheetErrors() {
        return this.musicSheetErrors;
    }
    get SelectionStart() {
        return this.selectionStart;
    }
    set SelectionStart(value) {
        this.selectionStart = value.clone();
        this.currentEnrolledPosition = value.clone();
    }
    get SelectionEnd() {
        return this.selectionEnd;
    }
    set SelectionEnd(value) {
        this.selectionEnd = value;
    }
    set HasBPMInfo(value) {
        this.hasBPMInfo = value;
    }
    get HasBPMInfo() {
        return this.hasBPMInfo;
    }
    // (*) public get MusicSheetParameterObject(): MusicSheetParameterObject {
    //    return this.musicSheetParameterObject;
    //}
    // (*) public set MusicSheetParameterObject(value: MusicSheetParameterObject) {
    //    this.musicSheetParameterObject = value;
    //    this.Title = new Label(this.musicSheetParameterObject.Title);
    //    this.Composer = new Label(this.musicSheetParameterObject.Composer);
    //}
    addMeasure(measure) {
        this.sourceMeasures.push(measure);
        measure.measureListIndex = this.sourceMeasures.length - 1;
    }
    checkForInstrumentWithNoVoice() {
        for (let idx = 0, len = this.instruments.length; idx < len; ++idx) {
            const instrument = this.instruments[idx];
            if (instrument.Voices.length === 0) {
                const voice = new Voice_1.Voice(instrument, 1);
                instrument.Voices.push(voice);
            }
        }
    }
    /**
     *
     * @param staffIndexInMusicSheet - The global staff index, iterating through all staves of all instruments.
     * @returns {Staff}
     */
    getStaffFromIndex(staffIndexInMusicSheet) {
        return this.staves[staffIndexInMusicSheet];
    }
    fillStaffList() {
        let i = 0;
        for (let idx = 0, len = this.instruments.length; idx < len; ++idx) {
            const instrument = this.instruments[idx];
            for (let idx2 = 0, len2 = instrument.Staves.length; idx2 < len2; ++idx2) {
                const staff = instrument.Staves[idx2];
                staff.idInMusicSheet = i;
                this.staves.push(staff);
                i++;
            }
        }
    }
    get MusicPartManager() {
        return this.musicPartManager;
    }
    set MusicPartManager(value) {
        this.musicPartManager = value;
    }
    getCompleteNumberOfStaves() {
        let num = 0;
        for (let idx = 0, len = this.instruments.length; idx < len; ++idx) {
            const instrument = this.instruments[idx];
            num += instrument.Staves.length;
        }
        return num;
    }
    /**
     * Return a sourceMeasureList, where the given indices correspond to the whole SourceMeasureList of the MusicSheet.
     * @param start
     * @param end
     * @returns {SourceMeasure[]}
     */
    getListOfMeasuresFromIndeces(start, end) {
        const measures = [];
        for (let i = start; i <= end; i++) {
            measures.push(this.sourceMeasures[i]);
        }
        return measures;
    }
    /**
     * Returns the next SourceMeasure from a given SourceMeasure.
     * @param measure
     */
    getNextSourceMeasure(measure) {
        const index = this.sourceMeasures.indexOf(measure);
        if (index === this.sourceMeasures.length - 1) {
            return measure;
        }
        return this.sourceMeasures[index + 1];
    }
    /**
     * Returns the first SourceMeasure of MusicSheet.
     */
    getFirstSourceMeasure() {
        return this.sourceMeasures[0];
    }
    /**
     * Returns the last SourceMeasure of MusicSheet.
     */
    getLastSourceMeasure() {
        return this.sourceMeasures[this.sourceMeasures.length - 1];
    }
    resetAllNoteStates() {
        const iterator = this.MusicPartManager.getIterator();
        while (!iterator.EndReached && iterator.CurrentVoiceEntries) {
            for (let idx = 0, len = iterator.CurrentVoiceEntries.length; idx < len; ++idx) {
                const voiceEntry = iterator.CurrentVoiceEntries[idx];
                for (let idx2 = 0, len2 = voiceEntry.Notes.length; idx2 < len2; ++idx2) {
                    const note = voiceEntry.Notes[idx2];
                    note.state = DrawingEnums_1.NoteState.Normal;
                }
            }
            iterator.moveToNext();
        }
    }
    getMusicSheetInstrumentIndex(instrument) {
        return this.Instruments.indexOf(instrument);
    }
    getGlobalStaffIndexOfFirstStaff(instrument) {
        const instrumentIndex = this.getMusicSheetInstrumentIndex(instrument);
        let staffLineIndex = 0;
        for (let i = 0; i < instrumentIndex; i++) {
            staffLineIndex += this.Instruments[i].Staves.length;
        }
        return staffLineIndex;
    }
    /**
     * Set to the index-given Repetition a new (set from user) value.
     * @param index
     * @param value
     */
    setRepetitionNewUserNumberOfRepetitions(index, value) {
        let repIndex = 0;
        for (let i = 0; i < this.repetitions.length; i++) {
            if (this.repetitions[i] instanceof Repetition_1.Repetition) { // FIXME
                if (index === repIndex) {
                    this.repetitions[i].UserNumberOfRepetitions = value;
                    break;
                }
                else {
                    repIndex++;
                }
            }
        }
    }
    /**
     * Return the [[Repetition]] from the given index.
     * @param index
     * @returns {any}
     */
    getRepetitionByIndex(index) {
        let repIndex = 0;
        for (let i = 0; i < this.repetitions.length; i++) {
            if (this.repetitions[i] instanceof Repetition_1.Repetition) {
                if (index === repIndex) {
                    return this.repetitions[i];
                }
                repIndex++;
            }
        }
        return undefined;
    }
    CompareTo(other) {
        return this.Title.text.localeCompare(other.Title.text);
    }
    // (*)
    //public get IInstruments(): IInstrument[] {
    //    return this.instruments.slice()
    //}
    //public get IInitializableInstruments(): ISettableInstrument[] {
    //    return this.instruments.slice();
    //}
    //public get IRepetitions(): IRepetition[] {
    //    try {
    //        let repetitions: IRepetition[] = [];
    //        for (let idx: number = 0, len: number = this.repetitions.length; idx < len; ++idx) {
    //            let partListEntry: PartListEntry = this.repetitions[idx];
    //            if (partListEntry instanceof Repetition) {
    //                repetitions.push(<Repetition>partListEntry);
    //            }
    //        }
    //        return repetitions;
    //    } catch (ex) {
    //        log.info("MusicSheet.IRepetitions get: ", ex);
    //        return undefined;
    //    }
    //
    //}
    getExpressionsStartTempoInBPM() {
        if (this.TimestampSortedTempoExpressionsList.length > 0) {
            const me = this.TimestampSortedTempoExpressionsList[0];
            if (me.InstantaneousTempo) {
                return me.InstantaneousTempo.TempoInBpm;
            }
            else if (me.ContinuousTempo) {
                return me.ContinuousTempo.StartTempo;
            }
        }
        return this.userStartTempoInBPM;
    }
    get Errors() {
        return this.musicSheetErrors.measureErrors;
    }
    get FirstMeasureNumber() {
        try {
            return this.getFirstSourceMeasure().MeasureNumber;
        }
        catch (ex) {
            loglevel_1.default.info("MusicSheet.FirstMeasureNumber: ", ex);
            return 0;
        }
    }
    get LastMeasureNumber() {
        try {
            return this.getLastSourceMeasure().MeasureNumber;
        }
        catch (ex) {
            loglevel_1.default.info("MusicSheet.LastMeasureNumber: ", ex);
            return 0;
        }
    }
    get CurrentEnrolledPosition() {
        return this.currentEnrolledPosition.clone();
    }
    set CurrentEnrolledPosition(value) {
        this.currentEnrolledPosition = value.clone();
    }
    get Transpose() {
        return this.transpose;
    }
    /** Sets the number of halftones for transposition.
     * E.g. +1 halftone will transpose Eb major to E major.
     * also see Instrument.Transpose (e.g. osmd.Sheet.Instruments[0].Transpose will additionally transpose this instrument only)
     * osmd.TransposeCaculator needs to be defined/created for this to take effect. (just set it with new TransposeCalculator())
     */
    set Transpose(value) {
        this.transpose = value;
    }
    // (*)
    //public SetMusicSheetParameter(parameter: MusicSheetParameters, value: Object): void {
    //    if (this.PhonicScoreInterface) {
    //        this.PhonicScoreInterface.RequestMusicSheetParameter(parameter, value);
    //    } else {
    //        let oldValue: Object = 0;
    //        if (!parameter) { // FIXME MusicSheetParameters.MusicSheetTranspose) {
    //            oldValue = this.Transpose;
    //            this.Transpose = value;
    //        }
    //        if (!parameter) { // FIXME MusicSheetParameters.StartTempoInBPM) {
    //            oldValue = this.UserStartTempoInBPM;
    //            this.UserStartTempoInBPM = value;
    //        }
    //        if (!parameter) { // FIXME MusicSheetParameters.HighlightErrors) {
    //            oldValue = value;
    //        }
    //        if (this.MusicSheetParameterChanged) {
    //            this.musicSheetParameterChangedDelegate(undefined, parameter, value, oldValue);
    //        }
    //    }
    //}
    //public get MusicSheetParameterChanged(): MusicSheetParameterChangedDelegate {
    //    return this.musicSheetParameterChangedDelegate;
    //}
    //public set MusicSheetParameterChanged(value: MusicSheetParameterChangedDelegate) {
    //    this.musicSheetParameterChangedDelegate = value;
    //}
    get FullNameString() {
        return this.ComposerString + " " + this.TitleString;
    }
    get IdString() {
        return this.idString;
    }
    set IdString(value) {
        this.idString = value;
    }
    // (*)
    // public Dispose(): void {
    //    this.MusicSheetParameterChanged = undefined;
    //    for (let idx: number = 0, len: number = this.instruments.length; idx < len; ++idx) {
    //        let instrument: Instrument = this.instruments[idx];
    //        instrument.dispose();
    //    }
    // }
    getEnrolledSelectionStartTimeStampWorkaround() {
        const iter = this.MusicPartManager.getIterator(this.SelectionStart);
        return Fraction_1.Fraction.createFromFraction(iter.CurrentEnrolledTimestamp);
    }
    get SheetEndTimestamp() {
        const lastMeasure = this.getLastSourceMeasure();
        return Fraction_1.Fraction.plus(lastMeasure.AbsoluteTimestamp, lastMeasure.Duration);
    }
    /**
     * Works only if the [[SourceMeasure]]s are already filled with VerticalStaffEntryContainers!
     * @param timeStamp
     * @returns {SourceMeasure}
     */
    getSourceMeasureFromTimeStamp(timeStamp) {
        for (let idx = 0, len = this.sourceMeasures.length; idx < len; ++idx) {
            const sm = this.sourceMeasures[idx];
            for (let idx2 = 0, len2 = sm.VerticalSourceStaffEntryContainers.length; idx2 < len2; ++idx2) {
                const vssec = sm.VerticalSourceStaffEntryContainers[idx2];
                if (timeStamp.Equals(vssec.getAbsoluteTimestamp())) {
                    return sm;
                }
            }
        }
        return this.findSourceMeasureFromTimeStamp(timeStamp);
    }
    findSourceMeasureFromTimeStamp(timestamp) {
        for (const sm of this.sourceMeasures) {
            if (sm.AbsoluteTimestamp.lte(timestamp) && timestamp.lt(Fraction_1.Fraction.plus(sm.AbsoluteTimestamp, sm.Duration))) {
                return sm;
            }
        }
    }
    getVisibleInstruments() {
        const visInstruments = [];
        for (let idx = 0, len = this.Instruments.length; idx < len; ++idx) {
            const instrument = this.Instruments[idx];
            if (instrument.Voices.length > 0 && instrument.Voices[0].Visible) {
                visInstruments.push(instrument);
            }
        }
        return visInstruments;
    }
}
exports.MusicSheet = MusicSheet;
MusicSheet.defaultTitle = "defaultTitle";


/***/ }),

/***/ "./src/MusicalScore/MusicSource/PartListEntry.ts":
/*!*******************************************************!*\
  !*** ./src/MusicalScore/MusicSource/PartListEntry.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PartListEntry = void 0;
class PartListEntry {
    constructor(musicSheet) {
        this.enrolledTimestamps = [];
        this.visible = true;
        this.musicSheet = musicSheet;
    }
    get Visible() {
        return this.visible;
    }
    set Visible(value) {
        this.visible = value;
    }
    getFirstSourceMeasure() {
        return this.musicSheet.SourceMeasures[this.startIndex];
    }
    getLastSourceMeasure() {
        return this.musicSheet.SourceMeasures[this.endIndex];
    }
}
exports.PartListEntry = PartListEntry;


/***/ }),

/***/ "./src/MusicalScore/MusicSource/Repetition.ts":
/*!****************************************************!*\
  !*** ./src/MusicalScore/MusicSource/Repetition.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RepetitionEndingPart = exports.Repetition = void 0;
const SourceMusicPart_1 = __webpack_require__(/*! ./SourceMusicPart */ "./src/MusicalScore/MusicSource/SourceMusicPart.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const PartListEntry_1 = __webpack_require__(/*! ./PartListEntry */ "./src/MusicalScore/MusicSource/PartListEntry.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class Repetition extends PartListEntry_1.PartListEntry /*implements IRepetition*/ {
    constructor(musicSheet, virtualOverallRepetition) {
        super(musicSheet);
        this.backwardJumpInstructions = [];
        this.endingParts = [];
        this.endingIndexDict = {};
        this.userNumberOfRepetitions = 0;
        this.visibles = [];
        this.fromWords = false;
        this.repetitonIterationOrder = [];
        this.numberOfEndings = 1;
        this.musicSheet2 = musicSheet;
        this.virtualOverallRepetition = virtualOverallRepetition;
    }
    get BackwardJumpInstructions() {
        return this.backwardJumpInstructions;
    }
    get EndingIndexDict() {
        return this.endingIndexDict;
    }
    get EndingParts() {
        return this.endingParts;
    }
    get Visibles() {
        return this.visibles;
    }
    set Visibles(value) {
        this.visibles = value;
    }
    get DefaultNumberOfRepetitions() {
        let defaultNumber = 2;
        if (this.virtualOverallRepetition) {
            defaultNumber = 1;
        }
        return Math.max(defaultNumber, Object.keys(this.endingIndexDict).length, this.checkRepetitionForMultipleLyricVerses());
    }
    get UserNumberOfRepetitions() {
        return this.userNumberOfRepetitions;
    }
    set UserNumberOfRepetitions(value) {
        this.userNumberOfRepetitions = value;
        this.repetitonIterationOrder = [];
        const endingsDiff = this.userNumberOfRepetitions - this.NumberOfEndings;
        for (let i = 1; i <= this.userNumberOfRepetitions; i++) {
            if (i <= endingsDiff) {
                this.repetitonIterationOrder.push(1);
            }
            else {
                this.repetitonIterationOrder.push(i - endingsDiff);
            }
        }
    }
    getForwardJumpTargetForIteration(iteration) {
        const endingIndex = this.repetitonIterationOrder[iteration - 1];
        if (this.endingIndexDict[endingIndex]) {
            return this.endingIndexDict[endingIndex].part.StartIndex;
        }
        return -1;
    }
    getBackwardJumpTarget() {
        return this.startMarker.measureIndex;
    }
    SetEndingStartIndex(endingNumbers, startIndex) {
        const part = new RepetitionEndingPart(new SourceMusicPart_1.SourceMusicPart(this.musicSheet2, startIndex, startIndex));
        this.endingParts.push(part);
        for (const endingNumber of endingNumbers) {
            try {
                this.endingIndexDict[endingNumber] = part;
                part.endingIndices.push(endingNumber);
                if (this.numberOfEndings < endingNumber) {
                    this.numberOfEndings = endingNumber;
                }
            }
            catch (err) {
                loglevel_1.default.error("Repetition: Exception.", err);
            }
        }
    }
    //public SetEndingStartIndex(endingNumber: number, startIndex: number): void {
    //    let part: RepetitionEndingPart = new RepetitionEndingPart(new SourceMusicPart(this.musicSheet2, startIndex, startIndex));
    //    this.endingParts.push(part);
    //    this.endingIndexDict[endingNumber] = part;
    //    part.endingIndices.push(endingNumber);
    //    if (this.numberOfEndings < endingNumber) {
    //        this.numberOfEndings = endingNumber;
    //    }
    //}
    setEndingEndIndex(endingNumber, endIndex) {
        if (this.endingIndexDict[endingNumber]) {
            this.endingIndexDict[endingNumber].part.setEndIndex(endIndex);
        }
    }
    get NumberOfEndings() {
        return this.numberOfEndings;
    }
    get FromWords() {
        return this.fromWords;
    }
    set FromWords(value) {
        this.fromWords = value;
    }
    get AbsoluteTimestamp() {
        return Fraction_1.Fraction.createFromFraction(this.musicSheet2.SourceMeasures[this.startMarker.measureIndex].AbsoluteTimestamp);
    }
    get StartIndex() {
        return this.startMarker.measureIndex;
    }
    get EndIndex() {
        if (this.BackwardJumpInstructions.length === 0) {
            return this.StartIndex;
        }
        let result = this.backwardJumpInstructions[this.backwardJumpInstructions.length - 1].measureIndex;
        if (this.endingIndexDict[this.NumberOfEndings]) {
            result = Math.max(this.endingIndexDict[this.NumberOfEndings].part.EndIndex, result);
        }
        return result;
    }
    checkRepetitionForMultipleLyricVerses() {
        let lyricVerses = 0;
        const start = this.StartIndex;
        const end = this.EndIndex;
        for (let measureIndex = start; measureIndex <= end; measureIndex++) {
            const sourceMeasure = this.musicSheet2.SourceMeasures[measureIndex];
            for (let i = 0; i < sourceMeasure.CompleteNumberOfStaves; i++) {
                for (const sourceStaffEntry of sourceMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries) {
                    if (sourceStaffEntry) {
                        let verses = 0;
                        for (const voiceEntry of sourceStaffEntry.VoiceEntries) {
                            verses += Object.keys(voiceEntry.LyricsEntries).length;
                        }
                        lyricVerses = Math.max(lyricVerses, verses);
                    }
                }
            }
        }
        return lyricVerses;
    }
    get FirstSourceMeasureNumber() {
        return this.getFirstSourceMeasure().MeasureNumber;
    }
    get LastSourceMeasureNumber() {
        return this.getLastSourceMeasure().MeasureNumber;
    }
}
exports.Repetition = Repetition;
class RepetitionEndingPart {
    constructor(endingPart) {
        this.endingIndices = [];
        this.part = endingPart;
    }
    ToString() {
        return this.endingIndices.join(", ");
    }
}
exports.RepetitionEndingPart = RepetitionEndingPart;


/***/ }),

/***/ "./src/MusicalScore/MusicSource/SourceMusicPart.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/MusicSource/SourceMusicPart.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceMusicPart = void 0;
const PartListEntry_1 = __webpack_require__(/*! ./PartListEntry */ "./src/MusicalScore/MusicSource/PartListEntry.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
class SourceMusicPart extends PartListEntry_1.PartListEntry {
    constructor(musicSheet, startIndex, endIndex) {
        super(musicSheet);
        this.musicSheet = musicSheet;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
    }
    //private startIndex: number;
    //private endIndex: number;
    get MeasuresCount() {
        return this.endIndex - this.startIndex + 1;
    }
    get StartIndex() {
        return this.startIndex;
    }
    get EndIndex() {
        return this.endIndex;
    }
    get ParentRepetition() {
        return this.parentRepetition;
    }
    set ParentRepetition(value) {
        this.parentRepetition = value;
    }
    get AbsoluteTimestamp() {
        return Fraction_1.Fraction.createFromFraction(this.musicSheet.SourceMeasures[this.startIndex].AbsoluteTimestamp);
    }
    setStartIndex(startIndex) {
        this.startIndex = startIndex;
    }
    setEndIndex(index) {
        this.endIndex = index;
    }
}
exports.SourceMusicPart = SourceMusicPart;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/InstrumentReader.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/InstrumentReader.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InstrumentReader = void 0;
const VoiceGenerator_1 = __webpack_require__(/*! ./VoiceGenerator */ "./src/MusicalScore/ScoreIO/VoiceGenerator.ts");
const SourceStaffEntry_1 = __webpack_require__(/*! ../VoiceData/SourceStaffEntry */ "./src/MusicalScore/VoiceData/SourceStaffEntry.ts");
const ClefInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const KeyInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const RhythmInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const ClefInstruction_2 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const RhythmInstruction_2 = __webpack_require__(/*! ../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const KeyInstruction_2 = __webpack_require__(/*! ../VoiceData/Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const ClefInstruction_3 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const ChordSymbolReader_1 = __webpack_require__(/*! ./MusicSymbolModules/ChordSymbolReader */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/ChordSymbolReader.ts");
const ExpressionReader_1 = __webpack_require__(/*! ./MusicSymbolModules/ExpressionReader */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/ExpressionReader.ts");
const SlurReader_1 = __webpack_require__(/*! ./MusicSymbolModules/SlurReader */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/SlurReader.ts");
const VoiceEntry_1 = __webpack_require__(/*! ../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const NoteType_1 = __webpack_require__(/*! ../VoiceData/NoteType */ "./src/MusicalScore/VoiceData/NoteType.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ../Graphical/SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
// import {Dictionary} from "typescript-collections";
// FIXME: The following classes are missing
//type ChordSymbolContainer = any;
//type SlurReader = any;
//type RepetitionInstructionReader = any;
//declare class MusicSymbolModuleFactory {
//  public static createSlurReader(x: any): any;
//}
//
//class MetronomeReader {
//  public static addMetronomeSettings(xmlNode: IXmlElement, musicSheet: MusicSheet): void { }
//  public static readMetronomeInstructions(xmlNode: IXmlElement, musicSheet: MusicSheet, currentXmlMeasureIndex: number): void { }
//  public static readTempoInstruction(soundNode: IXmlElement, musicSheet: MusicSheet, currentXmlMeasureIndex: number): void { }
//}
/**
 * An InstrumentReader is used during the reading phase to keep parsing new measures from the MusicXML file
 * with the readNextXmlMeasure method.
 */
class InstrumentReader {
    constructor(pluginManager, repetitionInstructionReader, xmlMeasureList, instrument) {
        this.voiceGeneratorsDict = {};
        this.staffMainVoiceGeneratorDict = {};
        this.divisions = 0;
        this.currentClefNumber = 1;
        this.currentXmlMeasureIndex = 0;
        this.activeKeyHasBeenInitialized = false;
        this.abstractInstructions = [];
        this.repetitionInstructionReader = repetitionInstructionReader;
        this.xmlMeasureList = xmlMeasureList;
        this.musicSheet = instrument.GetMusicSheet;
        this.instrument = instrument;
        this.activeClefs = new Array(instrument.Staves.length);
        this.activeClefsHaveBeenInitialized = new Array(instrument.Staves.length);
        for (let i = 0; i < instrument.Staves.length; i++) {
            this.activeClefsHaveBeenInitialized[i] = false;
        }
        this.createExpressionGenerators(instrument.Staves.length);
        this.slurReader = new SlurReader_1.SlurReader(this.musicSheet);
        this.pluginManager = pluginManager;
    }
    get ActiveKey() {
        return this.activeKey;
    }
    get MaxTieNoteFraction() {
        return this.maxTieNoteFraction;
    }
    get ActiveRhythm() {
        return this.activeRhythm;
    }
    set ActiveRhythm(value) {
        this.activeRhythm = value;
    }
    /**
     * Main CreateSheet: read the next XML Measure and save all data to the given [[SourceMeasure]].
     * @param currentMeasure
     * @param measureStartAbsoluteTimestamp - Using this instead of currentMeasure.AbsoluteTimestamp as it isn't set yet
     * @param octavePlusOne Software like Guitar Pro gives one octave too low, so we need to add one
     * @returns {boolean}
     */
    readNextXmlMeasure(currentMeasure, measureStartAbsoluteTimestamp, octavePlusOne) {
        var _a, _b, _c;
        if (this.currentXmlMeasureIndex >= this.xmlMeasureList.length) {
            return false;
        }
        this.currentMeasure = currentMeasure;
        this.followingMultirestMeasures = Math.max(this.followingMultirestMeasures - 1, 0);
        this.inSourceMeasureInstrumentIndex = this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.instrument);
        if (this.repetitionInstructionReader) {
            this.repetitionInstructionReader.prepareReadingMeasure(currentMeasure, this.currentXmlMeasureIndex);
        }
        let currentFraction = new Fraction_1.Fraction(0, 1);
        let previousFraction = new Fraction_1.Fraction(0, 1);
        let divisionsException = false;
        this.maxTieNoteFraction = new Fraction_1.Fraction(0, 1);
        let lastNoteWasGrace = false;
        try {
            const measureNode = this.xmlMeasureList[this.currentXmlMeasureIndex];
            const xmlMeasureListArr = measureNode.elements();
            if (currentMeasure.Rules.UseXMLMeasureNumbers && !Number.isInteger(currentMeasure.MeasureNumberXML)) {
                const measureNumberXml = parseInt((_a = measureNode.attribute("number")) === null || _a === void 0 ? void 0 : _a.value, 10);
                if (Number.isInteger(measureNumberXml)) {
                    currentMeasure.MeasureNumberXML = measureNumberXml;
                }
            }
            let previousNode; // needs a null check when accessed because of node index 0!
            for (let xmlNodeIndex = 0; xmlNodeIndex < xmlMeasureListArr.length; xmlNodeIndex++) {
                const xmlNode = xmlMeasureListArr[xmlNodeIndex];
                if (xmlNodeIndex > 0) {
                    previousNode = xmlMeasureListArr[xmlNodeIndex - 1];
                }
                if (xmlNode.name === "print") {
                    const newSystemAttr = xmlNode.attribute("new-system");
                    if ((newSystemAttr === null || newSystemAttr === void 0 ? void 0 : newSystemAttr.value) === "yes") {
                        currentMeasure.printNewSystemXml = true;
                    }
                    const newPageAttr = xmlNode.attribute("new-page");
                    if ((newPageAttr === null || newPageAttr === void 0 ? void 0 : newPageAttr.value) === "yes") {
                        currentMeasure.printNewPageXml = true;
                    }
                }
                else if (xmlNode.name === "attributes") {
                    const divisionsNode = xmlNode.element("divisions");
                    if (divisionsNode) {
                        this.divisions = parseInt(divisionsNode.value, 10);
                        if (isNaN(this.divisions)) {
                            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/DivisionError", "Invalid divisions value at Instrument: ");
                            loglevel_1.default.debug("InstrumentReader.readNextXmlMeasure", errorMsg);
                            this.divisions = this.readDivisionsFromNotes();
                            if (this.divisions > 0) {
                                this.musicSheet.SheetErrors.push(errorMsg + this.instrument.Name);
                            }
                            else {
                                divisionsException = true;
                                throw new Exceptions_1.MusicSheetReadingException(errorMsg + this.instrument.Name);
                            }
                        }
                    }
                    if (!xmlNode.element("divisions") &&
                        this.divisions === 0 &&
                        this.currentXmlMeasureIndex === 0) {
                        const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/DivisionError", "Invalid divisions value at Instrument: ");
                        this.divisions = this.readDivisionsFromNotes();
                        if (this.divisions > 0) {
                            this.musicSheet.SheetErrors.push(errorMsg + this.instrument.Name);
                        }
                        else {
                            divisionsException = true;
                            throw new Exceptions_1.MusicSheetReadingException(errorMsg + this.instrument.Name);
                        }
                    }
                    this.addAbstractInstruction(xmlNode, octavePlusOne, previousNode, currentFraction.clone());
                    if (currentFraction.Equals(new Fraction_1.Fraction(0, 1)) &&
                        this.isAttributesNodeAtBeginOfMeasure(this.xmlMeasureList[this.currentXmlMeasureIndex], xmlNode)) {
                        this.saveAbstractInstructionList(this.instrument.Staves.length, true);
                    }
                    if (this.isAttributesNodeAtEndOfMeasure(this.xmlMeasureList[this.currentXmlMeasureIndex], xmlNode, currentFraction)) {
                        this.saveClefInstructionAtEndOfMeasure();
                    }
                    const staffDetailsNodes = xmlNode.elements("staff-details"); // there can be multiple, even if redundant. see #1041
                    for (const staffDetailsNode of staffDetailsNodes) {
                        const staffLinesNode = staffDetailsNode.element("staff-lines");
                        if (staffLinesNode) {
                            let staffNumber = 1;
                            const staffNumberAttr = staffDetailsNode.attribute("number");
                            if (staffNumberAttr) {
                                staffNumber = parseInt(staffNumberAttr.value, 10);
                            }
                            this.instrument.Staves[staffNumber - 1].StafflineCount = parseInt(staffLinesNode.value, 10);
                        }
                    }
                    // check multi measure rest
                    const measureStyle = xmlNode.element("measure-style");
                    if (measureStyle) {
                        const multipleRest = measureStyle.element("multiple-rest");
                        if (multipleRest) {
                            // TODO: save multirest per staff info a dictionary, to display a partial multirest if multirest values across staffs differ.
                            //   this makes the code bulkier though, and for now we only draw multirests if the staffs have the same multirest lengths.
                            // if (!currentMeasure.multipleRestMeasuresPerStaff) {
                            //   currentMeasure.multipleRestMeasuresPerStaff = new Dictionary<number, number>();
                            // }
                            const multipleRestValueXml = multipleRest.value;
                            let multipleRestNumber = 0;
                            try {
                                multipleRestNumber = Number.parseInt(multipleRestValueXml, 10);
                                if (currentMeasure.multipleRestMeasures !== undefined && multipleRestNumber !== currentMeasure.multipleRestMeasures) {
                                    // different multi-rest values in same measure for different staffs
                                    currentMeasure.multipleRestMeasures = 0; // for now, ignore multirest here. TODO: take minimum
                                    // currentMeasure.multipleRestMeasuresPerStaff.setValue(this.currentStaff?.Id, multipleRestNumber);
                                    //   issue: currentStaff can be undefined for first measure
                                }
                                else {
                                    currentMeasure.multipleRestMeasures = multipleRestNumber;
                                    this.currentMultirestStartMeasure = currentMeasure;
                                    this.followingMultirestMeasures = multipleRestNumber + 1; // will be decremented at the start of the loop
                                }
                            }
                            catch (e) {
                                console.log("multirest parse error: " + e);
                            }
                        }
                    }
                }
                else if (xmlNode.name === "note") {
                    let printObject = true;
                    if (((_b = xmlNode.attribute("print-object")) === null || _b === void 0 ? void 0 : _b.value) === "no") {
                        printObject = false; // note will not be rendered, but still parsed for Playback etc.
                        // if (xmlNode.attribute("print-spacing")) {
                        //   if (xmlNode.attribute("print-spacing").value === "yes" {
                        //     // TODO give spacing for invisible notes even when not displayed. might be hard with Vexflow formatting
                    }
                    const noteStaff = this.getNoteStaff(xmlNode);
                    this.currentStaff = this.instrument.Staves[noteStaff - 1];
                    const isChord = xmlNode.element("chord") !== undefined;
                    if (xmlNode.element("voice")) {
                        const noteVoice = parseInt(xmlNode.element("voice").value, 10);
                        this.currentVoiceGenerator = this.getOrCreateVoiceGenerator(noteVoice, noteStaff - 1);
                    }
                    else {
                        if (!isChord || !this.currentVoiceGenerator) {
                            this.currentVoiceGenerator = this.getOrCreateVoiceGenerator(1, noteStaff - 1);
                        }
                    }
                    let noteDivisions = 0;
                    let noteDuration = new Fraction_1.Fraction(0, 1);
                    let normalNotes = 2;
                    let typeDuration = undefined;
                    let isTuplet = false;
                    if (xmlNode.element("duration")) {
                        noteDivisions = parseInt(xmlNode.element("duration").value, 10);
                        if (!isNaN(noteDivisions)) {
                            noteDuration = new Fraction_1.Fraction(noteDivisions, 4 * this.divisions);
                            if (noteDivisions === 0) {
                                noteDuration = this.getNoteDurationFromTypeNode(xmlNode);
                            }
                            else {
                                typeDuration = this.getNoteDurationFromTypeNode(xmlNode);
                            }
                            if (xmlNode.element("time-modification")) {
                                noteDuration = this.getNoteDurationForTuplet(xmlNode);
                                const time = xmlNode.element("time-modification");
                                if (time === null || time === void 0 ? void 0 : time.element("normal-notes")) {
                                    normalNotes = parseInt(time.element("normal-notes").value, 10);
                                }
                                isTuplet = true;
                            }
                        }
                        else {
                            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NoteDurationError", "Invalid Note Duration.");
                            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                            loglevel_1.default.debug("InstrumentReader.readNextXmlMeasure", errorMsg);
                            continue;
                        }
                    }
                    const restNote = xmlNode.element("rest") !== undefined;
                    //log.info("New note found!", noteDivisions, noteDuration.toString(), restNote);
                    const notationsNode = xmlNode.combinedElement("notations"); // select all notation nodes
                    const isGraceNote = xmlNode.element("grace") !== undefined || noteDivisions === 0 || isChord && lastNoteWasGrace;
                    let graceNoteSlash = false;
                    let graceSlur = false;
                    if (isGraceNote) {
                        const graceNode = xmlNode.element("grace");
                        if (graceNode && graceNode.attributes()) {
                            if (graceNode.attribute("slash")) {
                                const slash = graceNode.attribute("slash").value;
                                if (slash === "yes") {
                                    graceNoteSlash = true;
                                }
                            }
                        }
                        noteDuration = this.getNoteDurationFromTypeNode(xmlNode);
                        if (notationsNode && notationsNode.element("slur")) {
                            graceSlur = true;
                            // grace slurs could be non-binary, but VexFlow.GraceNoteGroup modifier system is currently only boolean for slurs.
                        }
                    }
                    // check for cue note
                    const [isCueNote, noteTypeXml] = this.getCueNoteAndNoteTypeXml(xmlNode);
                    // check stem element
                    const [stemDirectionXml, stemColorXml, noteheadColorXml] = this.getStemDirectionAndColors(xmlNode);
                    // check Tremolo, Vibrato
                    let vibratoStrokes = false;
                    let tremoloInfo;
                    if (notationsNode) {
                        const ornamentsNode = notationsNode.element("ornaments");
                        if (ornamentsNode) {
                            tremoloInfo = this.getTremoloInfo(ornamentsNode);
                            vibratoStrokes = this.getVibratoStrokes(ornamentsNode);
                        }
                    }
                    const musicTimestamp = isChord ? previousFraction.clone() : currentFraction.clone();
                    this.currentStaffEntry = this.currentMeasure.findOrCreateStaffEntry(musicTimestamp, this.inSourceMeasureInstrumentIndex + noteStaff - 1, this.currentStaff).staffEntry;
                    //log.info("currentStaffEntry", this.currentStaffEntry, this.currentMeasure.VerticalSourceStaffEntryContainers.length);
                    if (!this.currentVoiceGenerator.hasVoiceEntry()
                        || (!isChord && !isGraceNote && !lastNoteWasGrace)
                        || (isGraceNote && !lastNoteWasGrace)
                        || (isGraceNote && !isChord)
                        || (!isGraceNote && lastNoteWasGrace)) {
                        this.currentVoiceGenerator.createVoiceEntry(musicTimestamp, this.currentStaffEntry, !restNote && !isGraceNote, isGraceNote, graceNoteSlash, graceSlur);
                    }
                    if (!isGraceNote && !isChord) {
                        previousFraction = currentFraction.clone();
                        currentFraction.Add(noteDuration);
                    }
                    if (isChord &&
                        this.currentStaffEntry !== undefined &&
                        this.currentStaffEntry.ParentStaff !== this.currentStaff) {
                        this.currentStaffEntry = this.currentVoiceGenerator.checkForStaffEntryLink(this.inSourceMeasureInstrumentIndex + noteStaff - 1, this.currentStaff, this.currentStaffEntry, this.currentMeasure);
                    }
                    const beginOfMeasure = (this.currentStaffEntry !== undefined &&
                        this.currentStaffEntry.Timestamp !== undefined &&
                        this.currentStaffEntry.Timestamp.Equals(new Fraction_1.Fraction(0, 1)) && !this.currentStaffEntry.hasNotes());
                    this.saveAbstractInstructionList(this.instrument.Staves.length, beginOfMeasure);
                    // this if block handles harmony/chords on the next note/staffentry element, so it assumes that a
                    //   harmony is given before the staff entry, but when a harmony is given after a staff entry element with a backup node,
                    //   it is put on the next note/staffentry and the last chord item is never parsed at all.
                    //   see PR #1342
                    // if (this.openChordSymbolContainers.length !== 0) {
                    //   this.currentStaffEntry.ChordContainers = this.openChordSymbolContainers;
                    //   // TODO handle multiple chords on one note/staffentry
                    //   this.openChordSymbolContainers = [];
                    // }
                    if (this.activeRhythm) {
                        // (*) this.musicSheet.SheetPlaybackSetting.Rhythm = this.activeRhythm.Rhythm;
                    }
                    if (!isTuplet && !isGraceNote) {
                        noteDuration = new Fraction_1.Fraction(noteDivisions, 4 * this.divisions);
                    }
                    const dots = xmlNode.elements("dot").length;
                    this.currentVoiceGenerator.read(xmlNode, noteDuration, typeDuration, noteTypeXml, normalNotes, restNote, this.currentStaffEntry, this.currentMeasure, measureStartAbsoluteTimestamp, this.maxTieNoteFraction, isChord, octavePlusOne, printObject, isCueNote, isGraceNote, stemDirectionXml, tremoloInfo, stemColorXml, noteheadColorXml, vibratoStrokes, dots);
                    // notationsNode created further up for multiple checks
                    if (notationsNode !== undefined && notationsNode.element("dynamics")) {
                        const expressionReader = this.expressionReaders[this.readExpressionStaffNumber(xmlNode) - 1];
                        if (expressionReader) {
                            expressionReader.readExpressionParameters(xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, false);
                            expressionReader.read(xmlNode, this.currentMeasure, previousFraction);
                        }
                    }
                    lastNoteWasGrace = isGraceNote;
                }
                else if (xmlNode.name === "forward") {
                    const forFraction = parseInt(xmlNode.element("duration").value, 10);
                    currentFraction.Add(new Fraction_1.Fraction(forFraction, 4 * this.divisions));
                }
                else if (xmlNode.name === "backup") {
                    const backFraction = parseInt(xmlNode.element("duration").value, 10);
                    currentFraction.Sub(new Fraction_1.Fraction(backFraction, 4 * this.divisions));
                    if (currentFraction.IsNegative()) {
                        currentFraction = new Fraction_1.Fraction(0, 1);
                    }
                    previousFraction.Sub(new Fraction_1.Fraction(backFraction, 4 * this.divisions));
                    if (previousFraction.IsNegative()) {
                        previousFraction = new Fraction_1.Fraction(0, 1);
                    }
                }
                else if (xmlNode.name === "direction") {
                    const directionTypeNode = xmlNode.element("direction-type");
                    // (*) MetronomeReader.readMetronomeInstructions(xmlNode, this.musicSheet, this.currentXmlMeasureIndex);
                    let relativePositionInMeasure = Math.min(1, currentFraction.RealValue);
                    if (this.activeRhythm !== undefined && this.activeRhythm.Rhythm) {
                        relativePositionInMeasure /= this.activeRhythm.Rhythm.RealValue;
                    }
                    let handeled = false;
                    if (this.repetitionInstructionReader) {
                        handeled = this.repetitionInstructionReader.handleRepetitionInstructionsFromWordsOrSymbols(directionTypeNode, relativePositionInMeasure);
                    }
                    if (!handeled) {
                        let expressionReader = this.expressionReaders[0];
                        const staffIndex = this.readExpressionStaffNumber(xmlNode) - 1;
                        if (staffIndex < this.expressionReaders.length) {
                            expressionReader = this.expressionReaders[staffIndex];
                        }
                        if (expressionReader) {
                            if (directionTypeNode.element("octave-shift")) {
                                expressionReader.readExpressionParameters(xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, true);
                                expressionReader.addOctaveShift(xmlNode, this.currentMeasure, previousFraction.clone());
                            }
                            if (directionTypeNode.element("pedal")) {
                                expressionReader.readExpressionParameters(xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, true);
                                expressionReader.addPedalMarking(xmlNode, this.currentMeasure, currentFraction.clone());
                                // pedal end in OSMD and Vexflow means end BEFORE timestamp, so currentFraction instead of previousFraction needs to be used.
                            }
                            expressionReader.readExpressionParameters(xmlNode, this.instrument, this.divisions, currentFraction, previousFraction, this.currentMeasure.MeasureNumber, false);
                            expressionReader.read(xmlNode, this.currentMeasure, currentFraction, previousFraction.clone());
                        }
                    }
                }
                else if (xmlNode.name === "barline") {
                    if (this.repetitionInstructionReader) {
                        const measureEndsSystem = this.repetitionInstructionReader.handleLineRepetitionInstructions(xmlNode);
                        if (measureEndsSystem) {
                            this.currentMeasure.HasEndLine = true;
                        }
                    }
                    const location = xmlNode.attribute("location");
                    const isEndingBarline = (xmlNodeIndex === xmlMeasureListArr.length - 1);
                    if (isEndingBarline || (location && location.value === "right")) {
                        const stringValue = (_c = xmlNode.element("bar-style")) === null || _c === void 0 ? void 0 : _c.value;
                        // TODO apparently we didn't anticipate bar-style not existing (the ? above was missing). how to handle?
                        if (stringValue) {
                            this.currentMeasure.endingBarStyleXml = stringValue;
                            this.currentMeasure.endingBarStyleEnum = SystemLinesEnum_1.SystemLinesEnumHelper.xmlBarlineStyleToSystemLinesEnum(stringValue);
                        }
                    }
                    // TODO do we need to process bars with left location too?
                }
                else if (xmlNode.name === "sound") {
                    // (*) MetronomeReader.readTempoInstruction(xmlNode, this.musicSheet, this.currentXmlMeasureIndex);
                    try {
                        if (xmlNode.attribute("tempo")) { // can be null, not just undefined!
                            const tempo = parseFloat(xmlNode.attribute("tempo").value);
                            // should set the PlaybackSettings only at first Measure
                            if (this.currentXmlMeasureIndex === 0) {
                                this.musicSheet.DefaultStartTempoInBpm = tempo;
                                this.musicSheet.HasBPMInfo = true;
                            }
                        }
                    }
                    catch (e) {
                        loglevel_1.default.debug("InstrumentReader.readTempoInstruction", e);
                    }
                }
                else if (xmlNode.name === "harmony") {
                    const noteStaff = this.getNoteStaff(xmlNode);
                    this.currentStaff = this.instrument.Staves[noteStaff - 1];
                    // new chord, could be second chord on same staffentry/note
                    const musicTimestamp = currentFraction.clone();
                    this.currentStaffEntry = this.currentMeasure.findOrCreateStaffEntry(musicTimestamp, this.inSourceMeasureInstrumentIndex + noteStaff - 1, this.currentStaff).staffEntry;
                    this.currentStaffEntry.ChordContainers.push(ChordSymbolReader_1.ChordSymbolReader.readChordSymbol(xmlNode, this.musicSheet, this.activeKey));
                }
            }
            for (const j in this.voiceGeneratorsDict) {
                if (this.voiceGeneratorsDict.hasOwnProperty(j)) {
                    const voiceGenerator = this.voiceGeneratorsDict[j];
                    voiceGenerator.checkForOpenBeam();
                }
            }
            if (this.currentXmlMeasureIndex === this.xmlMeasureList.length - 1) {
                for (let i = 0; i < this.instrument.Staves.length; i++) {
                    if (!this.activeClefsHaveBeenInitialized[i]) {
                        this.createDefaultClefInstruction(this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.instrument) + i);
                    }
                }
                if (!this.activeKeyHasBeenInitialized) {
                    this.createDefaultKeyInstruction();
                }
                for (let i = 0; i < this.expressionReaders.length; i++) {
                    const reader = this.expressionReaders[i];
                    if (reader) {
                        reader.closeOpenExpressions(this.currentMeasure, currentFraction);
                    }
                }
            }
            // if this is the first measure and no BPM info found, we set it to 120
            // next measures will automatically inherit that value
            if (!this.musicSheet.HasBPMInfo) {
                this.currentMeasure.TempoInBPM = 120;
            }
            else if (currentMeasure.TempoInBPM === 0 && this.previousMeasure) {
                this.currentMeasure.TempoInBPM = this.previousMeasure.TempoInBPM;
            }
        }
        catch (e) {
            if (divisionsException) {
                throw new Exceptions_1.MusicSheetReadingException(e.Message);
            }
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/MeasureError", "Error while reading Measure.");
            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
            loglevel_1.default.debug("InstrumentReader.readNextXmlMeasure", errorMsg, e);
        }
        this.previousMeasure = this.currentMeasure;
        this.currentXmlMeasureIndex += 1;
        return true;
    }
    getStemDirectionAndColors(xmlNode) {
        let stemDirectionXml = VoiceEntry_1.StemDirectionType.Undefined;
        let stemColorXml;
        const stemNode = xmlNode.element("stem");
        if (stemNode) {
            stemDirectionXml = this.getStemDirectionType(stemNode);
            const stemColorAttr = stemNode.attribute("color");
            if (stemColorAttr) { // can be null, maybe also undefined
                stemColorXml = this.parseXmlColor(stemColorAttr.value);
            }
        }
        // check notehead/color
        let noteheadColorXml = this.getNoteHeadColorXml(xmlNode);
        const noteColorXml = this.getNoteColorXml(xmlNode);
        if (noteColorXml && !noteheadColorXml) {
            noteheadColorXml = noteColorXml;
        }
        if (noteColorXml && !stemColorXml) {
            stemColorXml = noteColorXml;
        }
        return [stemDirectionXml, stemColorXml, noteheadColorXml];
    }
    /** Parse a color in XML format. Can be #ARGB or #RGB format, colors as byte hex values.
     *  @return color in Vexflow format #[A]RGB or undefined for invalid xmlColorString
     */
    parseXmlColor(xmlColorString) {
        if (!xmlColorString) {
            return undefined;
        }
        if (xmlColorString.length === 7) { // #RGB
            return xmlColorString;
        }
        else if (xmlColorString.length === 9) { // #ARGB
            return "#" + xmlColorString.substr(3); // cut away alpha channel
        }
        else {
            return undefined; // invalid xml color
        }
    }
    doCalculationsAfterDurationHasBeenSet() {
        for (const j in this.voiceGeneratorsDict) {
            if (this.voiceGeneratorsDict.hasOwnProperty(j)) {
                this.voiceGeneratorsDict[j].checkOpenTies();
            }
        }
    }
    /**
     * Get or create the passing [[VoiceGenerator]].
     * @param voiceId
     * @param staffId
     * @returns {VoiceGenerator}
     */
    getOrCreateVoiceGenerator(voiceId, staffId) {
        const staff = this.instrument.Staves[staffId];
        let voiceGenerator = this.voiceGeneratorsDict[voiceId];
        if (voiceGenerator) {
            if (staff.Voices.indexOf(voiceGenerator.GetVoice) === -1) {
                staff.Voices.push(voiceGenerator.GetVoice);
            }
        }
        else {
            const mainVoiceGenerator = this.staffMainVoiceGeneratorDict[staffId];
            if (mainVoiceGenerator) {
                voiceGenerator = new VoiceGenerator_1.VoiceGenerator(this.pluginManager, staff, voiceId, this.slurReader, mainVoiceGenerator.GetVoice);
                staff.Voices.push(voiceGenerator.GetVoice);
                this.voiceGeneratorsDict[voiceId] = voiceGenerator;
            }
            else {
                voiceGenerator = new VoiceGenerator_1.VoiceGenerator(this.pluginManager, staff, voiceId, this.slurReader);
                staff.Voices.push(voiceGenerator.GetVoice);
                this.voiceGeneratorsDict[voiceId] = voiceGenerator;
                this.staffMainVoiceGeneratorDict[staffId] = voiceGenerator;
            }
        }
        return voiceGenerator;
    }
    createExpressionGenerators(numberOfStaves) {
        this.expressionReaders = new Array(numberOfStaves);
        for (let i = 0; i < numberOfStaves; i++) {
            this.expressionReaders[i] = new ExpressionReader_1.ExpressionReader(this.musicSheet, this.instrument, i + 1);
        }
    }
    /**
     * Create the default [[ClefInstruction]] for the given staff index.
     * @param staffIndex
     */
    createDefaultClefInstruction(staffIndex) {
        let first;
        if (this.musicSheet.SourceMeasures.length > 0) {
            first = this.musicSheet.SourceMeasures[0];
        }
        else {
            first = this.currentMeasure;
        }
        const clefInstruction = new ClefInstruction_1.ClefInstruction(ClefInstruction_2.ClefEnum.G, 0, 2);
        let firstStaffEntry;
        if (!first.FirstInstructionsStaffEntries[staffIndex]) {
            firstStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
            first.FirstInstructionsStaffEntries[staffIndex] = firstStaffEntry;
        }
        else {
            firstStaffEntry = first.FirstInstructionsStaffEntries[staffIndex];
            firstStaffEntry.removeFirstInstructionOfTypeClefInstruction();
        }
        clefInstruction.Parent = firstStaffEntry;
        firstStaffEntry.Instructions.splice(0, 0, clefInstruction);
    }
    /**
     * Create the default [[KeyInstruction]] in case no [[KeyInstruction]] is given in the whole [[Instrument]].
     */
    createDefaultKeyInstruction() {
        let first;
        if (this.musicSheet.SourceMeasures.length > 0) {
            first = this.musicSheet.SourceMeasures[0];
        }
        else {
            first = this.currentMeasure;
        }
        const keyInstruction = new KeyInstruction_1.KeyInstruction(undefined, 0, KeyInstruction_2.KeyEnum.major);
        for (let j = this.inSourceMeasureInstrumentIndex; j < this.inSourceMeasureInstrumentIndex + this.instrument.Staves.length; j++) {
            if (!first.FirstInstructionsStaffEntries[j]) {
                const firstStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                first.FirstInstructionsStaffEntries[j] = firstStaffEntry;
                keyInstruction.Parent = firstStaffEntry;
                firstStaffEntry.Instructions.push(keyInstruction);
            }
            else {
                const firstStaffEntry = first.FirstInstructionsStaffEntries[j];
                keyInstruction.Parent = firstStaffEntry;
                firstStaffEntry.removeFirstInstructionOfTypeKeyInstruction();
                if (firstStaffEntry.Instructions[0] instanceof ClefInstruction_1.ClefInstruction) {
                    firstStaffEntry.Instructions.splice(1, 0, keyInstruction);
                }
                else {
                    firstStaffEntry.Instructions.splice(0, 0, keyInstruction);
                }
            }
        }
    }
    /**
     * Check if the given attributesNode is at the begin of a XmlMeasure.
     * @param parentNode
     * @param attributesNode
     * @returns {boolean}
     */
    isAttributesNodeAtBeginOfMeasure(parentNode, attributesNode) {
        const children = parentNode.elements();
        const attributesNodeIndex = children.indexOf(attributesNode); // FIXME | 0
        if (attributesNodeIndex > 0 && children[attributesNodeIndex - 1].name === "backup") {
            return true;
        }
        let firstNoteNodeIndex = -1;
        for (let i = 0; i < children.length; i++) {
            if (children[i].name === "note") {
                firstNoteNodeIndex = i;
                break;
            }
        }
        return (attributesNodeIndex < firstNoteNodeIndex && firstNoteNodeIndex > 0) || (firstNoteNodeIndex < 0);
    }
    /**
     * Check if the given attributesNode is at the end of a XmlMeasure.
     * @param parentNode
     * @param attributesNode
     * @returns {boolean}
     */
    isAttributesNodeAtEndOfMeasure(parentNode, attributesNode, currentFraction) {
        var _a;
        if (currentFraction.Equals((_a = this.ActiveRhythm) === null || _a === void 0 ? void 0 : _a.Rhythm)) {
            return true;
            // when the MusicXML uses a lot of <backup> nodes (e.g. Sibelius), we sometimes only detect measure end like this, not like below.
            //   because below code assumes the attributes node is the last one in the measure, just by order in the XML,
            //   (at least that there are no note nodes after the attributes node)
            //   but with backup nodes, there can be note nodes after it that are at an earlier timestamp.
        }
        const childs = parentNode.elements().slice(); // slice=arrayCopy
        let attributesNodeIndex = 0;
        for (let i = 0; i < childs.length; i++) {
            if (childs[i] === attributesNode) {
                attributesNodeIndex = i;
                break;
            }
        }
        let nextNoteNodeIndex = 0;
        for (let i = attributesNodeIndex; i < childs.length; i++) {
            if (childs[i].name === "note") {
                nextNoteNodeIndex = i;
                break;
            }
        }
        return attributesNodeIndex > nextNoteNodeIndex;
    }
    /**
     * Called only when no noteDuration is given in XML.
     * @param xmlNode
     * @returns {Fraction}
     */
    getNoteDurationFromTypeNode(xmlNode) {
        const typeNode = xmlNode.element("type");
        if (typeNode) {
            const type = typeNode.value;
            return NoteType_1.NoteTypeHandler.getNoteDurationFromType(type);
        }
        return new Fraction_1.Fraction(0, 4 * this.divisions);
    }
    /**
     * Add (the three basic) Notation Instructions to a list
     * @param attrNode
     * @param guitarPro
     */
    addAbstractInstruction(attrNode, guitarPro, previousNode, currentFraction) {
        if (attrNode.element("divisions")) {
            if (attrNode.elements().length === 1) {
                return;
            }
        }
        const transposeNode = attrNode.element("transpose");
        if (transposeNode) {
            const chromaticNode = transposeNode.element("chromatic");
            if (chromaticNode) {
                this.instrument.PlaybackTranspose = parseInt(chromaticNode.value, 10);
            }
        }
        const clefList = attrNode.elements("clef");
        let errorMsg;
        if (clefList.length > 0) {
            for (let idx = 0, len = clefList.length; idx < len; ++idx) {
                const nodeList = clefList[idx];
                let clefEnum = ClefInstruction_2.ClefEnum.G;
                let line = 2;
                let staffNumber = 1;
                let clefOctaveOffset = 0;
                const lineNode = nodeList.element("line");
                if (lineNode) {
                    try {
                        line = parseInt(lineNode.value, 10);
                    }
                    catch (ex) {
                        errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ClefLineError", "Invalid clef line. Using default.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                        line = 2;
                        loglevel_1.default.debug("InstrumentReader.addAbstractInstruction", errorMsg, ex);
                    }
                }
                const signNode = nodeList.element("sign");
                if (signNode) {
                    try {
                        clefEnum = ClefInstruction_2.ClefEnum[signNode.value];
                        if (!ClefInstruction_1.ClefInstruction.isSupportedClef(clefEnum)) {
                            errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ClefError", "Unsupported clef. Using default.");
                            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                            clefEnum = ClefInstruction_2.ClefEnum.G;
                            line = 2;
                        }
                        if (clefEnum === ClefInstruction_2.ClefEnum.TAB) {
                            clefOctaveOffset = -1;
                        }
                    }
                    catch (e) {
                        errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ClefError", "Invalid clef. Using default.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                        clefEnum = ClefInstruction_2.ClefEnum.G;
                        line = 2;
                        loglevel_1.default.debug("InstrumentReader.addAbstractInstruction", errorMsg, e);
                    }
                }
                const clefOctaveNode = nodeList.element("clef-octave-change");
                if (clefOctaveNode) {
                    try {
                        clefOctaveOffset = parseInt(clefOctaveNode.value, 10);
                    }
                    catch (e) {
                        errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ClefOctaveError", "Invalid clef octave. Using default.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                        clefOctaveOffset = 0;
                    }
                }
                if (nodeList.hasAttributes && nodeList.attribute("number")) {
                    try {
                        staffNumber = parseInt(nodeList.attribute("number").value, 10);
                        if (staffNumber > this.currentClefNumber) {
                            staffNumber = this.currentClefNumber;
                        }
                        this.currentClefNumber = staffNumber + 1;
                    }
                    catch (err) {
                        errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ClefError", "Invalid clef. Using default.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                        staffNumber = 1;
                        this.currentClefNumber = staffNumber + 1;
                    }
                }
                const clefInstruction = new ClefInstruction_1.ClefInstruction(clefEnum, clefOctaveOffset, line);
                this.abstractInstructions.push([staffNumber, clefInstruction, currentFraction]);
            }
        }
        if (attrNode.element("key") !== undefined && this.instrument.MidiInstrumentId !== ClefInstruction_3.MidiInstrument.Percussion) {
            let key = 0;
            const keyNode = attrNode.element("key").element("fifths");
            if (keyNode) {
                try {
                    key = parseInt(keyNode.value, 10);
                }
                catch (ex) {
                    errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/KeyError", "Invalid key. Set to default.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    key = 0;
                    loglevel_1.default.debug("InstrumentReader.addAbstractInstruction", errorMsg, ex);
                }
            }
            let keyEnum = KeyInstruction_2.KeyEnum.none;
            let modeNode = attrNode.element("key");
            if (modeNode) {
                modeNode = modeNode.element("mode");
            }
            if (modeNode) {
                try {
                    keyEnum = KeyInstruction_2.KeyEnum[modeNode.value];
                }
                catch (ex) {
                    errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/KeyError", "Invalid key/mode. Set to default.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    keyEnum = KeyInstruction_2.KeyEnum.major;
                    loglevel_1.default.debug("InstrumentReader.addAbstractInstruction", errorMsg, ex);
                }
            }
            const keyInstruction = new KeyInstruction_1.KeyInstruction(undefined, key, keyEnum);
            this.abstractInstructions.push([1, keyInstruction, currentFraction]);
        }
        if (attrNode.element("time")) {
            const timeNode = attrNode.element("time");
            let symbolEnum = RhythmInstruction_2.RhythmSymbolEnum.NONE;
            let timePrintObject = true;
            if (timeNode !== undefined && timeNode.hasAttributes) {
                const symbolAttribute = timeNode.attribute("symbol");
                if (symbolAttribute) {
                    if (symbolAttribute.value === "common") {
                        symbolEnum = RhythmInstruction_2.RhythmSymbolEnum.COMMON;
                    }
                    else if (symbolAttribute.value === "cut") {
                        symbolEnum = RhythmInstruction_2.RhythmSymbolEnum.CUT;
                    }
                }
                const printObjectAttribute = timeNode.attribute("print-object");
                if (printObjectAttribute) {
                    if (printObjectAttribute.value === "no") {
                        timePrintObject = false;
                    }
                }
            }
            let num = 0;
            let denom = 0;
            const senzaMisura = (timeNode && timeNode.element("senza-misura") !== undefined);
            const timeList = attrNode.elements("time");
            const beatsList = [];
            const typeList = [];
            for (let idx = 0, len = timeList.length; idx < len; ++idx) {
                const xmlNode = timeList[idx];
                beatsList.push.apply(beatsList, xmlNode.elements("beats"));
                typeList.push.apply(typeList, xmlNode.elements("beat-type"));
            }
            if (!senzaMisura) {
                try {
                    if (beatsList !== undefined && beatsList.length > 0 && typeList !== undefined && beatsList.length === typeList.length) {
                        const length = beatsList.length;
                        const fractions = new Array(length);
                        let maxDenom = 0;
                        for (let i = 0; i < length; i++) {
                            const s = beatsList[i].value;
                            let n = 0;
                            let d = 0;
                            if (s.indexOf("+") !== -1) {
                                const numbers = s.split("+");
                                for (let idx = 0, len = numbers.length; idx < len; ++idx) {
                                    n += parseInt(numbers[idx], 10);
                                }
                            }
                            else {
                                n = parseInt(s, 10);
                            }
                            d = parseInt(typeList[i].value, 10);
                            maxDenom = Math.max(maxDenom, d);
                            fractions[i] = new Fraction_1.Fraction(n, d, 0, false);
                        }
                        for (let i = 0; i < length; i++) {
                            if (fractions[i].Denominator === maxDenom) {
                                num += fractions[i].Numerator;
                            }
                            else {
                                num += (maxDenom / fractions[i].Denominator) * fractions[i].Numerator;
                            }
                        }
                        denom = maxDenom;
                    }
                    else {
                        num = parseInt(attrNode.element("time").element("beats").value, 10);
                        denom = parseInt(attrNode.element("time").element("beat-type").value, 10);
                    }
                }
                catch (ex) {
                    errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/RhythmError", "Invalid rhythm. Set to default.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    num = 4;
                    denom = 4;
                    loglevel_1.default.debug("InstrumentReader.addAbstractInstruction", errorMsg, ex);
                }
                const newRhythmInstruction = new RhythmInstruction_1.RhythmInstruction(new Fraction_1.Fraction(num, denom, 0, false), symbolEnum);
                newRhythmInstruction.PrintObject = timePrintObject;
                this.abstractInstructions.push([1, newRhythmInstruction, currentFraction]);
            }
            else {
                this.abstractInstructions.push([1, new RhythmInstruction_1.RhythmInstruction(new Fraction_1.Fraction(4, 4, 0, false), RhythmInstruction_2.RhythmSymbolEnum.NONE), currentFraction]);
            }
        }
    }
    /**
     * Save the current AbstractInstructions to the corresponding [[StaffEntry]]s.
     * @param numberOfStaves
     * @param beginOfMeasure
     */
    saveAbstractInstructionList(numberOfStaves, beginOfMeasure) {
        for (let i = this.abstractInstructions.length - 1; i >= 0; i--) {
            const instruction = this.abstractInstructions[i];
            const key = instruction[0]; // staffNumber
            const value = instruction[1];
            const instructionTimestamp = instruction[2];
            if (value instanceof ClefInstruction_1.ClefInstruction) {
                const clefInstruction = value;
                if (this.currentXmlMeasureIndex === 0 || (key <= this.activeClefs.length && clefInstruction !== this.activeClefs[key - 1])) {
                    if (!beginOfMeasure && this.currentStaffEntry !== undefined && !this.currentStaffEntry.hasNotes() &&
                        key - 1 === this.instrument.Staves.indexOf(this.currentStaffEntry.ParentStaff)) {
                        const newClefInstruction = clefInstruction;
                        const staffEntry = this.currentStaffEntry;
                        // the instructionTimestamp may differ from the current staffentry's when backup/forward tags are used in the XML.
                        //   in this case, we need to skip placing it at the current entry, and save it for later.
                        if (instructionTimestamp && Math.abs(instructionTimestamp.RealValue - staffEntry.Timestamp.RealValue) > 0.01) {
                            continue; // this instruction should be at a different staffentry/timestamp.
                        }
                        newClefInstruction.Parent = staffEntry;
                        staffEntry.removeFirstInstructionOfTypeClefInstruction();
                        staffEntry.Instructions.push(newClefInstruction);
                        this.activeClefs[key - 1] = clefInstruction;
                        this.abstractInstructions.splice(i, 1);
                    }
                    else if (beginOfMeasure) {
                        if (instructionTimestamp.RealValue !== 0) {
                            continue;
                        }
                        let firstStaffEntry;
                        if (this.currentMeasure) {
                            const newClefInstruction = clefInstruction;
                            const sseIndex = this.inSourceMeasureInstrumentIndex + key - 1;
                            const firstSse = this.currentMeasure.FirstInstructionsStaffEntries[sseIndex];
                            if (this.currentXmlMeasureIndex === 0) {
                                if (!firstSse) {
                                    firstStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                                    this.currentMeasure.FirstInstructionsStaffEntries[sseIndex] = firstStaffEntry;
                                    newClefInstruction.Parent = firstStaffEntry;
                                    firstStaffEntry.Instructions.push(newClefInstruction);
                                    this.activeClefsHaveBeenInitialized[key - 1] = true;
                                }
                                else if (this.currentMeasure.FirstInstructionsStaffEntries[sseIndex]
                                    !==
                                        undefined && !(firstSse.Instructions[0] instanceof ClefInstruction_1.ClefInstruction)) {
                                    firstStaffEntry = firstSse;
                                    newClefInstruction.Parent = firstStaffEntry;
                                    firstStaffEntry.removeFirstInstructionOfTypeClefInstruction();
                                    firstStaffEntry.Instructions.splice(0, 0, newClefInstruction);
                                    this.activeClefsHaveBeenInitialized[key - 1] = true;
                                }
                                else {
                                    const lastStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                                    this.currentMeasure.LastInstructionsStaffEntries[sseIndex] = lastStaffEntry;
                                    newClefInstruction.Parent = lastStaffEntry;
                                    lastStaffEntry.Instructions.push(newClefInstruction);
                                }
                            }
                            else if (!this.activeClefsHaveBeenInitialized[key - 1]) {
                                const first = this.musicSheet.SourceMeasures[0];
                                if (!first.FirstInstructionsStaffEntries[sseIndex]) {
                                    firstStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                                }
                                else {
                                    firstStaffEntry = first.FirstInstructionsStaffEntries[sseIndex];
                                    firstStaffEntry.removeFirstInstructionOfTypeClefInstruction();
                                }
                                newClefInstruction.Parent = firstStaffEntry;
                                firstStaffEntry.Instructions.splice(0, 0, newClefInstruction);
                                this.activeClefsHaveBeenInitialized[key - 1] = true;
                            }
                            else {
                                let previousPrintedMeasure = this.previousMeasure;
                                if (this.followingMultirestMeasures > 0 && this.currentMeasure.Rules.RenderMultipleRestMeasures) {
                                    previousPrintedMeasure = this.currentMultirestStartMeasure;
                                    // TODO check if we can do the same for autogenerated multirest measures
                                }
                                const lastStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                                previousPrintedMeasure.LastInstructionsStaffEntries[sseIndex] = lastStaffEntry;
                                newClefInstruction.Parent = lastStaffEntry;
                                lastStaffEntry.Instructions.push(newClefInstruction);
                            }
                            this.activeClefs[key - 1] = clefInstruction;
                            this.abstractInstructions.splice(i, 1);
                        }
                    }
                    else {
                        let lastStaffEntryBefore;
                        const duration = this.activeRhythm.Rhythm;
                        if (duration.RealValue > 0 &&
                            instructionTimestamp.RealValue / duration.RealValue > 0.90) {
                            if (!this.currentMeasure.LastInstructionsStaffEntries[key - 1]) {
                                this.currentMeasure.LastInstructionsStaffEntries[key - 1] = new SourceStaffEntry_1.SourceStaffEntry(undefined, this.instrument.Staves[key - 1]);
                            }
                            lastStaffEntryBefore = this.currentMeasure.LastInstructionsStaffEntries[key - 1];
                        }
                        // TODO figure out a more elegant way to do this. (see #1120)
                        //   the problem is that not all the staffentries in the measure exist yet,
                        //   so we can't put the clefInstruction before the correct note.
                        //   (if we try that, it's one note too early -> save instruction for later?)
                        //let lastTimestampBefore: Fraction;
                        // for (const vssec of this.currentMeasure.VerticalSourceStaffEntryContainers) {
                        //   for (const sse of vssec.StaffEntries) {
                        //     if (sse?.ParentStaff?.Id !== key) {
                        //       continue;
                        //     }
                        //     // if (!lastTimestampBefore || sse.Timestamp.lte(instructionTimestamp)) {
                        //     //   lastTimestampBefore = sse.Timestamp;
                        //     //   lastStaffEntryBefore = sse;
                        //     // } else {
                        //     //   lastStaffEntryBefore = sse;
                        //     //   break;
                        //     // }
                        //     if (sse.Timestamp.gte(instructionTimestamp)) {
                        //       lastStaffEntryBefore = sse;
                        //       break;
                        //     }
                        //   }
                        // }
                        //const sseIndex: number = this.inSourceMeasureInstrumentIndex + staffNumber - 1;
                        // if (!lastStaffEntryBefore) {
                        //   // this doesn't work for some reason
                        //   const newContainer: VerticalSourceStaffEntryContainer = new VerticalSourceStaffEntryContainer(this.currentMeasure, instructionTimestamp, 1);
                        //   const newStaffEntry: SourceStaffEntry = new SourceStaffEntry(newContainer, this.instrument.Staves[key - 1]);
                        //   newContainer.StaffEntries.push(newStaffEntry);
                        //   this.currentMeasure.VerticalSourceStaffEntryContainers.push(newContainer);
                        //   lastStaffEntryBefore = newStaffEntry;
                        // }
                        // if (!lastStaffEntryBefore) {
                        //   lastStaffEntryBefore = new SourceStaffEntry(undefined, undefined);
                        //   this.currentMeasure.LastInstructionsStaffEntries[sseIndex] = lastStaffEntryBefore;
                        // }
                        if (lastStaffEntryBefore) {
                            clefInstruction.Parent = lastStaffEntryBefore;
                            lastStaffEntryBefore.Instructions.push(clefInstruction);
                            this.activeClefs[key - 1] = clefInstruction;
                            this.abstractInstructions.splice(i, 1);
                        } // else clefinstruction might be processed later (e.g. Haydn Concertante measure 314)
                    }
                }
                else if (key <= this.activeClefs.length && clefInstruction === this.activeClefs[key - 1]) {
                    this.abstractInstructions.splice(i, 1);
                }
            }
            if (value instanceof KeyInstruction_1.KeyInstruction) {
                const keyInstruction = value;
                if (!this.activeKey || this.activeKey.Key !== keyInstruction.Key) {
                    this.activeKey = keyInstruction;
                    this.abstractInstructions.splice(i, 1);
                    let sourceMeasure;
                    if (!this.activeKeyHasBeenInitialized) {
                        this.activeKeyHasBeenInitialized = true;
                        if (this.currentXmlMeasureIndex > 0) {
                            sourceMeasure = this.musicSheet.SourceMeasures[0];
                        }
                        else {
                            sourceMeasure = this.currentMeasure;
                        }
                    }
                    else {
                        sourceMeasure = this.currentMeasure;
                    }
                    if (sourceMeasure) {
                        for (let j = this.inSourceMeasureInstrumentIndex; j < this.inSourceMeasureInstrumentIndex + numberOfStaves; j++) {
                            const newKeyInstruction = keyInstruction;
                            if (!sourceMeasure.FirstInstructionsStaffEntries[j]) {
                                const firstStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                                sourceMeasure.FirstInstructionsStaffEntries[j] = firstStaffEntry;
                                newKeyInstruction.Parent = firstStaffEntry;
                                firstStaffEntry.Instructions.push(newKeyInstruction);
                            }
                            else {
                                const firstStaffEntry = sourceMeasure.FirstInstructionsStaffEntries[j];
                                newKeyInstruction.Parent = firstStaffEntry;
                                firstStaffEntry.removeFirstInstructionOfTypeKeyInstruction();
                                if (firstStaffEntry.Instructions.length === 0) {
                                    firstStaffEntry.Instructions.push(newKeyInstruction);
                                }
                                else {
                                    if (firstStaffEntry.Instructions[0] instanceof ClefInstruction_1.ClefInstruction) {
                                        firstStaffEntry.Instructions.splice(1, 0, newKeyInstruction);
                                    }
                                    else {
                                        firstStaffEntry.Instructions.splice(0, 0, newKeyInstruction);
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    this.abstractInstructions.splice(i, 1);
                }
            }
            if (value instanceof RhythmInstruction_1.RhythmInstruction) {
                const rhythmInstruction = value;
                if (!this.activeRhythm || this.activeRhythm !== rhythmInstruction) {
                    this.activeRhythm = rhythmInstruction;
                    this.abstractInstructions.splice(i, 1);
                    if (this.currentMeasure) {
                        for (let j = this.inSourceMeasureInstrumentIndex; j < this.inSourceMeasureInstrumentIndex + numberOfStaves; j++) {
                            const newRhythmInstruction = rhythmInstruction;
                            let firstStaffEntry;
                            if (!this.currentMeasure.FirstInstructionsStaffEntries[j]) {
                                firstStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                                this.currentMeasure.FirstInstructionsStaffEntries[j] = firstStaffEntry;
                            }
                            else {
                                firstStaffEntry = this.currentMeasure.FirstInstructionsStaffEntries[j];
                                firstStaffEntry.removeFirstInstructionOfTypeRhythmInstruction();
                            }
                            newRhythmInstruction.Parent = firstStaffEntry;
                            firstStaffEntry.Instructions.push(newRhythmInstruction);
                        }
                    }
                }
                else {
                    this.abstractInstructions.splice(i, 1);
                }
            }
        }
    }
    /**
     * Save any ClefInstruction given - exceptionally - at the end of the currentMeasure.
     */
    saveClefInstructionAtEndOfMeasure() {
        for (let i = this.abstractInstructions.length - 1; i >= 0; i--) {
            const key = this.abstractInstructions[i][0];
            const value = this.abstractInstructions[i][1];
            if (value instanceof ClefInstruction_1.ClefInstruction) {
                const clefInstruction = value;
                if ((!this.activeClefs[key - 1]) ||
                    (clefInstruction.ClefType !== this.activeClefs[key - 1].ClefType || (clefInstruction.ClefType === this.activeClefs[key - 1].ClefType &&
                        clefInstruction.Line !== this.activeClefs[key - 1].Line))) {
                    const lastStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                    this.currentMeasure.LastInstructionsStaffEntries[this.inSourceMeasureInstrumentIndex + key - 1] = lastStaffEntry;
                    const newClefInstruction = clefInstruction;
                    newClefInstruction.Parent = lastStaffEntry;
                    lastStaffEntry.Instructions.push(newClefInstruction);
                    this.activeClefs[key - 1] = clefInstruction;
                    this.abstractInstructions.splice(i, 1);
                }
            }
        }
    }
    /**
     * In case of a [[Tuplet]], read NoteDuration from type.
     * @param xmlNode
     * @returns {Fraction}
     */
    getNoteDurationForTuplet(xmlNode) {
        let duration = new Fraction_1.Fraction(0, 1);
        const typeDuration = this.getNoteDurationFromTypeNode(xmlNode);
        if (xmlNode.element("time-modification")) {
            const time = xmlNode.element("time-modification");
            if (time) {
                if (time.element("actual-notes") !== undefined && time.element("normal-notes")) {
                    const actualNotes = time.element("actual-notes");
                    const normalNotes = time.element("normal-notes");
                    if (actualNotes !== undefined && normalNotes) {
                        const actual = parseInt(actualNotes.value, 10);
                        const normal = parseInt(normalNotes.value, 10);
                        duration = new Fraction_1.Fraction(normal * typeDuration.Numerator, actual * typeDuration.Denominator);
                    }
                }
            }
        }
        return duration;
    }
    readExpressionStaffNumber(xmlNode) {
        let directionStaffNumber = 1;
        if (xmlNode.element("staff")) {
            const staffNode = xmlNode.element("staff");
            if (staffNode) {
                try {
                    directionStaffNumber = parseInt(staffNode.value, 10);
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ExpressionStaffError", "Invalid Expression staff number. Set to default.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    directionStaffNumber = 1;
                    loglevel_1.default.debug("InstrumentReader.readExpressionStaffNumber", errorMsg, ex);
                }
            }
        }
        return directionStaffNumber;
    }
    /**
     * Calculate the divisions value from the type and duration of the first MeasureNote that makes sense
     * (meaning itself hasn't any errors and it doesn't belong to a [[Tuplet]]).
     *
     * If all the MeasureNotes belong to a [[Tuplet]], then we read the next XmlMeasure (and so on...).
     * If we have reached the end of the [[Instrument]] and still the divisions aren't set, we throw an exception
     * @returns {number}
     */
    readDivisionsFromNotes() {
        let divisionsFromNote = 0;
        let xmlMeasureIndex = this.currentXmlMeasureIndex;
        let read = false;
        while (!read) {
            const xmlMeasureListArr = this.xmlMeasureList[xmlMeasureIndex].elements();
            for (let idx = 0, len = xmlMeasureListArr.length; idx < len; ++idx) {
                const xmlNode = xmlMeasureListArr[idx];
                if (xmlNode.name === "note" && !xmlNode.element("time-modification")) {
                    const durationNode = xmlNode.element("duration");
                    const typeNode = xmlNode.element("type");
                    if (durationNode !== undefined && typeNode) {
                        const type = typeNode.value;
                        let noteDuration = 0;
                        try {
                            noteDuration = parseInt(durationNode.value, 10);
                        }
                        catch (ex) {
                            loglevel_1.default.debug("InstrumentReader.readDivisionsFromNotes", ex);
                            continue;
                        }
                        switch (type) {
                            case "1024th":
                                divisionsFromNote = (noteDuration / 4) * 1024;
                                break;
                            case "512th":
                                divisionsFromNote = (noteDuration / 4) * 512;
                                break;
                            case "256th":
                                divisionsFromNote = (noteDuration / 4) * 256;
                                break;
                            case "128th":
                                divisionsFromNote = (noteDuration / 4) * 128;
                                break;
                            case "64th":
                                divisionsFromNote = (noteDuration / 4) * 64;
                                break;
                            case "32nd":
                                divisionsFromNote = (noteDuration / 4) * 32;
                                break;
                            case "16th":
                                divisionsFromNote = (noteDuration / 4) * 16;
                                break;
                            case "eighth":
                                divisionsFromNote = (noteDuration / 4) * 8;
                                break;
                            case "quarter":
                                divisionsFromNote = (noteDuration / 4) * 4;
                                break;
                            case "half":
                                divisionsFromNote = (noteDuration / 4) * 2;
                                break;
                            case "whole":
                                divisionsFromNote = (noteDuration / 4);
                                break;
                            case "breve":
                                divisionsFromNote = (noteDuration / 4) / 2;
                                break;
                            case "long":
                                divisionsFromNote = (noteDuration / 4) / 4;
                                break;
                            case "maxima":
                                divisionsFromNote = (noteDuration / 4) / 8;
                                break;
                            default:
                                break;
                        }
                    }
                }
                if (divisionsFromNote > 0) {
                    read = true;
                    break;
                }
            }
            if (divisionsFromNote === 0) {
                xmlMeasureIndex++;
                if (xmlMeasureIndex === this.xmlMeasureList.length) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMEssages/DivisionsError", "Invalid divisions value at Instrument: ");
                    throw new Exceptions_1.MusicSheetReadingException(errorMsg + this.instrument.Name);
                }
            }
        }
        return divisionsFromNote;
    }
    getCueNoteAndNoteTypeXml(xmlNode) {
        const cueNode = xmlNode.element("cue");
        let isCueNote = false;
        if (cueNode) {
            isCueNote = true;
        }
        const typeNode = xmlNode.element("type");
        let noteTypeXml = NoteType_1.NoteType.UNDEFINED;
        if (typeNode) {
            const sizeAttr = typeNode.attribute("size");
            if ((sizeAttr === null || sizeAttr === void 0 ? void 0 : sizeAttr.value) === "cue") {
                isCueNote = true;
            }
            noteTypeXml = NoteType_1.NoteTypeHandler.StringToNoteType(typeNode.value);
        }
        return [isCueNote, noteTypeXml];
    }
    getStemDirectionType(stemNode) {
        switch (stemNode.value) {
            case "down":
                return VoiceEntry_1.StemDirectionType.Down;
            case "up":
                return VoiceEntry_1.StemDirectionType.Up;
            case "double":
                return VoiceEntry_1.StemDirectionType.Double;
            case "none":
                return VoiceEntry_1.StemDirectionType.None;
            default:
                return VoiceEntry_1.StemDirectionType.Undefined;
        }
    }
    getNoteHeadColorXml(xmlNode) {
        const noteheadNode = xmlNode.element("notehead");
        if (noteheadNode) {
            const colorAttr = noteheadNode.attribute("color");
            if (colorAttr) {
                return this.parseXmlColor(colorAttr.value);
            }
        }
        return null;
    }
    getNoteColorXml(xmlNode) {
        const noteColorAttr = xmlNode.attribute("color");
        if (noteColorAttr) { // can be undefined
            return this.parseXmlColor(noteColorAttr.value);
        }
        return null;
    }
    getTremoloInfo(ornamentsNode) {
        let tremoloStrokes;
        let tremoloUnmeasured;
        const tremoloNode = ornamentsNode.element("tremolo");
        if (tremoloNode) {
            const tremoloType = tremoloNode.attribute("type");
            if (tremoloType) {
                if (tremoloType.value === "single") {
                    const tremoloStrokesGiven = parseInt(tremoloNode.value, 10);
                    if (tremoloStrokesGiven > 0) {
                        tremoloStrokes = tremoloStrokesGiven;
                    }
                }
                else {
                    tremoloStrokes = 0;
                }
                if (tremoloType.value === "unmeasured") {
                    tremoloUnmeasured = true;
                }
                // TODO implement type "start". Vexflow doesn't have tremolo beams yet though (shorter than normal beams)
            }
        }
        return {
            tremoloStrokes: tremoloStrokes,
            tremoloUnmeasured: tremoloUnmeasured
        };
    }
    getVibratoStrokes(ornamentsNode) {
        const vibratoNode = ornamentsNode.element("wavy-line");
        if (vibratoNode !== undefined) {
            const vibratoType = vibratoNode.attribute("type");
            if (vibratoType && vibratoType.value === "start") {
                return true;
            }
        }
        return false;
    }
    getNoteStaff(xmlNode) {
        let noteStaff = 1;
        if (this.instrument.Staves.length > 1) {
            if (xmlNode.element("staff")) {
                noteStaff = parseInt(xmlNode.element("staff").value, 10);
                if (isNaN(noteStaff)) {
                    loglevel_1.default.debug("InstrumentReader.readNextXmlMeasure.get staff number");
                    noteStaff = 1;
                }
            }
        }
        return noteStaff;
    }
}
exports.InstrumentReader = InstrumentReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSheetReader.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSheetReader.ts ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSheetReader = void 0;
const MusicSheet_1 = __webpack_require__(/*! ../MusicSheet */ "./src/MusicalScore/MusicSheet.ts");
const SourceMeasure_1 = __webpack_require__(/*! ../VoiceData/SourceMeasure */ "./src/MusicalScore/VoiceData/SourceMeasure.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const InstrumentReader_1 = __webpack_require__(/*! ./InstrumentReader */ "./src/MusicalScore/ScoreIO/InstrumentReader.ts");
const Instrument_1 = __webpack_require__(/*! ../Instrument */ "./src/MusicalScore/Instrument.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const RhythmInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const RhythmInstruction_2 = __webpack_require__(/*! ../VoiceData/Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
const SourceStaffEntry_1 = __webpack_require__(/*! ../VoiceData/SourceStaffEntry */ "./src/MusicalScore/VoiceData/SourceStaffEntry.ts");
const InstrumentalGroup_1 = __webpack_require__(/*! ../InstrumentalGroup */ "./src/MusicalScore/InstrumentalGroup.ts");
const SubInstrument_1 = __webpack_require__(/*! ../SubInstrument */ "./src/MusicalScore/SubInstrument.ts");
const ClefInstruction_1 = __webpack_require__(/*! ../VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const Label_1 = __webpack_require__(/*! ../Label */ "./src/MusicalScore/Label.ts");
const MusicSymbolModuleFactory_1 = __webpack_require__(/*! ./MusicSymbolModuleFactory */ "./src/MusicalScore/ScoreIO/MusicSymbolModuleFactory.ts");
const EngravingRules_1 = __webpack_require__(/*! ../Graphical/EngravingRules */ "./src/MusicalScore/Graphical/EngravingRules.ts");
const ReaderPluginManager_1 = __webpack_require__(/*! ./ReaderPluginManager */ "./src/MusicalScore/ScoreIO/ReaderPluginManager.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
class MusicSheetReader /*implements IMusicSheetReader*/ {
    constructor(afterSheetReadingModules = undefined, rules = new EngravingRules_1.EngravingRules()) {
        this.completeNumberOfStaves = 0;
        this.pluginManager = new ReaderPluginManager_1.ReaderPluginManager();
        if (!afterSheetReadingModules) {
            this.afterSheetReadingModules = [];
        }
        else {
            this.afterSheetReadingModules = afterSheetReadingModules;
        }
        this.repetitionInstructionReader = MusicSymbolModuleFactory_1.MusicSymbolModuleFactory.createRepetitionInstructionReader();
        this.repetitionCalculator = MusicSymbolModuleFactory_1.MusicSymbolModuleFactory.createRepetitionCalculator();
        this.rules = rules;
    }
    get PluginManager() {
        return this.pluginManager;
    }
    get CompleteNumberOfStaves() {
        return this.completeNumberOfStaves;
    }
    static doCalculationsAfterDurationHasBeenSet(instrumentReaders) {
        for (const instrumentReader of instrumentReaders) {
            instrumentReader.doCalculationsAfterDurationHasBeenSet();
        }
    }
    /**
     * Read a music XML file and saves the values in the MusicSheet class.
     * @param root
     * @param path
     * @returns {MusicSheet}
     */
    createMusicSheet(root, path) {
        try {
            return this._createMusicSheet(root, path);
        }
        catch (e) {
            loglevel_1.default.error("MusicSheetReader.CreateMusicSheet", e);
            return undefined;
        }
    }
    _removeFromArray(list, elem) {
        const i = list.indexOf(elem);
        if (i !== -1) {
            list.splice(i, 1);
        }
    }
    // Trim from a string also newlines
    trimString(str) {
        return str.replace(/^\s+|\s+$/g, "");
    }
    _lastElement(list) {
        return list[list.length - 1];
    }
    //public SetPhonicScoreInterface(phonicScoreInterface: IPhonicScoreInterface): void {
    //  this.phonicScoreInterface = phonicScoreInterface;
    //}
    //public ReadMusicSheetParameters(sheetObject: MusicSheetParameterObject, root: IXmlElement, path: string): MusicSheetParameterObject {
    //  this.musicSheet = new MusicSheet();
    //  if (root) {
    //    this.pushSheetLabels(root, path);
    //    if (this.musicSheet.Title) {
    //      sheetObject.Title = this.musicSheet.Title.text;
    //    }
    //    if (this.musicSheet.Composer) {
    //      sheetObject.Composer = this.musicSheet.Composer.text;
    //    }
    //    if (this.musicSheet.Lyricist) {
    //      sheetObject.Lyricist = this.musicSheet.Lyricist.text;
    //    }
    //    let partlistNode: IXmlElement = root.element("part-list");
    //    let partList: IXmlElement[] = partlistNode.elements();
    //    this.createInstrumentGroups(partList);
    //    for (let idx: number = 0, len: number = this.musicSheet.Instruments.length; idx < len; ++idx) {
    //      let instr: Instrument = this.musicSheet.Instruments[idx];
    //      sheetObject.InstrumentList.push(__init(new MusicSheetParameterObject.LibrarySheetInstrument(), { name: instr.name }));
    //    }
    //  }
    //  return sheetObject;
    //}
    _createMusicSheet(root, path) {
        const instrumentReaders = [];
        let sourceMeasureCounter = 0;
        this.musicSheet = new MusicSheet_1.MusicSheet();
        this.musicSheet.Path = path;
        this.musicSheet.Rules = this.rules;
        if (!root) {
            throw new Exceptions_1.MusicSheetReadingException("Undefined root element");
        }
        this.pushSheetLabels(root, path);
        const partlistNode = root.element("part-list");
        if (!partlistNode) {
            throw new Exceptions_1.MusicSheetReadingException("Undefined partListNode");
        }
        const partInst = root.elements("part");
        const partList = partlistNode.elements();
        this.initializeReading(partList, partInst, instrumentReaders);
        let couldReadMeasure = true;
        this.currentFraction = new Fraction_1.Fraction(0, 1);
        let octavePlusOneEncoding = false; // GuitarPro and Sibelius give octaves -1 apparently
        let encoding = root.element("identification");
        if (encoding) {
            encoding = encoding.element("encoding");
        }
        if (encoding) {
            encoding = encoding.element("software");
        }
        if (encoding !== undefined && (encoding.value === "Guitar Pro 5")) { //|| encoding.value.startsWith("Sibelius")
            octavePlusOneEncoding = true;
        }
        while (couldReadMeasure) {
            // TODO changing this.rules.PartAndSystemAfterFinalBarline requires a reload of the piece for measure numbers to be updated
            if (this.currentMeasure !== undefined && this.currentMeasure.HasEndLine && this.rules.NewPartAndSystemAfterFinalBarline) {
                sourceMeasureCounter = 0;
            }
            this.currentMeasure = new SourceMeasure_1.SourceMeasure(this.completeNumberOfStaves, this.musicSheet.Rules);
            for (const instrumentReader of instrumentReaders) {
                try {
                    couldReadMeasure = couldReadMeasure && instrumentReader.readNextXmlMeasure(this.currentMeasure, this.currentFraction, octavePlusOneEncoding);
                }
                catch (e) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/InstrumentError", "Error while reading instruments.");
                    throw new Exceptions_1.MusicSheetReadingException(errorMsg, e);
                }
            }
            if (couldReadMeasure) {
                this.musicSheet.addMeasure(this.currentMeasure);
                this.checkIfRhythmInstructionsAreSetAndEqual(instrumentReaders);
                this.checkSourceMeasureForNullEntries();
                sourceMeasureCounter = this.setSourceMeasureDuration(instrumentReaders, sourceMeasureCounter);
                MusicSheetReader.doCalculationsAfterDurationHasBeenSet(instrumentReaders);
                this.currentMeasure.AbsoluteTimestamp = this.currentFraction.clone();
                this.musicSheet.SheetErrors.finalizeMeasure(this.currentMeasure.MeasureNumber);
                this.currentFraction.Add(this.currentMeasure.Duration);
                this.previousMeasure = this.currentMeasure;
            }
        }
        if (this.repetitionInstructionReader) {
            this.repetitionInstructionReader.removeRedundantInstructions();
            if (this.repetitionCalculator) {
                this.repetitionCalculator.calculateRepetitions(this.musicSheet, this.repetitionInstructionReader.repetitionInstructions);
            }
        }
        this.musicSheet.checkForInstrumentWithNoVoice();
        this.musicSheet.fillStaffList();
        //this.musicSheet.DefaultStartTempoInBpm = this.musicSheet.SheetPlaybackSetting.BeatsPerMinute;
        for (let idx = 0, len = this.afterSheetReadingModules.length; idx < len; ++idx) {
            const afterSheetReadingModule = this.afterSheetReadingModules[idx];
            afterSheetReadingModule.calculate(this.musicSheet);
        }
        //this.musicSheet.DefaultStartTempoInBpm = this.musicSheet.SourceMeasures[0].TempoInBPM;
        this.musicSheet.userStartTempoInBPM = this.musicSheet.userStartTempoInBPM || this.musicSheet.DefaultStartTempoInBpm;
        return this.musicSheet;
    }
    initializeReading(partList, partInst, instrumentReaders) {
        const instrumentDict = this.createInstrumentGroups(partList);
        this.completeNumberOfStaves = this.getCompleteNumberOfStavesFromXml(partInst);
        if (partInst.length !== 0) {
            this.repetitionInstructionReader.MusicSheet = this.musicSheet;
            this.currentFraction = new Fraction_1.Fraction(0, 1);
            this.currentMeasure = undefined;
            this.previousMeasure = undefined;
        }
        let counter = 0;
        for (const node of partInst) {
            const idNode = node.attribute("id");
            if (idNode) {
                const currentInstrument = instrumentDict[idNode.value];
                const xmlMeasureList = node.elements("measure");
                let instrumentNumberOfStaves = 1;
                try {
                    instrumentNumberOfStaves = this.getInstrumentNumberOfStavesFromXml(node);
                }
                catch (err) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/InstrumentStavesNumberError", "Invalid number of staves at instrument: ");
                    this.musicSheet.SheetErrors.push(errorMsg + currentInstrument.Name);
                    continue;
                }
                currentInstrument.createStaves(instrumentNumberOfStaves);
                instrumentReaders.push(new InstrumentReader_1.InstrumentReader(this.pluginManager, this.repetitionInstructionReader, xmlMeasureList, currentInstrument));
                if (this.repetitionInstructionReader) {
                    this.repetitionInstructionReader.xmlMeasureList[counter] = xmlMeasureList;
                }
                counter++;
            }
        }
    }
    /**
     * Check if all (should there be any apart from the first Measure) [[RhythmInstruction]]s in the [[SourceMeasure]] are the same.
     *
     * If not, then the max [[RhythmInstruction]] (Fraction) is set to all staves.
     * Also, if it happens to have the same [[RhythmInstruction]]s in RealValue but given in Symbol AND Fraction, then the Fraction prevails.
     * @param instrumentReaders
     */
    checkIfRhythmInstructionsAreSetAndEqual(instrumentReaders) {
        const rhythmInstructions = [];
        for (let i = 0; i < this.completeNumberOfStaves; i++) {
            if (this.currentMeasure.FirstInstructionsStaffEntries[i]) {
                const last = this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions[this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.length - 1];
                if (last instanceof RhythmInstruction_1.RhythmInstruction) {
                    rhythmInstructions.push(last);
                }
            }
        }
        let maxRhythmValue = 0.0;
        let index = -1;
        for (let idx = 0, len = rhythmInstructions.length; idx < len; ++idx) {
            const rhythmInstruction = rhythmInstructions[idx];
            if (rhythmInstruction.Rhythm.RealValue > maxRhythmValue) {
                if (this.areRhythmInstructionsMixed(rhythmInstructions) && rhythmInstruction.SymbolEnum !== RhythmInstruction_2.RhythmSymbolEnum.NONE) {
                    continue;
                }
                maxRhythmValue = rhythmInstruction.Rhythm.RealValue;
                index = rhythmInstructions.indexOf(rhythmInstruction);
            }
        }
        if (rhythmInstructions.length > 0 && rhythmInstructions.length < this.completeNumberOfStaves) {
            const rhythmInstruction = rhythmInstructions[index].clone();
            for (let i = 0; i < this.completeNumberOfStaves; i++) {
                if (this.currentMeasure.FirstInstructionsStaffEntries[i] !== undefined &&
                    !(this._lastElement(this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions) instanceof RhythmInstruction_1.RhythmInstruction)) {
                    this.currentMeasure.FirstInstructionsStaffEntries[i].removeAllInstructionsOfTypeRhythmInstruction();
                    this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.push(rhythmInstruction.clone());
                }
                if (!this.currentMeasure.FirstInstructionsStaffEntries[i]) {
                    this.currentMeasure.FirstInstructionsStaffEntries[i] = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                    this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.push(rhythmInstruction.clone());
                }
            }
            for (let idx = 0, len = instrumentReaders.length; idx < len; ++idx) {
                const instrumentReader = instrumentReaders[idx];
                instrumentReader.ActiveRhythm = rhythmInstruction;
            }
        }
        if (rhythmInstructions.length === 0 && this.currentMeasure === this.musicSheet.SourceMeasures[0]) {
            const rhythmInstruction = new RhythmInstruction_1.RhythmInstruction(new Fraction_1.Fraction(4, 4, 0, false), RhythmInstruction_2.RhythmSymbolEnum.NONE);
            for (let i = 0; i < this.completeNumberOfStaves; i++) {
                if (!this.currentMeasure.FirstInstructionsStaffEntries[i]) {
                    this.currentMeasure.FirstInstructionsStaffEntries[i] = new SourceStaffEntry_1.SourceStaffEntry(undefined, undefined);
                }
                else {
                    this.currentMeasure.FirstInstructionsStaffEntries[i].removeAllInstructionsOfTypeRhythmInstruction();
                }
                this.currentMeasure.FirstInstructionsStaffEntries[i].Instructions.push(rhythmInstruction);
            }
            for (let idx = 0, len = instrumentReaders.length; idx < len; ++idx) {
                const instrumentReader = instrumentReaders[idx];
                instrumentReader.ActiveRhythm = rhythmInstruction;
            }
        }
        for (let idx = 0, len = rhythmInstructions.length; idx < len; ++idx) {
            const rhythmInstruction = rhythmInstructions[idx];
            if (rhythmInstruction.Rhythm.RealValue < maxRhythmValue) {
                if (this._lastElement(this.currentMeasure.FirstInstructionsStaffEntries[rhythmInstructions.indexOf(rhythmInstruction)].Instructions) instanceof RhythmInstruction_1.RhythmInstruction) {
                    // TODO Test correctness
                    const instrs = this.currentMeasure.FirstInstructionsStaffEntries[rhythmInstructions.indexOf(rhythmInstruction)].Instructions;
                    instrs[instrs.length - 1] = rhythmInstructions[index].clone();
                }
            }
            if (Math.abs(rhythmInstruction.Rhythm.RealValue - maxRhythmValue) < 0.000001 &&
                rhythmInstruction.SymbolEnum !== RhythmInstruction_2.RhythmSymbolEnum.NONE &&
                this.areRhythmInstructionsMixed(rhythmInstructions)) {
                rhythmInstruction.SymbolEnum = RhythmInstruction_2.RhythmSymbolEnum.NONE;
            }
        }
    }
    /**
     * True in case of 4/4 and COMMON TIME (or 2/2 and CUT TIME)
     * @param rhythmInstructions
     * @returns {boolean}
     */
    areRhythmInstructionsMixed(rhythmInstructions) {
        for (let i = 1; i < rhythmInstructions.length; i++) {
            if (Math.abs(rhythmInstructions[i].Rhythm.RealValue - rhythmInstructions[0].Rhythm.RealValue) < 0.000001 &&
                rhythmInstructions[i].SymbolEnum !== rhythmInstructions[0].SymbolEnum) {
                return true;
            }
        }
        return false;
    }
    /**
     * Set the [[Measure]]'s duration taking into account the longest [[Instrument]] duration and the active Rhythm read from XML.
     * @param instrumentReaders
     * @param sourceMeasureCounter
     * @returns {number}
     */
    setSourceMeasureDuration(instrumentReaders, sourceMeasureCounter) {
        let activeRhythm = new Fraction_1.Fraction(0, 1);
        const instrumentsMaxTieNoteFractions = [];
        for (const instrumentReader of instrumentReaders) {
            instrumentsMaxTieNoteFractions.push(instrumentReader.MaxTieNoteFraction);
            const activeRythmMeasure = instrumentReader.ActiveRhythm.Rhythm;
            if (activeRhythm.lt(activeRythmMeasure)) {
                activeRhythm = new Fraction_1.Fraction(activeRythmMeasure.Numerator, activeRythmMeasure.Denominator, 0, false);
            }
        }
        const instrumentsDurations = this.currentMeasure.calculateInstrumentsDuration(this.musicSheet, instrumentsMaxTieNoteFractions);
        let maxInstrumentDuration = new Fraction_1.Fraction(0, 1);
        for (const instrumentsDuration of instrumentsDurations) {
            if (maxInstrumentDuration.lt(instrumentsDuration)) {
                maxInstrumentDuration = instrumentsDuration;
            }
        }
        if (Fraction_1.Fraction.Equal(maxInstrumentDuration, activeRhythm)) {
            this.checkFractionsForEquivalence(maxInstrumentDuration, activeRhythm);
        }
        else {
            if (maxInstrumentDuration.lt(activeRhythm)) {
                maxInstrumentDuration = this.currentMeasure.reverseCheck(this.musicSheet, maxInstrumentDuration);
                this.checkFractionsForEquivalence(maxInstrumentDuration, activeRhythm);
            }
        }
        this.currentMeasure.ImplicitMeasure = this.checkIfMeasureIsImplicit(maxInstrumentDuration, activeRhythm);
        if (!this.currentMeasure.ImplicitMeasure) {
            sourceMeasureCounter++;
        }
        this.currentMeasure.Duration = maxInstrumentDuration; // can be 1/1 in a 4/4 time signature
        // if (this.currentMeasure.Duration.Numerator === 0) {
        //     this.currentMeasure.Duration = activeRhythm; // might be related to #1073
        // }
        this.currentMeasure.ActiveTimeSignature = activeRhythm;
        this.currentMeasure.MeasureNumber = sourceMeasureCounter;
        for (let i = 0; i < instrumentsDurations.length; i++) {
            const instrumentsDuration = instrumentsDurations[i];
            if ((this.currentMeasure.ImplicitMeasure && instrumentsDuration !== maxInstrumentDuration) ||
                !Fraction_1.Fraction.Equal(instrumentsDuration, activeRhythm) &&
                    !this.allInstrumentsHaveSameDuration(instrumentsDurations, maxInstrumentDuration)) {
                const firstStaffIndexOfInstrument = this.musicSheet.getGlobalStaffIndexOfFirstStaff(this.musicSheet.Instruments[i]);
                for (let staffIndex = 0; staffIndex < this.musicSheet.Instruments[i].Staves.length; staffIndex++) {
                    if (!this.graphicalMeasureIsEmpty(firstStaffIndexOfInstrument + staffIndex)) {
                        this.currentMeasure.setErrorInGraphicalMeasure(firstStaffIndexOfInstrument + staffIndex, true);
                        const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/MissingNotesError", "Given Notes don't correspond to measure duration.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    }
                }
            }
        }
        return sourceMeasureCounter;
    }
    /**
     * Check the Fractions for Equivalence and if so, sets maxInstrumentDuration's members accordingly.
     * *
     * Example: if maxInstrumentDuration = 1/1 and sourceMeasureDuration = 4/4, maxInstrumentDuration becomes 4/4.
     * @param maxInstrumentDuration
     * @param activeRhythm
     */
    checkFractionsForEquivalence(maxInstrumentDuration, activeRhythm) {
        if (activeRhythm.Denominator > maxInstrumentDuration.Denominator) {
            const factor = activeRhythm.Denominator / maxInstrumentDuration.Denominator;
            maxInstrumentDuration.expand(factor);
        }
    }
    /**
     * Handle the case of an implicit [[SourceMeasure]].
     * @param maxInstrumentDuration
     * @param activeRhythm
     * @returns {boolean}
     */
    checkIfMeasureIsImplicit(maxInstrumentDuration, activeRhythm) {
        if (!this.previousMeasure && maxInstrumentDuration.lt(activeRhythm)) {
            return true;
        }
        if (this.previousMeasure) {
            return Fraction_1.Fraction.plus(this.previousMeasure.Duration, maxInstrumentDuration).Equals(activeRhythm);
        }
        return false;
    }
    /**
     * Check the Duration of all the given Instruments.
     * @param instrumentsDurations
     * @param maxInstrumentDuration
     * @returns {boolean}
     */
    allInstrumentsHaveSameDuration(instrumentsDurations, maxInstrumentDuration) {
        let counter = 0;
        for (let idx = 0, len = instrumentsDurations.length; idx < len; ++idx) {
            const instrumentsDuration = instrumentsDurations[idx];
            if (instrumentsDuration.Equals(maxInstrumentDuration)) {
                counter++;
            }
        }
        return (counter === instrumentsDurations.length && maxInstrumentDuration !== new Fraction_1.Fraction(0, 1));
    }
    graphicalMeasureIsEmpty(index) {
        let counter = 0;
        for (let i = 0; i < this.currentMeasure.VerticalSourceStaffEntryContainers.length; i++) {
            if (!this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[index]) {
                counter++;
            }
        }
        return (counter === this.currentMeasure.VerticalSourceStaffEntryContainers.length);
    }
    /**
     * Check a [[SourceMeasure]] for possible empty / undefined entries ([[VoiceEntry]], [[SourceStaffEntry]], VerticalContainer)
     * (caused from TieAlgorithm removing EndTieNote) and removes them if completely empty / null
     */
    checkSourceMeasureForNullEntries() {
        for (let i = this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {
            for (let j = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries.length - 1; j >= 0; j--) {
                const sourceStaffEntry = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[j];
                if (sourceStaffEntry) {
                    for (let k = sourceStaffEntry.VoiceEntries.length - 1; k >= 0; k--) {
                        const voiceEntry = sourceStaffEntry.VoiceEntries[k];
                        if (voiceEntry.Notes.length === 0) {
                            this._removeFromArray(voiceEntry.ParentVoice.VoiceEntries, voiceEntry);
                            this._removeFromArray(sourceStaffEntry.VoiceEntries, voiceEntry);
                        }
                    }
                }
                if (sourceStaffEntry !== undefined && sourceStaffEntry.VoiceEntries.length === 0) {
                    this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[j] = undefined;
                }
            }
        }
        for (let i = this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {
            let counter = 0;
            for (let idx = 0, len = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries.length; idx < len; ++idx) {
                const sourceStaffEntry = this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries[idx];
                if (!sourceStaffEntry) {
                    counter++;
                }
            }
            if (counter === this.currentMeasure.VerticalSourceStaffEntryContainers[i].StaffEntries.length) {
                this._removeFromArray(this.currentMeasure.VerticalSourceStaffEntryContainers, this.currentMeasure.VerticalSourceStaffEntryContainers[i]);
            }
        }
    }
    /**
     * Read the XML file and creates the main sheet Labels.
     * @param root
     * @param filePath
     */
    pushSheetLabels(root, filePath) {
        this.readComposer(root);
        this.readTitle(root);
        this.readCopyright(root);
        try {
            if (!this.musicSheet.Title || !this.musicSheet.Composer) {
                this.readTitleAndComposerFromCredits(root); // this can also throw an error
            }
        }
        catch (ex) {
            loglevel_1.default.info("MusicSheetReader.pushSheetLabels", "readTitleAndComposerFromCredits", ex);
        }
        try {
            if (!this.musicSheet.Title) {
                const barI = Math.max(0, filePath.lastIndexOf("/"), filePath.lastIndexOf("\\"));
                const filename = filePath.substr(barI);
                const filenameSplits = filename.split(".", 1);
                this.musicSheet.Title = new Label_1.Label(filenameSplits[0]);
            }
        }
        catch (ex) {
            loglevel_1.default.info("MusicSheetReader.pushSheetLabels", "read title from file name", ex);
        }
    }
    // Checks whether _elem_ has an attribute with value _val_.
    presentAttrsWithValue(elem, val) {
        for (const attr of elem.attributes()) {
            if (attr.value === val) {
                return true;
            }
        }
        return false;
    }
    readComposer(root) {
        const identificationNode = root.element("identification");
        if (identificationNode) {
            const creators = identificationNode.elements("creator");
            for (let idx = 0, len = creators.length; idx < len; ++idx) {
                const creator = creators[idx];
                if (creator.hasAttributes) {
                    if (this.presentAttrsWithValue(creator, "composer")) {
                        this.musicSheet.Composer = new Label_1.Label(this.trimString(creator.value));
                        continue;
                    }
                    if (this.presentAttrsWithValue(creator, "lyricist") || this.presentAttrsWithValue(creator, "poet")) {
                        this.musicSheet.Lyricist = new Label_1.Label(this.trimString(creator.value));
                    }
                }
            }
        }
    }
    readCopyright(root) {
        const idElements = root.elements("identification");
        if (idElements.length > 0) {
            const idElement = idElements[0];
            const rightElements = idElement.elements("rights");
            if (rightElements.length > 0) {
                for (let idx = 0, len = rightElements.length; idx < len; ++idx) {
                    const rightElement = rightElements[idx];
                    if (rightElement.value) {
                        this.musicSheet.Copyright = new Label_1.Label(rightElement.value, TextAlignment_1.TextAlignmentEnum.CenterBottom, undefined, true);
                        break;
                    }
                }
            }
        }
    }
    readTitleAndComposerFromCredits(root) {
        var _a, _b, _c;
        const systemYCoordinates = this.computeSystemYCoordinates(root);
        if (systemYCoordinates === 0) {
            return;
        }
        let largestTitleCreditSize = 1;
        let finalTitle = undefined;
        let largestCreditYInfo = 0;
        let finalSubtitle = undefined;
        let possibleTitle = undefined;
        const creditElements = root.elements("credit");
        for (let idx = 0, len = creditElements.length; idx < len; ++idx) {
            const credit = creditElements[idx];
            if (!credit.attribute("page")) {
                return;
            }
            if (credit.attribute("page").value === "1") {
                let creditChild = undefined;
                if (credit) {
                    creditChild = credit.element("credit-words");
                    if (!creditChild.attribute("justify")) {
                        break;
                    }
                    const creditJustify = (_a = creditChild.attribute("justify")) === null || _a === void 0 ? void 0 : _a.value;
                    const creditY = (_b = creditChild.attribute("default-y")) === null || _b === void 0 ? void 0 : _b.value;
                    // eslint-disable-next-line no-null/no-null
                    const creditYGiven = creditY !== undefined && creditY !== null;
                    const creditYInfo = creditYGiven ? parseFloat(creditY) : Number.MIN_VALUE;
                    if (creditYGiven && creditYInfo > systemYCoordinates) {
                        if (!this.musicSheet.Title) {
                            const creditSize = (_c = creditChild.attribute("font-size")) === null || _c === void 0 ? void 0 : _c.value;
                            if (creditSize) {
                                const titleCreditSizeInt = parseFloat(creditSize);
                                if (largestTitleCreditSize < titleCreditSizeInt) {
                                    largestTitleCreditSize = titleCreditSizeInt;
                                    finalTitle = creditChild.value;
                                }
                            }
                        }
                        if (!this.musicSheet.Subtitle) {
                            if (creditJustify !== "right" && creditJustify !== "left") {
                                if (largestCreditYInfo < creditYInfo) {
                                    largestCreditYInfo = creditYInfo;
                                    if (possibleTitle) {
                                        finalSubtitle = possibleTitle;
                                        possibleTitle = creditChild.value;
                                    }
                                    else {
                                        possibleTitle = creditChild.value;
                                    }
                                }
                            }
                        }
                        if (!(this.musicSheet.Composer !== undefined && this.musicSheet.Lyricist)) {
                            switch (creditJustify) {
                                case "right":
                                    this.musicSheet.Composer = new Label_1.Label(this.trimString(creditChild.value));
                                    break;
                                case "left":
                                    this.musicSheet.Lyricist = new Label_1.Label(this.trimString(creditChild.value));
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                }
            }
        }
        if (!this.musicSheet.Title && finalTitle) {
            this.musicSheet.Title = new Label_1.Label(this.trimString(finalTitle));
        }
        if (!this.musicSheet.Subtitle && finalSubtitle) {
            this.musicSheet.Subtitle = new Label_1.Label(this.trimString(finalSubtitle));
        }
    }
    computeSystemYCoordinates(root) {
        if (!root.element("defaults")) {
            return 0;
        }
        let paperHeight = 0;
        let topSystemDistance = 0;
        try {
            const defi = root.element("defaults").element("page-layout").element("page-height").value;
            paperHeight = parseFloat(defi);
        }
        catch (e) {
            loglevel_1.default.info("MusicSheetReader.computeSystemYCoordinates(): couldn't find page height, not reading title/composer.");
            return 0;
        }
        let found = false;
        const parts = root.elements("part");
        for (let idx = 0, len = parts.length; idx < len; ++idx) {
            const measures = parts[idx].elements("measure");
            for (let idx2 = 0, len2 = measures.length; idx2 < len2; ++idx2) {
                const measure = measures[idx2];
                if (measure.element("print")) {
                    const systemLayouts = measure.element("print").elements("system-layout");
                    for (let idx3 = 0, len3 = systemLayouts.length; idx3 < len3; ++idx3) {
                        const syslab = systemLayouts[idx3];
                        if (syslab.element("top-system-distance")) {
                            const topSystemDistanceString = syslab.element("top-system-distance").value;
                            topSystemDistance = parseFloat(topSystemDistanceString);
                            found = true;
                            break;
                        }
                    }
                    break;
                }
            }
            if (found) {
                break;
            }
        }
        if (root.element("defaults").element("system-layout")) {
            const syslay = root.element("defaults").element("system-layout");
            if (syslay.element("top-system-distance")) {
                const topSystemDistanceString = root.element("defaults").element("system-layout").element("top-system-distance").value;
                topSystemDistance = parseFloat(topSystemDistanceString);
            }
        }
        if (topSystemDistance === 0) {
            return 0;
        }
        return paperHeight - topSystemDistance;
    }
    readTitle(root) {
        const titleNode = root.element("work");
        let titleNodeChild = undefined;
        if (titleNode) {
            titleNodeChild = titleNode.element("work-title");
            if (titleNodeChild && titleNodeChild.value) {
                this.musicSheet.Title = new Label_1.Label(this.trimString(titleNodeChild.value));
            }
        }
        const movementNode = root.element("movement-title");
        let finalSubTitle = "";
        if (movementNode) {
            if (!this.musicSheet.Title) {
                this.musicSheet.Title = new Label_1.Label(this.trimString(movementNode.value));
            }
            else {
                finalSubTitle = this.trimString(movementNode.value);
            }
        }
        if (titleNode) {
            const subtitleNodeChild = titleNode.element("work-number");
            if (subtitleNodeChild) {
                const workNumber = subtitleNodeChild.value;
                if (workNumber) {
                    if (finalSubTitle === "") {
                        finalSubTitle = workNumber;
                    }
                    else {
                        finalSubTitle = finalSubTitle + ", " + workNumber;
                    }
                }
            }
        }
        if (finalSubTitle) {
            this.musicSheet.Subtitle = new Label_1.Label(finalSubTitle);
        }
    }
    /**
     * Build the [[InstrumentalGroup]]s and [[Instrument]]s.
     * @param entryList
     * @returns {{}}
     */
    createInstrumentGroups(entryList) {
        let instrumentId = 0;
        const instrumentDict = {};
        let currentGroup;
        try {
            const entryArray = entryList;
            for (let idx = 0, len = entryArray.length; idx < len; ++idx) {
                const node = entryArray[idx];
                if (node.name === "score-part") {
                    const instrIdString = node.attribute("id").value;
                    const instrument = new Instrument_1.Instrument(instrumentId, instrIdString, this.musicSheet, currentGroup);
                    instrumentId++;
                    const partElements = node.elements();
                    for (let idx2 = 0, len2 = partElements.length; idx2 < len2; ++idx2) {
                        const partElement = partElements[idx2];
                        try {
                            if (partElement.name === "part-name") {
                                instrument.Name = partElement.value;
                                if (partElement.attribute("print-object") &&
                                    partElement.attribute("print-object").value === "no") {
                                    instrument.NameLabel.print = false;
                                }
                            }
                            else if (partElement.name === "part-abbreviation") {
                                instrument.PartAbbreviation = partElement.value;
                            }
                            else if (partElement.name === "score-instrument") {
                                const subInstrument = new SubInstrument_1.SubInstrument(instrument);
                                subInstrument.idString = partElement.firstAttribute.value;
                                instrument.SubInstruments.push(subInstrument);
                                const subElement = partElement.element("instrument-name");
                                if (subElement) {
                                    subInstrument.name = subElement.value;
                                    subInstrument.setMidiInstrument(subElement.value);
                                }
                            }
                            else if (partElement.name === "midi-instrument") {
                                let subInstrument = instrument.getSubInstrument(partElement.firstAttribute.value);
                                for (let idx3 = 0, len3 = instrument.SubInstruments.length; idx3 < len3; ++idx3) {
                                    const subInstr = instrument.SubInstruments[idx3];
                                    if (subInstr.idString === partElement.value) {
                                        subInstrument = subInstr;
                                        break;
                                    }
                                }
                                const instrumentElements = partElement.elements();
                                for (let idx3 = 0, len3 = instrumentElements.length; idx3 < len3; ++idx3) {
                                    const instrumentElement = instrumentElements[idx3];
                                    try {
                                        if (instrumentElement.name === "midi-channel") {
                                            if (parseInt(instrumentElement.value, 10) === 10) {
                                                instrument.MidiInstrumentId = ClefInstruction_1.MidiInstrument.Percussion;
                                            }
                                        }
                                        else if (instrumentElement.name === "midi-program") {
                                            if (instrument.SubInstruments.length > 0 && instrument.MidiInstrumentId !== ClefInstruction_1.MidiInstrument.Percussion) {
                                                subInstrument.midiInstrumentID = Math.max(0, parseInt(instrumentElement.value, 10) - 1);
                                            }
                                        }
                                        else if (instrumentElement.name === "midi-unpitched") {
                                            subInstrument.fixedKey = Math.max(0, parseInt(instrumentElement.value, 10));
                                        }
                                        else if (instrumentElement.name === "volume") {
                                            try {
                                                const result = parseFloat(instrumentElement.value);
                                                subInstrument.volume = result / 127.0;
                                            }
                                            catch (ex) {
                                                loglevel_1.default.debug("ExpressionReader.readExpressionParameters", "read volume", ex);
                                            }
                                        }
                                        else if (instrumentElement.name === "pan") {
                                            try {
                                                const result = parseFloat(instrumentElement.value);
                                                subInstrument.pan = result / 64.0;
                                            }
                                            catch (ex) {
                                                loglevel_1.default.debug("ExpressionReader.readExpressionParameters", "read pan", ex);
                                            }
                                        }
                                    }
                                    catch (ex) {
                                        loglevel_1.default.info("MusicSheetReader.createInstrumentGroups midi settings: ", ex);
                                    }
                                }
                            }
                        }
                        catch (ex) {
                            loglevel_1.default.info("MusicSheetReader.createInstrumentGroups: ", ex);
                        }
                    }
                    if (instrument.SubInstruments.length === 0) {
                        const subInstrument = new SubInstrument_1.SubInstrument(instrument);
                        instrument.SubInstruments.push(subInstrument);
                    }
                    instrumentDict[instrIdString] = instrument;
                    if (currentGroup) {
                        currentGroup.InstrumentalGroups.push(instrument);
                        this.musicSheet.Instruments.push(instrument);
                    }
                    else {
                        this.musicSheet.InstrumentalGroups.push(instrument);
                        this.musicSheet.Instruments.push(instrument);
                    }
                }
                else {
                    if ((node.name === "part-group") && (node.attribute("type").value === "start")) {
                        const iG = new InstrumentalGroup_1.InstrumentalGroup("group", this.musicSheet, currentGroup);
                        if (currentGroup) {
                            currentGroup.InstrumentalGroups.push(iG);
                        }
                        else {
                            this.musicSheet.InstrumentalGroups.push(iG);
                        }
                        currentGroup = iG;
                    }
                    else {
                        if ((node.name === "part-group") && (node.attribute("type").value === "stop")) {
                            if (currentGroup) {
                                if (currentGroup.InstrumentalGroups.length === 1) {
                                    const instr = currentGroup.InstrumentalGroups[0];
                                    if (currentGroup.Parent) {
                                        currentGroup.Parent.InstrumentalGroups.push(instr);
                                        this._removeFromArray(currentGroup.Parent.InstrumentalGroups, currentGroup);
                                    }
                                    else {
                                        this.musicSheet.InstrumentalGroups.push(instr);
                                        this._removeFromArray(this.musicSheet.InstrumentalGroups, currentGroup);
                                    }
                                }
                                currentGroup = currentGroup.Parent;
                            }
                        }
                    }
                }
            }
        }
        catch (e) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/InstrumentError", "Error while reading Instruments");
            throw new Exceptions_1.MusicSheetReadingException(errorMsg, e);
        }
        for (let idx = 0, len = this.musicSheet.Instruments.length; idx < len; ++idx) {
            const instrument = this.musicSheet.Instruments[idx];
            if (!instrument.Name) {
                instrument.Name = "Instr. " + instrument.IdString;
            }
        }
        return instrumentDict;
    }
    /**
     * Read from each xmlInstrumentPart the first xmlMeasure in order to find out the [[Instrument]]'s number of Staves
     * @param partInst
     * @returns {number} - Complete number of Staves for all Instruments.
     */
    getCompleteNumberOfStavesFromXml(partInst) {
        let num = 0;
        for (const partNode of partInst) {
            const xmlMeasureList = partNode.elements("measure");
            if (xmlMeasureList.length > 0) {
                const xmlMeasure = xmlMeasureList[0];
                if (xmlMeasure) {
                    let stavesNode = xmlMeasure.element("attributes");
                    if (stavesNode) {
                        stavesNode = stavesNode.element("staves");
                    }
                    if (!stavesNode) {
                        num++;
                    }
                    else {
                        num += parseInt(stavesNode.value, 10);
                    }
                }
            }
        }
        if (isNaN(num) || num <= 0) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/StaffError", "Invalid number of staves.");
            throw new Exceptions_1.MusicSheetReadingException(errorMsg);
        }
        return num;
    }
    /**
     * Read from XML for a single [[Instrument]] the first xmlMeasure in order to find out the Instrument's number of Staves.
     * @param partNode
     * @returns {number}
     */
    getInstrumentNumberOfStavesFromXml(partNode) {
        let num = 0;
        const xmlMeasure = partNode.element("measure");
        if (xmlMeasure) {
            const attributes = xmlMeasure.element("attributes");
            let staves = undefined;
            if (attributes) {
                staves = attributes.element("staves");
            }
            if (!attributes || !staves) {
                num = 1;
            }
            else {
                num = parseInt(staves.value, 10);
            }
        }
        if (isNaN(num) || num <= 0) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/StaffError", "Invalid number of Staves.");
            throw new Exceptions_1.MusicSheetReadingException(errorMsg);
        }
        return num;
    }
}
exports.MusicSheetReader = MusicSheetReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModuleFactory.ts":
/*!**************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModuleFactory.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MusicSymbolModuleFactory = void 0;
const RepetitionInstructionReader_1 = __webpack_require__(/*! ./MusicSymbolModules/RepetitionInstructionReader */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionInstructionReader.ts");
const RepetitionCalculator_1 = __webpack_require__(/*! ./MusicSymbolModules/RepetitionCalculator */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionCalculator.ts");
class MusicSymbolModuleFactory {
    static createRepetitionInstructionReader() {
        return new RepetitionInstructionReader_1.RepetitionInstructionReader();
    }
    static createRepetitionCalculator() {
        return new RepetitionCalculator_1.RepetitionCalculator();
    }
}
exports.MusicSymbolModuleFactory = MusicSymbolModuleFactory;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/ArticulationReader.ts":
/*!***************************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/ArticulationReader.ts ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArticulationReader = void 0;
const VoiceEntry_1 = __webpack_require__(/*! ../../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const TechnicalInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/TechnicalInstruction */ "./src/MusicalScore/VoiceData/Instructions/TechnicalInstruction.ts");
const OrnamentContainer_1 = __webpack_require__(/*! ../../VoiceData/OrnamentContainer */ "./src/MusicalScore/VoiceData/OrnamentContainer.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Articulation_1 = __webpack_require__(/*! ../../VoiceData/Articulation */ "./src/MusicalScore/VoiceData/Articulation.ts");
const MultiExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/MultiExpression */ "./src/MusicalScore/VoiceData/Expressions/MultiExpression.ts");
const ContinuousExpressions_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/index.ts");
class ArticulationReader {
    constructor(rules) {
        this.rules = rules;
    }
    getAccEnumFromString(input) {
        switch (input) {
            case "sharp":
                return Pitch_1.AccidentalEnum.SHARP;
            case "flat":
                return Pitch_1.AccidentalEnum.FLAT;
            case "natural":
                return Pitch_1.AccidentalEnum.NATURAL;
            case "double-sharp":
            case "sharp-sharp":
                return Pitch_1.AccidentalEnum.DOUBLESHARP;
            case "double-flat":
            case "flat-flat":
                return Pitch_1.AccidentalEnum.DOUBLEFLAT;
            case "triple-sharp":
                return Pitch_1.AccidentalEnum.TRIPLESHARP;
            case "triple-flat":
                return Pitch_1.AccidentalEnum.TRIPLEFLAT;
            case "quarter-sharp":
                return Pitch_1.AccidentalEnum.QUARTERTONESHARP;
            case "quarter-flat":
                return Pitch_1.AccidentalEnum.QUARTERTONEFLAT;
            case "three-quarters-sharp":
                return Pitch_1.AccidentalEnum.THREEQUARTERSSHARP;
            case "three-quarters-flat":
                return Pitch_1.AccidentalEnum.THREEQUARTERSFLAT;
            case "slash-quarter-sharp":
                return Pitch_1.AccidentalEnum.SLASHQUARTERSHARP;
            case "slash-sharp":
                return Pitch_1.AccidentalEnum.SLASHSHARP;
            case "double-slash-flat":
                return Pitch_1.AccidentalEnum.DOUBLESLASHFLAT;
            case "sori":
                return Pitch_1.AccidentalEnum.SORI;
            case "koron":
                return Pitch_1.AccidentalEnum.KORON;
            default:
                return Pitch_1.AccidentalEnum.NONE;
        }
    }
    /**
     * This method adds an Articulation Expression to the currentVoiceEntry.
     * @param node
     * @param currentVoiceEntry
     */
    addArticulationExpression(node, currentVoiceEntry) {
        var _a, _b;
        if (node !== undefined && node.elements().length > 0) {
            const childNodes = node.elements();
            for (let idx = 0, len = childNodes.length; idx < len; ++idx) {
                const childNode = childNodes[idx];
                let name = childNode.name;
                try {
                    // some Articulations appear in Xml separated with a "-" (eg strong-accent), we remove it for enum parsing
                    name = name.replace("-", "");
                    const articulationEnum = VoiceEntry_1.ArticulationEnum[name];
                    if (VoiceEntry_1.VoiceEntry.isSupportedArticulation(articulationEnum)) {
                        let placement = AbstractExpression_1.PlacementEnum.NotYetDefined;
                        const placementValue = (_a = childNode.attribute("placement")) === null || _a === void 0 ? void 0 : _a.value;
                        if (placementValue === "above") {
                            placement = AbstractExpression_1.PlacementEnum.Above;
                        }
                        else if (placementValue === "below") {
                            placement = AbstractExpression_1.PlacementEnum.Below;
                        }
                        const newArticulation = new Articulation_1.Articulation(articulationEnum, placement);
                        // staccato should be first // necessary?
                        if (name === "staccato") {
                            if (currentVoiceEntry.Articulations.length > 0 &&
                                currentVoiceEntry.Articulations[0].articulationEnum !== VoiceEntry_1.ArticulationEnum.staccato) {
                                currentVoiceEntry.Articulations.splice(0, 0, newArticulation); // TODO can't this overwrite another articulation?
                            }
                        }
                        else if (name === "breathmark") { // breath-mark
                            if (placement === AbstractExpression_1.PlacementEnum.NotYetDefined) {
                                newArticulation.placement = AbstractExpression_1.PlacementEnum.Above;
                            }
                        }
                        else if (name === "strongaccent") { // see name.replace("-", "") above
                            const marcatoType = (_b = childNode === null || childNode === void 0 ? void 0 : childNode.attribute("type")) === null || _b === void 0 ? void 0 : _b.value;
                            if (marcatoType === "up") {
                                newArticulation.articulationEnum = VoiceEntry_1.ArticulationEnum.marcatoup;
                            }
                            else if (marcatoType === "down") {
                                newArticulation.articulationEnum = VoiceEntry_1.ArticulationEnum.marcatodown;
                            }
                        }
                        else if (articulationEnum === VoiceEntry_1.ArticulationEnum.softaccent) {
                            const staffId = currentVoiceEntry.ParentSourceStaffEntry.ParentStaff.Id - 1;
                            if (placement === AbstractExpression_1.PlacementEnum.NotYetDefined) {
                                placement = AbstractExpression_1.PlacementEnum.Above;
                                if (staffId > 0) {
                                    placement = AbstractExpression_1.PlacementEnum.Below;
                                }
                                // TODO place according to whether the corresponding note is higher (-> above) or lower (-> below)
                                //   than the middle note line. Though this could be tricky at this stage of parsing.
                            }
                            const sourceMeasure = currentVoiceEntry.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure;
                            const multi = new MultiExpression_1.MultiExpression(sourceMeasure, currentVoiceEntry.Timestamp);
                            multi.StartingContinuousDynamic = new ContinuousExpressions_1.ContinuousDynamicExpression(ContinuousExpressions_1.ContDynamicEnum.crescendo, placement, staffId, sourceMeasure, -1);
                            multi.StartingContinuousDynamic.IsStartOfSoftAccent = true;
                            multi.StartingContinuousDynamic.StartMultiExpression = multi;
                            multi.StartingContinuousDynamic.EndMultiExpression = multi;
                            multi.EndingContinuousDynamic = new ContinuousExpressions_1.ContinuousDynamicExpression(ContinuousExpressions_1.ContDynamicEnum.diminuendo, placement, staffId, sourceMeasure, -1);
                            multi.EndingContinuousDynamic.StartMultiExpression = multi;
                            multi.EndingContinuousDynamic.EndMultiExpression = multi;
                            sourceMeasure.StaffLinkedExpressions[staffId].push(multi);
                        }
                        // don't add the same articulation twice
                        if (!currentVoiceEntry.hasArticulation(newArticulation)) {
                            currentVoiceEntry.Articulations.push(newArticulation);
                        }
                    }
                }
                catch (ex) {
                    const errorMsg = "Invalid note articulation.";
                    loglevel_1.default.debug("addArticulationExpression", errorMsg, ex);
                    return;
                }
            }
        }
    }
    /**
     * This method add a Fermata to the currentVoiceEntry.
     * @param xmlNode
     * @param currentVoiceEntry
     */
    addFermata(xmlNode, currentVoiceEntry) {
        var _a;
        // fermata appears as separate tag in XML
        let articulationEnum = VoiceEntry_1.ArticulationEnum.fermata;
        if (xmlNode.attributes().length > 0 && xmlNode.attribute("type")) {
            if (xmlNode.attribute("type").value === "inverted") {
                articulationEnum = VoiceEntry_1.ArticulationEnum.invertedfermata;
            }
        }
        let placement = AbstractExpression_1.PlacementEnum.Above;
        if (((_a = xmlNode.attribute("placement")) === null || _a === void 0 ? void 0 : _a.value) === "below") {
            placement = AbstractExpression_1.PlacementEnum.Below;
        }
        // add to VoiceEntry
        currentVoiceEntry.Articulations.push(new Articulation_1.Articulation(articulationEnum, placement));
    }
    /**
     * This method add a technical Articulation to the currentVoiceEntry.
     * @param technicalNode
     * @param currentVoiceEntry
     */
    addTechnicalArticulations(technicalNode, currentVoiceEntry, currentNote) {
        var _a, _b;
        const xmlElementToArticulationEnum = {
            "bend": VoiceEntry_1.ArticulationEnum.bend,
            "down-bow": VoiceEntry_1.ArticulationEnum.downbow,
            "open-string": VoiceEntry_1.ArticulationEnum.naturalharmonic,
            "snap-pizzicato": VoiceEntry_1.ArticulationEnum.snappizzicato,
            "stopped": VoiceEntry_1.ArticulationEnum.lefthandpizzicato,
            "up-bow": VoiceEntry_1.ArticulationEnum.upbow,
            "harmonic": VoiceEntry_1.ArticulationEnum.naturalharmonic, // e.g. open hi-hat
            // fingering is special case
        };
        for (const xmlArticulation in xmlElementToArticulationEnum) {
            if (!xmlElementToArticulationEnum.hasOwnProperty(xmlArticulation)) {
                continue;
            }
            const articulationEnum = xmlElementToArticulationEnum[xmlArticulation];
            const node = technicalNode.element(xmlArticulation);
            if (node) {
                let placement; // set undefined by default, to not restrict placement
                if (((_a = node.attribute("placement")) === null || _a === void 0 ? void 0 : _a.value) === "above") {
                    placement = AbstractExpression_1.PlacementEnum.Above;
                }
                if (((_b = node.attribute("placement")) === null || _b === void 0 ? void 0 : _b.value) === "below") {
                    placement = AbstractExpression_1.PlacementEnum.Below;
                }
                const newArticulation = new Articulation_1.Articulation(articulationEnum, placement);
                if (!currentVoiceEntry.hasArticulation(newArticulation)) {
                    currentVoiceEntry.Articulations.push(newArticulation);
                }
            }
        }
        const nodeFingering = technicalNode.element("fingering");
        if (nodeFingering) {
            const currentTechnicalInstruction = this.createTechnicalInstruction(nodeFingering, currentNote);
            currentTechnicalInstruction.type = TechnicalInstruction_1.TechnicalInstructionType.Fingering;
            currentNote.Fingering = currentTechnicalInstruction;
            currentVoiceEntry.TechnicalInstructions.push(currentTechnicalInstruction);
        }
        const nodeString = technicalNode.element("string");
        if (nodeString) {
            const currentTechnicalInstruction = this.createTechnicalInstruction(nodeString, currentNote);
            currentTechnicalInstruction.type = TechnicalInstruction_1.TechnicalInstructionType.String;
            currentNote.StringInstruction = currentTechnicalInstruction;
            currentVoiceEntry.TechnicalInstructions.push(currentTechnicalInstruction);
        }
    }
    createTechnicalInstruction(stringOrFingeringNode, note) {
        const technicalInstruction = new TechnicalInstruction_1.TechnicalInstruction();
        technicalInstruction.sourceNote = note;
        technicalInstruction.value = stringOrFingeringNode.value;
        const placement = stringOrFingeringNode.attribute("placement");
        if (this.rules.FingeringPositionFromXML) {
            technicalInstruction.placement = this.getPlacement(placement);
        }
        return technicalInstruction;
    }
    getPlacement(placementAttr, defaultPlacement = AbstractExpression_1.PlacementEnum.NotYetDefined) {
        if (defaultPlacement !== AbstractExpression_1.PlacementEnum.NotYetDefined) { // usually from EngravingRules
            return defaultPlacement;
        }
        if (placementAttr) {
            switch (placementAttr.value) {
                case "above":
                    return AbstractExpression_1.PlacementEnum.Above;
                case "below":
                    return AbstractExpression_1.PlacementEnum.Below;
                case "left": // not valid in MusicXML 3.1
                    return AbstractExpression_1.PlacementEnum.Left;
                case "right": // not valid in MusicXML 3.1
                    return AbstractExpression_1.PlacementEnum.Right;
                default:
                    return AbstractExpression_1.PlacementEnum.NotYetDefined;
            }
        }
        else {
            return AbstractExpression_1.PlacementEnum.NotYetDefined;
        }
    }
    /**
     * This method adds an Ornament to the currentVoiceEntry.
     * @param ornamentsNode
     * @param currentVoiceEntry
     */
    addOrnament(ornamentsNode, currentVoiceEntry) {
        if (ornamentsNode) {
            let ornament = undefined;
            const elementToOrnamentEnum = {
                "delayed-inverted-turn": OrnamentContainer_1.OrnamentEnum.DelayedInvertedTurn,
                "delayed-turn": OrnamentContainer_1.OrnamentEnum.DelayedTurn,
                "inverted-mordent": OrnamentContainer_1.OrnamentEnum.InvertedMordent,
                "inverted-turn": OrnamentContainer_1.OrnamentEnum.InvertedTurn,
                "mordent": OrnamentContainer_1.OrnamentEnum.Mordent,
                "trill-mark": OrnamentContainer_1.OrnamentEnum.Trill,
                "turn": OrnamentContainer_1.OrnamentEnum.Turn,
                // further ornaments are not yet supported by MusicXML (3.1).
            };
            for (const ornamentElement in elementToOrnamentEnum) {
                if (!elementToOrnamentEnum.hasOwnProperty(ornamentElement)) {
                    continue;
                }
                const node = ornamentsNode.element(ornamentElement);
                if (node) {
                    ornament = new OrnamentContainer_1.OrnamentContainer(elementToOrnamentEnum[ornamentElement]);
                    const placementAttr = node.attribute("placement");
                    if (placementAttr) {
                        const placementString = placementAttr.value;
                        if (placementString === "below") {
                            ornament.placement = AbstractExpression_1.PlacementEnum.Below;
                        }
                    }
                }
            }
            if (ornament) {
                const accidentalsList = ornamentsNode.elements("accidental-mark");
                if (accidentalsList) {
                    let placement = AbstractExpression_1.PlacementEnum.Below;
                    let accidental = Pitch_1.AccidentalEnum.NONE;
                    const accidentalsListArr = accidentalsList;
                    for (let idx = 0, len = accidentalsListArr.length; idx < len; ++idx) {
                        const accidentalNode = accidentalsListArr[idx];
                        let text = accidentalNode.value;
                        accidental = this.getAccEnumFromString(text);
                        const placementAttr = accidentalNode.attribute("placement");
                        if (accidentalNode.hasAttributes && placementAttr) {
                            text = placementAttr.value;
                            if (text === "above") {
                                placement = AbstractExpression_1.PlacementEnum.Above;
                            }
                            else if (text === "below") {
                                placement = AbstractExpression_1.PlacementEnum.Below;
                            }
                        }
                        if (placement === AbstractExpression_1.PlacementEnum.Above) {
                            ornament.AccidentalAbove = accidental;
                        }
                        else if (placement === AbstractExpression_1.PlacementEnum.Below) {
                            ornament.AccidentalBelow = accidental;
                        }
                    }
                }
                // add this to currentVoiceEntry
                currentVoiceEntry.OrnamentContainer = ornament;
            }
        }
    } // /addOrnament
}
exports.ArticulationReader = ArticulationReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/ChordSymbolReader.ts":
/*!**************************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/ChordSymbolReader.ts ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChordSymbolReader = void 0;
const ChordSymbolContainer_1 = __webpack_require__(/*! ../../VoiceData/ChordSymbolContainer */ "./src/MusicalScore/VoiceData/ChordSymbolContainer.ts");
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class ChordSymbolReader {
    static readChordSymbol(xmlNode, musicSheet, activeKey) {
        const root = xmlNode.element("root");
        const kind = xmlNode.element("kind");
        const kindText = kind.attribute("text");
        // must be always present
        if (!root || !kind) {
            return undefined;
        }
        const rootStep = root.element("root-step");
        const rootAlter = root.element("root-alter");
        // a valid NoteEnum value should be present
        if (!rootStep) {
            return undefined;
        }
        let rootNote;
        try {
            rootNote = Pitch_1.NoteEnum[rootStep.value.trim()];
        }
        catch (ex) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
            musicSheet.SheetErrors.pushMeasureError(errorMsg);
            loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
            return undefined;
        }
        // an alteration value isn't necessary
        let rootAlteration = Pitch_1.AccidentalEnum.NONE;
        if (rootAlter) {
            try {
                rootAlteration = Pitch_1.Pitch.AccidentalFromHalfTones(parseInt(rootAlter.value, 10));
            }
            catch (ex) {
                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                musicSheet.SheetErrors.pushMeasureError(errorMsg);
                loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
            }
        }
        // using default octave value, to be changed later
        const rootPitch = new Pitch_1.Pitch(rootNote, 1, rootAlteration);
        let kindValue = kind.value.trim().replace("-", "");
        if (kindText) {
            switch (kindText.value) {
                case "aug":
                    kindValue = "augmented";
                    break;
                case "dim":
                    kindValue = "diminished";
                    break;
                default:
            }
        }
        let chordKind;
        try {
            chordKind = ChordSymbolContainer_1.ChordSymbolEnum[kindValue];
        }
        catch (ex) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
            musicSheet.SheetErrors.pushMeasureError(errorMsg);
            loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
            return undefined;
        }
        // bass is optional
        let bassPitch = undefined;
        const bass = xmlNode.element("bass");
        if (bass) {
            const bassStep = bass.element("bass-step");
            const bassAlter = bass.element("bass-alter");
            let bassNote = Pitch_1.NoteEnum.C;
            if (bassStep) {
                try {
                    bassNote = Pitch_1.NoteEnum[bassStep.value.trim()];
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                    musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
                    return undefined;
                }
            }
            let bassAlteration = Pitch_1.AccidentalEnum.NONE;
            if (bassAlter) {
                try {
                    bassAlteration = Pitch_1.Pitch.AccidentalFromHalfTones(parseInt(bassAlter.value, 10));
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                    musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
                }
            }
            bassPitch = new Pitch_1.Pitch(bassNote, 1, bassAlteration);
        }
        // degrees are optional
        const degrees = [];
        const degreeNodes = xmlNode.elements("degree");
        for (const degreeNode of degreeNodes) {
            if (degreeNode) {
                const degreeValue = degreeNode.element("degree-value");
                const degreeAlter = degreeNode.element("degree-alter");
                const degreeType = degreeNode.element("degree-type");
                if (!degreeValue || !degreeAlter || !degreeType) {
                    return undefined;
                }
                let value;
                try {
                    value = parseInt(degreeValue.value.trim(), 10);
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                    musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
                    return undefined;
                }
                let alter;
                try {
                    alter = Pitch_1.Pitch.AccidentalFromHalfTones(parseInt(degreeAlter.value, 10));
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                    musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
                    return undefined;
                }
                let text;
                try {
                    text = ChordSymbolContainer_1.ChordDegreeText[degreeType.value.trim().toLowerCase()];
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ChordSymbolError", "Invalid chord symbol");
                    musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("InstrumentReader.readChordSymbol", errorMsg, ex);
                    return undefined;
                }
                degrees.push(new ChordSymbolContainer_1.Degree(value, alter, text));
            }
        }
        return new ChordSymbolContainer_1.ChordSymbolContainer(rootPitch, chordKind, bassPitch, degrees, musicSheet.Rules);
    }
}
exports.ChordSymbolReader = ChordSymbolReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/ExpressionReader.ts":
/*!*************************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/ExpressionReader.ts ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExpressionReader = void 0;
const Fraction_1 = __webpack_require__(/*! ../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const MultiTempoExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/MultiTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/MultiTempoExpression.ts");
const ContinuousDynamicExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts");
const ContinuousTempoExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts");
const InstantaneousDynamicExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/InstantaneousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts");
const OctaveShift_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts");
const MultiExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/MultiExpression */ "./src/MusicalScore/VoiceData/Expressions/MultiExpression.ts");
const InstantaneousTempoExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/InstantaneousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts");
const MoodExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/MoodExpression */ "./src/MusicalScore/VoiceData/Expressions/MoodExpression.ts");
const UnknownExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/UnknownExpression */ "./src/MusicalScore/VoiceData/Expressions/UnknownExpression.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
const RehearsalExpression_1 = __webpack_require__(/*! ../../VoiceData/Expressions/RehearsalExpression */ "./src/MusicalScore/VoiceData/Expressions/RehearsalExpression.ts");
const Pedal_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/Pedal */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Pedal.ts");
class ExpressionReader {
    constructor(musicSheet, instrument, staffNumber) {
        this.openContinuousDynamicExpressions = [];
        this.musicSheet = musicSheet;
        this.staffNumber = staffNumber;
        this.globalStaffIndex = musicSheet.getGlobalStaffIndexOfFirstStaff(instrument) + (staffNumber - 1);
        this.initialize();
    }
    readExpressionParameters(xmlNode, currentInstrument, divisions, inSourceMeasureCurrentFraction, inSourceMeasureFormerFraction, currentMeasureIndex, ignoreDivisionsOffset) {
        this.initialize();
        const offsetNode = xmlNode.element("offset");
        if (offsetNode !== undefined && !ignoreDivisionsOffset) {
            try {
                this.offsetDivisions = parseInt(offsetNode.value, 10);
            }
            catch (ex) {
                const errorMsg = "ReaderErrorMessages/ExpressionOffsetError" + ", Invalid expression offset -> set to default.";
                loglevel_1.default.debug("ExpressionReader.readExpressionParameters", errorMsg, ex);
                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                this.offsetDivisions = 0;
            }
        }
        this.directionTimestamp = Fraction_1.Fraction.createFromFraction(inSourceMeasureCurrentFraction);
        let offsetFraction = new Fraction_1.Fraction(Math.abs(this.offsetDivisions), divisions * 4);
        if (this.offsetDivisions > 0) {
            if (inSourceMeasureCurrentFraction.RealValue > 0) {
                offsetFraction = Fraction_1.Fraction.multiply(Fraction_1.Fraction.minus(inSourceMeasureCurrentFraction, inSourceMeasureFormerFraction), offsetFraction);
                this.directionTimestamp = Fraction_1.Fraction.plus(offsetFraction, inSourceMeasureCurrentFraction);
            }
            else {
                this.directionTimestamp = Fraction_1.Fraction.createFromFraction(offsetFraction);
            }
        }
        else if (this.offsetDivisions < 0) {
            if (inSourceMeasureCurrentFraction.RealValue > 0) {
                offsetFraction = Fraction_1.Fraction.multiply(Fraction_1.Fraction.minus(inSourceMeasureCurrentFraction, inSourceMeasureFormerFraction), offsetFraction);
                this.directionTimestamp = Fraction_1.Fraction.minus(inSourceMeasureCurrentFraction, offsetFraction);
            }
            else {
                this.directionTimestamp = Fraction_1.Fraction.createFromFraction(offsetFraction);
            }
        }
        // read default-y for wedge node
        let newWedgeYPos;
        const directionTypeNode = xmlNode.element("direction-type");
        let wedgeNode;
        if (directionTypeNode) {
            wedgeNode = directionTypeNode.element("wedge");
            if (wedgeNode) {
                const yPosAttr = wedgeNode.attribute("default-y");
                if (yPosAttr) {
                    newWedgeYPos = this.readPosition(yPosAttr);
                }
            }
        }
        this.WedgeYPosXml = newWedgeYPos;
        const placeAttr = xmlNode.attribute("placement");
        if (placeAttr) {
            try {
                const placementString = placeAttr.value;
                if (placementString === "below") {
                    this.placement = AbstractExpression_1.PlacementEnum.Below;
                }
                else if (placementString === "above") {
                    this.placement = AbstractExpression_1.PlacementEnum.Above;
                }
            }
            catch (ex) {
                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ExpressionPlacementError", "Invalid expression placement -> set to default.");
                loglevel_1.default.debug("ExpressionReader.readExpressionParameters", errorMsg, ex);
                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
        }
        if (this.placement === AbstractExpression_1.PlacementEnum.NotYetDefined) {
            try {
                if (directionTypeNode) {
                    const dynamicsNode = directionTypeNode.element("dynamics");
                    if (dynamicsNode) {
                        const defAttr = dynamicsNode.attribute("default-y");
                        if (defAttr) {
                            this.readExpressionPlacement(defAttr, "read dynamics y pos");
                        }
                    }
                    if (wedgeNode) {
                        const defAttr = wedgeNode.attribute("default-y");
                        if (defAttr) {
                            this.readExpressionPlacement(defAttr, "read wedge y pos");
                        }
                    }
                    const wordsNode = directionTypeNode.element("words");
                    if (wordsNode) {
                        const defAttr = wordsNode.attribute("default-y");
                        if (defAttr) {
                            this.readExpressionPlacement(defAttr, "read words y pos");
                        }
                    }
                    const rehearsalNode = directionTypeNode.element("rehearsal");
                    if (rehearsalNode) {
                        const defAttr = rehearsalNode.attribute("default-y");
                        if (defAttr) {
                            this.readExpressionPlacement(defAttr, "read rehearsal pos");
                        }
                    }
                }
            }
            catch (ex) {
                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/ExpressionPlacementError", "Invalid expression placement. Set to default.");
                loglevel_1.default.debug("ExpressionReader.readExpressionParameters", errorMsg, ex);
                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
        }
        if (this.placement === AbstractExpression_1.PlacementEnum.NotYetDefined) {
            if (currentInstrument.Staves.length > 1) {
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
            else if (currentInstrument.HasLyrics) {
                this.placement = AbstractExpression_1.PlacementEnum.Above;
            }
            else {
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
        }
    }
    read(directionNode, currentMeasure, inSourceMeasureCurrentFraction, inSourceMeasurePreviousFraction = undefined) {
        let isTempoInstruction = false;
        let isDynamicInstruction = false;
        const n = directionNode.element("sound");
        if (n) {
            const tempoAttr = n.attribute("tempo");
            const dynAttr = n.attribute("dynamics");
            if (tempoAttr) {
                // const match: string[] = tempoAttr.value.match(/^(\d+\.?\d{0,9}|\.\d{1,9})$/);
                const match = tempoAttr.value.match(/^(\d+)(\.\d+)?$/);
                if ((match === null || match === void 0 ? void 0 : match.length) > 0) {
                    this.soundTempo = Math.round(Number.parseFloat(tempoAttr.value));
                }
                else {
                    loglevel_1.default.info("invalid xml tempo: " + tempoAttr.value);
                    this.soundTempo = 100;
                }
                //console.log(`value: ${tempoAttr.value}\n  soundTempo: ${this.soundTempo}`);
                currentMeasure.TempoInBPM = this.soundTempo;
                if (this.musicSheet.DefaultStartTempoInBpm === 0) {
                    this.musicSheet.DefaultStartTempoInBpm = this.soundTempo;
                }
                this.musicSheet.HasBPMInfo = true;
                isTempoInstruction = true;
            }
            if (dynAttr) {
                const match = dynAttr.value.match(/\d+/);
                this.soundDynamic = match !== undefined ? parseInt(match[0], 10) : 100;
                isDynamicInstruction = true;
            }
        }
        const dirNode = directionNode.element("direction-type");
        if (!dirNode) {
            return;
        }
        let dirContentNode = dirNode.element("metronome");
        if (dirContentNode) {
            const beatUnit = dirContentNode.element("beat-unit");
            // TODO check second "beat-unit", e.g. quarter = half
            const dotted = dirContentNode.element("beat-unit-dot") !== undefined;
            const bpm = dirContentNode.element("per-minute");
            // TODO check print-object = false -> don't render invisible metronome mark
            if (beatUnit !== undefined && bpm) {
                const useCurrentFractionForPositioning = (dirContentNode.hasAttributes && dirContentNode.attribute("default-x") !== undefined);
                if (useCurrentFractionForPositioning) {
                    this.directionTimestamp = Fraction_1.Fraction.createFromFraction(inSourceMeasureCurrentFraction);
                }
                const bpmNumber = parseFloat(bpm.value);
                this.createNewTempoExpressionIfNeeded(currentMeasure);
                const instantaneousTempoExpression = new InstantaneousTempoExpression_1.InstantaneousTempoExpression(undefined, this.placement, this.staffNumber, bpmNumber, this.currentMultiTempoExpression, true);
                instantaneousTempoExpression.parentMeasure = currentMeasure;
                this.soundTempo = bpmNumber;
                // make sure to take dotted beats into account
                currentMeasure.TempoInBPM = this.soundTempo * (dotted ? 1.5 : 1);
                if (this.musicSheet.DefaultStartTempoInBpm === 0) {
                    this.musicSheet.DefaultStartTempoInBpm = this.soundTempo;
                }
                this.musicSheet.HasBPMInfo = true;
                instantaneousTempoExpression.dotted = dotted;
                instantaneousTempoExpression.beatUnit = beatUnit.value;
                this.currentMultiTempoExpression.addExpression(instantaneousTempoExpression, "");
                this.currentMultiTempoExpression.CombinedExpressionsText = "test";
            }
            return;
        }
        dirContentNode = dirNode.element("dynamics");
        if (dirContentNode) {
            const fromNotation = directionNode.element("notations") !== undefined;
            this.interpretInstantaneousDynamics(dirContentNode, currentMeasure, inSourceMeasureCurrentFraction, fromNotation);
            return;
        }
        dirContentNode = dirNode.element("words");
        if (dirContentNode) {
            if (isTempoInstruction) {
                this.createNewTempoExpressionIfNeeded(currentMeasure);
                this.currentMultiTempoExpression.CombinedExpressionsText = dirContentNode.value;
                const instantaneousTempoExpression = new InstantaneousTempoExpression_1.InstantaneousTempoExpression(dirContentNode.value, this.placement, this.staffNumber, this.soundTempo, this.currentMultiTempoExpression);
                this.currentMultiTempoExpression.addExpression(instantaneousTempoExpression, "");
            }
            else if (!isDynamicInstruction) {
                this.interpretWords(dirContentNode, currentMeasure, inSourceMeasureCurrentFraction);
            }
            return;
        }
        dirContentNode = dirNode.element("wedge");
        if (dirContentNode) {
            this.interpretWedge(dirContentNode, currentMeasure, inSourceMeasurePreviousFraction, currentMeasure.MeasureNumber);
            return;
        }
        dirContentNode = dirNode.element("rehearsal");
        if (dirContentNode) {
            this.interpretRehearsalMark(dirContentNode, currentMeasure, inSourceMeasureCurrentFraction, currentMeasure.MeasureNumber);
            return;
        }
    }
    /** Usually called at end of last measure. */
    closeOpenExpressions(sourceMeasure, timestamp) {
        for (const openCont of this.openContinuousDynamicExpressions) {
            // add to current stafflinked expression // refactor into closeOpenContinuousDynamic?
            this.createNewMultiExpressionIfNeeded(sourceMeasure, openCont.NumberXml, timestamp);
            this.closeOpenContinuousDynamic(openCont, sourceMeasure, timestamp);
        }
        if (this.openContinuousTempoExpression) {
            this.closeOpenContinuousTempo(Fraction_1.Fraction.plus(sourceMeasure.AbsoluteTimestamp, timestamp));
        }
    }
    addOctaveShift(directionNode, currentMeasure, endTimestamp) {
        var _a;
        let octaveStaffNumber = 1;
        const staffNode = directionNode.element("staff");
        if (staffNode) {
            try {
                octaveStaffNumber = parseInt(staffNode.value, 10);
            }
            catch (ex) {
                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/OctaveShiftStaffError", "Invalid octave shift staff number. Set to default");
                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                octaveStaffNumber = 1;
                loglevel_1.default.debug("ExpressionReader.addOctaveShift", errorMsg, ex);
            }
        }
        const directionTypeNode = directionNode.element("direction-type");
        if (directionTypeNode) {
            const octaveShiftNode = directionTypeNode.element("octave-shift");
            const placement = this.readPlacement(directionNode);
            // if (placement === PlacementEnum.NotYetDefined && this.staffNumber === 1) {
            //     placement = PlacementEnum.Above;
            // }
            if (octaveShiftNode !== undefined && octaveShiftNode.hasAttributes) {
                try {
                    const numberXml = this.readNumber(octaveShiftNode);
                    if (octaveShiftNode.attribute("size")) {
                        const size = parseInt(octaveShiftNode.attribute("size").value, 10);
                        let octave = 0;
                        if (size === 8) {
                            octave = 1;
                        }
                        else if (size === 15) {
                            octave = 2;
                        }
                        let type = (_a = octaveShiftNode.attribute("type")) === null || _a === void 0 ? void 0 : _a.value;
                        if (!type) {
                            if (placement === AbstractExpression_1.PlacementEnum.Above) {
                                type = "down";
                            }
                            else if (placement === AbstractExpression_1.PlacementEnum.Below) {
                                type = "up";
                            }
                        }
                        if (type === "up" || type === "down") { // unfortunately not always given in MusicXML (e.g. Musescore 3.6.2) even though required
                            const octaveShift = new OctaveShift_1.OctaveShift(type, octave);
                            octaveShift.StaffNumber = octaveStaffNumber;
                            this.getMultiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml);
                            this.getMultiExpression.OctaveShiftStart = octaveShift;
                            octaveShift.ParentStartMultiExpression = this.getMultiExpression;
                            this.openOctaveShift = octaveShift;
                        }
                        else if (type === "stop") {
                            if (this.openOctaveShift) {
                                this.getMultiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, this.openOctaveShift.numberXml, endTimestamp);
                                const octaveShiftStartExpression = this.getMultiExpression;
                                octaveShiftStartExpression.OctaveShiftEnd = this.openOctaveShift;
                                this.openOctaveShift.ParentEndMultiExpression = this.getMultiExpression;
                                this.openOctaveShift = undefined;
                            }
                        } // TODO handle type === "continue"?
                        else if (!type) {
                            loglevel_1.default.debug("octave-shift missing type in xml");
                        }
                    }
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/OctaveShiftError", "Error while reading octave shift.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("ExpressionReader.addOctaveShift", errorMsg, ex);
                }
            }
        }
    }
    addPedalMarking(directionNode, currentMeasure, endTimestamp) {
        var _a, _b, _c;
        const directionTypeNode = directionNode.element("direction-type");
        if (directionTypeNode) {
            const pedalNode = directionTypeNode.element("pedal");
            if (pedalNode !== undefined && pedalNode.hasAttributes) {
                let sign = false, line = false;
                try {
                    if (((_a = pedalNode.attribute("line")) === null || _a === void 0 ? void 0 : _a.value) === "yes") {
                        line = true;
                    }
                    else if (((_b = pedalNode.attribute("line")) === null || _b === void 0 ? void 0 : _b.value) === "no") {
                        line = false;
                        //No line implies sign
                        sign = true;
                    }
                    else if (((_c = pedalNode.attribute("sign")) === null || _c === void 0 ? void 0 : _c.value) === "yes") {
                        sign = true;
                    }
                    else { //if (pedalNode.attribute("sign")?.value === "no"){
                        // only assume sign if explicitly given in one way or another
                        sign = false;
                        line = true;
                    }
                    switch (pedalNode.attribute("type").value) {
                        case "start":
                            //ignore duplicate tags (causes issues when pedals aren't terminated)
                            // if (!this.openPedal || !this.openPedal.ParentStartMultiExpression.AbsoluteTimestamp.Equals(endTimestamp)) {
                            //     this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
                            // }
                            // instead, just end open pedal if there already was one, and create new one
                            if (this.openPedal && this.openPedal.IsLine) {
                                // if we don't check IsLine, the Ped. at the end of Dichterliebe overlaps with a *
                                this.endOpenPedal(currentMeasure);
                            }
                            this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
                            this.openPedal = new Pedal_1.Pedal(line, sign);
                            this.getMultiExpression.PedalStart = this.openPedal;
                            this.openPedal.ParentStartMultiExpression = this.getMultiExpression;
                            break;
                        case "stop":
                            if (this.openPedal) {
                                this.endOpenPedal(currentMeasure, endTimestamp);
                            }
                            break;
                        case "change":
                            //Ignore non-line pedals
                            if (this.openPedal && this.openPedal.IsLine) {
                                this.openPedal.ChangeEnd = true;
                                this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
                                this.getMultiExpression.PedalEnd = this.openPedal;
                                this.openPedal.ParentEndMultiExpression = this.getMultiExpression;
                                this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
                                this.openPedal = new Pedal_1.Pedal(line, sign);
                                this.openPedal.ChangeBegin = true;
                                this.getMultiExpression.PedalStart = this.openPedal;
                                this.openPedal.ParentStartMultiExpression = this.getMultiExpression;
                            }
                            break;
                        case "continue":
                            break;
                        default:
                            break;
                    }
                }
                catch (ex) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/PedalError", "Error while reading pedal.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    loglevel_1.default.debug("ExpressionReader.addPedalMarking", errorMsg, ex);
                }
            }
        }
    }
    endOpenPedal(currentMeasure, endTimeStamp) {
        this.createNewMultiExpressionIfNeeded(currentMeasure, -1, endTimeStamp);
        // unfortunately currentMeasure.Duration doesn't exist here yet, so we can't check pedal.EndsStave
        this.getMultiExpression.PedalEnd = this.openPedal;
        this.openPedal.ParentEndMultiExpression = this.getMultiExpression;
        this.openPedal = undefined;
    }
    initialize() {
        this.placement = AbstractExpression_1.PlacementEnum.NotYetDefined;
        this.soundTempo = 0;
        this.soundDynamic = 0;
        this.offsetDivisions = 0;
    }
    readPlacement(node) {
        var _a;
        const value = (_a = node.attribute("placement")) === null || _a === void 0 ? void 0 : _a.value;
        if (value === "above") {
            return AbstractExpression_1.PlacementEnum.Above;
        }
        else if (value === "below") {
            return AbstractExpression_1.PlacementEnum.Below;
        }
        else {
            return AbstractExpression_1.PlacementEnum.NotYetDefined;
        }
    }
    readExpressionPlacement(yPosAttr, catchLogMessage) {
        try {
            const y = this.readPosition(yPosAttr);
            if (y < 0) {
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
            else if (y > 0) {
                this.placement = AbstractExpression_1.PlacementEnum.Above;
            }
        }
        catch (ex) {
            loglevel_1.default.debug("ExpressionReader.readExpressionParameters", catchLogMessage, ex);
        }
    }
    readPosition(posAttr) {
        try {
            const xOrY = parseInt(posAttr.value, 10);
            if (xOrY < 0) {
                this.placement = AbstractExpression_1.PlacementEnum.Below;
            }
            else if (xOrY > 0) {
                this.placement = AbstractExpression_1.PlacementEnum.Above;
            }
            return xOrY;
        }
        catch (ex) {
            loglevel_1.default.debug("ExpressionReader.readExpressionParameters", ex);
        }
    }
    interpretInstantaneousDynamics(dynamicsNode, currentMeasure, inSourceMeasureCurrentFraction, fromNotation) {
        var _a, _b, _c;
        if (dynamicsNode.hasElements) {
            if (dynamicsNode.hasAttributes && dynamicsNode.attribute("default-x")) {
                this.directionTimestamp = Fraction_1.Fraction.createFromFraction(inSourceMeasureCurrentFraction);
            }
            const numberXml = this.readNumber(dynamicsNode); // probably never given, just to comply with createExpressionIfNeeded()
            let expressionText = (_a = dynamicsNode.elements()[0]) === null || _a === void 0 ? void 0 : _a.name; // elements can in rare cases still be empty even though hasElements=true, see #1269
            if (expressionText === "other-dynamics") {
                expressionText = dynamicsNode.elements()[0].value;
            }
            if (expressionText) {
                // ToDo: make duplicate recognition an afterReadingModule, as we can't definitively check here if there is a repetition:
                // Compare with the active dynamic expression and only add it if there is a change in dynamic
                // Exception is when a repetition starts here, where the "repeated" dynamic might be desired.
                // see PR #767 where this was removed
                if ((_b = currentMeasure.Rules) === null || _b === void 0 ? void 0 : _b.IgnoreRepeatedDynamics) {
                    let dynamicEnum;
                    try {
                        dynamicEnum = InstantaneousDynamicExpression_1.DynamicEnum[expressionText];
                    }
                    catch (err) {
                        const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/DynamicError", "Error while reading dynamic.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                        return;
                    }
                    if (((_c = this.activeInstantaneousDynamic) === null || _c === void 0 ? void 0 : _c.DynEnum) === dynamicEnum) {
                        // repeated dynamic
                        return;
                    }
                }
                if (!fromNotation) {
                    this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml);
                }
                else {
                    this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml, Fraction_1.Fraction.createFromFraction(inSourceMeasureCurrentFraction));
                }
                const instantaneousDynamicExpression = new InstantaneousDynamicExpression_1.InstantaneousDynamicExpression(expressionText, this.soundDynamic, this.placement, this.staffNumber, currentMeasure);
                instantaneousDynamicExpression.InMeasureTimestamp = inSourceMeasureCurrentFraction.clone();
                this.getMultiExpression.addExpression(instantaneousDynamicExpression, "");
                // addExpression unnecessary now?:
                //const multiExpression = this.getMultiExpression(ExpressionType.InstantaneousDynamic, numberXml);
                //multiExpression.addExpression(instantaneousDynamicExpression, "");
                this.initialize();
                if (this.activeInstantaneousDynamic) {
                    this.activeInstantaneousDynamic.DynEnum = instantaneousDynamicExpression.DynEnum;
                }
                else {
                    this.activeInstantaneousDynamic = new InstantaneousDynamicExpression_1.InstantaneousDynamicExpression(expressionText, 0, AbstractExpression_1.PlacementEnum.NotYetDefined, 1, currentMeasure);
                }
                //}
            }
        }
    }
    interpretWords(wordsNode, currentMeasure, inSourceMeasureCurrentFraction) {
        var _a;
        const text = wordsNode.value;
        if (currentMeasure.Rules.IgnoreBracketsWords && (/^\(\s*\)$/.test(text) || /^\[\s*\]$/.test(text) // (*) and [*]
        )) { // regex: brackets with arbitrary white space in-between
            return;
        }
        let fontStyle;
        const fontStyleAttr = wordsNode.attribute("font-style");
        if (fontStyleAttr) {
            const fontStyleText = fontStyleAttr.value;
            if (fontStyleText === "italic") {
                fontStyle = FontStyles_1.FontStyles.Italic;
            }
        }
        let defaultYXml;
        if (currentMeasure.Rules.PlaceWordsInsideStafflineFromXml) {
            const defaultYString = (_a = wordsNode.attribute("default-y")) === null || _a === void 0 ? void 0 : _a.value;
            if ((defaultYString === null || defaultYString === void 0 ? void 0 : defaultYString.length) > 0) {
                defaultYXml = Number.parseInt(defaultYString, 10);
            }
        }
        if (text.length > 0) {
            if (wordsNode.hasAttributes && wordsNode.attribute("default-x")) {
                this.directionTimestamp = Fraction_1.Fraction.createFromFraction(inSourceMeasureCurrentFraction);
            }
            if (this.checkIfWordsNodeIsRepetitionInstruction(text)) {
                return;
            }
            this.fillMultiOrTempoExpression(text, currentMeasure, inSourceMeasureCurrentFraction, fontStyle, defaultYXml);
            this.initialize();
        }
    }
    readNumber(node) {
        var _a;
        let numberXml = 1; // default value
        const numberStringXml = (_a = node.attribute("number")) === null || _a === void 0 ? void 0 : _a.value;
        if (numberStringXml) {
            numberXml = Number.parseInt(numberStringXml, 10);
        }
        return numberXml;
    }
    interpretWedge(wedgeNode, currentMeasure, inSourceMeasureCurrentFraction, currentMeasureIndex) {
        var _a, _b;
        if (wedgeNode !== undefined && wedgeNode.hasAttributes && wedgeNode.attribute("default-x")) {
            this.directionTimestamp = Fraction_1.Fraction.createFromFraction(inSourceMeasureCurrentFraction);
        }
        const wedgeNumberXml = this.readNumber(wedgeNode);
        const typeAttributeString = (_b = (_a = wedgeNode.attribute("type")) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        // check for duplicate
        if (this.lastWedge && this.lastWedge.parentMeasure.MeasureNumberXML === currentMeasure.MeasureNumberXML &&
            this.lastWedge.StaffNumber === this.staffNumber &&
            this.placement === this.lastWedge.Placement &&
            this.WedgeYPosXml !== undefined &&
            this.lastWedge.YPosXml === this.WedgeYPosXml &&
            this.lastWedge.StartMultiExpression.Timestamp.Equals(this.directionTimestamp) &&
            this.lastWedge.DynamicType === ContinuousDynamicExpression_1.ContDynamicEnum[typeAttributeString]) {
            // duplicate, ignore
            return;
        }
        //Ending needs to use previous fraction, not current.
        //If current is used, when there is a system break it will mess up
        if (typeAttributeString === "stop") {
            this.createNewMultiExpressionIfNeeded(currentMeasure, wedgeNumberXml, inSourceMeasureCurrentFraction);
        }
        else {
            this.createNewMultiExpressionIfNeeded(currentMeasure, wedgeNumberXml);
        }
        this.addWedge(wedgeNode, currentMeasure, inSourceMeasureCurrentFraction);
        this.initialize();
    }
    interpretRehearsalMark(rehearsalNode, currentMeasure, inSourceMeasureCurrentFraction, currentMeasureIndex) {
        // TODO create multi expression? for now we just need to have a static rehearsal mark though.
        currentMeasure.rehearsalExpression = new RehearsalExpression_1.RehearsalExpression(rehearsalNode.value, this.placement);
    }
    createNewMultiExpressionIfNeeded(currentMeasure, numberXml, timestamp = undefined) {
        if (!timestamp) {
            timestamp = this.directionTimestamp;
        }
        let existingMultiExpression = this.getMultiExpression;
        if (!existingMultiExpression ||
            existingMultiExpression &&
                (existingMultiExpression.SourceMeasureParent !== currentMeasure ||
                    existingMultiExpression.numberXml !== numberXml ||
                    (existingMultiExpression.SourceMeasureParent === currentMeasure && existingMultiExpression.Timestamp !== timestamp))) {
            this.getMultiExpression = existingMultiExpression = new MultiExpression_1.MultiExpression(currentMeasure, Fraction_1.Fraction.createFromFraction(timestamp));
            currentMeasure.StaffLinkedExpressions[this.globalStaffIndex].push(existingMultiExpression);
        }
        return existingMultiExpression;
    }
    createNewTempoExpressionIfNeeded(currentMeasure) {
        if (!this.currentMultiTempoExpression ||
            this.currentMultiTempoExpression.SourceMeasureParent !== currentMeasure ||
            this.currentMultiTempoExpression.Timestamp !== this.directionTimestamp) {
            this.currentMultiTempoExpression = new MultiTempoExpression_1.MultiTempoExpression(currentMeasure, Fraction_1.Fraction.createFromFraction(this.directionTimestamp));
            currentMeasure.TempoExpressions.push(this.currentMultiTempoExpression);
        }
    }
    addWedge(wedgeNode, currentMeasure, inSourceMeasureCurrentFraction) {
        if (wedgeNode !== undefined && wedgeNode.hasAttributes) {
            const numberXml = this.readNumber(wedgeNode);
            const type = wedgeNode.attribute("type").value.toLowerCase();
            try {
                if (type === "crescendo" || type === "diminuendo") {
                    const continuousDynamicExpression = new ContinuousDynamicExpression_1.ContinuousDynamicExpression(ContinuousDynamicExpression_1.ContDynamicEnum[type], this.placement, this.staffNumber, currentMeasure, numberXml);
                    this.lastWedge = continuousDynamicExpression;
                    this.lastWedge.YPosXml = this.WedgeYPosXml;
                    this.openContinuousDynamicExpressions.push(continuousDynamicExpression);
                    let multiExpression = this.getMultiExpression;
                    if (!multiExpression) {
                        multiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, numberXml);
                    }
                    multiExpression.StartingContinuousDynamic = continuousDynamicExpression;
                    continuousDynamicExpression.StartMultiExpression = multiExpression;
                    if (this.activeInstantaneousDynamic !== undefined &&
                        this.activeInstantaneousDynamic.StaffNumber === continuousDynamicExpression.StaffNumber) {
                        this.activeInstantaneousDynamic = undefined;
                    }
                }
                else if (type === "stop") {
                    for (const openCont of this.openContinuousDynamicExpressions) {
                        if (openCont.NumberXml === numberXml) {
                            if (openCont.NumberXml === numberXml) {
                                this.closeOpenContinuousDynamic(openCont, currentMeasure, inSourceMeasureCurrentFraction);
                            }
                        }
                    }
                }
            }
            catch (ex) {
                const errorMsg = "ReaderErrorMessages/WedgeError" + ", Error while reading Crescendo / Diminuendo.";
                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                loglevel_1.default.debug("ExpressionReader.addWedge", errorMsg, ex);
            }
        }
    }
    fillMultiOrTempoExpression(inputString, currentMeasure, inSourceMeasureCurrentFraction, fontStyle, defaultYXml = undefined) {
        if (!inputString) {
            return;
        }
        const tmpInputString = inputString.trim();
        // split string at enumerating words or signs
        //const splitStrings: string[] = tmpInputString.split(/([\s,\r\n]and[\s,\r\n]|[\s,\r\n]und[\s,\r\n]|[\s,\r\n]e[\s,\r\n]|[\s,\r\n])+/g);
        //for (const splitStr of splitStrings) {
        this.createExpressionFromString("", tmpInputString, currentMeasure, inSourceMeasureCurrentFraction, inputString, fontStyle, defaultYXml);
        //}
    }
    /*
    private splitStringRecursive(input: [string, string], stringSeparators: string[]): [string, string][] {
        let text: string = input[1];
        let lastSeparator: string = input[0];
        let resultList: [string, string][] = [];
        for (let idx: number = 0, len: number = stringSeparators.length; idx < len; ++idx) {
            let stringSeparator: string = stringSeparators[idx];
            if (text.indexOf(stringSeparator) < 0) {
                continue;
            }
            let splitStrings: string[] = text.split(stringSeparator, StringSplitOptions.RemoveEmptyEntries);

            if (splitStrings.length !== 0) {
                resultList.push(...this.splitStringRecursive([lastSeparator, splitStrings[0]], stringSeparators));
                for (let index: number = 1; index < splitStrings.length; index++) {
                    resultList.push(...this.splitStringRecursive([stringSeparator, splitStrings[index]], stringSeparators));
                }
            } else {
                resultList.push(["", stringSeparator]);
            }
            break;
        }
        if (resultList.length === 0) {
            resultList.push(input);
        }
        return resultList;
    }
    */
    createExpressionFromString(prefix, stringTrimmed, currentMeasure, inSourceMeasureCurrentFraction, inputString, fontStyle, defaultYXml = undefined) {
        if (InstantaneousTempoExpression_1.InstantaneousTempoExpression.isInputStringInstantaneousTempo(stringTrimmed) ||
            ContinuousTempoExpression_1.ContinuousTempoExpression.isInputStringContinuousTempo(stringTrimmed)) {
            // first check if there is already a tempo expression with the same function
            if (currentMeasure.TempoExpressions.length > 0) {
                for (let idx = 0, len = currentMeasure.TempoExpressions.length; idx < len; ++idx) {
                    const multiTempoExpression = currentMeasure.TempoExpressions[idx];
                    if (multiTempoExpression.Timestamp === this.directionTimestamp &&
                        multiTempoExpression.InstantaneousTempo !== undefined &&
                        multiTempoExpression.InstantaneousTempo.Label.indexOf(stringTrimmed) !== -1) {
                        return false;
                    }
                }
            }
            this.createNewTempoExpressionIfNeeded(currentMeasure); // TODO process fontStyle? (also for other expressions)
            this.currentMultiTempoExpression.CombinedExpressionsText = inputString;
            if (InstantaneousTempoExpression_1.InstantaneousTempoExpression.isInputStringInstantaneousTempo(stringTrimmed)) {
                const instantaneousTempoExpression = new InstantaneousTempoExpression_1.InstantaneousTempoExpression(stringTrimmed, this.placement, this.staffNumber, this.soundTempo, this.currentMultiTempoExpression);
                this.currentMultiTempoExpression.addExpression(instantaneousTempoExpression, prefix);
                return true;
            }
            if (ContinuousTempoExpression_1.ContinuousTempoExpression.isInputStringContinuousTempo(stringTrimmed)) {
                const continuousTempoExpression = new ContinuousTempoExpression_1.ContinuousTempoExpression(stringTrimmed, this.placement, this.staffNumber, this.currentMultiTempoExpression);
                this.currentMultiTempoExpression.addExpression(continuousTempoExpression, prefix);
                return true;
            }
        }
        if (ContinuousDynamicExpression_1.ContinuousDynamicExpression.isInputStringContinuousDynamic(stringTrimmed)) {
            // || InstantaneousDynamicExpression.isInputStringInstantaneousDynamic(stringTrimmed)
            //   looks like <words> never has instantaneous dynamics like p or sf, those are in <dynamics>.
            // if (InstantaneousDynamicExpression.isInputStringInstantaneousDynamic(stringTrimmed)) {
            //     if (this.openContinuousDynamicExpression !== undefined && !this.openContinuousDynamicExpression.EndMultiExpression) {
            //         this.closeOpenContinuousDynamic();
            //     }
            //     const instantaneousDynamicExpression: InstantaneousDynamicExpression =
            //         new InstantaneousDynamicExpression(
            //             stringTrimmed,
            //             this.soundDynamic,
            //             this.placement,
            //             this.staffNumber,
            //             currentMeasure);
            //     this.getMultiExpression.addExpression(instantaneousDynamicExpression, prefix);
            //     return true;
            // }
            // if (ContinuousDynamicExpression.isInputStringContinuousDynamic(stringTrimmed)) {
            const continuousDynamicExpression = new ContinuousDynamicExpression_1.ContinuousDynamicExpression(undefined, this.placement, this.staffNumber, currentMeasure, -1, stringTrimmed);
            const openWordContinuousDynamic = this.getMultiExpression;
            if (openWordContinuousDynamic) {
                this.closeOpenContinuousDynamic(openWordContinuousDynamic.StartingContinuousDynamic, currentMeasure, inSourceMeasureCurrentFraction);
            }
            this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
            if (this.activeInstantaneousDynamic !== undefined && this.activeInstantaneousDynamic.StaffNumber === continuousDynamicExpression.StaffNumber) {
                this.activeInstantaneousDynamic = undefined;
            }
            this.openContinuousDynamicExpressions.push(continuousDynamicExpression);
            continuousDynamicExpression.StartMultiExpression = this.getMultiExpression;
            this.getMultiExpression.addExpression(continuousDynamicExpression, prefix);
            return true;
        }
        if (MoodExpression_1.MoodExpression.isInputStringMood(stringTrimmed)) {
            const multiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
            currentMeasure.hasMoodExpressions = true;
            const moodExpression = new MoodExpression_1.MoodExpression(stringTrimmed, this.placement, this.staffNumber);
            moodExpression.fontStyle = fontStyle;
            multiExpression.addExpression(moodExpression, prefix);
            return true;
        }
        // create unknown:
        const unknownMultiExpression = this.createNewMultiExpressionIfNeeded(currentMeasure, -1);
        // check here first if there might be a tempo expression doublette:
        if (currentMeasure.TempoExpressions.length > 0) {
            for (let idx = 0, len = currentMeasure.TempoExpressions.length; idx < len; ++idx) {
                const multiTempoExpression = currentMeasure.TempoExpressions[idx];
                if (multiTempoExpression.Timestamp === this.directionTimestamp &&
                    multiTempoExpression.InstantaneousTempo !== undefined &&
                    multiTempoExpression.EntriesList.length > 0 &&
                    !this.hasDigit(stringTrimmed)) {
                    // if at other parts of the score
                    if (this.globalStaffIndex > 0) {
                        // don't add duplicate TempoExpression
                        if (multiTempoExpression.EntriesList[0].label.indexOf(stringTrimmed) >= 0) {
                            return false;
                        }
                        else {
                            break;
                        }
                    }
                }
            }
        }
        let textAlignment = TextAlignment_1.TextAlignmentEnum.CenterBottom;
        if (this.musicSheet.Rules.CompactMode) {
            textAlignment = TextAlignment_1.TextAlignmentEnum.LeftBottom;
        }
        const unknownExpression = new UnknownExpression_1.UnknownExpression(stringTrimmed, this.placement, textAlignment, this.staffNumber);
        unknownExpression.fontStyle = fontStyle;
        unknownExpression.defaultYXml = defaultYXml;
        unknownMultiExpression.addExpression(unknownExpression, prefix);
        return false;
    }
    closeOpenContinuousDynamic(openContinuousDynamicExpression, endMeasure, timestamp) {
        if (!openContinuousDynamicExpression) {
            return;
        }
        const numberXml = openContinuousDynamicExpression.NumberXml;
        openContinuousDynamicExpression.EndMultiExpression = this.createNewMultiExpressionIfNeeded(endMeasure, numberXml, timestamp);
        openContinuousDynamicExpression.StartMultiExpression.EndingContinuousDynamic = openContinuousDynamicExpression;
        this.openContinuousDynamicExpressions = this.openContinuousDynamicExpressions.filter(dyn => dyn !== openContinuousDynamicExpression);
    }
    closeOpenContinuousTempo(endTimestamp) {
        this.openContinuousTempoExpression.AbsoluteEndTimestamp = endTimestamp;
        this.openContinuousTempoExpression = undefined;
    }
    checkIfWordsNodeIsRepetitionInstruction(inputString) {
        inputString = inputString.trim().toLowerCase();
        if (inputString === "coda" ||
            inputString === "tocoda" ||
            inputString === "to coda" ||
            inputString === "fine" ||
            inputString === "d.c." ||
            inputString === "dacapo" ||
            inputString === "da capo" ||
            inputString === "d.s." ||
            inputString === "dalsegno" ||
            inputString === "dal segno" ||
            inputString === "d.c. al fine" ||
            inputString === "d.s. al fine" ||
            inputString === "d.c. al coda" ||
            inputString === "d.s. al coda") {
            return true;
        }
        return false;
    }
    hasDigit(input) {
        return /\d/.test(input);
    }
}
exports.ExpressionReader = ExpressionReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/LyricsReader.ts":
/*!*********************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/LyricsReader.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LyricsReader = void 0;
const LyricsWord_1 = __webpack_require__(/*! ../../VoiceData/Lyrics/LyricsWord */ "./src/MusicalScore/VoiceData/Lyrics/LyricsWord.ts");
const LyricsEntry_1 = __webpack_require__(/*! ../../VoiceData/Lyrics/LyricsEntry */ "./src/MusicalScore/VoiceData/Lyrics/LyricsEntry.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
class LyricsReader {
    constructor(musicSheet) {
        this.openLyricWords = {};
        this.musicSheet = musicSheet;
    }
    /**
     * This method adds a single LyricEntry to a VoiceEntry
     * @param {IXmlElement[]} lyricNodeList
     * @param {VoiceEntry} currentVoiceEntry
     */
    addLyricEntry(lyricNodeList, currentVoiceEntry) {
        var _a, _b;
        if (lyricNodeList) {
            const lyricNodeListArr = lyricNodeList;
            for (let idx = 0, len = lyricNodeListArr.length; idx < len; ++idx) {
                const lyricNode = lyricNodeListArr[idx];
                try {
                    let syllabic = "single"; // Single as default
                    if (lyricNode.element("text")) {
                        let textNode = lyricNode.element("text");
                        if (lyricNode.element("syllabic")) {
                            syllabic = lyricNode.element("syllabic").value;
                        }
                        if (textNode) {
                            let text = "";
                            const textAndElisionNodes = lyricNode.elements();
                            for (const node of textAndElisionNodes) {
                                if (node.name === "text" || node.name === "elision") {
                                    text += node.value;
                                }
                            }
                            text = text.replace("  ", " "); // filter multiple spaces from concatenating e.g. text "a " with elision " "
                            // <elision> separates Multiple syllabels on a single LyricNote
                            // "-" text indicating separated syllabel should be ignored
                            // we calculate the Dash element much later
                            if (lyricNode.element("elision") !== undefined && text === "-") {
                                const lyricNodeChildren = lyricNode.elements();
                                let elisionIndex = 0;
                                for (let i = 0; i < lyricNodeChildren.length; i++) {
                                    const child = lyricNodeChildren[i];
                                    if (child.name === "elision") {
                                        elisionIndex = i;
                                        break;
                                    }
                                }
                                let nextText = undefined;
                                let nextSyllabic = undefined;
                                // read the next nodes
                                if (elisionIndex > 0) {
                                    for (let i = elisionIndex; i < lyricNodeChildren.length; i++) {
                                        const child = lyricNodeChildren[i];
                                        if (child.name === "text") {
                                            nextText = child;
                                        }
                                        if (child.name === "syllabic") {
                                            nextSyllabic = child;
                                        }
                                    }
                                }
                                if (nextText !== undefined && nextSyllabic) {
                                    textNode = nextText;
                                    syllabic = "middle";
                                }
                            }
                            let currentLyricVerseNumber = "1";
                            if (lyricNode.attributes() !== undefined && lyricNode.attribute("number")) {
                                currentLyricVerseNumber = lyricNode.attribute("number").value;
                            }
                            let lyricsEntry = undefined;
                            if (syllabic === "single" || syllabic === "end") {
                                if (this.openLyricWords[currentLyricVerseNumber]) { // word end given or some word still open
                                    this.currentLyricWord = this.openLyricWords[currentLyricVerseNumber];
                                    const syllableNumber = this.currentLyricWord.Syllables.length;
                                    lyricsEntry = new LyricsEntry_1.LyricsEntry(text, currentLyricVerseNumber, this.currentLyricWord, currentVoiceEntry, syllableNumber);
                                    this.currentLyricWord.Syllables.push(lyricsEntry);
                                    delete this.openLyricWords[currentLyricVerseNumber];
                                    this.currentLyricWord = undefined;
                                }
                                else { // single syllable given or end given while no word has been started
                                    lyricsEntry = new LyricsEntry_1.LyricsEntry(text, currentLyricVerseNumber, undefined, currentVoiceEntry);
                                }
                                lyricsEntry.extend = lyricNode.element("extend") !== undefined;
                            }
                            else if (syllabic === "begin") { // first finishing, if a word already is open (can only happen, when wrongly given)
                                if (this.openLyricWords[currentLyricVerseNumber]) {
                                    delete this.openLyricWords[currentLyricVerseNumber];
                                    this.currentLyricWord = undefined;
                                }
                                this.currentLyricWord = new LyricsWord_1.LyricWord();
                                this.openLyricWords[currentLyricVerseNumber] = this.currentLyricWord;
                                lyricsEntry = new LyricsEntry_1.LyricsEntry(text, currentLyricVerseNumber, this.currentLyricWord, currentVoiceEntry, 0);
                                this.currentLyricWord.Syllables.push(lyricsEntry);
                            }
                            else if (syllabic === "middle") {
                                if (this.openLyricWords[currentLyricVerseNumber]) {
                                    this.currentLyricWord = this.openLyricWords[currentLyricVerseNumber];
                                    const syllableNumber = this.currentLyricWord.Syllables.length;
                                    lyricsEntry = new LyricsEntry_1.LyricsEntry(text, currentLyricVerseNumber, this.currentLyricWord, currentVoiceEntry, syllableNumber);
                                    this.currentLyricWord.Syllables.push(lyricsEntry);
                                }
                                else {
                                    // in case the wrong syllabel information is given, create a single Entry and add it to currentVoiceEntry
                                    lyricsEntry = new LyricsEntry_1.LyricsEntry(text, currentLyricVerseNumber, undefined, currentVoiceEntry);
                                }
                            }
                            // add each LyricEntry to currentVoiceEntry
                            if (lyricsEntry) {
                                // only add the lyric entry if not another entry has already been given:
                                if (!currentVoiceEntry.LyricsEntries[currentLyricVerseNumber]) {
                                    currentVoiceEntry.LyricsEntries.setValue(currentLyricVerseNumber, lyricsEntry);
                                    if ((_b = (_a = currentVoiceEntry.ParentSourceStaffEntry) === null || _a === void 0 ? void 0 : _a.VerticalContainerParent) === null || _b === void 0 ? void 0 : _b.ParentMeasure) {
                                        currentVoiceEntry.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure.hasLyrics = true;
                                        // currentVoiceEntry.ParentSourceStaffEntry.ParentStaff.hasLyrics = true; // TODO enable, though rarely lyrics on rests
                                    }
                                }
                                // save in currentInstrument the verseNumber (only once)
                                if (!currentVoiceEntry.ParentVoice.Parent.LyricVersesNumbers.includes(currentLyricVerseNumber)) {
                                    currentVoiceEntry.ParentVoice.Parent.LyricVersesNumbers.push(currentLyricVerseNumber);
                                }
                            }
                        }
                    }
                }
                catch (err) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/LyricError", "Error while reading lyric entry.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    continue;
                }
            }
        }
    }
}
exports.LyricsReader = LyricsReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionCalculator.ts":
/*!*****************************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionCalculator.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RepetitionCalculator = void 0;
const RepetitionInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/RepetitionInstruction */ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts");
const RepetitionInstruction_2 = __webpack_require__(/*! ../../VoiceData/Instructions/RepetitionInstruction */ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts");
const Exceptions_1 = __webpack_require__(/*! ../../Exceptions */ "./src/MusicalScore/Exceptions.ts");
class RepetitionCalculator {
    constructor() {
        this.repetitionInstructions = [];
    }
    /**
     * Is called when all repetition symbols have been read from xml.
     * Creates the repetition instructions and adds them to the corresponding measure.
     * Creates the logical repetition objects for iteration and playback.
     * @param musicSheet
     * @param repetitionInstructions
     */
    calculateRepetitions(musicSheet, repetitionInstructions) {
        this.musicSheet = musicSheet;
        this.repetitionInstructions = repetitionInstructions;
        const sourceMeasures = this.musicSheet.SourceMeasures;
        for (let idx = 0, len = this.repetitionInstructions.length; idx < len; ++idx) {
            const instruction = this.repetitionInstructions[idx];
            this.currentMeasureIndex = instruction.measureIndex;
            this.currentMeasure = sourceMeasures[this.currentMeasureIndex];
            this.handleRepetitionInstructions(instruction);
        }
        // if there are more than one instruction at measure begin or end,
        // sort them according to the nesting of the repetitions:
        for (let idx = 0, len = this.musicSheet.SourceMeasures.length; idx < len; ++idx) {
            const measure = this.musicSheet.SourceMeasures[idx];
            if (measure.FirstRepetitionInstructions.length > 1) {
                measure.FirstRepetitionInstructions.sort(RepetitionInstruction_2.RepetitionInstructionComparer.Compare);
            }
            if (measure.LastRepetitionInstructions.length > 1) {
                measure.LastRepetitionInstructions.sort(RepetitionInstruction_2.RepetitionInstructionComparer.Compare);
            }
        }
    }
    handleRepetitionInstructions(currentRepetitionInstruction) {
        if (!this.currentMeasure) {
            return false;
        }
        switch (currentRepetitionInstruction.type) {
            case RepetitionInstruction_1.RepetitionInstructionEnum.StartLine:
                this.currentMeasure.FirstRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.BackJumpLine:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.Ending:
                // set ending start or end
                if (currentRepetitionInstruction.alignment === RepetitionInstruction_1.AlignmentType.Begin) { // ending start
                    this.currentMeasure.FirstRepetitionInstructions.push(currentRepetitionInstruction);
                }
                else { // ending end
                    for (let idx = 0, len = currentRepetitionInstruction.endingIndices.length; idx < len; ++idx) {
                        this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                    }
                }
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.Segno:
                this.currentMeasure.FirstRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.Fine:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.ToCoda:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.Coda:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DaCapo:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegno:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlFine:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlFine:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlCoda:
                this.currentMeasure.LastRepetitionInstructions.push(currentRepetitionInstruction);
                break;
            case RepetitionInstruction_1.RepetitionInstructionEnum.None:
                break;
            default:
                throw new Exceptions_1.ArgumentOutOfRangeException("currentRepetitionInstruction");
        }
        return true;
    }
}
exports.RepetitionCalculator = RepetitionCalculator;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionInstructionReader.ts":
/*!************************************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/RepetitionInstructionReader.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RepetitionInstructionReader = void 0;
const RepetitionInstruction_1 = __webpack_require__(/*! ../../VoiceData/Instructions/RepetitionInstruction */ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts");
const RepetitionInstruction_2 = __webpack_require__(/*! ../../VoiceData/Instructions/RepetitionInstruction */ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts");
const StringUtil_1 = __webpack_require__(/*! ../../../Common/Strings/StringUtil */ "./src/Common/Strings/StringUtil.ts");
class RepetitionInstructionReader {
    set MusicSheet(value) {
        this.musicSheet = value;
        this.xmlMeasureList = new Array(this.musicSheet.Instruments.length);
        this.repetitionInstructions = [];
    }
    /**
     * is called when starting reading an xml measure
     * @param measure
     * @param currentMeasureIndex
     */
    prepareReadingMeasure(measure, currentMeasureIndex) {
        this.currentMeasureIndex = currentMeasureIndex;
    }
    handleLineRepetitionInstructions(barlineNode) {
        let pieceEndingDetected = false;
        if (barlineNode.elements().length > 0) {
            let location = "";
            let hasRepeat = false;
            let direction = "";
            let type = "";
            let style = "";
            const endingIndices = [];
            // read barline style
            const styleNode = barlineNode.element("bar-style");
            // if location is ommited in Xml, right is implied (from documentation)
            if (styleNode) {
                style = styleNode.value;
            }
            if (barlineNode.attributes().length > 0 && barlineNode.attribute("location")) {
                location = barlineNode.attribute("location").value;
            }
            else {
                location = "right";
            }
            const barlineNodeElements = barlineNode.elements();
            // read repeat- or ending line information
            for (let idx = 0, len = barlineNodeElements.length; idx < len; ++idx) {
                const childNode = barlineNodeElements[idx];
                if ("repeat" === childNode.name && childNode.hasAttributes) {
                    hasRepeat = true;
                    direction = childNode.attribute("direction").value;
                }
                else if ("ending" === childNode.name && childNode.hasAttributes &&
                    childNode.attribute("type") !== undefined && childNode.attribute("number")) {
                    type = childNode.attribute("type").value;
                    const num = childNode.attribute("number").value;
                    // Parse the given ending indices:
                    // handle cases like: "1, 2" or "1 + 2" or even "1 - 3, 6"
                    const separatedEndingIndices = num.split("[,+]");
                    for (let idx2 = 0, len2 = separatedEndingIndices.length; idx2 < len2; ++idx2) {
                        const separatedEndingIndex = separatedEndingIndices[idx2];
                        const indices = separatedEndingIndex.match("[0-9]");
                        // check if possibly something like "1-3" is given..
                        if (separatedEndingIndex.search("-") !== -1 && indices.length === 2) {
                            const startIndex = parseInt(indices[0], 10);
                            const endIndex = parseInt(indices[1], 10);
                            for (let index = startIndex; index <= endIndex; index++) {
                                endingIndices.push(index);
                            }
                        }
                        else {
                            for (let idx3 = 0, len3 = indices.length; idx3 < len3; ++idx3) {
                                const index = indices[idx3];
                                endingIndices.push(parseInt(index, 10));
                            }
                        }
                    }
                }
            }
            // reset measure counter if not lastMeasure
            if (style === "light-heavy" && endingIndices.length === 0 && !hasRepeat) {
                pieceEndingDetected = true;
            }
            if (hasRepeat || endingIndices.length > 0) {
                if (location === "left") {
                    if (type === "start") {
                        const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(this.currentMeasureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Ending, RepetitionInstruction_1.AlignmentType.Begin, undefined, endingIndices);
                        this.addInstruction(this.repetitionInstructions, newInstruction);
                    }
                    if (direction === "forward") {
                        // start new Repetition
                        const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(this.currentMeasureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.StartLine);
                        this.addInstruction(this.repetitionInstructions, newInstruction);
                    }
                }
                else { // location right
                    if (type === "stop") {
                        const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(this.currentMeasureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Ending, RepetitionInstruction_1.AlignmentType.End, undefined, endingIndices);
                        this.addInstruction(this.repetitionInstructions, newInstruction);
                    }
                    if (direction === "backward") {
                        const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(this.currentMeasureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.BackJumpLine);
                        this.addInstruction(this.repetitionInstructions, newInstruction);
                    }
                }
            }
        }
        return pieceEndingDetected;
    }
    handleRepetitionInstructionsFromWordsOrSymbols(directionTypeNode, relativeMeasurePosition) {
        const wordsNode = directionTypeNode.element("words");
        const measureIndex = this.currentMeasureIndex;
        if (wordsNode) {
            const dsRegEx = "d\\s?\\.s\\."; // Input for new RegExp(). TS eliminates the first \
            // must Trim string and ToLower before compare
            const innerText = wordsNode.value.trim().toLowerCase();
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, dsRegEx + " al fine", true)) {
                // @correctness i don't think we should manipulate the measure index by relative position [ssch]
                //   it's clearly assigned a measure in the xml
                //   this has misfired in the past, see test_staverepetitions_coda_etc_positioning.musicxml
                //   there, it put the 'To Coda' in measure 1, same as the 'Signo', which was not correct.
                // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlFine);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            const dcRegEx = "d\\.\\s?c\\.";
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, dcRegEx + " al coda", true)) {
                // if (relativeMeasurePosition < 0.5) {
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlCoda);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, dcRegEx + " al fine", true)) {
                // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlFine);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, dcRegEx + " al coda", true)) {
                // if (relativeMeasurePosition < 0.5) {
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DaCapoAlCoda);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, dcRegEx) ||
                StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "da\\s?capo", true)) {
                // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DaCapo);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, dsRegEx, true) ||
                StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "dal\\s?segno", true)) {
                // if (relativeMeasurePosition < 0.5 && this.currentMeasureIndex < this.xmlMeasureList[0].length - 1) { // not in last measure
                //   measureIndex--;
                // }
                let newInstruction;
                if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "al\\s?coda", true)) {
                    newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda);
                }
                else {
                    newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.DalSegno);
                }
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "to\\s?coda", true) ||
                StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "a (la )?coda", true)) {
                // if (relativeMeasurePosition < 0.5) {
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.ToCoda);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "fine", true)) {
                // if (relativeMeasurePosition < 0.5) {
                //   measureIndex--;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Fine);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "coda", true)) {
                // if (relativeMeasurePosition > 0.5) {
                //   measureIndex++;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Coda);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
            if (StringUtil_1.StringUtil.StringContainsSeparatedWord(innerText, "segno", true)) {
                // if (relativeMeasurePosition > 0.5) {
                //   measureIndex++;
                // }
                const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Segno);
                this.addInstruction(this.repetitionInstructions, newInstruction);
                return true;
            }
        }
        else if (directionTypeNode.element("segno")) {
            // if (relativeMeasurePosition > 0.5) {
            //   measureIndex++;
            // }
            const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Segno);
            this.addInstruction(this.repetitionInstructions, newInstruction);
            return true;
        }
        else if (directionTypeNode.element("coda")) {
            // if (relativeMeasurePosition > 0.5) {
            //   measureIndex++;
            // }
            const newInstruction = new RepetitionInstruction_1.RepetitionInstruction(measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.Coda);
            this.addInstruction(this.repetitionInstructions, newInstruction);
            return true;
        }
        return false;
    }
    removeRedundantInstructions() {
        let segnoCount = 0;
        let codaCount = 0;
        //const fineCount: number = 0;
        let toCodaCount = 0;
        let dalSegnaCount = 0;
        for (let index = 0; index < this.repetitionInstructions.length; index++) {
            const instruction = this.repetitionInstructions[index];
            switch (instruction.type) {
                case RepetitionInstruction_1.RepetitionInstructionEnum.Coda:
                    if (toCodaCount > 0) {
                        if (this.findInstructionInPreviousMeasure(index, instruction.measureIndex, RepetitionInstruction_1.RepetitionInstructionEnum.ToCoda)) {
                            instruction.type = RepetitionInstruction_1.RepetitionInstructionEnum.None;
                        }
                    }
                    // TODO this prevents a piece consisting of a single coda sign showing coda (will show To Coda)
                    // if (codaCount === 0 && toCodaCount === 0) {
                    //   instruction.type = RepetitionInstructionEnum.ToCoda;
                    //   instruction.alignment = AlignmentType.End;
                    //   instruction.measureIndex--;
                    // }
                    break;
                case RepetitionInstruction_1.RepetitionInstructionEnum.Segno:
                    if (segnoCount - dalSegnaCount > 0) { // two segnos in a row
                        let foundInstruction = false;
                        for (let idx = 0, len = this.repetitionInstructions.length; idx < len; ++idx) {
                            const instr = this.repetitionInstructions[idx];
                            if (instruction.measureIndex - instr.measureIndex === 1) {
                                switch (instr.type) {
                                    case RepetitionInstruction_1.RepetitionInstructionEnum.BackJumpLine:
                                        if (toCodaCount - codaCount > 0) { // open toCoda existing
                                            instr.type = RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda;
                                        }
                                        else {
                                            instr.type = RepetitionInstruction_1.RepetitionInstructionEnum.DalSegno;
                                        }
                                        instruction.type = RepetitionInstruction_1.RepetitionInstructionEnum.None;
                                        foundInstruction = true;
                                        break;
                                    case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegno:
                                    case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlFine:
                                    case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda:
                                        instruction.type = RepetitionInstruction_1.RepetitionInstructionEnum.None;
                                        foundInstruction = true;
                                        break;
                                    default:
                                        break;
                                }
                            }
                            if (foundInstruction) {
                                break;
                            }
                        }
                        if (foundInstruction) {
                            break;
                        }
                        // convert to dal segno instruction:
                        if (toCodaCount - codaCount > 0) { // open toCoda existing
                            instruction.type = RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda;
                        }
                        else {
                            instruction.type = RepetitionInstruction_1.RepetitionInstructionEnum.DalSegno;
                        }
                        instruction.alignment = RepetitionInstruction_1.AlignmentType.End;
                        instruction.measureIndex--;
                    }
                    break;
                default:
                    break;
            }
            // check if this  instruction already exists or is otherwise redundant:
            if (this.backwardSearchForPreviousIdenticalInstruction(index, instruction) || instruction.type === RepetitionInstruction_1.RepetitionInstructionEnum.None) {
                this.repetitionInstructions.splice(index, 1);
                index--;
            }
            else {
                switch (instruction.type) {
                    case RepetitionInstruction_1.RepetitionInstructionEnum.Fine:
                        //fineCount++;
                        break;
                    case RepetitionInstruction_1.RepetitionInstructionEnum.ToCoda:
                        toCodaCount++;
                        break;
                    case RepetitionInstruction_1.RepetitionInstructionEnum.Coda:
                        codaCount++;
                        break;
                    case RepetitionInstruction_1.RepetitionInstructionEnum.Segno:
                        segnoCount++;
                        break;
                    case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlFine:
                    case RepetitionInstruction_1.RepetitionInstructionEnum.DalSegnoAlCoda:
                        dalSegnaCount++;
                        break;
                    default:
                        break;
                }
            }
        }
        this.repetitionInstructions.sort(RepetitionInstruction_2.RepetitionInstructionComparer.Compare);
    }
    findInstructionInPreviousMeasure(currentInstructionIndex, currentMeasureIndex, searchedType) {
        for (let index = currentInstructionIndex - 1; index >= 0; index--) {
            const instruction = this.repetitionInstructions[index];
            if (currentMeasureIndex - instruction.measureIndex === 1 && instruction.type === searchedType) {
                return true;
            }
        }
        return false;
    }
    backwardSearchForPreviousIdenticalInstruction(currentInstructionIndex, currentInstruction) {
        for (let index = currentInstructionIndex - 1; index >= 0; index--) {
            const instruction = this.repetitionInstructions[index];
            if (instruction.equals(currentInstruction)) {
                return true;
            }
        }
        return false;
    }
    addInstruction(currentRepetitionInstructions, newInstruction) {
        let addInstruction = true;
        for (let idx = 0, len = currentRepetitionInstructions.length; idx < len; ++idx) {
            const repetitionInstruction = currentRepetitionInstructions[idx];
            if (newInstruction.equals(repetitionInstruction)) {
                addInstruction = false;
                break;
            }
        }
        if (addInstruction) {
            currentRepetitionInstructions.push(newInstruction);
        }
    }
}
exports.RepetitionInstructionReader = RepetitionInstructionReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/MusicSymbolModules/SlurReader.ts":
/*!*******************************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/MusicSymbolModules/SlurReader.ts ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SlurReader = void 0;
const Slur_1 = __webpack_require__(/*! ../../VoiceData/Expressions/ContinuousExpressions/Slur */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Slur.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const ITextTranslation_1 = __webpack_require__(/*! ../../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const Expressions_1 = __webpack_require__(/*! ../../VoiceData/Expressions */ "./src/MusicalScore/VoiceData/Expressions/index.ts");
const Glissando_1 = __webpack_require__(/*! ../../VoiceData/Glissando */ "./src/MusicalScore/VoiceData/Glissando.ts");
class SlurReader {
    constructor(musicSheet) {
        this.openSlurDict = {};
        this.musicSheet = musicSheet;
    }
    addSlur(slurNodes, currentNote) {
        try {
            if (slurNodes) {
                for (const slurNode of slurNodes) {
                    if (slurNode.attributes().length > 0) {
                        const type = slurNode.attribute("type").value;
                        let slurNumber = 1;
                        try {
                            const slurNumberAttribute = slurNode.attribute("number");
                            if (slurNumberAttribute) {
                                slurNumber = parseInt(slurNode.attribute("number").value, 10);
                            }
                        }
                        catch (ex) {
                            loglevel_1.default.debug("VoiceGenerator.addSlur number: ", ex);
                        }
                        let slurPlacementXml = Expressions_1.PlacementEnum.NotYetDefined;
                        const placementAttr = slurNode.attribute("placement");
                        if (placementAttr && placementAttr.value) {
                            if (placementAttr.value === "above") {
                                slurPlacementXml = Expressions_1.PlacementEnum.Above;
                            }
                            else if (placementAttr.value === "below") {
                                slurPlacementXml = Expressions_1.PlacementEnum.Below;
                            }
                        }
                        const orientationAttr = slurNode.attribute("orientation"); // alternative for placement, used by Sibelius
                        if (orientationAttr && orientationAttr.value) {
                            if (orientationAttr.value === "over") {
                                slurPlacementXml = Expressions_1.PlacementEnum.Above;
                            }
                            else if (orientationAttr.value === "under") {
                                slurPlacementXml = Expressions_1.PlacementEnum.Below;
                            }
                        }
                        if (type === "start") {
                            let slur = this.openSlurDict[slurNumber];
                            if (!slur) {
                                slur = new Slur_1.Slur();
                                this.openSlurDict[slurNumber] = slur;
                            }
                            slur.StartNote = currentNote;
                            slur.PlacementXml = slurPlacementXml;
                        }
                        else if (type === "stop") {
                            const slur = this.openSlurDict[slurNumber];
                            if (slur) {
                                const nodeName = slurNode.name;
                                if (nodeName === "slide" || nodeName === "glissando") {
                                    // TODO for now, we abuse the SlurReader to also process slides and glissandi, to avoid a lot of duplicate code.
                                    //   though we might want to separate the code a bit, at least use its own openGlissDict instead of openSlurDict.
                                    //   also see variable glissElements later on
                                    const startNote = slur.StartNote;
                                    const newGlissando = new Glissando_1.Glissando(startNote);
                                    newGlissando.AddNote(currentNote);
                                    newGlissando.EndNote = currentNote;
                                    currentNote.NoteGlissando = newGlissando;
                                    // TODO use its own dict, openSlideDict? Can this cause problems if slur and slide have the same number?
                                    delete this.openSlurDict[slurNumber];
                                }
                                else {
                                    slur.EndNote = currentNote;
                                    // check if not already a slur with same notes has been given:
                                    if (!currentNote.isDuplicateSlur(slur)) {
                                        // if not, link slur to notes:
                                        currentNote.NoteSlurs.push(slur);
                                        const slurStartNote = slur.StartNote;
                                        slurStartNote.NoteSlurs.push(slur);
                                    }
                                    delete this.openSlurDict[slurNumber];
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (err) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/SlurError", "Error while reading slur.");
            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
        }
    }
}
exports.SlurReader = SlurReader;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/ReaderPluginManager.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/ReaderPluginManager.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReaderPluginManager = void 0;
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class ReaderPluginManager {
    constructor() {
        this.voiceMeasureReadPlugins = [];
    }
    addVoiceMeasureReadPlugin(plugin) {
        this.voiceMeasureReadPlugins.push(plugin);
    }
    processVoiceMeasureReadPlugins(measureVoiceEntries, activeKey, currentRhythm) {
        for (const plugin of this.voiceMeasureReadPlugins) {
            try {
                plugin.measureReadCalculations(measureVoiceEntries, activeKey, currentRhythm);
            }
            catch (ex) {
                loglevel_1.default.info("VoiceGenerator.addSingleNote: ", ex);
            }
        }
    }
}
exports.ReaderPluginManager = ReaderPluginManager;


/***/ }),

/***/ "./src/MusicalScore/ScoreIO/VoiceGenerator.ts":
/*!****************************************************!*\
  !*** ./src/MusicalScore/ScoreIO/VoiceGenerator.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VoiceGenerator = void 0;
const LinkedVoice_1 = __webpack_require__(/*! ../VoiceData/LinkedVoice */ "./src/MusicalScore/VoiceData/LinkedVoice.ts");
const Voice_1 = __webpack_require__(/*! ../VoiceData/Voice */ "./src/MusicalScore/VoiceData/Voice.ts");
const VoiceEntry_1 = __webpack_require__(/*! ../VoiceData/VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const Note_1 = __webpack_require__(/*! ../VoiceData/Note */ "./src/MusicalScore/VoiceData/Note.ts");
const SourceStaffEntry_1 = __webpack_require__(/*! ../VoiceData/SourceStaffEntry */ "./src/MusicalScore/VoiceData/SourceStaffEntry.ts");
const Beam_1 = __webpack_require__(/*! ../VoiceData/Beam */ "./src/MusicalScore/VoiceData/Beam.ts");
const Tie_1 = __webpack_require__(/*! ../VoiceData/Tie */ "./src/MusicalScore/VoiceData/Tie.ts");
const Enums_1 = __webpack_require__(/*! ../../Common/Enums/ */ "./src/Common/Enums/index.ts");
const Tuplet_1 = __webpack_require__(/*! ../VoiceData/Tuplet */ "./src/MusicalScore/VoiceData/Tuplet.ts");
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const LyricsReader_1 = __webpack_require__(/*! ../ScoreIO/MusicSymbolModules/LyricsReader */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/LyricsReader.ts");
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Pitch_2 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const StaffEntryLink_1 = __webpack_require__(/*! ../VoiceData/StaffEntryLink */ "./src/MusicalScore/VoiceData/StaffEntryLink.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const Pitch_3 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const CollectionUtil_1 = __webpack_require__(/*! ../../Util/CollectionUtil */ "./src/Util/CollectionUtil.ts");
const ArticulationReader_1 = __webpack_require__(/*! ./MusicSymbolModules/ArticulationReader */ "./src/MusicalScore/ScoreIO/MusicSymbolModules/ArticulationReader.ts");
const Notehead_1 = __webpack_require__(/*! ../VoiceData/Notehead */ "./src/MusicalScore/VoiceData/Notehead.ts");
const Arpeggio_1 = __webpack_require__(/*! ../VoiceData/Arpeggio */ "./src/MusicalScore/VoiceData/Arpeggio.ts");
const NoteType_1 = __webpack_require__(/*! ../VoiceData/NoteType */ "./src/MusicalScore/VoiceData/NoteType.ts");
const TabNote_1 = __webpack_require__(/*! ../VoiceData/TabNote */ "./src/MusicalScore/VoiceData/TabNote.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
class VoiceGenerator {
    constructor(pluginManager, staff, voiceId, slurReader, mainVoice = undefined) {
        // private lastBeamTag: string = "";
        this.openBeams = []; // works like a stack, with push and pop
        this.beamNumberOffset = 0;
        this.currentOctaveShift = 0;
        this.tupletDict = {};
        this.openTupletNumber = 0;
        this.staff = staff;
        this.instrument = staff.ParentInstrument;
        this.musicSheet = this.instrument.GetMusicSheet;
        this.slurReader = slurReader;
        this.pluginManager = pluginManager;
        if (mainVoice) {
            this.voice = new LinkedVoice_1.LinkedVoice(this.instrument, voiceId, mainVoice);
        }
        else {
            this.voice = new Voice_1.Voice(this.instrument, voiceId);
        }
        this.instrument.Voices.push(this.voice); // apparently necessary for cursor.next(), for "cursor with hidden instrument" test
        this.staff.Voices.push(this.voice);
        this.lyricsReader = new LyricsReader_1.LyricsReader(this.musicSheet);
        this.articulationReader = new ArticulationReader_1.ArticulationReader(this.musicSheet.Rules);
    }
    get openTieDict() { return this.staff.openTieDict; }
    get GetVoice() {
        return this.voice;
    }
    get OctaveShift() {
        return this.currentOctaveShift;
    }
    set OctaveShift(value) {
        this.currentOctaveShift = value;
    }
    /**
     * Create new [[VoiceEntry]], add it to given [[SourceStaffEntry]] and if given so, to [[Voice]].
     * @param musicTimestamp
     * @param parentStaffEntry
     * @param addToVoice
     * @param isGrace States whether the new VoiceEntry (only) has grace notes
     */
    createVoiceEntry(musicTimestamp, parentStaffEntry, addToVoice, isGrace = false, graceNoteSlash = false, graceSlur = false) {
        this.currentVoiceEntry = new VoiceEntry_1.VoiceEntry(musicTimestamp.clone(), this.voice, parentStaffEntry, isGrace, graceNoteSlash, graceSlur);
        if (addToVoice) {
            this.voice.VoiceEntries.push(this.currentVoiceEntry);
        }
    }
    /**
     * Create [[Note]]s and handle Lyrics, Articulations, Beams, Ties, Slurs, Tuplets.
     * @param noteNode
     * @param noteDuration
     * @param divisions
     * @param restNote
     * @param parentStaffEntry
     * @param parentMeasure
     * @param measureStartAbsoluteTimestamp
     * @param maxTieNoteFraction
     * @param chord
     * @param octavePlusOne Software like Guitar Pro gives one octave too low, so we need to add one
     * @param printObject whether the note should be rendered (true) or invisible (false)
     * @returns {Note}
     */
    read(noteNode, noteDuration, typeDuration, noteTypeXml, normalNotes, restNote, parentStaffEntry, parentMeasure, measureStartAbsoluteTimestamp, maxTieNoteFraction, chord, octavePlusOne, printObject, isCueNote, isGraceNote, stemDirectionXml, tremoloInfo, stemColorXml, noteheadColorXml, vibratoStrokes, dotsXml) {
        this.currentStaffEntry = parentStaffEntry;
        this.currentMeasure = parentMeasure;
        //log.debug("read called:", restNote);
        try {
            this.currentNote = restNote
                ? this.addRestNote(noteNode.element("rest"), noteDuration, noteTypeXml, typeDuration, normalNotes, printObject, isCueNote, noteheadColorXml)
                : this.addSingleNote(noteNode, noteDuration, noteTypeXml, typeDuration, normalNotes, chord, octavePlusOne, printObject, isCueNote, isGraceNote, stemDirectionXml, tremoloInfo, stemColorXml, noteheadColorXml, vibratoStrokes);
            this.currentNote.DotsXml = dotsXml;
            // read lyrics
            const lyricElements = noteNode.elements("lyric");
            if (this.lyricsReader !== undefined && lyricElements) {
                this.lyricsReader.addLyricEntry(lyricElements, this.currentVoiceEntry);
                this.voice.Parent.HasLyrics = true;
            }
            let hasTupletCommand = false;
            const notationNode = noteNode.element("notations");
            if (notationNode) {
                // read articulations
                if (this.articulationReader) {
                    this.readArticulations(notationNode, this.currentVoiceEntry, this.currentNote);
                }
                // read slurs
                const slurElements = notationNode.elements("slur");
                const slideElements = notationNode.elements("slide");
                const glissElements = notationNode.elements("glissando");
                if (this.slurReader !== undefined &&
                    (slurElements.length > 0 || slideElements.length > 0) &&
                    !this.currentNote.ParentVoiceEntry.IsGrace) {
                    this.slurReader.addSlur(slurElements, this.currentNote);
                    if (slideElements.length > 0) {
                        this.slurReader.addSlur(slideElements, this.currentNote);
                    }
                    if (glissElements.length > 0) {
                        this.slurReader.addSlur(glissElements, this.currentNote);
                    }
                }
                // read Tuplets
                const tupletElements = notationNode.elements("tuplet");
                if (tupletElements.length > 0) {
                    this.openTupletNumber = this.addTuplet(noteNode, tupletElements);
                    hasTupletCommand = true;
                }
                // check for Arpeggios
                const arpeggioNode = notationNode.element("arpeggiate");
                if (arpeggioNode !== undefined) {
                    let currentArpeggio;
                    if (this.currentVoiceEntry.Arpeggio) { // add note to existing Arpeggio
                        currentArpeggio = this.currentVoiceEntry.Arpeggio;
                    }
                    else { // create new Arpeggio
                        let arpeggioAlreadyExists = false;
                        for (const voiceEntry of this.currentStaffEntry.VoiceEntries) {
                            if (voiceEntry.Arpeggio) {
                                arpeggioAlreadyExists = true;
                                currentArpeggio = voiceEntry.Arpeggio;
                                // TODO handle multiple arpeggios across multiple voices at same timestamp
                                // this.currentVoiceEntry.Arpeggio = currentArpeggio; // register the arpeggio in the current voice entry as well?
                                //   but then we duplicate information, and may have to take care not to render it multiple times
                                // we already have an arpeggio in another voice, at the current timestamp. add the notes there.
                                break;
                            }
                        }
                        if (!arpeggioAlreadyExists) {
                            let arpeggioType = Arpeggio_1.ArpeggioType.ARPEGGIO_DIRECTIONLESS;
                            const directionAttr = arpeggioNode.attribute("direction");
                            if (directionAttr) {
                                switch (directionAttr.value) {
                                    case "up":
                                        arpeggioType = Arpeggio_1.ArpeggioType.ROLL_UP;
                                        break;
                                    case "down":
                                        arpeggioType = Arpeggio_1.ArpeggioType.ROLL_DOWN;
                                        break;
                                    default:
                                        arpeggioType = Arpeggio_1.ArpeggioType.ARPEGGIO_DIRECTIONLESS;
                                }
                            }
                            currentArpeggio = new Arpeggio_1.Arpeggio(this.currentVoiceEntry, arpeggioType);
                            this.currentVoiceEntry.Arpeggio = currentArpeggio;
                        }
                    }
                    currentArpeggio.addNote(this.currentNote);
                }
                // check for Ties - must be the last check
                const tiedNodeList = notationNode.elements("tied");
                if (tiedNodeList.length > 0) {
                    this.addTie(tiedNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, Enums_1.TieTypes.SIMPLE);
                }
                //"check for slides, they are the same as Ties but with a different connection"
                //  correction: slide can have a different end note (e.g. guitar) -> should be handled like slur rather than tie
                // const slideNodeList: IXmlElement[] = notationNode.elements("slide");
                // if (slideNodeList.length > 0) {
                //   this.addTie(slideNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, TieTypes.SLIDE);
                // }
                //check for guitar specific symbols:
                const technicalNode = notationNode.element("technical");
                if (technicalNode) {
                    const hammerNodeList = technicalNode.elements("hammer-on");
                    if (hammerNodeList.length > 0) {
                        this.addTie(hammerNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, Enums_1.TieTypes.HAMMERON);
                    }
                    const pulloffNodeList = technicalNode.elements("pull-off");
                    if (pulloffNodeList.length > 0) {
                        this.addTie(pulloffNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, Enums_1.TieTypes.PULLOFF);
                    }
                }
                // remove open ties, if there is already a gap between the last tie note and now.
                // TODO this deletes valid ties, see #1097
                // const openTieDict: { [_: number]: Tie } = this.openTieDict;
                // for (const key in openTieDict) {
                //   if (openTieDict.hasOwnProperty(key)) {
                //     const tie: Tie = openTieDict[key];
                //     if (Fraction.plus(tie.StartNote.ParentStaffEntry.Timestamp, tie.Duration).lt(this.currentStaffEntry.Timestamp)) {
                //       delete openTieDict[key];
                //     }
                //   }
                // }
            }
            // time-modification yields tuplet in currentNote
            // mustn't execute method, if this is the Note where the Tuplet has been created
            if (noteNode.element("time-modification") !== undefined && !hasTupletCommand) {
                this.handleTimeModificationNode(noteNode);
            }
        }
        catch (err) {
            loglevel_1.default.warn(err);
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NoteError", "Ignored erroneous Note.");
            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
            this.musicSheet.SheetErrors.pushMeasureError(err);
        }
        return this.currentNote;
    }
    /**
     * Create a new [[StaffEntryLink]] and sets the currenstStaffEntry accordingly.
     * @param index
     * @param currentStaff
     * @param currentStaffEntry
     * @param currentMeasure
     * @returns {SourceStaffEntry}
     */
    checkForStaffEntryLink(index, currentStaff, currentStaffEntry, currentMeasure) {
        const staffEntryLink = new StaffEntryLink_1.StaffEntryLink(this.currentVoiceEntry);
        staffEntryLink.LinkStaffEntries.push(currentStaffEntry);
        currentStaffEntry.Link = staffEntryLink;
        const linkMusicTimestamp = this.currentVoiceEntry.Timestamp.clone();
        const verticalSourceStaffEntryContainer = currentMeasure.getVerticalContainerByTimestamp(linkMusicTimestamp);
        currentStaffEntry = verticalSourceStaffEntryContainer.StaffEntries[index];
        if (!currentStaffEntry) {
            currentStaffEntry = new SourceStaffEntry_1.SourceStaffEntry(verticalSourceStaffEntryContainer, currentStaff);
            verticalSourceStaffEntryContainer.StaffEntries[index] = currentStaffEntry;
        }
        currentStaffEntry.VoiceEntries.push(this.currentVoiceEntry);
        staffEntryLink.LinkStaffEntries.push(currentStaffEntry);
        currentStaffEntry.Link = staffEntryLink;
        return currentStaffEntry;
    }
    checkForOpenBeam() {
        if (this.openBeams.length > 0 && this.currentNote) {
            this.handleOpenBeam();
        }
    }
    checkOpenTies() {
        const openTieDict = this.openTieDict;
        for (const key in openTieDict) {
            if (openTieDict.hasOwnProperty(key)) {
                const tie = openTieDict[key];
                if (Fraction_1.Fraction.plus(tie.StartNote.ParentStaffEntry.Timestamp, tie.Duration)
                    .lt(tie.StartNote.SourceMeasure.Duration)) {
                    delete openTieDict[key];
                }
            }
        }
    }
    hasVoiceEntry() {
        return this.currentVoiceEntry !== undefined;
    }
    readArticulations(notationNode, currentVoiceEntry, currentNote) {
        const articNode = notationNode.element("articulations");
        if (articNode) {
            this.articulationReader.addArticulationExpression(articNode, currentVoiceEntry);
        }
        const fermaNode = notationNode.element("fermata");
        if (fermaNode) {
            this.articulationReader.addFermata(fermaNode, currentVoiceEntry);
        }
        const tecNode = notationNode.element("technical");
        if (tecNode) {
            this.articulationReader.addTechnicalArticulations(tecNode, currentVoiceEntry, currentNote);
        }
        const ornaNode = notationNode.element("ornaments");
        if (ornaNode) {
            this.articulationReader.addOrnament(ornaNode, currentVoiceEntry);
            // const tremoloNode: IXmlElement = ornaNode.element("tremolo");
            // tremolo should be and is added per note, not per VoiceEntry. see addSingleNote()
        }
    }
    /**
     * Create a new [[Note]] and adds it to the currentVoiceEntry
     * @param node
     * @param noteDuration
     * @param divisions
     * @param chord
     * @param octavePlusOne Software like Guitar Pro gives one octave too low, so we need to add one
     * @returns {Note}
     */
    addSingleNote(node, noteDuration, noteTypeXml, typeDuration, normalNotes, chord, octavePlusOne, printObject, isCueNote, isGraceNote, stemDirectionXml, tremoloInfo, stemColorXml, noteheadColorXml, vibratoStrokes) {
        //log.debug("addSingleNote called");
        let noteAlter = 0;
        let accidentalValue;
        let noteAccidental = Pitch_1.AccidentalEnum.NONE;
        let noteStep = Pitch_2.NoteEnum.C;
        let displayStepUnpitched = Pitch_2.NoteEnum.C;
        let noteOctave = 0;
        let displayOctaveUnpitched = 0;
        let playbackInstrumentId = undefined;
        let noteheadShapeXml = undefined;
        let noteheadFilledXml = undefined; // if undefined, the final filled parameter will be calculated from duration
        const xmlnodeElementsArr = node.elements();
        for (let idx = 0, len = xmlnodeElementsArr.length; idx < len; ++idx) {
            const noteElement = xmlnodeElementsArr[idx];
            try {
                if (noteElement.name === "pitch") {
                    const noteElementsArr = noteElement.elements();
                    for (let idx2 = 0, len2 = noteElementsArr.length; idx2 < len2; ++idx2) {
                        const pitchElement = noteElementsArr[idx2];
                        noteheadShapeXml = undefined; // reinitialize for each pitch
                        noteheadFilledXml = undefined;
                        try {
                            if (pitchElement.name === "step") {
                                noteStep = Pitch_2.NoteEnum[pitchElement.value];
                                if (noteStep === undefined) { // don't replace undefined check
                                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NotePitchError", "Invalid pitch while reading note.");
                                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                                    throw new Exceptions_1.MusicSheetReadingException(errorMsg, undefined);
                                }
                            }
                            else if (pitchElement.name === "alter") {
                                noteAlter = parseFloat(pitchElement.value);
                                if (isNaN(noteAlter)) {
                                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NoteAlterationError", "Invalid alteration while reading note.");
                                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                                    throw new Exceptions_1.MusicSheetReadingException(errorMsg, undefined);
                                }
                                noteAccidental = Pitch_3.Pitch.AccidentalFromHalfTones(noteAlter); // potentially overwritten by "accidental" noteElement
                            }
                            else if (pitchElement.name === "octave") {
                                noteOctave = parseInt(pitchElement.value, 10);
                                if (isNaN(noteOctave)) {
                                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NoteOctaveError", "Invalid octave value while reading note.");
                                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                                    throw new Exceptions_1.MusicSheetReadingException(errorMsg, undefined);
                                }
                            }
                        }
                        catch (ex) {
                            loglevel_1.default.info("VoiceGenerator.addSingleNote read Step: ", ex.message);
                        }
                    }
                }
                else if (noteElement.name === "accidental") {
                    accidentalValue = noteElement.value;
                    if (accidentalValue === "natural") {
                        noteAccidental = Pitch_1.AccidentalEnum.NATURAL;
                        // following accidentals: ambiguous in alter value
                    }
                    else if (accidentalValue === "slash-flat") {
                        noteAccidental = Pitch_1.AccidentalEnum.SLASHFLAT;
                    }
                    else if (accidentalValue === "slash-quarter-sharp") {
                        noteAccidental = Pitch_1.AccidentalEnum.SLASHQUARTERSHARP;
                    }
                    else if (accidentalValue === "slash-sharp") {
                        noteAccidental = Pitch_1.AccidentalEnum.SLASHSHARP;
                    }
                    else if (accidentalValue === "double-slash-flat") {
                        noteAccidental = Pitch_1.AccidentalEnum.DOUBLESLASHFLAT;
                    }
                    else if (accidentalValue === "sori") {
                        noteAccidental = Pitch_1.AccidentalEnum.SORI;
                    }
                    else if (accidentalValue === "koron") {
                        noteAccidental = Pitch_1.AccidentalEnum.KORON;
                    }
                }
                else if (noteElement.name === "unpitched") {
                    const displayStepElement = noteElement.element("display-step");
                    const octave = noteElement.element("display-octave");
                    if (octave) {
                        noteOctave = parseInt(octave.value, 10);
                        displayOctaveUnpitched = noteOctave - 3;
                        if (octavePlusOne) {
                            noteOctave += 1;
                        }
                        if (this.instrument.Staves[0].StafflineCount === 1) {
                            displayOctaveUnpitched += 1;
                        }
                    }
                    if (displayStepElement) {
                        noteStep = Pitch_2.NoteEnum[displayStepElement.value.toUpperCase()];
                        let octaveShift = 0;
                        let noteValueShift = this.musicSheet.Rules.PercussionXMLDisplayStepNoteValueShift;
                        if (this.instrument.Staves[0].StafflineCount === 1) {
                            noteValueShift -= 3; // for percussion one line scores, we need to set the notes 3 lines lower
                        }
                        [displayStepUnpitched, octaveShift] = Pitch_3.Pitch.lineShiftFromNoteEnum(noteStep, noteValueShift);
                        displayOctaveUnpitched += octaveShift;
                    }
                }
                else if (noteElement.name === "instrument") {
                    if (noteElement.firstAttribute) {
                        playbackInstrumentId = noteElement.firstAttribute.value;
                    }
                }
                else if (noteElement.name === "notehead") {
                    noteheadShapeXml = noteElement.value;
                    if (noteElement.attribute("filled")) {
                        noteheadFilledXml = noteElement.attribute("filled").value === "yes";
                    }
                }
            }
            catch (ex) {
                loglevel_1.default.info("VoiceGenerator.addSingleNote: ", ex);
            }
        }
        noteOctave -= Pitch_3.Pitch.OctaveXmlDifference;
        const pitch = new Pitch_3.Pitch(noteStep, noteOctave, noteAccidental, accidentalValue);
        const noteLength = Fraction_1.Fraction.createFromFraction(noteDuration);
        let note = undefined;
        let stringNumber = -1; //1 to always recognize as valid tab note
        let fretNumber = -1; //0 to always recognize as valid tab note
        const bends = [];
        // check for guitar tabs:
        const notationNode = node.element("notations");
        if (notationNode) {
            const technicalNode = notationNode.element("technical");
            if (technicalNode) {
                const stringNode = technicalNode.element("string");
                if (stringNode) {
                    stringNumber = parseInt(stringNode.value, 10);
                }
                const fretNode = technicalNode.element("fret");
                if (fretNode) {
                    fretNumber = parseInt(fretNode.value, 10);
                }
                const bendElementsArr = technicalNode.elements("bend");
                bendElementsArr.forEach(function (bend) {
                    const bendalterNote = bend.element("bend-alter");
                    const releaseNode = bend.element("release");
                    if (releaseNode !== undefined) {
                        bends.push({ bendalter: parseInt(bendalterNote.value, 10), direction: "down" });
                    }
                    else {
                        bends.push({ bendalter: parseInt(bendalterNote.value, 10), direction: "up" });
                    }
                });
            }
        }
        if (stringNumber < 0 || fretNumber < 0) {
            // create normal Note
            note = new Note_1.Note(this.currentVoiceEntry, this.currentStaffEntry, noteLength, pitch, this.currentMeasure);
        }
        else {
            // create TabNote
            note = new TabNote_1.TabNote(this.currentVoiceEntry, this.currentStaffEntry, noteLength, pitch, this.currentMeasure, stringNumber, fretNumber, bends, vibratoStrokes);
        }
        this.addNoteInfo(note, noteTypeXml, printObject, isCueNote, normalNotes, displayStepUnpitched, displayOctaveUnpitched, noteheadColorXml, noteheadColorXml);
        note.TypeLength = typeDuration;
        note.IsGraceNote = isGraceNote;
        note.StemDirectionXml = stemDirectionXml; // maybe unnecessary, also in VoiceEntry
        note.TremoloInfo = tremoloInfo;
        note.PlaybackInstrumentId = playbackInstrumentId;
        if ((noteheadShapeXml !== undefined && noteheadShapeXml !== "normal") || noteheadFilledXml !== undefined) {
            note.Notehead = new Notehead_1.Notehead(note, noteheadShapeXml, noteheadFilledXml);
        } // if normal, leave note head undefined to save processing/runtime
        if (stemDirectionXml === VoiceEntry_1.StemDirectionType.None) {
            stemColorXml = "#00000000"; // just setting this to transparent for now
        }
        this.currentVoiceEntry.Notes.push(note);
        this.currentVoiceEntry.StemDirectionXml = stemDirectionXml;
        if (stemColorXml) {
            this.currentVoiceEntry.StemColorXml = stemColorXml;
            this.currentVoiceEntry.StemColor = stemColorXml;
            note.StemColorXml = stemColorXml;
        }
        if (node.elements("beam") && !chord) {
            this.createBeam(node, note);
        }
        return note;
    }
    /**
     * Create a new rest note and add it to the currentVoiceEntry.
     * @param noteDuration
     * @param divisions
     * @returns {Note}
     */
    addRestNote(node, noteDuration, noteTypeXml, typeDuration, normalNotes, printObject, isCueNote, noteheadColorXml) {
        const restFraction = Fraction_1.Fraction.createFromFraction(noteDuration);
        const displayStepElement = node.element("display-step");
        const octaveElement = node.element("display-octave");
        let displayStep;
        let displayOctave;
        let pitch = undefined;
        if (displayStepElement && octaveElement) {
            displayStep = Pitch_2.NoteEnum[displayStepElement.value.toUpperCase()];
            displayOctave = parseInt(octaveElement.value, 10);
            pitch = new Pitch_3.Pitch(displayStep, displayOctave, Pitch_1.AccidentalEnum.NONE, undefined, true);
        }
        const restNote = new Note_1.Note(this.currentVoiceEntry, this.currentStaffEntry, restFraction, pitch, this.currentMeasure, true);
        this.addNoteInfo(restNote, noteTypeXml, printObject, isCueNote, normalNotes, displayStep, displayOctave, noteheadColorXml, noteheadColorXml);
        restNote.TypeLength = typeDuration; // needed for tuplet note type information
        //  (e.g. quarter rest - but length different due to tuplet). see MusicSheetCalculator.calculateTupletNumbers()
        this.currentVoiceEntry.Notes.push(restNote);
        if (this.openBeams.length > 0) {
            this.openBeams.last().ExtendedNoteList.push(restNote);
        }
        return restNote;
    }
    // common for "normal" notes and rest notes
    addNoteInfo(note, noteTypeXml, printObject, isCueNote, normalNotes, displayStep, displayOctave, noteheadColorXml, noteheadColor) {
        // common for normal notes and rest note
        note.NoteTypeXml = noteTypeXml;
        note.PrintObject = printObject;
        note.IsCueNote = isCueNote;
        note.NormalNotes = normalNotes; // how many rhythmical notes the notes replace (e.g. for tuplets), see xml "actual-notes" and "normal-notes"
        note.displayStepUnpitched = displayStep;
        note.displayOctaveUnpitched = displayOctave;
        note.NoteheadColorXml = noteheadColorXml; // color set in Xml, shouldn't be changed.
        note.NoteheadColor = noteheadColorXml; // color currently used
        // add TypeLength for rest notes like with Note?
        // add IsGraceNote for rest notes like with Notes?
        // add PlaybackInstrumentId for rest notes?
    }
    /**
     * Handle the currentVoiceBeam.
     * @param node
     * @param note
     */
    createBeam(node, note) {
        var _a;
        try {
            const beamNode = node.element("beam");
            let beamAttr = undefined;
            if (beamNode !== undefined && beamNode.hasAttributes) {
                beamAttr = beamNode.attribute("number");
            }
            if (beamAttr) {
                let beamNumber = parseInt(beamAttr.value, 10);
                const mainBeamNode = node.elements("beam");
                const currentBeamTag = mainBeamNode[0].value;
                if (mainBeamNode) {
                    if (currentBeamTag === "begin") {
                        if (beamNumber === ((_a = this.openBeams.last()) === null || _a === void 0 ? void 0 : _a.BeamNumber)) {
                            // beam with same number already existed (error in XML), bump beam number
                            this.beamNumberOffset++;
                            beamNumber += this.beamNumberOffset;
                        }
                        else if (this.openBeams.last()) {
                            this.handleOpenBeam();
                        }
                        this.openBeams.push(new Beam_1.Beam(beamNumber, this.beamNumberOffset));
                    }
                    else {
                        beamNumber += this.beamNumberOffset;
                    }
                }
                let sameVoiceEntry = false;
                if (!(beamNumber > 0 && beamNumber <= this.openBeams.length) || !this.openBeams[beamNumber - 1]) {
                    loglevel_1.default.debug("[OSMD] invalid beamnumber"); // this shouldn't happen, probably error in this method
                    return;
                }
                for (let idx = 0, len = this.openBeams[beamNumber - 1].Notes.length; idx < len; ++idx) {
                    const beamNote = this.openBeams[beamNumber - 1].Notes[idx];
                    if (this.currentVoiceEntry === beamNote.ParentVoiceEntry) {
                        sameVoiceEntry = true;
                    }
                }
                if (!sameVoiceEntry) {
                    const openBeam = this.openBeams[beamNumber - 1];
                    openBeam.addNoteToBeam(note);
                    // const lastBeamNote: Note = openBeam.Notes.last();
                    // const graceStatusChanged: boolean = (lastBeamNote?.IsCueNote || lastBeamNote?.IsGraceNote) !== (note.IsCueNote) || (note.IsGraceNote);
                    if (currentBeamTag === "end") {
                        this.endBeam();
                    }
                }
            }
        }
        catch (e) {
            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/BeamError", "Error while reading beam.");
            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
            throw new Exceptions_1.MusicSheetReadingException("", e);
        }
    }
    endBeam() {
        this.openBeams.pop(); // pop the last open beam from the stack. the latest openBeam will be the one before that now
        this.beamNumberOffset = Math.max(0, this.beamNumberOffset - 1);
    }
    /**
     * Check for open [[Beam]]s at end of [[SourceMeasure]] and closes them explicity.
     */
    handleOpenBeam() {
        const openBeam = this.openBeams.last();
        if (openBeam.Notes.length === 0) {
            // TODO why is there such a beam? sample: test_percussion_display_step_from_xml
            this.endBeam(); // otherwise beamLastNote.ParentStaffEntry will throw an undefined error
            return;
        }
        if (openBeam.Notes.length === 1) {
            const beamNote = openBeam.Notes[0];
            beamNote.NoteBeam = undefined;
            this.endBeam();
            return;
        }
        if (this.currentNote === CollectionUtil_1.CollectionUtil.last(openBeam.Notes)) {
            this.endBeam();
        }
        else {
            const beamLastNote = CollectionUtil_1.CollectionUtil.last(openBeam.Notes);
            const beamLastNoteStaffEntry = beamLastNote.ParentStaffEntry;
            const horizontalIndex = this.currentMeasure.getVerticalContainerIndexByTimestamp(beamLastNoteStaffEntry.Timestamp);
            const verticalIndex = beamLastNoteStaffEntry.VerticalContainerParent.StaffEntries.indexOf(beamLastNoteStaffEntry);
            if (horizontalIndex < this.currentMeasure.VerticalSourceStaffEntryContainers.length - 1) {
                const nextStaffEntry = this.currentMeasure
                    .VerticalSourceStaffEntryContainers[horizontalIndex + 1]
                    .StaffEntries[verticalIndex];
                if (nextStaffEntry) {
                    for (let idx = 0, len = nextStaffEntry.VoiceEntries.length; idx < len; ++idx) {
                        const voiceEntry = nextStaffEntry.VoiceEntries[idx];
                        if (voiceEntry.ParentVoice === this.voice) {
                            const candidateNote = voiceEntry.Notes[0];
                            if (candidateNote.Length.lte(new Fraction_1.Fraction(1, 8))) {
                                this.openBeams.last().addNoteToBeam(candidateNote);
                                this.endBeam();
                            }
                            else {
                                this.endBeam();
                            }
                        }
                    }
                }
            }
            else {
                this.endBeam();
            }
        }
    }
    /**
     * Create a [[Tuplet]].
     * @param node
     * @param tupletNodeList
     * @returns {number}
     */
    addTuplet(node, tupletNodeList) {
        let bracketed = false; // true if bracket=yes given, otherwise false
        let bracketedXmlValue = undefined; // Exact xml bracket value given: true for bracket=yes, false for bracket=no, undefined if not given.
        // TODO refactor this to not duplicate lots of code for the cases tupletNodeList.length == 1 and > 1
        if (tupletNodeList !== undefined && tupletNodeList.length > 1) {
            let timeModNode = node.element("time-modification");
            if (timeModNode) {
                timeModNode = timeModNode.element("actual-notes");
            }
            const tupletNodeListArr = tupletNodeList;
            for (let idx = 0, len = tupletNodeListArr.length; idx < len; ++idx) {
                const tupletNode = tupletNodeListArr[idx];
                if (tupletNode !== undefined && tupletNode.attributes()) {
                    const bracketAttr = tupletNode.attribute("bracket");
                    if (bracketAttr && bracketAttr.value === "yes") {
                        bracketed = true;
                        bracketedXmlValue = true;
                    }
                    else if (bracketAttr && bracketAttr.value === "no") {
                        bracketedXmlValue = false;
                    }
                    const type = tupletNode.attribute("type");
                    if (type && type.value === "start") {
                        let tupletNumber = 1;
                        if (tupletNode.attribute("number")) {
                            tupletNumber = parseInt(tupletNode.attribute("number").value, 10);
                        }
                        let tupletLabelNumber = 0;
                        if (timeModNode) {
                            tupletLabelNumber = parseInt(timeModNode.value, 10);
                            if (isNaN(tupletLabelNumber)) {
                                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/TupletNoteDurationError", "Invalid tuplet note duration.");
                                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                                throw new Exceptions_1.MusicSheetReadingException(errorMsg, undefined);
                            }
                        }
                        const tuplet = new Tuplet_1.Tuplet(tupletLabelNumber, bracketed);
                        tuplet.BracketedXmlValue = bracketedXmlValue;
                        //Default to above
                        tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                        //If we ever encounter a placement attribute for this tuplet, should override.
                        //Even previous placement attributes for the tuplet
                        const placementAttr = tupletNode.attribute("placement");
                        if (placementAttr) {
                            if (placementAttr.value === "below") {
                                tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Below;
                            }
                            tuplet.PlacementFromXml = true;
                        }
                        if (this.tupletDict[tupletNumber]) {
                            delete this.tupletDict[tupletNumber];
                            if (Object.keys(this.tupletDict).length === 0) {
                                this.openTupletNumber = 0;
                            }
                            else if (Object.keys(this.tupletDict).length > 1) {
                                this.openTupletNumber--;
                            }
                        }
                        this.tupletDict[tupletNumber] = tuplet;
                        const subnotelist = [];
                        subnotelist.push(this.currentNote);
                        tuplet.Notes.push(subnotelist);
                        tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));
                        this.currentNote.NoteTuplet = tuplet;
                        this.openTupletNumber = tupletNumber;
                    }
                    else if (type.value === "stop") {
                        let tupletNumber = 1;
                        if (tupletNode.attribute("number")) {
                            tupletNumber = parseInt(tupletNode.attribute("number").value, 10);
                        }
                        const tuplet = this.tupletDict[tupletNumber];
                        if (tuplet) {
                            const placementAttr = tupletNode.attribute("placement");
                            if (placementAttr) {
                                if (placementAttr.value === "below") {
                                    tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Below;
                                }
                                else {
                                    tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                                }
                                tuplet.PlacementFromXml = true;
                            }
                            const subnotelist = [];
                            subnotelist.push(this.currentNote);
                            tuplet.Notes.push(subnotelist);
                            //If our placement hasn't been from XML, check all the notes in the tuplet
                            //Search for the first non-rest and use it's stem direction
                            if (!tuplet.PlacementFromXml) {
                                let foundNonRest = false;
                                for (const subList of tuplet.Notes) {
                                    for (const note of subList) {
                                        if (!note.isRest()) {
                                            if (note.StemDirectionXml === VoiceEntry_1.StemDirectionType.Down) {
                                                tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Below;
                                            }
                                            else {
                                                tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                                            }
                                            foundNonRest = true;
                                            break;
                                        }
                                    }
                                    if (foundNonRest) {
                                        break;
                                    }
                                }
                            }
                            tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));
                            this.currentNote.NoteTuplet = tuplet;
                            delete this.tupletDict[tupletNumber];
                            if (Object.keys(this.tupletDict).length === 0) {
                                this.openTupletNumber = 0;
                            }
                            else if (Object.keys(this.tupletDict).length > 1) {
                                this.openTupletNumber--;
                            }
                        }
                    }
                }
            }
        }
        else if (tupletNodeList[0]) {
            const n = tupletNodeList[0];
            if (n.hasAttributes) {
                const type = n.attribute("type").value;
                let tupletnumber = 1;
                if (n.attribute("number")) {
                    tupletnumber = parseInt(n.attribute("number").value, 10);
                }
                const noTupletNumbering = isNaN(tupletnumber);
                const bracketAttr = n.attribute("bracket");
                if (bracketAttr && bracketAttr.value === "yes") {
                    bracketed = true;
                    bracketedXmlValue = true;
                }
                else if (bracketAttr && bracketAttr.value === "no") {
                    bracketedXmlValue = false;
                }
                if (type === "start") {
                    let tupletLabelNumber = 0;
                    let timeModNode = node.element("time-modification");
                    if (timeModNode) {
                        timeModNode = timeModNode.element("actual-notes");
                    }
                    if (timeModNode) {
                        tupletLabelNumber = parseInt(timeModNode.value, 10);
                        if (isNaN(tupletLabelNumber)) {
                            const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/TupletNoteDurationError", "Invalid tuplet note duration.");
                            this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                            throw new Exceptions_1.MusicSheetReadingException(errorMsg);
                        }
                    }
                    if (noTupletNumbering) {
                        this.openTupletNumber++;
                        tupletnumber = this.openTupletNumber;
                    }
                    let tuplet = this.tupletDict[tupletnumber];
                    if (!tuplet) {
                        tuplet = this.tupletDict[tupletnumber] = new Tuplet_1.Tuplet(tupletLabelNumber, bracketed);
                        tuplet.BracketedXmlValue = bracketedXmlValue;
                        //Default to above
                        tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                    }
                    //If we ever encounter a placement attribute for this tuplet, should override.
                    //Even previous placement attributes for the tuplet
                    const placementAttr = n.attribute("placement");
                    if (placementAttr) {
                        if (placementAttr.value === "below") {
                            tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Below;
                        }
                        else {
                            //Just in case
                            tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                        }
                        tuplet.PlacementFromXml = true;
                    }
                    const subnotelist = [];
                    subnotelist.push(this.currentNote);
                    tuplet.Notes.push(subnotelist);
                    tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));
                    this.currentNote.NoteTuplet = tuplet;
                    this.openTupletNumber = tupletnumber;
                }
                else if (type === "stop") {
                    if (noTupletNumbering) {
                        tupletnumber = this.openTupletNumber;
                    }
                    const tuplet = this.tupletDict[this.openTupletNumber];
                    if (tuplet) {
                        const placementAttr = n.attribute("placement");
                        if (placementAttr) {
                            if (placementAttr.value === "below") {
                                tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Below;
                            }
                            else {
                                tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                            }
                            tuplet.PlacementFromXml = true;
                        }
                        const subnotelist = [];
                        subnotelist.push(this.currentNote);
                        tuplet.Notes.push(subnotelist);
                        //If our placement hasn't been from XML, check all the notes in the tuplet
                        //Search for the first non-rest and use it's stem direction
                        if (!tuplet.PlacementFromXml) {
                            let foundNonRest = false;
                            for (const subList of tuplet.Notes) {
                                for (const note of subList) {
                                    if (!note.isRest()) {
                                        if (note.StemDirectionXml === VoiceEntry_1.StemDirectionType.Down) {
                                            tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Below;
                                        }
                                        else {
                                            tuplet.tupletLabelNumberPlacement = AbstractExpression_1.PlacementEnum.Above;
                                        }
                                        foundNonRest = true;
                                        break;
                                    }
                                }
                                if (foundNonRest) {
                                    break;
                                }
                            }
                        }
                        tuplet.Fractions.push(this.getTupletNoteDurationFromType(node));
                        this.currentNote.NoteTuplet = tuplet;
                        if (Object.keys(this.tupletDict).length === 0) {
                            this.openTupletNumber = 0;
                        }
                        else if (Object.keys(this.tupletDict).length > 1) {
                            this.openTupletNumber--;
                        }
                        delete this.tupletDict[tupletnumber];
                    }
                }
            }
        }
        return this.openTupletNumber;
    }
    /**
     * This method handles the time-modification IXmlElement for the Tuplet case (tupletNotes not at begin/end of Tuplet).
     * @param noteNode
     */
    handleTimeModificationNode(noteNode) {
        if (this.tupletDict[this.openTupletNumber]) {
            try {
                // Tuplet should already be created
                const tuplet = this.tupletDict[this.openTupletNumber];
                const notes = CollectionUtil_1.CollectionUtil.last(tuplet.Notes);
                const lastTupletVoiceEntry = notes[0].ParentVoiceEntry;
                let noteList;
                if (lastTupletVoiceEntry.Timestamp.Equals(this.currentVoiceEntry.Timestamp)) {
                    noteList = notes;
                }
                else {
                    noteList = [];
                    tuplet.Notes.push(noteList);
                    tuplet.Fractions.push(this.getTupletNoteDurationFromType(noteNode));
                }
                noteList.push(this.currentNote);
                this.currentNote.NoteTuplet = tuplet;
            }
            catch (ex) {
                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/TupletNumberError", "Invalid tuplet number.");
                this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                throw ex;
            }
        }
        else if (this.currentVoiceEntry.Notes.length > 0) {
            const firstNote = this.currentVoiceEntry.Notes[0];
            if (firstNote.NoteTuplet) {
                const tuplet = firstNote.NoteTuplet;
                const notes = CollectionUtil_1.CollectionUtil.last(tuplet.Notes);
                notes.push(this.currentNote);
                this.currentNote.NoteTuplet = tuplet;
            }
        }
    }
    addTie(tieNodeList, measureStartAbsoluteTimestamp, maxTieNoteFraction, tieType) {
        if (tieNodeList) {
            if (tieNodeList.length === 1) {
                const tieNode = tieNodeList[0];
                if (tieNode !== undefined && tieNode.attributes()) {
                    const tieDirection = this.getTieDirection(tieNode);
                    const type = tieNode.attribute("type").value;
                    try {
                        if (type === "start") {
                            const num = this.findCurrentNoteInTieDict(this.currentNote);
                            if (num < 0) {
                                delete this.openTieDict[num];
                            }
                            const newTieNumber = this.getNextAvailableNumberForTie();
                            const tie = new Tie_1.Tie(this.currentNote, tieType);
                            this.openTieDict[newTieNumber] = tie;
                            tie.TieNumber = newTieNumber;
                            tie.TieDirection = tieDirection;
                        }
                        else if (type === "stop") {
                            const tieNumber = this.findCurrentNoteInTieDict(this.currentNote);
                            const tie = this.openTieDict[tieNumber];
                            if (tie) {
                                tie.AddNote(this.currentNote);
                                delete this.openTieDict[tieNumber];
                            }
                        }
                    }
                    catch (err) {
                        const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/TieError", "Error while reading tie.");
                        this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    }
                }
            }
            else if (tieNodeList.length === 2) { // stop+start
                const tieNumber = this.findCurrentNoteInTieDict(this.currentNote);
                if (tieNumber >= 0) {
                    const tie = this.openTieDict[tieNumber];
                    tie.AddNote(this.currentNote);
                    for (const tieNode of tieNodeList) {
                        const type = tieNode.attribute("type").value;
                        if (type === "start") {
                            const placement = this.getTieDirection(tieNode);
                            tie.NoteIndexToTieDirection[tie.Notes.length - 1] = placement;
                        }
                    }
                }
            }
        }
    }
    getTieDirection(tieNode) {
        let tieDirection = AbstractExpression_1.PlacementEnum.NotYetDefined;
        // read tie direction/placement from XML
        const placementAttr = tieNode.attribute("placement");
        if (placementAttr) {
            if (placementAttr.value === "above") {
                tieDirection = AbstractExpression_1.PlacementEnum.Above;
            }
            else if (placementAttr.value === "below") {
                tieDirection = AbstractExpression_1.PlacementEnum.Below;
            }
        }
        // tie direction can also be given like this:
        const orientationAttr = tieNode.attribute("orientation");
        if (orientationAttr) {
            if (orientationAttr.value === "over") {
                tieDirection = AbstractExpression_1.PlacementEnum.Above;
            }
            else if (orientationAttr.value === "under") {
                tieDirection = AbstractExpression_1.PlacementEnum.Below;
            }
        }
        return tieDirection;
    }
    /**
     * Find the next free int (starting from 0) to use as key in TieDict.
     * @returns {number}
     */
    getNextAvailableNumberForTie() {
        const keys = Object.keys(this.openTieDict);
        if (keys.length === 0) {
            return 1;
        }
        keys.sort((a, b) => (+a - +b)); // FIXME Andrea: test
        for (let i = 0; i < keys.length; i++) {
            if ("" + (i + 1) !== keys[i]) {
                return i + 1;
            }
        }
        return +(keys[keys.length - 1]) + 1;
    }
    /**
     * Search the tieDictionary for the corresponding candidateNote to the currentNote (same FundamentalNote && Octave).
     * @param candidateNote
     * @returns {number}
     */
    findCurrentNoteInTieDict(candidateNote) {
        const openTieDict = this.openTieDict;
        for (const key in openTieDict) {
            if (openTieDict.hasOwnProperty(key)) {
                const tie = openTieDict[key];
                const tieTabNote = tie.Notes[0];
                const tieCandidateNote = candidateNote;
                if (tie.Pitch.FundamentalNote === candidateNote.Pitch.FundamentalNote && tie.Pitch.Octave === candidateNote.Pitch.Octave) {
                    return parseInt(key, 10);
                }
                else if (tieTabNote.StringNumberTab !== undefined) {
                    if (tieTabNote.StringNumberTab === tieCandidateNote.StringNumberTab) {
                        return parseInt(key, 10);
                    }
                }
            }
        }
        return -1;
    }
    /**
     * Calculate the normal duration of a [[Tuplet]] note.
     * @param xmlNode
     * @returns {any}
     */
    getTupletNoteDurationFromType(xmlNode) {
        if (xmlNode.element("type")) {
            const typeNode = xmlNode.element("type");
            if (typeNode) {
                const type = typeNode.value;
                try {
                    return NoteType_1.NoteTypeHandler.getNoteDurationFromType(type);
                }
                catch (e) {
                    const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NoteDurationError", "Invalid note duration.");
                    this.musicSheet.SheetErrors.pushMeasureError(errorMsg);
                    throw new Exceptions_1.MusicSheetReadingException("", e);
                }
            }
        }
        return undefined;
    }
}
exports.VoiceGenerator = VoiceGenerator;


/***/ }),

/***/ "./src/MusicalScore/SubInstrument.ts":
/*!*******************************************!*\
  !*** ./src/MusicalScore/SubInstrument.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SubInstrument = void 0;
const ClefInstruction_1 = __webpack_require__(/*! ./VoiceData/Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
class SubInstrument {
    constructor(parentInstrument) {
        this.parentInstrument = parentInstrument;
        this.fixedKey = -1;
        this.name = this.parseMidiInstrument(this.parentInstrument.Name);
        this.midiInstrumentID = SubInstrument.midiInstrument[this.name];
        this.volume = 1.0;
    }
    get ParentInstrument() {
        return this.parentInstrument;
    }
    static isPianoInstrument(instrument) {
        return (instrument === ClefInstruction_1.MidiInstrument.Acoustic_Grand_Piano
            || instrument === ClefInstruction_1.MidiInstrument.Bright_Acoustic_Piano
            || instrument === ClefInstruction_1.MidiInstrument.Electric_Grand_Piano
            || instrument === ClefInstruction_1.MidiInstrument.Electric_Piano_1
            || instrument === ClefInstruction_1.MidiInstrument.Electric_Piano_2);
    }
    setMidiInstrument(instrumentType) {
        this.midiInstrumentID = SubInstrument.midiInstrument[this.parseMidiInstrument(instrumentType)];
    }
    parseMidiInstrument(instrumentType) {
        // FIXME: test this function
        try {
            // find the best match for the given instrumentType:
            if (instrumentType) {
                const tmpName = instrumentType.toLowerCase().trim();
                for (const key in SubInstrument.midiInstrument) {
                    if (tmpName.indexOf(key) !== -1) {
                        return key;
                    }
                }
            }
            // if the instrumentType didn't work, use the name:
            if (this.parentInstrument.Name) {
                const tmpName = this.parentInstrument.Name.toLowerCase().trim();
                for (const key in SubInstrument.midiInstrument) {
                    if (tmpName.indexOf(key) !== -1) {
                        return key;
                    }
                }
            }
        }
        catch (e) {
            loglevel_1.default.error("Error parsing MIDI Instrument. Default to Grand Piano.");
        }
        return "unnamed";
    }
}
exports.SubInstrument = SubInstrument;
SubInstrument.midiInstrument = {
    "alt": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "alto": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "banjo": ClefInstruction_1.MidiInstrument.Banjo,
    "bariton": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "baritone": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "bass": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "blockfloete": ClefInstruction_1.MidiInstrument.Recorder,
    "brass": ClefInstruction_1.MidiInstrument.Trombone,
    "bratsche": ClefInstruction_1.MidiInstrument.Viola,
    "cello": ClefInstruction_1.MidiInstrument.Cello,
    "clarinet": ClefInstruction_1.MidiInstrument.Clarinet,
    "contrabass": ClefInstruction_1.MidiInstrument.Contrabass,
    "drums": ClefInstruction_1.MidiInstrument.Percussion,
    "flute": ClefInstruction_1.MidiInstrument.Flute,
    "floete": ClefInstruction_1.MidiInstrument.Flute,
    "frenchhorn": ClefInstruction_1.MidiInstrument.French_Horn,
    "gitarre": ClefInstruction_1.MidiInstrument.Acoustic_Guitar_nylon,
    "guitar": ClefInstruction_1.MidiInstrument.Acoustic_Guitar_nylon,
    "harfe": ClefInstruction_1.MidiInstrument.Orchestral_Harp,
    "harp": ClefInstruction_1.MidiInstrument.Orchestral_Harp,
    "klarinette": ClefInstruction_1.MidiInstrument.Clarinet,
    "klavier": ClefInstruction_1.MidiInstrument.Acoustic_Grand_Piano,
    "kontrabass": ClefInstruction_1.MidiInstrument.Contrabass,
    "oboe": ClefInstruction_1.MidiInstrument.Oboe,
    "organ": ClefInstruction_1.MidiInstrument.Church_Organ,
    "orgel": ClefInstruction_1.MidiInstrument.Church_Organ,
    "orgue": ClefInstruction_1.MidiInstrument.Church_Organ,
    "percussion": ClefInstruction_1.MidiInstrument.Percussion,
    "piano": ClefInstruction_1.MidiInstrument.Acoustic_Grand_Piano,
    "piccolo": ClefInstruction_1.MidiInstrument.Piccolo,
    "posaune": ClefInstruction_1.MidiInstrument.Trombone,
    "recorder": ClefInstruction_1.MidiInstrument.Recorder,
    "sax": ClefInstruction_1.MidiInstrument.Tenor_Sax,
    "schlagwerk": ClefInstruction_1.MidiInstrument.Percussion,
    "schlagzeug": ClefInstruction_1.MidiInstrument.Percussion,
    "sopran": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "steeldrum": ClefInstruction_1.MidiInstrument.Steel_Drums,
    "streicher": ClefInstruction_1.MidiInstrument.String_Ensemble_1,
    "strings": ClefInstruction_1.MidiInstrument.String_Ensemble_1,
    "tenor": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "tpt": ClefInstruction_1.MidiInstrument.Trumpet,
    "trombone": ClefInstruction_1.MidiInstrument.Trombone,
    "trompete": ClefInstruction_1.MidiInstrument.Trumpet,
    "trumpet": ClefInstruction_1.MidiInstrument.Trumpet,
    "tuba": ClefInstruction_1.MidiInstrument.Tuba,
    "unnamed": ClefInstruction_1.MidiInstrument.Acoustic_Grand_Piano,
    "viola": ClefInstruction_1.MidiInstrument.Viola,
    "violin": ClefInstruction_1.MidiInstrument.Violin,
    "violon-c": ClefInstruction_1.MidiInstrument.Cello,
    "violon.": ClefInstruction_1.MidiInstrument.Violin,
    "voice": ClefInstruction_1.MidiInstrument.Synth_Voice,
    "woodblock": ClefInstruction_1.MidiInstrument.Woodblock
};


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Arpeggio.ts":
/*!************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Arpeggio.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArpeggioType = exports.Arpeggio = void 0;
class Arpeggio {
    constructor(parentVoiceEntry, type = ArpeggioType.ARPEGGIO_DIRECTIONLESS) {
        this.parentVoiceEntry = parentVoiceEntry;
        this.type = type;
        this.notes = [];
    }
    addNote(note) {
        this.notes.push(note);
        note.Arpeggio = this;
    }
}
exports.Arpeggio = Arpeggio;
/** Corresponds to VF.Stroke.Type for now. But we don't want VexFlow as a dependency here. */
var ArpeggioType;
(function (ArpeggioType) {
    ArpeggioType[ArpeggioType["BRUSH_DOWN"] = 1] = "BRUSH_DOWN";
    ArpeggioType[ArpeggioType["BRUSH_UP"] = 2] = "BRUSH_UP";
    ArpeggioType[ArpeggioType["ROLL_DOWN"] = 3] = "ROLL_DOWN";
    ArpeggioType[ArpeggioType["ROLL_UP"] = 4] = "ROLL_UP";
    ArpeggioType[ArpeggioType["RASQUEDO_DOWN"] = 5] = "RASQUEDO_DOWN";
    ArpeggioType[ArpeggioType["RASQUEDO_UP"] = 6] = "RASQUEDO_UP";
    ArpeggioType[ArpeggioType["ARPEGGIO_DIRECTIONLESS"] = 7] = "ARPEGGIO_DIRECTIONLESS";
})(ArpeggioType = exports.ArpeggioType || (exports.ArpeggioType = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Articulation.ts":
/*!****************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Articulation.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Articulation = void 0;
class Articulation {
    constructor(articulationEnum, placement) {
        this.articulationEnum = articulationEnum;
        this.placement = placement; // undefined by default, to not restrict placement
    }
    Equals(otherArticulation) {
        return otherArticulation.articulationEnum === this.articulationEnum && otherArticulation.placement === this.placement;
    }
}
exports.Articulation = Articulation;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Beam.ts":
/*!********************************************!*\
  !*** ./src/MusicalScore/VoiceData/Beam.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BeamEnum = exports.Beam = void 0;
/**
 * A [[Beam]] - the bar grouping multiple consecutive [[Note]]s.
 */
class Beam {
    constructor(beamNumber = 1, beamNumberOffsetToXML = 0) {
        this.notes = [];
        this.extendedNoteList = [];
        this.BeamNumberOffsetToXML = 0;
        this.AutoGenerated = false;
        this.BeamNumber = beamNumber;
        this.BeamNumberOffsetToXML = beamNumberOffsetToXML;
    }
    get Notes() {
        return this.notes;
    }
    set Notes(value) {
        this.notes = value;
    }
    get ExtendedNoteList() {
        return this.extendedNoteList;
    }
    set ExtendedNoteList(value) {
        this.extendedNoteList = value;
    }
    /**
     * Perform all the appropriate actions for adding a singleNote to the Beam.
     * @param note
     */
    addNoteToBeam(note) {
        if (note) {
            note.NoteBeam = this;
            this.notes.push(note);
            this.extendedNoteList.push(note);
        }
    }
}
exports.Beam = Beam;
var BeamEnum;
(function (BeamEnum) {
    BeamEnum[BeamEnum["BeamNone"] = -1] = "BeamNone";
    BeamEnum[BeamEnum["BeamBegin"] = 0] = "BeamBegin";
    BeamEnum[BeamEnum["BeamContinue"] = 1] = "BeamContinue";
    BeamEnum[BeamEnum["BeamEnd"] = 2] = "BeamEnd";
    BeamEnum[BeamEnum["BeamForward"] = 3] = "BeamForward";
    BeamEnum[BeamEnum["BeamBackward"] = 4] = "BeamBackward";
})(BeamEnum = exports.BeamEnum || (exports.BeamEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/ChordSymbolContainer.ts":
/*!************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/ChordSymbolContainer.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ChordSymbolEnum = exports.ChordDegreeText = exports.CustomChord = exports.Degree = exports.ChordSymbolContainer = void 0;
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const MusicSheetCalculator_1 = __webpack_require__(/*! ../Graphical/MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
const Pitch_2 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
class ChordSymbolContainer {
    constructor(rootPitch, chordKind, bassPitch, chordDegrees, rules) {
        this.rootPitch = rootPitch;
        this.chordKind = chordKind;
        this.bassPitch = bassPitch;
        this.degrees = chordDegrees;
        this.rules = rules;
    }
    get RootPitch() {
        return this.rootPitch;
    }
    get ChordKind() {
        return this.chordKind;
    }
    get BassPitch() {
        return this.bassPitch;
    }
    get ChordDegrees() {
        return this.degrees;
    }
    static calculateChordText(chordSymbol, transposeHalftones, keyInstruction) {
        let transposedRootPitch = chordSymbol.RootPitch;
        if (MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator) {
            transposedRootPitch = MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator.transposePitch(chordSymbol.RootPitch, keyInstruction, transposeHalftones);
        }
        if (chordSymbol.ChordKind === ChordSymbolEnum.none) {
            return chordSymbol.getTextFromChordKindEnum(chordSymbol.ChordKind);
        }
        // main Note
        let text = Pitch_1.Pitch.getNoteEnumString(transposedRootPitch.FundamentalNote);
        // main alteration
        if (transposedRootPitch.Accidental !== Pitch_2.AccidentalEnum.NONE) {
            text += chordSymbol.getTextForAccidental(transposedRootPitch.Accidental);
        }
        // degrees
        const degrees = {
            adds: [],
            alts: [],
            subs: [],
        };
        for (const chordDegree of chordSymbol.ChordDegrees) {
            if (chordDegree) {
                let t = "";
                if (chordDegree.alteration !== Pitch_2.AccidentalEnum.NONE) {
                    t += chordSymbol.getTextForAccidental(chordDegree.alteration);
                }
                t += chordDegree.value;
                switch (chordDegree.text) {
                    case ChordDegreeText.add:
                        degrees.adds.push(t);
                        break;
                    case ChordDegreeText.alter:
                        degrees.alts.push(t);
                        break;
                    case ChordDegreeText.subtract:
                        degrees.subs.push(t);
                        break;
                    default:
                }
            }
        }
        // chord kind text
        let chordKind = chordSymbol.getTextFromChordKindEnum(chordSymbol.ChordKind);
        const degreeTypeAry = ["adds", "alts", "subs"];
        const customChords = chordSymbol.rules.CustomChords;
        for (const customChord of customChords) {
            if (customChord.chordKind !== chordSymbol.chordKind) {
                continue;
            }
            let hasCustomChordDegrees = true;
            for (const degType of degreeTypeAry) {
                for (const deg of (customChord.degrees[degType] || [])) {
                    if (degrees[degType].indexOf(deg) < 0) {
                        hasCustomChordDegrees = false;
                        break;
                    }
                }
                if (!hasCustomChordDegrees) {
                    break;
                }
            }
            if (hasCustomChordDegrees) {
                for (const degType of degreeTypeAry) {
                    for (const deg of (customChord.degrees[degType] || [])) {
                        // delete degree since we don't want it displayed when the alternate name of the customChord should contain the degrees.
                        degrees[degType].splice(degrees[degType].indexOf(deg), 1);
                    }
                }
                chordKind = customChord.alternateName;
            }
        }
        text += chordKind;
        if (degrees.adds.length > 0) {
            text += "(" + degrees.adds.join(",") + ")";
        }
        if (degrees.alts.length > 0) {
            text += "(alt " + degrees.alts.join(",") + ")";
        }
        if (degrees.subs.length > 0) {
            text += "(omit " + degrees.subs.join(",") + ")";
        }
        // bass
        if (chordSymbol.BassPitch) {
            let transposedBassPitch = chordSymbol.BassPitch;
            if (MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator) {
                transposedBassPitch = MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator.transposePitch(chordSymbol.BassPitch, keyInstruction, transposeHalftones);
            }
            text += "/";
            text += Pitch_1.Pitch.getNoteEnumString(transposedBassPitch.FundamentalNote);
            text += chordSymbol.getTextForAccidental(transposedBassPitch.Accidental);
        }
        return text;
    }
    getTextForAccidental(alteration) {
        const text = this.rules.ChordAccidentalTexts.getValue(alteration);
        return text !== undefined ? text : "";
    }
    getTextFromChordKindEnum(kind) {
        var _a;
        return (_a = this.rules.ChordSymbolLabelTexts.getValue(kind)) !== null && _a !== void 0 ? _a : "";
    }
}
exports.ChordSymbolContainer = ChordSymbolContainer;
class Degree {
    constructor(value, alteration, text) {
        this.value = value;
        this.alteration = alteration;
        this.text = text;
    }
}
exports.Degree = Degree;
class CustomChord {
    constructor(alternateName, chordKind, degrees) {
        this.alternateName = alternateName;
        this.chordKind = chordKind;
        this.degrees = degrees;
    }
    static createCustomChord(altName, chordKind, degrees) {
        return new CustomChord(altName, chordKind, degrees);
    }
    static renameCustomChord(altName, newAltName, customChords) {
        for (const customChord of customChords) {
            if (customChord.alternateName === altName) {
                customChord.alternateName = newAltName;
            }
        }
    }
}
exports.CustomChord = CustomChord;
var ChordDegreeText;
(function (ChordDegreeText) {
    ChordDegreeText[ChordDegreeText["add"] = 0] = "add";
    ChordDegreeText[ChordDegreeText["alter"] = 1] = "alter";
    ChordDegreeText[ChordDegreeText["subtract"] = 2] = "subtract";
})(ChordDegreeText = exports.ChordDegreeText || (exports.ChordDegreeText = {}));
var ChordSymbolEnum;
(function (ChordSymbolEnum) {
    ChordSymbolEnum[ChordSymbolEnum["major"] = 0] = "major";
    ChordSymbolEnum[ChordSymbolEnum["minor"] = 1] = "minor";
    ChordSymbolEnum[ChordSymbolEnum["augmented"] = 2] = "augmented";
    ChordSymbolEnum[ChordSymbolEnum["diminished"] = 3] = "diminished";
    ChordSymbolEnum[ChordSymbolEnum["dominant"] = 4] = "dominant";
    ChordSymbolEnum[ChordSymbolEnum["majorseventh"] = 5] = "majorseventh";
    ChordSymbolEnum[ChordSymbolEnum["minorseventh"] = 6] = "minorseventh";
    ChordSymbolEnum[ChordSymbolEnum["diminishedseventh"] = 7] = "diminishedseventh";
    ChordSymbolEnum[ChordSymbolEnum["augmentedseventh"] = 8] = "augmentedseventh";
    ChordSymbolEnum[ChordSymbolEnum["halfdiminished"] = 9] = "halfdiminished";
    ChordSymbolEnum[ChordSymbolEnum["majorminor"] = 10] = "majorminor";
    ChordSymbolEnum[ChordSymbolEnum["majorsixth"] = 11] = "majorsixth";
    ChordSymbolEnum[ChordSymbolEnum["minorsixth"] = 12] = "minorsixth";
    ChordSymbolEnum[ChordSymbolEnum["dominantninth"] = 13] = "dominantninth";
    ChordSymbolEnum[ChordSymbolEnum["majorninth"] = 14] = "majorninth";
    ChordSymbolEnum[ChordSymbolEnum["minorninth"] = 15] = "minorninth";
    ChordSymbolEnum[ChordSymbolEnum["dominant11th"] = 16] = "dominant11th";
    ChordSymbolEnum[ChordSymbolEnum["major11th"] = 17] = "major11th";
    ChordSymbolEnum[ChordSymbolEnum["minor11th"] = 18] = "minor11th";
    ChordSymbolEnum[ChordSymbolEnum["dominant13th"] = 19] = "dominant13th";
    ChordSymbolEnum[ChordSymbolEnum["major13th"] = 20] = "major13th";
    ChordSymbolEnum[ChordSymbolEnum["minor13th"] = 21] = "minor13th";
    ChordSymbolEnum[ChordSymbolEnum["suspendedsecond"] = 22] = "suspendedsecond";
    ChordSymbolEnum[ChordSymbolEnum["suspendedfourth"] = 23] = "suspendedfourth";
    ChordSymbolEnum[ChordSymbolEnum["Neapolitan"] = 24] = "Neapolitan";
    ChordSymbolEnum[ChordSymbolEnum["Italian"] = 25] = "Italian";
    ChordSymbolEnum[ChordSymbolEnum["French"] = 26] = "French";
    ChordSymbolEnum[ChordSymbolEnum["German"] = 27] = "German";
    ChordSymbolEnum[ChordSymbolEnum["pedal"] = 28] = "pedal";
    ChordSymbolEnum[ChordSymbolEnum["power"] = 29] = "power";
    ChordSymbolEnum[ChordSymbolEnum["Tristan"] = 30] = "Tristan";
    ChordSymbolEnum[ChordSymbolEnum["none"] = 31] = "none";
})(ChordSymbolEnum = exports.ChordSymbolEnum || (exports.ChordSymbolEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts":
/*!**********************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PlacementEnum = exports.AbstractExpression = void 0;
class AbstractExpression {
    constructor(placement) {
        this.placement = placement;
    }
    static isStringInStringList(stringList, inputString) {
        for (let idx = 0, len = stringList.length; idx < len; ++idx) {
            const s = stringList[idx];
            if (inputString.toLowerCase() === s.toLowerCase().trim()) {
                return true;
            }
        }
        return false;
    }
    /** Placement of the expression */
    get Placement() { return this.placement; }
    static PlacementEnumFromString(placementString) {
        switch (placementString.toLowerCase()) {
            case "above":
                return PlacementEnum.Above;
            case "below":
                return PlacementEnum.Below;
            case "aboveorbelow":
            case "abovebelow":
                return PlacementEnum.AboveOrBelow;
            case "left":
                return PlacementEnum.Left;
            case "right":
                return PlacementEnum.Right;
            case "auto":
            default:
                return PlacementEnum.NotYetDefined;
        }
    }
}
exports.AbstractExpression = AbstractExpression;
var PlacementEnum;
(function (PlacementEnum) {
    PlacementEnum[PlacementEnum["Above"] = 0] = "Above";
    PlacementEnum[PlacementEnum["Below"] = 1] = "Below";
    PlacementEnum[PlacementEnum["Left"] = 2] = "Left";
    PlacementEnum[PlacementEnum["Right"] = 3] = "Right";
    PlacementEnum[PlacementEnum["NotYetDefined"] = 4] = "NotYetDefined";
    PlacementEnum[PlacementEnum["AboveOrBelow"] = 5] = "AboveOrBelow";
})(PlacementEnum = exports.PlacementEnum || (exports.PlacementEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/AbstractTempoExpression.ts":
/*!***************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/AbstractTempoExpression.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractTempoExpression = void 0;
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
class AbstractTempoExpression extends AbstractExpression_1.AbstractExpression {
    constructor(label, placement, staffNumber, parentMultiTempoExpression) {
        super(placement);
        this.label = label;
        this.staffNumber = staffNumber;
        this.parentMultiTempoExpression = parentMultiTempoExpression;
    }
    get Label() {
        return this.label;
    }
    set Label(value) {
        this.label = value;
    }
    get Placement() {
        return this.placement;
    }
    set Placement(value) {
        this.placement = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get ParentMultiTempoExpression() {
        return this.parentMultiTempoExpression;
    }
    static isStringInStringList(wordsToFind, inputString) {
        for (const wordToFind of wordsToFind) {
            if (AbstractTempoExpression.stringContainsSeparatedWord(inputString.toLowerCase().trim(), wordToFind.toLowerCase().trim())) {
                return true;
            }
        }
        return false;
    }
    static stringContainsSeparatedWord(str, word) {
        return (str === word || str.indexOf(" " + word) !== -1 || str.indexOf(word + " ") !== -1);
    }
}
exports.AbstractTempoExpression = AbstractTempoExpression;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts":
/*!*****************************************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContDynamicEnum = exports.ContinuousDynamicExpression = void 0;
const AbstractExpression_1 = __webpack_require__(/*! ../AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const Fraction_1 = __webpack_require__(/*! ../../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
class ContinuousDynamicExpression extends AbstractExpression_1.AbstractExpression {
    constructor(dynamicType, placement, staffNumber, measure, numberXml, label = "") {
        super(placement);
        super.parentMeasure = measure;
        this.NumberXml = numberXml;
        this.dynamicType = dynamicType;
        this.label = label;
        this.staffNumber = staffNumber;
        this.startVolume = -1;
        this.endVolume = -1;
        if (label !== "") {
            this.setType();
        }
    }
    get DynamicType() {
        return this.dynamicType;
    }
    set DynamicType(value) {
        this.dynamicType = value;
    }
    get StartMultiExpression() {
        return this.startMultiExpression;
    }
    set StartMultiExpression(value) {
        this.startMultiExpression = value;
    }
    get EndMultiExpression() {
        return this.endMultiExpression;
    }
    set EndMultiExpression(value) {
        this.endMultiExpression = value;
    }
    get Placement() {
        return this.placement;
    }
    set Placement(value) {
        this.placement = value;
    }
    get StartVolume() {
        return this.startVolume;
    }
    set StartVolume(value) {
        this.startVolume = value;
    }
    get EndVolume() {
        return this.endVolume;
    }
    set EndVolume(value) {
        this.endVolume = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get Label() {
        return this.label;
    }
    set Label(value) {
        this.label = value;
        this.setType();
    }
    static isInputStringContinuousDynamic(inputString) {
        if (!inputString) {
            return false;
        }
        return (ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicIncreasing, inputString)
            || ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicDecreasing, inputString));
    }
    getInterpolatedDynamic(currentAbsoluteTimestamp) {
        const continuousAbsoluteStartTimestamp = this.StartMultiExpression.AbsoluteTimestamp;
        let continuousAbsoluteEndTimestamp;
        if (this.EndMultiExpression) {
            continuousAbsoluteEndTimestamp = this.EndMultiExpression.AbsoluteTimestamp;
        }
        else {
            continuousAbsoluteEndTimestamp = Fraction_1.Fraction.plus(this.startMultiExpression.SourceMeasureParent.AbsoluteTimestamp, this.startMultiExpression.SourceMeasureParent.Duration);
        }
        if (currentAbsoluteTimestamp.lt(continuousAbsoluteStartTimestamp)) {
            return -1;
        }
        if (continuousAbsoluteEndTimestamp.lt(currentAbsoluteTimestamp)) {
            return -2;
        }
        const interpolationRatio = Fraction_1.Fraction.minus(currentAbsoluteTimestamp, continuousAbsoluteStartTimestamp).RealValue
            / Fraction_1.Fraction.minus(continuousAbsoluteEndTimestamp, continuousAbsoluteStartTimestamp).RealValue;
        const interpolatedVolume = Math.max(0.0, Math.min(99.9, this.startVolume + (this.endVolume - this.startVolume) * interpolationRatio));
        return interpolatedVolume;
    }
    isWedge() {
        return !this.label;
    }
    setType() {
        if (ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicIncreasing, this.label)) {
            this.dynamicType = ContDynamicEnum.crescendo;
        }
        else if (ContinuousDynamicExpression.isStringInStringList(ContinuousDynamicExpression.listContinuousDynamicDecreasing, this.label)) {
            this.dynamicType = ContDynamicEnum.diminuendo;
        }
    }
}
exports.ContinuousDynamicExpression = ContinuousDynamicExpression;
ContinuousDynamicExpression.listContinuousDynamicIncreasing = ["crescendo", "cresc", "cresc.", "cres."];
ContinuousDynamicExpression.listContinuousDynamicDecreasing = ["decrescendo", "decresc", "decr.", "diminuendo", "dim.", "dim"];
var ContDynamicEnum;
(function (ContDynamicEnum) {
    ContDynamicEnum[ContDynamicEnum["crescendo"] = 0] = "crescendo";
    /** Diminuendo/Decrescendo. These terms are apparently sometimes synonyms, and a falling wedge is given in MusicXML as type="diminuendo". */
    ContDynamicEnum[ContDynamicEnum["diminuendo"] = 1] = "diminuendo";
})(ContDynamicEnum = exports.ContDynamicEnum || (exports.ContDynamicEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts":
/*!***************************************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ContinuousTempoType = exports.ContinuousTempoExpression = void 0;
const Fraction_1 = __webpack_require__(/*! ../../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const AbstractTempoExpression_1 = __webpack_require__(/*! ../AbstractTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractTempoExpression.ts");
/** Tempo expressions that usually have a continuous or gradual effect playback-wise (e.g. accelerando),
 * or describe shorter sections (e.g. meno mosso).
 */
class ContinuousTempoExpression extends AbstractTempoExpression_1.AbstractTempoExpression {
    constructor(label, placement, staffNumber, parentMultiTempoExpression) {
        super(label, placement, staffNumber, parentMultiTempoExpression);
        //super.label = label;
        //super.placement = placement;
        //super.staffNumber = staffNumber;
        //super.parentMultiTempoExpression = parentMultiTempoExpression;
        this.setTempoType();
    }
    static isInputStringContinuousTempo(inputString) {
        if (!inputString) {
            return false;
        }
        return (ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoFaster, inputString)
            || ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoSlower, inputString));
    }
    static isIncreasingTempo(tempoType) {
        return tempoType <= ContinuousTempoType.piuMosso;
    }
    static isDecreasingTempo(tempoType) {
        return (tempoType >= ContinuousTempoType.allargando) && (tempoType <= ContinuousTempoType.ritenuto);
    }
    get TempoType() {
        return this.tempoType;
    }
    set TempoType(value) {
        this.tempoType = value;
    }
    get StartTempo() {
        return this.startTempo;
    }
    set StartTempo(value) {
        this.startTempo = value;
    }
    get EndTempo() {
        return this.endTempo;
    }
    set EndTempo(value) {
        this.endTempo = value;
    }
    get AbsoluteEndTimestamp() {
        return this.absoluteEndTimestamp;
    }
    set AbsoluteEndTimestamp(value) {
        this.absoluteEndTimestamp = value;
    }
    get AbsoluteTimestamp() {
        return this.ParentMultiTempoExpression.AbsoluteTimestamp;
    }
    getAbsoluteFloatTimestamp() {
        return this.ParentMultiTempoExpression.AbsoluteTimestamp.RealValue;
    }
    getInterpolatedTempo(currentAbsoluteTimestamp) {
        const continuousAbsoluteStartTimestamp = Fraction_1.Fraction.plus(this.parentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.parentMultiTempoExpression.Timestamp);
        if (currentAbsoluteTimestamp.lt(continuousAbsoluteStartTimestamp)) {
            return -1;
        }
        if (this.absoluteEndTimestamp.lt(currentAbsoluteTimestamp)) {
            return -2;
        }
        const interpolationRatio = Fraction_1.Fraction.minus(currentAbsoluteTimestamp, continuousAbsoluteStartTimestamp).RealValue
            / Fraction_1.Fraction.minus(this.absoluteEndTimestamp, continuousAbsoluteStartTimestamp).RealValue;
        const interpolatedTempo = Math.max(0.0, Math.min(250.0, this.startTempo + (this.endTempo - this.startTempo) * interpolationRatio));
        return interpolatedTempo;
    }
    setTempoType() {
        if (ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoFaster, this.label)) {
            this.tempoType = ContinuousTempoType.accelerando;
        }
        else if (ContinuousTempoExpression.isStringInStringList(ContinuousTempoExpression.listContinuousTempoSlower, this.label)) {
            this.tempoType = ContinuousTempoType.ritardando;
        }
    }
}
exports.ContinuousTempoExpression = ContinuousTempoExpression;
ContinuousTempoExpression.listContinuousTempoFaster = ["accelerando", "piu mosso", "poco piu", "stretto"];
ContinuousTempoExpression.listContinuousTempoSlower = [
    "poco meno", "meno mosso", "piu lento", "calando", "allargando", "rallentando", "ritardando",
    "ritenuto", "ritard.", "ritard", "rit.", "rit", "riten.", "riten",
];
var ContinuousTempoType;
(function (ContinuousTempoType) {
    ContinuousTempoType[ContinuousTempoType["accelerando"] = 0] = "accelerando";
    ContinuousTempoType[ContinuousTempoType["stretto"] = 1] = "stretto";
    ContinuousTempoType[ContinuousTempoType["stringendo"] = 2] = "stringendo";
    ContinuousTempoType[ContinuousTempoType["mosso"] = 3] = "mosso";
    ContinuousTempoType[ContinuousTempoType["piuMosso"] = 4] = "piuMosso";
    ContinuousTempoType[ContinuousTempoType["allargando"] = 5] = "allargando";
    ContinuousTempoType[ContinuousTempoType["calando"] = 6] = "calando";
    ContinuousTempoType[ContinuousTempoType["menoMosso"] = 7] = "menoMosso";
    ContinuousTempoType[ContinuousTempoType["rallentando"] = 8] = "rallentando";
    ContinuousTempoType[ContinuousTempoType["ritardando"] = 9] = "ritardando";
    ContinuousTempoType[ContinuousTempoType["ritard"] = 10] = "ritard";
    ContinuousTempoType[ContinuousTempoType["rit"] = 11] = "rit";
    ContinuousTempoType[ContinuousTempoType["ritenuto"] = 12] = "ritenuto";
    ContinuousTempoType[ContinuousTempoType["rubato"] = 13] = "rubato";
    ContinuousTempoType[ContinuousTempoType["precipitando"] = 14] = "precipitando";
})(ContinuousTempoType = exports.ContinuousTempoType || (exports.ContinuousTempoType = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts":
/*!*************************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OctaveEnum = exports.OctaveShift = void 0;
const Pitch_1 = __webpack_require__(/*! ../../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
class OctaveShift {
    constructor(type, octave) {
        this.numberXml = 1;
        this.setOctaveShiftValue(type, octave);
    }
    get Type() {
        return this.octaveValue;
    }
    set Type(value) {
        this.octaveValue = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get ParentStartMultiExpression() {
        return this.startMultiExpression;
    }
    set ParentStartMultiExpression(value) {
        this.startMultiExpression = value;
    }
    get ParentEndMultiExpression() {
        return this.endMultiExpression;
    }
    set ParentEndMultiExpression(value) {
        this.endMultiExpression = value;
    }
    setOctaveShiftValue(type, octave) {
        if (octave === 1 && type === "down") {
            this.octaveValue = OctaveEnum.VA8;
        }
        else if (octave === 1 && type === "up") {
            this.octaveValue = OctaveEnum.VB8;
        }
        else if (octave === 2 && type === "down") {
            this.octaveValue = OctaveEnum.MA15;
        }
        else if (octave === 2 && type === "up") {
            this.octaveValue = OctaveEnum.MB15;
        }
        else {
            this.octaveValue = OctaveEnum.NONE;
        }
    }
    /**
     * Convert a source (XML) pitch of a note to the pitch needed to draw. E.g. 8va would draw +1 octave so we reduce by 1
     * @param pitch Original pitch
     * @param octaveShiftValue octave shift
     * @returns New pitch with corrected octave shift
     */
    static getPitchFromOctaveShift(pitch, octaveShiftValue) {
        if (!pitch) {
            return undefined;
        }
        let result = pitch.Octave;
        switch (octaveShiftValue) {
            case OctaveEnum.VA8:
                result -= 1;
                break;
            case OctaveEnum.VB8:
                result += 1;
                break;
            case OctaveEnum.MA15:
                result -= 2;
                break;
            case OctaveEnum.MB15:
                result += 2;
                break;
            case OctaveEnum.NONE:
            default:
                result += 0;
        }
        return new Pitch_1.Pitch(pitch.FundamentalNote, result, pitch.Accidental);
    }
}
exports.OctaveShift = OctaveShift;
var OctaveEnum;
(function (OctaveEnum) {
    OctaveEnum[OctaveEnum["VA8"] = 0] = "VA8";
    OctaveEnum[OctaveEnum["VB8"] = 1] = "VB8";
    OctaveEnum[OctaveEnum["MA15"] = 2] = "MA15";
    OctaveEnum[OctaveEnum["MB15"] = 3] = "MB15";
    OctaveEnum[OctaveEnum["NONE"] = 4] = "NONE";
})(OctaveEnum = exports.OctaveEnum || (exports.OctaveEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Pedal.ts":
/*!*******************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Pedal.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Pedal = void 0;
class Pedal {
    constructor(line = false, sign = true) {
        this.ChangeEnd = false;
        this.ChangeBegin = false;
        /** Whether the pedal ends at the stave end (and not before the endNote) */
        this.EndsStave = false;
        /** Whether the pedal begins at the stave beginning (and not before the startNote - e.g. for whole measure rest) */
        this.BeginsStave = false;
        this.line = line;
        this.sign = sign;
    }
    get IsLine() {
        return this.line;
    }
    get IsSign() {
        return this.sign;
    }
}
exports.Pedal = Pedal;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Slur.ts":
/*!******************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Slur.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Slur = void 0;
const Fraction_1 = __webpack_require__(/*! ../../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
class Slur {
    constructor() {
        // ?
    }
    get StartNote() {
        return this.startNote;
    }
    set StartNote(value) {
        this.startNote = value;
    }
    get EndNote() {
        return this.endNote;
    }
    set EndNote(value) {
        this.endNote = value;
    }
    startNoteHasMoreStartingSlurs() {
        if (!this.startNote) {
            return false;
        }
        for (let idx = 0, len = this.startNote.NoteSlurs.length; idx < len; ++idx) {
            const slur = this.startNote.NoteSlurs[idx];
            if (slur !== this && slur.StartNote === this.startNote) {
                return true;
            }
        }
        return false;
    }
    endNoteHasMoreEndingSlurs() {
        if (!this.endNote) {
            return false;
        }
        for (let idx = 0, len = this.endNote.NoteSlurs.length; idx < len; ++idx) {
            const slur = this.endNote.NoteSlurs[idx];
            if (slur !== this && slur.EndNote === this.endNote) {
                return true;
            }
        }
        return false;
    }
    isCrossed() {
        return (this.startNote.ParentStaffEntry.ParentStaff !== this.endNote.ParentStaffEntry.ParentStaff);
    }
    isSlurLonger() {
        if (!this.endNote || !this.startNote) {
            return false;
        }
        const length = Fraction_1.Fraction.minus(this.endNote.getAbsoluteTimestamp(), this.startNote.getAbsoluteTimestamp());
        for (let idx = 0, len = this.startNote.NoteSlurs.length; idx < len; ++idx) {
            const slur = this.startNote.NoteSlurs[idx];
            if (slur !== this
                && slur.EndNote !== undefined
                && slur.StartNote !== undefined
                && Fraction_1.Fraction.minus(slur.EndNote.getAbsoluteTimestamp(), slur.StartNote.getAbsoluteTimestamp()).CompareTo(length) === -1) {
                return true;
            }
        }
        for (let idx = 0, len = this.endNote.NoteSlurs.length; idx < len; ++idx) {
            const slur = this.endNote.NoteSlurs[idx];
            if (slur !== this
                && slur.EndNote !== undefined
                && slur.StartNote !== undefined
                && Fraction_1.Fraction.minus(slur.EndNote.getAbsoluteTimestamp(), slur.StartNote.getAbsoluteTimestamp()).CompareTo(length)) {
                return true;
            }
        }
        return false;
    }
}
exports.Slur = Slur;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/index.ts":
/*!*******************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/index.ts ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./ContinuousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./OctaveShift */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/OctaveShift.ts"), exports);
__exportStar(__webpack_require__(/*! ./Slur */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/Slur.ts"), exports);


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/DynamicExpressionSymbolEnum.ts":
/*!*******************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/DynamicExpressionSymbolEnum.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DynamicExpressionSymbolEnum = void 0;
var DynamicExpressionSymbolEnum;
(function (DynamicExpressionSymbolEnum) {
    DynamicExpressionSymbolEnum[DynamicExpressionSymbolEnum["p"] = 0] = "p";
    DynamicExpressionSymbolEnum[DynamicExpressionSymbolEnum["f"] = 1] = "f";
    DynamicExpressionSymbolEnum[DynamicExpressionSymbolEnum["s"] = 2] = "s";
    DynamicExpressionSymbolEnum[DynamicExpressionSymbolEnum["z"] = 3] = "z";
    DynamicExpressionSymbolEnum[DynamicExpressionSymbolEnum["m"] = 4] = "m";
    DynamicExpressionSymbolEnum[DynamicExpressionSymbolEnum["r"] = 5] = "r";
})(DynamicExpressionSymbolEnum = exports.DynamicExpressionSymbolEnum || (exports.DynamicExpressionSymbolEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts":
/*!**********************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DynamicEnum = exports.InstantaneousDynamicExpression = void 0;
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const DynamicExpressionSymbolEnum_1 = __webpack_require__(/*! ./DynamicExpressionSymbolEnum */ "./src/MusicalScore/VoiceData/Expressions/DynamicExpressionSymbolEnum.ts");
//import {ArgumentOutOfRangeException} from "../../Exceptions";
const Exceptions_1 = __webpack_require__(/*! ../../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
class InstantaneousDynamicExpression extends AbstractExpression_1.AbstractExpression {
    static staticConstructor() {
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ffffff, 127.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fffff, 126.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ffff, 125.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fff, 124.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ff, 122.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.f, 108.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.mf, 76.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sf, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sfp, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sfpp, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fp, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.rf, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.rfz, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sfz, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.sffz, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.fz, 0.5);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.mp, 60 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.p, 28.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.pp, 12.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ppp, 10.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.pppp, 7.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.ppppp, 5.0 / 127.0);
        InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.setValue(DynamicEnum.pppppp, 4.0 / 127.0);
    }
    constructor(dynamicExpression, soundDynamics, placement, staffNumber, measure) {
        super(placement);
        super.parentMeasure = measure;
        this.dynamicEnum = DynamicEnum[dynamicExpression.toLowerCase()];
        this.soundDynamic = soundDynamics;
        this.staffNumber = staffNumber;
    }
    get ParentMultiExpression() {
        return this.multiExpression;
    }
    set ParentMultiExpression(value) {
        this.multiExpression = value;
    }
    get DynEnum() {
        return this.dynamicEnum;
    }
    set DynEnum(value) {
        this.dynamicEnum = value;
    }
    get SoundDynamic() {
        return this.soundDynamic;
    }
    set SoundDynamic(value) {
        this.soundDynamic = value;
    }
    get Placement() {
        return this.placement;
    }
    set Placement(value) {
        this.placement = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get Length() {
        if (Math.abs(this.length) < 0.0001) {
            this.length = this.calculateLength();
        }
        return this.length;
    }
    get MidiVolume() {
        return this.Volume * 127;
    }
    get Volume() {
        return InstantaneousDynamicExpression.dynamicToRelativeVolumeDict.getValue(this.dynamicEnum);
    }
    static isInputStringInstantaneousDynamic(inputString) {
        if (!inputString) {
            return false;
        }
        return InstantaneousDynamicExpression.isStringInStringList(InstantaneousDynamicExpression.listInstantaneousDynamics, inputString);
    }
    //public getInstantaneousDynamicSymbol(expressionSymbolEnum:DynamicExpressionSymbolEnum): FontInfo.MusicFontSymbol {
    //    switch (expressionSymbolEnum) {
    //        case DynamicExpressionSymbolEnum.p:
    //            return FontInfo.MusicFontSymbol.P;
    //        case DynamicExpressionSymbolEnum.f:
    //            return FontInfo.MusicFontSymbol.F;
    //        case DynamicExpressionSymbolEnum.s:
    //            return FontInfo.MusicFontSymbol.S;
    //        case DynamicExpressionSymbolEnum.z:
    //            return FontInfo.MusicFontSymbol.Z;
    //        case DynamicExpressionSymbolEnum.m:
    //            return FontInfo.MusicFontSymbol.M;
    //        case DynamicExpressionSymbolEnum.r:
    //            return FontInfo.MusicFontSymbol.R;
    //        default:
    //            throw new ArgumentOutOfRangeException("expressionSymbolEnum");
    //    }
    //}
    getDynamicExpressionSymbol(c) {
        switch (c) {
            case "p":
                return DynamicExpressionSymbolEnum_1.DynamicExpressionSymbolEnum.p;
            case "f":
                return DynamicExpressionSymbolEnum_1.DynamicExpressionSymbolEnum.f;
            case "s":
                return DynamicExpressionSymbolEnum_1.DynamicExpressionSymbolEnum.s;
            case "z":
                return DynamicExpressionSymbolEnum_1.DynamicExpressionSymbolEnum.z;
            case "m":
                return DynamicExpressionSymbolEnum_1.DynamicExpressionSymbolEnum.m;
            case "r":
                return DynamicExpressionSymbolEnum_1.DynamicExpressionSymbolEnum.r;
            default:
                throw new Exceptions_1.InvalidEnumArgumentException("unknown DynamicExpressionSymbolEnum: " + c);
        }
    }
    calculateLength() {
        //let length: number = 0.0;
        //let dynamic: string = DynamicEnum[this.dynamicEnum];
        //for (let idx: number = 0, len: number = dynamic.length; idx < len; ++idx) {
        //    let c: string = dynamic[idx];
        //    let dynamicExpressionSymbol: DynamicExpressionSymbolEnum = this.getDynamicExpressionSymbol(c);
        //    let symbol: FontInfo.MusicFontSymbol = this.getInstantaneousDynamicSymbol(dynamicExpressionSymbol);
        //    length += FontInfo.Info.getBoundingBox(symbol).Width;
        //}
        //return length;
        loglevel_1.default.debug("[Andrea] instantaneousDynamicExpression: not implemented: calculateLength!");
        return 0.0;
    }
}
exports.InstantaneousDynamicExpression = InstantaneousDynamicExpression;
InstantaneousDynamicExpression.dynamicToRelativeVolumeDict = new typescript_collections_1.Dictionary();
//private static weight: number;
InstantaneousDynamicExpression.listInstantaneousDynamics = [
    "pppppp", "ppppp", "pppp", "ppp", "pp", "p",
    "ffffff", "fffff", "ffff", "fff", "ff", "f",
    "mf", "mp", "sf", "sff", "sp", "spp", "fp", "rf", "rfz", "sfz", "sffz", "fz",
];
var DynamicEnum;
(function (DynamicEnum) {
    DynamicEnum[DynamicEnum["pppppp"] = 0] = "pppppp";
    DynamicEnum[DynamicEnum["ppppp"] = 1] = "ppppp";
    DynamicEnum[DynamicEnum["pppp"] = 2] = "pppp";
    DynamicEnum[DynamicEnum["ppp"] = 3] = "ppp";
    DynamicEnum[DynamicEnum["pp"] = 4] = "pp";
    DynamicEnum[DynamicEnum["p"] = 5] = "p";
    DynamicEnum[DynamicEnum["mp"] = 6] = "mp";
    DynamicEnum[DynamicEnum["mf"] = 7] = "mf";
    DynamicEnum[DynamicEnum["f"] = 8] = "f";
    DynamicEnum[DynamicEnum["ff"] = 9] = "ff";
    DynamicEnum[DynamicEnum["fff"] = 10] = "fff";
    DynamicEnum[DynamicEnum["ffff"] = 11] = "ffff";
    DynamicEnum[DynamicEnum["fffff"] = 12] = "fffff";
    DynamicEnum[DynamicEnum["ffffff"] = 13] = "ffffff";
    DynamicEnum[DynamicEnum["sf"] = 14] = "sf";
    DynamicEnum[DynamicEnum["sff"] = 15] = "sff";
    DynamicEnum[DynamicEnum["sfp"] = 16] = "sfp";
    DynamicEnum[DynamicEnum["sfpp"] = 17] = "sfpp";
    DynamicEnum[DynamicEnum["fp"] = 18] = "fp";
    DynamicEnum[DynamicEnum["rf"] = 19] = "rf";
    DynamicEnum[DynamicEnum["rfz"] = 20] = "rfz";
    DynamicEnum[DynamicEnum["sfz"] = 21] = "sfz";
    DynamicEnum[DynamicEnum["sffz"] = 22] = "sffz";
    DynamicEnum[DynamicEnum["fz"] = 23] = "fz";
    DynamicEnum[DynamicEnum["other"] = 24] = "other";
})(DynamicEnum = exports.DynamicEnum || (exports.DynamicEnum = {}));
InstantaneousDynamicExpression.staticConstructor();


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts":
/*!********************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TempoEnum = exports.InstantaneousTempoExpression = void 0;
const AbstractTempoExpression_1 = __webpack_require__(/*! ./AbstractTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractTempoExpression.ts");
const Exceptions_1 = __webpack_require__(/*! ../../Exceptions */ "./src/MusicalScore/Exceptions.ts");
const Fraction_1 = __webpack_require__(/*! ../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
/** Tempo expressions that usually have an instantaneous and non-gradual effect on playback speed (e.g. Allegro),
 * or at least cover large sections, compared to the usually gradual effects or shorter sections of ContinuousExpressions.
 */
class InstantaneousTempoExpression extends AbstractTempoExpression_1.AbstractTempoExpression {
    constructor(label, placement, staffNumber, soundTempo, parentMultiTempoExpression, isMetronomeMark = false) {
        /*if (isMetronomeMark) {
            label = " = " + soundTempo;
        }*/
        super(label, placement, staffNumber, parentMultiTempoExpression);
        this.isMetronomeMark = isMetronomeMark;
        this.setTempoAndTempoType(soundTempo);
    }
    // Must refactor: In c# use 'out' arguments
    //private findTempoEnum(inputString: string, pre: string, post: string): TempoEnum {
    //    let result: TempoEnum = this.splitStringAfterInstructionWord(inputString,
    // InstantaneousTempoExpression.listInstantaneousTempoLarghissimo, TempoEnum.larghissimo, pre,
    //        post);
    //    if (result !== TempoEnum.none)
    //        return result;
    //    result = this.splitStringAfterInstructionWord(inputString, InstantaneousTempoExpression.listInstantaneousTempoGrave, TempoEnum.grave, pre,
    //        post);
    //    if (result !== TempoEnum.none)
    //        return result;
    //    return TempoEnum.none;
    //}
    //private splitStringAfterInstructionWord(inputString: string, instruction: string[], value: TempoEnum, pre: string, post: string): TempoEnum {
    //    pre = undefined;
    //    post = undefined;
    //    for (let idx: number = 0, len: number = instruction.length; idx < len; ++idx) {
    //        let instructionWord: string = instruction[idx];
    //        let separators: string[] = [" " + instructionWord, instructionWord + " ", "," + instructionWord, instructionWord + ","];
    //        for (let j: number = 0; j < 4; j++) {
    //            let splits:string[] = inputString.split(separators[j], 2);
    //            if (splits.length > 1) {
    //                pre = splits[0];
    //                post = splits[1];
    //                return value;
    //            }
    //        }
    //    }
    //    return TempoEnum.none;
    //}
    static getDefaultValueForTempoType(tempoEnum) {
        switch (tempoEnum) {
            case TempoEnum.larghissimo:
                return 20;
            case TempoEnum.grave:
                return 30;
            case TempoEnum.lento:
                return 48;
            case TempoEnum.largo:
                return 52;
            case TempoEnum.larghetto:
                return 63;
            case TempoEnum.adagio:
                return 70;
            case TempoEnum.adagietto:
                return 75;
            case TempoEnum.andanteModerato:
                return 88;
            case TempoEnum.andante:
                return 92;
            case TempoEnum.andantino:
                return 96;
            case TempoEnum.moderato:
                return 106;
            case TempoEnum.allegretto:
                return 112;
            case TempoEnum.allegroModerato:
                return 118;
            case TempoEnum.allegro:
                return 130;
            case TempoEnum.vivace:
                return 140;
            case TempoEnum.vivacissimo:
                return 155;
            case TempoEnum.allegrissimo:
                return 170;
            case TempoEnum.presto:
                return 184;
            case TempoEnum.prestissimo:
                return 200;
            default:
                throw new Exceptions_1.ArgumentOutOfRangeException("tempoEnum");
        }
    }
    static isInputStringInstantaneousTempo(inputString) {
        if (!inputString) {
            return false;
        }
        return ((InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghissimo, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoGrave, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLento, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLargo, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghetto, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagio, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagietto, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndanteModerato, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndante, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndantino, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoModerato, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegretto, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegroModerato, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegro, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivace, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivacissimo, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegrissimo, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPresto, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPrestissimo, inputString))
            || (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoChangesGeneral, inputString)));
    }
    get Label() {
        return this.label;
    }
    set Label(value) {
        this.label = value;
    }
    get Placement() {
        return this.placement;
    }
    set Placement(value) {
        this.placement = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get Enum() {
        return this.tempoEnum;
    }
    get TempoInBpm() {
        return this.tempoInBpm;
    }
    set TempoInBpm(value) {
        this.tempoInBpm = value;
    }
    get ParentMultiTempoExpression() {
        return this.parentMultiTempoExpression;
    }
    getAbsoluteTimestamp() {
        return Fraction_1.Fraction.plus(this.ParentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.ParentMultiTempoExpression.Timestamp);
    }
    getAbsoluteFloatTimestamp() {
        return Fraction_1.Fraction.plus(this.ParentMultiTempoExpression.SourceMeasureParent.AbsoluteTimestamp, this.ParentMultiTempoExpression.Timestamp).RealValue;
    }
    setTempoAndTempoType(soundTempo) {
        if (!this.label) {
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.metronomeMark;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghissimo, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.larghissimo);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.larghissimo;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoGrave, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.grave);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.grave;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLento, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.lento);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.lento;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLargo, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.largo);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.largo;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoLarghetto, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.larghetto);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.larghetto;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagio, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.adagio);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.adagio;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAdagietto, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.adagietto);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.adagietto;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndanteModerato, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.andanteModerato);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.andanteModerato;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndante, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.andante);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.andante;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAndantino, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.andantino);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.andantino;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoModerato, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.moderato);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.moderato;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegretto, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegretto);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.allegretto;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegroModerato, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegroModerato);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.allegroModerato;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegro, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegro);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.allegro;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivace, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.vivace);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.vivace;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoVivacissimo, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.vivacissimo);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.vivacissimo;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAllegrissimo, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.allegrissimo);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.allegrissimo;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPresto, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.presto);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.presto;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoPrestissimo, this.label)) {
            if (soundTempo === 0) {
                soundTempo = InstantaneousTempoExpression.getDefaultValueForTempoType(TempoEnum.prestissimo);
            }
            this.tempoInBpm = soundTempo;
            this.tempoEnum = TempoEnum.prestissimo;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoAddons, this.label)) {
            this.tempoInBpm = 0;
            this.tempoEnum = TempoEnum.addon;
            return;
        }
        if (InstantaneousTempoExpression.isStringInStringList(InstantaneousTempoExpression.listInstantaneousTempoChangesGeneral, this.label)) {
            this.tempoInBpm = 0;
            this.tempoEnum = TempoEnum.changes;
            return;
        }
    }
}
exports.InstantaneousTempoExpression = InstantaneousTempoExpression;
InstantaneousTempoExpression.listInstantaneousTempoLarghissimo = ["Larghissimo", "Sehr breit", "very, very slow"]; // }), TempoEnum.larghissimo);
InstantaneousTempoExpression.listInstantaneousTempoGrave = ["Grave", "Schwer", "slow and solemn"]; //  }), TempoEnum.grave);
InstantaneousTempoExpression.listInstantaneousTempoLento = ["Lento", "Lent", "Langsam", "slowly"]; //  }), TempoEnum.lento);
InstantaneousTempoExpression.listInstantaneousTempoLargo = ["Largo", "Breit", "broadly"]; //  }), TempoEnum.largo);
InstantaneousTempoExpression.listInstantaneousTempoLarghetto = ["Larghetto", "Etwas breit", "rather broadly"]; //  }), TempoEnum.larghetto);
InstantaneousTempoExpression.listInstantaneousTempoAdagio = ["Adagio", "Langsam", "Ruhig", "slow and stately"]; // }), TempoEnum.adagio);
InstantaneousTempoExpression.listInstantaneousTempoAdagietto = ["Adagietto", "Ziemlich ruhig", "Ziemlich langsam", "rather slow"]; //  }), TempoEnum.adagietto);
InstantaneousTempoExpression.listInstantaneousTempoAndanteModerato = ["Andante moderato"]; //  }), TempoEnum.andanteModerato);
InstantaneousTempoExpression.listInstantaneousTempoAndante = ["Andante", "Gehend", "Schreitend", "at a walking pace"]; //  }), TempoEnum.andante);
InstantaneousTempoExpression.listInstantaneousTempoAndantino = ["Andantino"]; //  }), TempoEnum.andantino);
InstantaneousTempoExpression.listInstantaneousTempoModerato = ["Moderato", "Mäßig", "Modéré", "moderately"]; //  }), TempoEnum.moderato);
InstantaneousTempoExpression.listInstantaneousTempoAllegretto = ["Allegretto", "fast"]; //  }), TempoEnum.allegretto);
InstantaneousTempoExpression.listInstantaneousTempoAllegroModerato = ["Allegro moderato"]; //  }), TempoEnum.allegroModerato);
InstantaneousTempoExpression.listInstantaneousTempoAllegro = ["Allegro", "Rapide", "Vite", "Rasch", "Schnell", "Fröhlich"]; //  }), TempoEnum.allegro);
InstantaneousTempoExpression.listInstantaneousTempoVivace = ["Vivace", "Lebhaft", "Lebendig", "lively and fast"]; //  }), TempoEnum.vivace);
InstantaneousTempoExpression.listInstantaneousTempoVivacissimo = ["Vivacissimo", "Sehr lebhaft", "Sehr lebendig"]; //  }), TempoEnum.vivacissimo);
InstantaneousTempoExpression.listInstantaneousTempoAllegrissimo = ["Allegrissimo", "very fast"]; //  }), TempoEnum.allegrissimo);
InstantaneousTempoExpression.listInstantaneousTempoPresto = ["Presto", "Sehr schnell", "Geschwind"]; //  }), TempoEnum.presto);
InstantaneousTempoExpression.listInstantaneousTempoPrestissimo = ["Prestissimo", "äußerst schnell"]; //  }), TempoEnum.prestissimo);
InstantaneousTempoExpression.listInstantaneousTempoChangesGeneral = [
    "tempo primo",
    "a tempo",
    "tempo i",
    "rubato",
    "doppio movimento",
    "rallentando",
    "ritardando",
    "ritard.",
    "rit.",
    "ritard",
    "rall...",
    "accelerando",
    "accel",
];
InstantaneousTempoExpression.listInstantaneousTempoAddons = [
    "assai",
    "amoroso",
    "cantabile",
    "con brio",
    "con dolore",
    "con espressione",
    "con fuoco",
    "con moto",
    "con spirito",
    "spiritoso",
    "espressivo",
    "giocoso",
    "giusto",
    "grazioso",
    "lesto",
    "lugubre",
    "maestoso",
    "ma non troppo",
    "marcato",
    "molto",
    "morendo",
    "mosso",
    "non tanto",
    "piu",
    "un poco",
    "poco",
    "quasi",
    "risoluto",
    "scherzando",
    "sostenuto",
    "teneramente",
    "tempo giusto",
    "tranquillo",
    "sehr",
    "lieblich",
    "liebevoll",
    "mit Leidenschaft",
    "mit Liebe",
    "amourös",
    "gesanglich",
    "mit Schwung",
    "mit Feuer",
    "mit Schmerz",
    "mit Ausdruck",
    "mit Bewegung",
    "geistvoll",
    "ausdrucksvoll",
    "freudig",
    "verspielt",
    "angemessen",
    "graziös",
    "mit Grazie",
    "flink",
    "behände",
    "traurig",
    "klagend",
    "majestätisch",
    "aber nicht zu sehr",
    "markant",
    "gemäßigt",
    "viel",
    "sehr",
    "ersterbend",
    "bewegt",
    "nicht zu sehr",
    "mehr",
    "ein wenig",
    "gleichsam",
    "entschlossen",
    "zupackend",
    "heiter",
    "nachdrücklich",
    "getragen",
    "gewichtig",
    "zart",
    "zärtlich",
    "im angemessenen Zeitmaß",
    "ruhig",
    "ein wenig",
    "alla marcia",
    "ad libitum",
    "alla breve",
];
var TempoEnum;
(function (TempoEnum) {
    TempoEnum[TempoEnum["none"] = 0] = "none";
    TempoEnum[TempoEnum["larghissimo"] = 1] = "larghissimo";
    TempoEnum[TempoEnum["grave"] = 2] = "grave";
    TempoEnum[TempoEnum["lento"] = 3] = "lento";
    TempoEnum[TempoEnum["largo"] = 4] = "largo";
    TempoEnum[TempoEnum["larghetto"] = 5] = "larghetto";
    TempoEnum[TempoEnum["adagio"] = 6] = "adagio";
    TempoEnum[TempoEnum["adagietto"] = 7] = "adagietto";
    TempoEnum[TempoEnum["andanteModerato"] = 8] = "andanteModerato";
    TempoEnum[TempoEnum["andante"] = 9] = "andante";
    TempoEnum[TempoEnum["andantino"] = 10] = "andantino";
    TempoEnum[TempoEnum["moderato"] = 11] = "moderato";
    TempoEnum[TempoEnum["allegretto"] = 12] = "allegretto";
    TempoEnum[TempoEnum["allegroModerato"] = 13] = "allegroModerato";
    TempoEnum[TempoEnum["allegro"] = 14] = "allegro";
    TempoEnum[TempoEnum["vivace"] = 15] = "vivace";
    TempoEnum[TempoEnum["vivacissimo"] = 16] = "vivacissimo";
    TempoEnum[TempoEnum["allegrissimo"] = 17] = "allegrissimo";
    TempoEnum[TempoEnum["presto"] = 18] = "presto";
    TempoEnum[TempoEnum["prestissimo"] = 19] = "prestissimo";
    TempoEnum[TempoEnum["lastRealTempo"] = 20] = "lastRealTempo";
    TempoEnum[TempoEnum["addon"] = 21] = "addon";
    TempoEnum[TempoEnum["changes"] = 22] = "changes";
    TempoEnum[TempoEnum["metronomeMark"] = 23] = "metronomeMark";
})(TempoEnum = exports.TempoEnum || (exports.TempoEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/MoodExpression.ts":
/*!******************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/MoodExpression.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MoodEnum = exports.MoodExpression = void 0;
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
class MoodExpression extends AbstractExpression_1.AbstractExpression {
    constructor(label, placement, staffNumber) {
        super(placement);
        this.label = label;
        this.staffNumber = staffNumber;
        this.setMoodType();
    }
    static isInputStringMood(inputString) {
        if (!inputString) {
            return false;
        }
        return (MoodExpression.isStringInStringList(MoodExpression.listMoodAffettuoso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodAgitato, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodAnimato, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodAppassionato, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodBrillante, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodCantabile, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodDolce, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodEnergico, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodEroico, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodEspressivo, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodFurioso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodGiocoso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodGioioso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodGrandioso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodGrazioso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodLacrimoso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodLeggiero, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodMaestoso, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodMalinconico, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodMarcato, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodMarziale, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodMesto, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodMorendo, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodNobilmente, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodPatetico, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodPesante, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodSaltando, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodSautille, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodScherzando, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodSostenuto, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodSpiccato, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodTenerezza, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodTranquillamente, inputString)
            || MoodExpression.isStringInStringList(MoodExpression.listMoodTrionfante, inputString));
    }
    get Label() {
        return this.label;
    }
    set Label(value) {
        this.label = value;
    }
    get Mood() {
        return this.moodType;
    }
    set Mood(value) {
        this.moodType = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get Placement() {
        return this.placement;
    }
    set Placement(value) {
        this.placement = value;
    }
    setMoodType() {
        if (MoodExpression.isStringInStringList(MoodExpression.listMoodAffettuoso, this.label)) {
            this.moodType = MoodEnum.Affettuoso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodAgitato, this.label)) {
            this.moodType = MoodEnum.Agitato;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodAnimato, this.label)) {
            this.moodType = MoodEnum.Animato;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodAppassionato, this.label)) {
            this.moodType = MoodEnum.Appassionato;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodBrillante, this.label)) {
            this.moodType = MoodEnum.Brillante;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodCantabile, this.label)) {
            this.moodType = MoodEnum.Cantabile;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodDolce, this.label)) {
            this.moodType = MoodEnum.Dolce;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodEnergico, this.label)) {
            this.moodType = MoodEnum.Energico;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodEroico, this.label)) {
            this.moodType = MoodEnum.Eroico;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodEspressivo, this.label)) {
            this.moodType = MoodEnum.Espressivo;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodFurioso, this.label)) {
            this.moodType = MoodEnum.Furioso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGiocoso, this.label)) {
            this.moodType = MoodEnum.Giocoso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGioioso, this.label)) {
            this.moodType = MoodEnum.Gioioso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGrandioso, this.label)) {
            this.moodType = MoodEnum.Grandioso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodGrazioso, this.label)) {
            this.moodType = MoodEnum.Grazioso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodLacrimoso, this.label)) {
            this.moodType = MoodEnum.Lacrimoso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodLeggiero, this.label)) {
            this.moodType = MoodEnum.Leggiero;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMaestoso, this.label)) {
            this.moodType = MoodEnum.Maestoso;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMalinconico, this.label)) {
            this.moodType = MoodEnum.Malinconico;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMarcato, this.label)) {
            this.moodType = MoodEnum.Marcato;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMarziale, this.label)) {
            this.moodType = MoodEnum.Marziale;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMesto, this.label)) {
            this.moodType = MoodEnum.Mesto;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodMorendo, this.label)) {
            this.moodType = MoodEnum.Morendo;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodNobilmente, this.label)) {
            this.moodType = MoodEnum.Nobilmente;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodPatetico, this.label)) {
            this.moodType = MoodEnum.Patetico;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodPesante, this.label)) {
            this.moodType = MoodEnum.Pesante;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSaltando, this.label)) {
            this.moodType = MoodEnum.Saltando;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSautille, this.label)) {
            this.moodType = MoodEnum.Sautille;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodScherzando, this.label)) {
            this.moodType = MoodEnum.Scherzando;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSostenuto, this.label)) {
            this.moodType = MoodEnum.Sostenuto;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodSpiccato, this.label)) {
            this.moodType = MoodEnum.Spiccato;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodTenerezza, this.label)) {
            this.moodType = MoodEnum.Tenerezza;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodTranquillamente, this.label)) {
            this.moodType = MoodEnum.Tranquillamente;
        }
        else if (MoodExpression.isStringInStringList(MoodExpression.listMoodTrionfante, this.label)) {
            this.moodType = MoodEnum.Trionfante;
        }
    }
}
exports.MoodExpression = MoodExpression;
MoodExpression.listMoodAffettuoso = ["affettuoso"];
MoodExpression.listMoodAgitato = ["agitato"];
MoodExpression.listMoodAppassionato = ["appassionato"];
MoodExpression.listMoodAnimato = ["animato", "lively"];
MoodExpression.listMoodBrillante = ["brillante"];
MoodExpression.listMoodCantabile = ["cantabile"];
MoodExpression.listMoodDolce = ["dolce"];
MoodExpression.listMoodEnergico = ["energico"];
MoodExpression.listMoodEroico = ["eroico"];
MoodExpression.listMoodEspressivo = ["espressivo"];
MoodExpression.listMoodFurioso = ["furioso"];
MoodExpression.listMoodGiocoso = ["giocoso"];
MoodExpression.listMoodGioioso = ["gioioso"];
MoodExpression.listMoodLacrimoso = ["lacrimoso"];
MoodExpression.listMoodGrandioso = ["grandioso"];
MoodExpression.listMoodGrazioso = ["grazioso"];
MoodExpression.listMoodLeggiero = ["leggiero"];
MoodExpression.listMoodMaestoso = ["maestoso"];
MoodExpression.listMoodMalinconico = ["malinconico"];
MoodExpression.listMoodMarcato = ["marcato"];
MoodExpression.listMoodMarziale = ["marziale"];
MoodExpression.listMoodMesto = ["mesto"];
MoodExpression.listMoodMorendo = ["morendo"];
MoodExpression.listMoodNobilmente = ["nobilmente"];
MoodExpression.listMoodPatetico = ["patetico"];
MoodExpression.listMoodPesante = ["pesante"];
MoodExpression.listMoodSautille = ["sautille"];
MoodExpression.listMoodSaltando = ["saltando"];
MoodExpression.listMoodScherzando = ["scherzando"];
MoodExpression.listMoodSostenuto = ["sostenuto"];
MoodExpression.listMoodSpiccato = ["spiccato"];
MoodExpression.listMoodTenerezza = ["tenerezza"];
MoodExpression.listMoodTranquillamente = ["tranquillamente"];
MoodExpression.listMoodTrionfante = ["trionfante"];
var MoodEnum;
(function (MoodEnum) {
    MoodEnum[MoodEnum["Affettuoso"] = 0] = "Affettuoso";
    MoodEnum[MoodEnum["Agitato"] = 1] = "Agitato";
    MoodEnum[MoodEnum["Appassionato"] = 2] = "Appassionato";
    MoodEnum[MoodEnum["Animato"] = 3] = "Animato";
    MoodEnum[MoodEnum["Brillante"] = 4] = "Brillante";
    MoodEnum[MoodEnum["Cantabile"] = 5] = "Cantabile";
    MoodEnum[MoodEnum["Dolce"] = 6] = "Dolce";
    MoodEnum[MoodEnum["Energico"] = 7] = "Energico";
    MoodEnum[MoodEnum["Eroico"] = 8] = "Eroico";
    MoodEnum[MoodEnum["Espressivo"] = 9] = "Espressivo";
    MoodEnum[MoodEnum["Furioso"] = 10] = "Furioso";
    MoodEnum[MoodEnum["Giocoso"] = 11] = "Giocoso";
    MoodEnum[MoodEnum["Gioioso"] = 12] = "Gioioso";
    MoodEnum[MoodEnum["Lacrimoso"] = 13] = "Lacrimoso";
    MoodEnum[MoodEnum["Grandioso"] = 14] = "Grandioso";
    MoodEnum[MoodEnum["Grazioso"] = 15] = "Grazioso";
    MoodEnum[MoodEnum["Leggiero"] = 16] = "Leggiero";
    MoodEnum[MoodEnum["Maestoso"] = 17] = "Maestoso";
    MoodEnum[MoodEnum["Malinconico"] = 18] = "Malinconico";
    MoodEnum[MoodEnum["Marcato"] = 19] = "Marcato";
    MoodEnum[MoodEnum["Marziale"] = 20] = "Marziale";
    MoodEnum[MoodEnum["Mesto"] = 21] = "Mesto";
    MoodEnum[MoodEnum["Morendo"] = 22] = "Morendo";
    MoodEnum[MoodEnum["Nobilmente"] = 23] = "Nobilmente";
    MoodEnum[MoodEnum["Patetico"] = 24] = "Patetico";
    MoodEnum[MoodEnum["Pesante"] = 25] = "Pesante";
    MoodEnum[MoodEnum["Sautille"] = 26] = "Sautille";
    MoodEnum[MoodEnum["Saltando"] = 27] = "Saltando";
    MoodEnum[MoodEnum["Scherzando"] = 28] = "Scherzando";
    MoodEnum[MoodEnum["Sostenuto"] = 29] = "Sostenuto";
    MoodEnum[MoodEnum["Spiccato"] = 30] = "Spiccato";
    MoodEnum[MoodEnum["Tenerezza"] = 31] = "Tenerezza";
    MoodEnum[MoodEnum["Tranquillamente"] = 32] = "Tranquillamente";
    MoodEnum[MoodEnum["Trionfante"] = 33] = "Trionfante";
    MoodEnum[MoodEnum["Vivace"] = 34] = "Vivace";
})(MoodEnum = exports.MoodEnum || (exports.MoodEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/MultiExpression.ts":
/*!*******************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/MultiExpression.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MultiExpressionEntry = exports.MultiExpression = void 0;
const Fraction_1 = __webpack_require__(/*! ../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const InstantaneousDynamicExpression_1 = __webpack_require__(/*! ./InstantaneousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts");
const ContinuousDynamicExpression_1 = __webpack_require__(/*! ./ContinuousExpressions/ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts");
const MoodExpression_1 = __webpack_require__(/*! ./MoodExpression */ "./src/MusicalScore/VoiceData/Expressions/MoodExpression.ts");
const UnknownExpression_1 = __webpack_require__(/*! ./UnknownExpression */ "./src/MusicalScore/VoiceData/Expressions/UnknownExpression.ts");
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
class MultiExpression {
    constructor(sourceMeasure, timestamp) {
        this.unknownList = [];
        this.moodList = [];
        this.expressions = [];
        this.sourceMeasure = sourceMeasure;
        this.timestamp = timestamp;
    }
    get SourceMeasureParent() {
        return this.sourceMeasure;
    }
    set SourceMeasureParent(value) {
        this.sourceMeasure = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get Timestamp() {
        return this.timestamp;
    }
    set Timestamp(value) {
        this.timestamp = value;
    }
    get AbsoluteTimestamp() {
        return Fraction_1.Fraction.plus(this.timestamp, this.sourceMeasure.AbsoluteTimestamp);
    }
    get InstantaneousDynamic() {
        return this.instantaneousDynamic;
    }
    set InstantaneousDynamic(value) {
        this.instantaneousDynamic = value;
    }
    get EndingContinuousDynamic() {
        return this.endingContinuousDynamic;
    }
    set EndingContinuousDynamic(value) {
        this.endingContinuousDynamic = value;
    }
    get StartingContinuousDynamic() {
        return this.startingContinuousDynamic;
    }
    set StartingContinuousDynamic(value) {
        this.startingContinuousDynamic = value;
    }
    get MoodList() {
        return this.moodList;
    }
    get UnknownList() {
        return this.unknownList;
    }
    get EntriesList() {
        return this.expressions;
    }
    get OctaveShiftStart() {
        return this.octaveShiftStart;
    }
    set OctaveShiftStart(value) {
        this.octaveShiftStart = value;
    }
    get OctaveShiftEnd() {
        return this.octaveShiftEnd;
    }
    set OctaveShiftEnd(value) {
        this.octaveShiftEnd = value;
    }
    get CombinedExpressionsText() {
        return this.combinedExpressionsText;
    }
    set CombinedExpressionsText(value) {
        this.combinedExpressionsText = value;
    }
    getPlacementOfFirstEntry() {
        let placement = AbstractExpression_1.PlacementEnum.Above;
        if (this.expressions.length > 0) {
            if (this.expressions[0].expression instanceof InstantaneousDynamicExpression_1.InstantaneousDynamicExpression) {
                placement = (this.expressions[0].expression).Placement;
            }
            else if (this.expressions[0].expression instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
                placement = (this.expressions[0].expression).Placement;
            }
            else if (this.expressions[0].expression instanceof MoodExpression_1.MoodExpression) {
                placement = (this.expressions[0].expression).Placement;
            }
            else if (this.expressions[0].expression instanceof UnknownExpression_1.UnknownExpression) {
                placement = (this.expressions[0].expression).Placement;
            }
        }
        return placement;
    }
    getFontstyleOfFirstEntry() {
        var _a;
        let fontStyle = FontStyles_1.FontStyles.Regular;
        if (this.expressions.length > 0) {
            if (this.expressions[0].expression instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
                fontStyle = FontStyles_1.FontStyles.Italic;
            }
            else if (this.expressions[0].expression instanceof MoodExpression_1.MoodExpression) {
                fontStyle = FontStyles_1.FontStyles.Italic;
            }
            else if (this.expressions[0].expression instanceof UnknownExpression_1.UnknownExpression) {
                const unknownExpression = this.expressions[0].expression;
                fontStyle = (_a = unknownExpression.fontStyle) !== null && _a !== void 0 ? _a : FontStyles_1.FontStyles.Regular;
            }
        }
        return fontStyle;
    }
    //public getFirstEntry(staffLine: StaffLine, graphLabel: GraphicalLabel): AbstractGraphicalExpression {
    //    let indexOfFirstNotInstDynExpr: number = 0;
    //    if (this.expressions[0].expression instanceof InstantaneousDynamicExpression)
    //        indexOfFirstNotInstDynExpr = 1;
    //    if (this.expressions.length > 0) {
    //        if (this.expressions[indexOfFirstNotInstDynExpr].expression instanceof ContinuousDynamicExpression)
    //            return new GraphicalContinuousDynamicExpression(
    // <ContinuousDynamicExpression>(this.expressions[indexOfFirstNotInstDynExpr].expression), graphLabel);
    //        else if (this.expressions[indexOfFirstNotInstDynExpr].expression instanceof MoodExpression)
    //            return new GraphicalMoodExpression(<MoodExpression>(this.expressions[indexOfFirstNotInstDynExpr].expression), graphLabel);
    //        else if (this.expressions[indexOfFirstNotInstDynExpr].expression instanceof UnknownExpression)
    //            return new GraphicalUnknownExpression(<UnknownExpression>(this.expressions[indexOfFirstNotInstDynExpr].expression), graphLabel);
    //        else return undefined;
    //    }
    //    else return undefined;
    //}
    addExpression(abstractExpression, prefix) {
        if (abstractExpression instanceof InstantaneousDynamicExpression_1.InstantaneousDynamicExpression) {
            if (this.instantaneousDynamic) {
                this.removeExpressionFromEntryList(this.InstantaneousDynamic);
            }
            this.instantaneousDynamic = abstractExpression;
            this.instantaneousDynamic.ParentMultiExpression = this;
        }
        else if (abstractExpression instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
            this.startingContinuousDynamic = abstractExpression;
        }
        else if (abstractExpression instanceof MoodExpression_1.MoodExpression) {
            this.moodList.push(abstractExpression);
        }
        else if (abstractExpression instanceof UnknownExpression_1.UnknownExpression) {
            this.unknownList.push(abstractExpression);
        }
        this.addExpressionToEntryList(abstractExpression, prefix);
    }
    CompareTo(other) {
        if (this.Timestamp.RealValue > other.Timestamp.RealValue) {
            return 1;
        }
        if (this.Timestamp.RealValue < other.Timestamp.RealValue) {
            return -1;
        }
        else {
            return 0;
        }
    }
    addExpressionToEntryList(expression, prefix) {
        const multiExpressionEntry = new MultiExpressionEntry();
        multiExpressionEntry.prefix = prefix;
        multiExpressionEntry.expression = expression;
        if (expression instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
            multiExpressionEntry.label = (expression).Label;
        }
        else if (expression instanceof MoodExpression_1.MoodExpression) {
            multiExpressionEntry.label = (expression).Label;
        }
        else if (expression instanceof UnknownExpression_1.UnknownExpression) {
            multiExpressionEntry.label = (expression).Label;
        }
        else {
            multiExpressionEntry.label = "";
        }
        this.expressions.push(multiExpressionEntry);
    }
    removeExpressionFromEntryList(expression) {
        for (let idx = 0, len = this.expressions.length; idx < len; ++idx) {
            const entry = this.expressions[idx];
            if (entry.expression === expression) {
                this.expressions.splice(idx, 1);
                break;
            }
        }
    }
}
exports.MultiExpression = MultiExpression;
class MultiExpressionEntry {
}
exports.MultiExpressionEntry = MultiExpressionEntry;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/MultiTempoExpression.ts":
/*!************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/MultiTempoExpression.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TempoExpressionEntry = exports.MultiTempoExpression = void 0;
const Fraction_1 = __webpack_require__(/*! ../../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const InstantaneousTempoExpression_1 = __webpack_require__(/*! ./InstantaneousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts");
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
const ContinuousTempoExpression_1 = __webpack_require__(/*! ./ContinuousExpressions/ContinuousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousTempoExpression.ts");
class MultiTempoExpression {
    constructor(sourceMeasure, timestamp) {
        this.expressions = [];
        this.sourceMeasure = sourceMeasure;
        this.timestamp = timestamp;
    }
    get Timestamp() {
        return this.timestamp;
    }
    get AbsoluteTimestamp() {
        return Fraction_1.Fraction.plus(this.sourceMeasure.AbsoluteTimestamp, this.timestamp);
    }
    get SourceMeasureParent() {
        return this.sourceMeasure;
    }
    set SourceMeasureParent(value) {
        this.sourceMeasure = value;
    }
    get InstantaneousTempo() {
        return this.instantaneousTempo;
    }
    get ContinuousTempo() {
        return this.continuousTempo;
    }
    get EntriesList() {
        return this.expressions;
    }
    get CombinedExpressionsText() {
        return this.combinedExpressionsText;
    }
    set CombinedExpressionsText(value) {
        this.combinedExpressionsText = value;
    }
    getPlacementOfFirstEntry() {
        let placement = AbstractExpression_1.PlacementEnum.Above;
        if (this.expressions.length > 0) {
            if (this.expressions[0].Expression instanceof InstantaneousTempoExpression_1.InstantaneousTempoExpression) {
                placement = (this.expressions[0].Expression).Placement;
            }
            else if (this.expressions[0].Expression instanceof ContinuousTempoExpression_1.ContinuousTempoExpression) {
                placement = (this.expressions[0].Expression).Placement;
            }
        }
        return placement;
    }
    getFontstyleOfFirstEntry() {
        let fontStyle = FontStyles_1.FontStyles.Regular;
        if (this.expressions[0].Expression instanceof InstantaneousTempoExpression_1.InstantaneousTempoExpression) {
            fontStyle = FontStyles_1.FontStyles.Bold;
        }
        else if (this.expressions[0].Expression instanceof ContinuousTempoExpression_1.ContinuousTempoExpression) {
            fontStyle = FontStyles_1.FontStyles.Italic;
        }
        return fontStyle;
    }
    //public getFirstEntry(graphicalLabel: GraphicalLabel): AbstractGraphicalExpression {
    //    let indexOfFirstNotInstDynExpr: number = 0;
    //    if (this.expressions.length > 0) {
    //        if (this.expressions[indexOfFirstNotInstDynExpr].Expression instanceof InstantaneousTempoExpression)
    //            return new GraphicalInstantaneousTempoExpression(
    // <InstantaneousTempoExpression>(this.expressions[indexOfFirstNotInstDynExpr].Expression), graphicalLabel);
    //        else if (this.expressions[indexOfFirstNotInstDynExpr].Expression instanceof ContinuousTempoExpression)
    //            return new GraphicalContinuousTempoExpression(
    // <ContinuousTempoExpression>(this.expressions[indexOfFirstNotInstDynExpr].Expression), graphicalLabel);
    //        else return undefined;
    //    }
    //    return undefined;
    //}
    addExpression(abstractTempoExpression, prefix) {
        if (this.checkIfAlreadyExists(abstractTempoExpression)) {
            return;
        }
        if (abstractTempoExpression instanceof InstantaneousTempoExpression_1.InstantaneousTempoExpression) {
            this.instantaneousTempo = abstractTempoExpression;
        }
        else if (abstractTempoExpression instanceof ContinuousTempoExpression_1.ContinuousTempoExpression) {
            this.continuousTempo = abstractTempoExpression;
        }
        const tempoExpressionEntry = new TempoExpressionEntry();
        tempoExpressionEntry.prefix = prefix;
        tempoExpressionEntry.Expression = abstractTempoExpression;
        tempoExpressionEntry.label = abstractTempoExpression.Label;
        this.expressions.push(tempoExpressionEntry);
    }
    CompareTo(other) {
        if (this.Timestamp.RealValue > other.Timestamp.RealValue) {
            return 1;
        }
        if (this.Timestamp.RealValue < other.Timestamp.RealValue) {
            return -1;
        }
        else {
            return 0;
        }
    }
    checkIfAlreadyExists(abstractTempoExpression) {
        for (const entry of this.expressions) {
            if (entry.label === abstractTempoExpression.Label) {
                return true;
            }
        }
        return false;
    }
}
exports.MultiTempoExpression = MultiTempoExpression;
class TempoExpressionEntry {
    get Expression() {
        return this.expression;
    }
    set Expression(value) {
        this.expression = value;
    }
}
exports.TempoExpressionEntry = TempoExpressionEntry;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/RehearsalExpression.ts":
/*!***********************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/RehearsalExpression.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RehearsalExpression = void 0;
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
class RehearsalExpression extends AbstractExpression_1.AbstractExpression {
    constructor(label, placement) {
        super(placement);
        this.label = label;
    }
}
exports.RehearsalExpression = RehearsalExpression;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/UnknownExpression.ts":
/*!*********************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/UnknownExpression.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.UnknownExpression = void 0;
const AbstractExpression_1 = __webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const TextAlignment_1 = __webpack_require__(/*! ../../../Common/Enums/TextAlignment */ "./src/Common/Enums/TextAlignment.ts");
class UnknownExpression extends AbstractExpression_1.AbstractExpression {
    constructor(label, placement, textAlignment, staffNumber) {
        super(placement);
        this.label = label;
        this.staffNumber = staffNumber;
        if (textAlignment === undefined) { // don't replace undefined check
            textAlignment = TextAlignment_1.TextAlignmentEnum.LeftBottom;
        }
        this.textAlignment = textAlignment;
    }
    get Label() {
        return this.label;
    }
    get Placement() {
        return this.placement;
    }
    set Placement(value) {
        this.placement = value;
    }
    get StaffNumber() {
        return this.staffNumber;
    }
    set StaffNumber(value) {
        this.staffNumber = value;
    }
    get TextAlignment() {
        return this.textAlignment;
    }
}
exports.UnknownExpression = UnknownExpression;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Expressions/index.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Expressions/index.ts ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./AbstractTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractTempoExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./DynamicExpressionSymbolEnum */ "./src/MusicalScore/VoiceData/Expressions/DynamicExpressionSymbolEnum.ts"), exports);
__exportStar(__webpack_require__(/*! ./InstantaneousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./InstantaneousTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousTempoExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./MoodExpression */ "./src/MusicalScore/VoiceData/Expressions/MoodExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./MultiExpression */ "./src/MusicalScore/VoiceData/Expressions/MultiExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./MultiTempoExpression */ "./src/MusicalScore/VoiceData/Expressions/MultiTempoExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./RehearsalExpression */ "./src/MusicalScore/VoiceData/Expressions/RehearsalExpression.ts"), exports);
__exportStar(__webpack_require__(/*! ./UnknownExpression */ "./src/MusicalScore/VoiceData/Expressions/UnknownExpression.ts"), exports);


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Glissando.ts":
/*!*************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Glissando.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Glissando = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const BoundingBox_1 = __webpack_require__(/*! ../Graphical/BoundingBox */ "./src/MusicalScore/Graphical/BoundingBox.ts");
class Glissando {
    constructor(note) {
        this.notes = [];
        this.XMLNumber = 1;
        this.AddNote(note);
        this.StartNote = note;
        this.Direction = BoundingBox_1.ColDirEnum.NotYetDefined;
    }
    get Notes() {
        return this.notes;
    }
    get Duration() {
        const duration = new Fraction_1.Fraction();
        for (const note of this.notes) {
            duration.Add(note.Length);
        }
        return duration;
    }
    get Pitch() {
        return this.StartNote.Pitch;
    }
    AddNote(note) {
        this.notes.push(note);
        note.NoteGlissando = this;
        if (this.notes.length === 2) {
            // set direction
            //   this heuristic is imprecise, better would be to check line of the staff on which note is drawn,
            //   but that info may not be available yet, and this should rarely matter.
            if (this.notes[0].Pitch.getHalfTone() < this.notes[1].Pitch.getHalfTone()) {
                this.Direction = BoundingBox_1.ColDirEnum.Up;
            }
            else {
                this.Direction = BoundingBox_1.ColDirEnum.Down;
            }
        }
    }
}
exports.Glissando = Glissando;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/HelperObjects/DynamicsContainer.ts":
/*!***********************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/HelperObjects/DynamicsContainer.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DynamicsContainer = void 0;
const ContinuousDynamicExpression_1 = __webpack_require__(/*! ../Expressions/ContinuousExpressions/ContinuousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/ContinuousExpressions/ContinuousDynamicExpression.ts");
const InstantaneousDynamicExpression_1 = __webpack_require__(/*! ../Expressions/InstantaneousDynamicExpression */ "./src/MusicalScore/VoiceData/Expressions/InstantaneousDynamicExpression.ts");
class DynamicsContainer /*implements IComparable<DynamicsContainer>*/ {
    constructor(dynamicExpression, staffNumber) {
        if (dynamicExpression instanceof ContinuousDynamicExpression_1.ContinuousDynamicExpression) {
            this.continuousDynamicExpression = dynamicExpression;
        }
        else if (dynamicExpression instanceof InstantaneousDynamicExpression_1.InstantaneousDynamicExpression) {
            this.instantaneousDynamicExpression = dynamicExpression;
        }
        this.staffNumber = staffNumber;
    }
    parMultiExpression() {
        if (this.continuousDynamicExpression) {
            return this.continuousDynamicExpression.StartMultiExpression;
        }
        if (this.instantaneousDynamicExpression) {
            return this.instantaneousDynamicExpression.ParentMultiExpression;
        }
        return undefined;
    }
    CompareTo(other) {
        return this.parMultiExpression().AbsoluteTimestamp.CompareTo(other.parMultiExpression().AbsoluteTimestamp);
    }
}
exports.DynamicsContainer = DynamicsContainer;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Instructions/AbstractNotationInstruction.ts":
/*!********************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Instructions/AbstractNotationInstruction.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractNotationInstruction = void 0;
class AbstractNotationInstruction {
    constructor(parent) {
        /** States whether the object should be displayed. False if xmlNode.attribute("print-object").value = "no". */
        this.printObject = true;
        this.parent = parent;
    }
    get Parent() {
        return this.parent;
    }
    set Parent(value) {
        this.parent = value;
    }
    get PrintObject() {
        return this.printObject;
    }
    set PrintObject(value) {
        this.printObject = value;
    }
}
exports.AbstractNotationInstruction = AbstractNotationInstruction;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts":
/*!********************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MidiInstrument = exports.ClefEnum = exports.ClefInstruction = void 0;
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const AbstractNotationInstruction_1 = __webpack_require__(/*! ./AbstractNotationInstruction */ "./src/MusicalScore/VoiceData/Instructions/AbstractNotationInstruction.ts");
const Pitch_2 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Pitch_3 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Exceptions_1 = __webpack_require__(/*! ../../Exceptions */ "./src/MusicalScore/Exceptions.ts");
/**
 * A [[ClefInstruction]] is the clef placed at the beginning of the stave, which indicates the pitch of the notes.
 */
class ClefInstruction extends AbstractNotationInstruction_1.AbstractNotationInstruction {
    constructor(clefType = ClefEnum.G, octaveOffset = 0, line = 2) {
        super(undefined); // FIXME? Missing SourceStaffEntry!
        this.clefType = ClefEnum.G;
        this.line = 2;
        this.octaveOffset = 0;
        this.line = line;
        this.clefType = clefType;
        this.octaveOffset = octaveOffset;
        this.calcParameters();
    }
    static getDefaultClefFromMidiInstrument(instrument) {
        switch (instrument) {
            case MidiInstrument.Acoustic_Grand_Piano:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Electric_Bass_finger:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Electric_Bass_pick:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Fretless_Bass:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Slap_Bass_1:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Slap_Bass_2:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Synth_Bass_1:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Synth_Bass_2:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            case MidiInstrument.Contrabass:
                return new ClefInstruction(ClefEnum.F, 0, 4);
            default:
                return new ClefInstruction(ClefEnum.G, 0, 2);
        }
    }
    static getAllPossibleClefs() {
        const clefList = [];
        for (let i = 0; i <= 2; i++) {
            const clefInstructionG = new ClefInstruction(ClefEnum.G, i, 2);
            clefList.push(clefInstructionG);
        }
        for (let j = -2; j <= 0; j++) {
            const clefInstructionF = new ClefInstruction(ClefEnum.F, j, 4);
            clefList.push(clefInstructionF);
        }
        return clefList;
    }
    static isSupportedClef(clef) {
        switch (clef) {
            case ClefEnum.G:
            case ClefEnum.F:
            case ClefEnum.C:
            case ClefEnum.percussion:
            case ClefEnum.TAB:
                return true;
            default:
                return false;
        }
    }
    get ClefType() {
        return this.clefType;
    }
    set ClefType(value) {
        this.clefType = value;
    }
    get Line() {
        return this.line;
    }
    set Line(value) {
        this.line = value;
    }
    get OctaveOffset() {
        return this.octaveOffset;
    }
    set OctaveOffset(value) {
        this.octaveOffset = value;
    }
    get ClefPitch() {
        return this.clefPitch;
    }
    set ClefPitch(value) {
        this.clefPitch = value;
    }
    get ReferenceCyPosition() {
        return this.referenceCyPosition;
    }
    set ReferenceCyPosition(value) {
        this.referenceCyPosition = value;
    }
    Equals(other) {
        if (this === other) {
            return true;
        }
        if (!this || !other) {
            return false;
        }
        return (this.clefPitch === other.clefPitch && this.Line === other.Line);
    }
    NotEqual(clef2) {
        return !this.Equals(clef2);
    }
    ToString() {
        return "ClefType: " + this.clefType;
    }
    calcParameters() {
        switch (this.clefType) {
            case ClefEnum.G:
                this.clefPitch = new Pitch_1.Pitch(Pitch_2.NoteEnum.G, 1 + this.octaveOffset, Pitch_3.AccidentalEnum.NONE);
                this.referenceCyPosition = (5 - this.line) + 2;
                break;
            case ClefEnum.F:
                this.clefPitch = new Pitch_1.Pitch(Pitch_2.NoteEnum.F, 0 + this.octaveOffset, Pitch_3.AccidentalEnum.NONE);
                this.referenceCyPosition = (5 - this.line) + 1.5;
                break;
            case ClefEnum.C:
                this.clefPitch = new Pitch_1.Pitch(Pitch_2.NoteEnum.C, 1 + this.octaveOffset, Pitch_3.AccidentalEnum.NONE);
                this.referenceCyPosition = (5 - this.line);
                break;
            case ClefEnum.percussion:
                this.clefPitch = new Pitch_1.Pitch(Pitch_2.NoteEnum.C, 2, Pitch_3.AccidentalEnum.NONE);
                this.referenceCyPosition = 2;
                break;
            case ClefEnum.TAB:
                this.clefPitch = new Pitch_1.Pitch(Pitch_2.NoteEnum.G, 0, Pitch_3.AccidentalEnum.NONE);
                this.referenceCyPosition = 0;
                break;
            default:
                throw new Exceptions_1.ArgumentOutOfRangeException("clefType");
        }
    }
}
exports.ClefInstruction = ClefInstruction;
var ClefEnum;
(function (ClefEnum) {
    ClefEnum[ClefEnum["G"] = 0] = "G";
    ClefEnum[ClefEnum["F"] = 1] = "F";
    ClefEnum[ClefEnum["C"] = 2] = "C";
    ClefEnum[ClefEnum["percussion"] = 3] = "percussion";
    ClefEnum[ClefEnum["TAB"] = 4] = "TAB";
})(ClefEnum = exports.ClefEnum || (exports.ClefEnum = {}));
var MidiInstrument;
(function (MidiInstrument) {
    MidiInstrument[MidiInstrument["None"] = -1] = "None";
    MidiInstrument[MidiInstrument["Acoustic_Grand_Piano"] = 0] = "Acoustic_Grand_Piano";
    MidiInstrument[MidiInstrument["Bright_Acoustic_Piano"] = 1] = "Bright_Acoustic_Piano";
    MidiInstrument[MidiInstrument["Electric_Grand_Piano"] = 2] = "Electric_Grand_Piano";
    MidiInstrument[MidiInstrument["Honky_tonk_Piano"] = 3] = "Honky_tonk_Piano";
    MidiInstrument[MidiInstrument["Electric_Piano_1"] = 4] = "Electric_Piano_1";
    MidiInstrument[MidiInstrument["Electric_Piano_2"] = 5] = "Electric_Piano_2";
    MidiInstrument[MidiInstrument["Harpsichord"] = 6] = "Harpsichord";
    MidiInstrument[MidiInstrument["Clavinet"] = 7] = "Clavinet";
    MidiInstrument[MidiInstrument["Celesta"] = 8] = "Celesta";
    MidiInstrument[MidiInstrument["Glockenspiel"] = 9] = "Glockenspiel";
    MidiInstrument[MidiInstrument["Music_Box"] = 10] = "Music_Box";
    MidiInstrument[MidiInstrument["Vibraphone"] = 11] = "Vibraphone";
    MidiInstrument[MidiInstrument["Marimba"] = 12] = "Marimba";
    MidiInstrument[MidiInstrument["Xylophone"] = 13] = "Xylophone";
    MidiInstrument[MidiInstrument["Tubular_Bells"] = 14] = "Tubular_Bells";
    MidiInstrument[MidiInstrument["Dulcimer"] = 15] = "Dulcimer";
    MidiInstrument[MidiInstrument["Drawbar_Organ"] = 16] = "Drawbar_Organ";
    MidiInstrument[MidiInstrument["Percussive_Organ"] = 17] = "Percussive_Organ";
    MidiInstrument[MidiInstrument["Rock_Organ"] = 18] = "Rock_Organ";
    MidiInstrument[MidiInstrument["Church_Organ"] = 19] = "Church_Organ";
    MidiInstrument[MidiInstrument["Reed_Organ"] = 20] = "Reed_Organ";
    MidiInstrument[MidiInstrument["Accordion"] = 21] = "Accordion";
    MidiInstrument[MidiInstrument["Harmonica"] = 22] = "Harmonica";
    MidiInstrument[MidiInstrument["Tango_Accordion"] = 23] = "Tango_Accordion";
    MidiInstrument[MidiInstrument["Acoustic_Guitar_nylon"] = 24] = "Acoustic_Guitar_nylon";
    MidiInstrument[MidiInstrument["Acoustic_Guitar_steel"] = 25] = "Acoustic_Guitar_steel";
    MidiInstrument[MidiInstrument["Electric_Guitar_jazz"] = 26] = "Electric_Guitar_jazz";
    MidiInstrument[MidiInstrument["Electric_Guitar_clean"] = 27] = "Electric_Guitar_clean";
    MidiInstrument[MidiInstrument["Electric_Guitar_muted"] = 28] = "Electric_Guitar_muted";
    MidiInstrument[MidiInstrument["Overdriven_Guitar"] = 29] = "Overdriven_Guitar";
    MidiInstrument[MidiInstrument["Distortion_Guitar"] = 30] = "Distortion_Guitar";
    MidiInstrument[MidiInstrument["Guitar_harmonics"] = 31] = "Guitar_harmonics";
    MidiInstrument[MidiInstrument["Acoustic_Bass"] = 32] = "Acoustic_Bass";
    MidiInstrument[MidiInstrument["Electric_Bass_finger"] = 33] = "Electric_Bass_finger";
    MidiInstrument[MidiInstrument["Electric_Bass_pick"] = 34] = "Electric_Bass_pick";
    MidiInstrument[MidiInstrument["Fretless_Bass"] = 35] = "Fretless_Bass";
    MidiInstrument[MidiInstrument["Slap_Bass_1"] = 36] = "Slap_Bass_1";
    MidiInstrument[MidiInstrument["Slap_Bass_2"] = 37] = "Slap_Bass_2";
    MidiInstrument[MidiInstrument["Synth_Bass_1"] = 38] = "Synth_Bass_1";
    MidiInstrument[MidiInstrument["Synth_Bass_2"] = 39] = "Synth_Bass_2";
    MidiInstrument[MidiInstrument["Violin"] = 40] = "Violin";
    MidiInstrument[MidiInstrument["Viola"] = 41] = "Viola";
    MidiInstrument[MidiInstrument["Cello"] = 42] = "Cello";
    MidiInstrument[MidiInstrument["Contrabass"] = 43] = "Contrabass";
    MidiInstrument[MidiInstrument["Tremolo_Strings"] = 44] = "Tremolo_Strings";
    MidiInstrument[MidiInstrument["Pizzicato_Strings"] = 45] = "Pizzicato_Strings";
    MidiInstrument[MidiInstrument["Orchestral_Harp"] = 46] = "Orchestral_Harp";
    MidiInstrument[MidiInstrument["Timpani"] = 47] = "Timpani";
    MidiInstrument[MidiInstrument["String_Ensemble_1"] = 48] = "String_Ensemble_1";
    MidiInstrument[MidiInstrument["String_Ensemble_2"] = 49] = "String_Ensemble_2";
    MidiInstrument[MidiInstrument["Synth_Strings_1"] = 50] = "Synth_Strings_1";
    MidiInstrument[MidiInstrument["Synth_Strings_2"] = 51] = "Synth_Strings_2";
    MidiInstrument[MidiInstrument["Choir_Aahs"] = 52] = "Choir_Aahs";
    MidiInstrument[MidiInstrument["Voice_Oohs"] = 53] = "Voice_Oohs";
    MidiInstrument[MidiInstrument["Synth_Voice"] = 54] = "Synth_Voice";
    MidiInstrument[MidiInstrument["Orchestra_Hit"] = 55] = "Orchestra_Hit";
    MidiInstrument[MidiInstrument["Trumpet"] = 56] = "Trumpet";
    MidiInstrument[MidiInstrument["Trombone"] = 57] = "Trombone";
    MidiInstrument[MidiInstrument["Tuba"] = 58] = "Tuba";
    MidiInstrument[MidiInstrument["Muted_Trumpet"] = 59] = "Muted_Trumpet";
    MidiInstrument[MidiInstrument["French_Horn"] = 60] = "French_Horn";
    MidiInstrument[MidiInstrument["Brass_Section"] = 61] = "Brass_Section";
    MidiInstrument[MidiInstrument["Synth_Brass_1"] = 62] = "Synth_Brass_1";
    MidiInstrument[MidiInstrument["Synth_Brass_2"] = 63] = "Synth_Brass_2";
    MidiInstrument[MidiInstrument["Soprano_Sax"] = 64] = "Soprano_Sax";
    MidiInstrument[MidiInstrument["Alto_Sax"] = 65] = "Alto_Sax";
    MidiInstrument[MidiInstrument["Tenor_Sax"] = 66] = "Tenor_Sax";
    MidiInstrument[MidiInstrument["Baritone_Sax"] = 67] = "Baritone_Sax";
    MidiInstrument[MidiInstrument["Oboe"] = 68] = "Oboe";
    MidiInstrument[MidiInstrument["English_Horn"] = 69] = "English_Horn";
    MidiInstrument[MidiInstrument["Bassoon"] = 70] = "Bassoon";
    MidiInstrument[MidiInstrument["Clarinet"] = 71] = "Clarinet";
    MidiInstrument[MidiInstrument["Piccolo"] = 72] = "Piccolo";
    MidiInstrument[MidiInstrument["Flute"] = 73] = "Flute";
    MidiInstrument[MidiInstrument["Recorder"] = 74] = "Recorder";
    MidiInstrument[MidiInstrument["Pan_Flute"] = 75] = "Pan_Flute";
    MidiInstrument[MidiInstrument["Blown_Bottle"] = 76] = "Blown_Bottle";
    MidiInstrument[MidiInstrument["Shakuhachi"] = 77] = "Shakuhachi";
    MidiInstrument[MidiInstrument["Whistle"] = 78] = "Whistle";
    MidiInstrument[MidiInstrument["Ocarina"] = 79] = "Ocarina";
    MidiInstrument[MidiInstrument["Lead_1_square"] = 80] = "Lead_1_square";
    MidiInstrument[MidiInstrument["Lead_2_sawtooth"] = 81] = "Lead_2_sawtooth";
    MidiInstrument[MidiInstrument["Lead_3_calliope"] = 82] = "Lead_3_calliope";
    MidiInstrument[MidiInstrument["Lead_4_chiff"] = 83] = "Lead_4_chiff";
    MidiInstrument[MidiInstrument["Lead_5_charang"] = 84] = "Lead_5_charang";
    MidiInstrument[MidiInstrument["Lead_6_voice"] = 85] = "Lead_6_voice";
    MidiInstrument[MidiInstrument["Lead_7_fifths"] = 86] = "Lead_7_fifths";
    MidiInstrument[MidiInstrument["Lead_8_bass_lead"] = 87] = "Lead_8_bass_lead";
    MidiInstrument[MidiInstrument["Pad_1_new_age"] = 88] = "Pad_1_new_age";
    MidiInstrument[MidiInstrument["Pad_2_warm"] = 89] = "Pad_2_warm";
    MidiInstrument[MidiInstrument["Pad_3_polysynth"] = 90] = "Pad_3_polysynth";
    MidiInstrument[MidiInstrument["Pad_4_choir"] = 91] = "Pad_4_choir";
    MidiInstrument[MidiInstrument["Pad_5_bowed"] = 92] = "Pad_5_bowed";
    MidiInstrument[MidiInstrument["Pad_6_metallic"] = 93] = "Pad_6_metallic";
    MidiInstrument[MidiInstrument["Pad_7_halo"] = 94] = "Pad_7_halo";
    MidiInstrument[MidiInstrument["Pad_8_sweep"] = 95] = "Pad_8_sweep";
    MidiInstrument[MidiInstrument["FX_1_rain"] = 96] = "FX_1_rain";
    MidiInstrument[MidiInstrument["FX_2_soundtrack"] = 97] = "FX_2_soundtrack";
    MidiInstrument[MidiInstrument["FX_3_crystal"] = 98] = "FX_3_crystal";
    MidiInstrument[MidiInstrument["FX_4_atmosphere"] = 99] = "FX_4_atmosphere";
    MidiInstrument[MidiInstrument["FX_5_brightness"] = 100] = "FX_5_brightness";
    MidiInstrument[MidiInstrument["FX_6_goblins"] = 101] = "FX_6_goblins";
    MidiInstrument[MidiInstrument["FX_7_echoes"] = 102] = "FX_7_echoes";
    MidiInstrument[MidiInstrument["FX_8_scifi"] = 103] = "FX_8_scifi";
    MidiInstrument[MidiInstrument["Sitar"] = 104] = "Sitar";
    MidiInstrument[MidiInstrument["Banjo"] = 105] = "Banjo";
    MidiInstrument[MidiInstrument["Shamisen"] = 106] = "Shamisen";
    MidiInstrument[MidiInstrument["Koto"] = 107] = "Koto";
    MidiInstrument[MidiInstrument["Kalimba"] = 108] = "Kalimba";
    MidiInstrument[MidiInstrument["Bag_pipe"] = 109] = "Bag_pipe";
    MidiInstrument[MidiInstrument["Fiddle"] = 110] = "Fiddle";
    MidiInstrument[MidiInstrument["Shanai"] = 111] = "Shanai";
    MidiInstrument[MidiInstrument["Tinkle_Bell"] = 112] = "Tinkle_Bell";
    MidiInstrument[MidiInstrument["Agogo"] = 113] = "Agogo";
    MidiInstrument[MidiInstrument["Steel_Drums"] = 114] = "Steel_Drums";
    MidiInstrument[MidiInstrument["Woodblock"] = 115] = "Woodblock";
    MidiInstrument[MidiInstrument["Taiko_Drum"] = 116] = "Taiko_Drum";
    MidiInstrument[MidiInstrument["Melodic_Tom"] = 117] = "Melodic_Tom";
    MidiInstrument[MidiInstrument["Synth_Drum"] = 118] = "Synth_Drum";
    MidiInstrument[MidiInstrument["Reverse_Cymbal"] = 119] = "Reverse_Cymbal";
    MidiInstrument[MidiInstrument["Guitar_Fret_Noise"] = 120] = "Guitar_Fret_Noise";
    MidiInstrument[MidiInstrument["Breath_Noise"] = 121] = "Breath_Noise";
    MidiInstrument[MidiInstrument["Seashore"] = 122] = "Seashore";
    MidiInstrument[MidiInstrument["Bird_Tweet"] = 123] = "Bird_Tweet";
    MidiInstrument[MidiInstrument["Telephone_Ring"] = 124] = "Telephone_Ring";
    MidiInstrument[MidiInstrument["Helicopter"] = 125] = "Helicopter";
    MidiInstrument[MidiInstrument["Applause"] = 126] = "Applause";
    MidiInstrument[MidiInstrument["Gunshot"] = 127] = "Gunshot";
    MidiInstrument[MidiInstrument["Percussion"] = 128] = "Percussion";
})(MidiInstrument = exports.MidiInstrument || (exports.MidiInstrument = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts":
/*!*******************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.KeyEnum = exports.NoteEnumToHalfToneLink = exports.KeyInstruction = void 0;
const AbstractNotationInstruction_1 = __webpack_require__(/*! ./AbstractNotationInstruction */ "./src/MusicalScore/VoiceData/Instructions/AbstractNotationInstruction.ts");
const Pitch_1 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const Pitch_2 = __webpack_require__(/*! ../../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
/**
 * A [[KeyInstruction]] is a key signature denoting which notes are to be sharpened or flattened.
 */
class KeyInstruction extends AbstractNotationInstruction_1.AbstractNotationInstruction {
    constructor(sourceStaffEntry = undefined, key = 0, mode = KeyEnum.major) {
        super(sourceStaffEntry);
        /** The halftones this instruction was transposed by, compared to the original. */
        this.isTransposedBy = 0;
        this.Key = key;
        this.keyTypeOriginal = key;
        this.mode = mode;
        this.alteratedNotes = this.calcAlteratedNotes();
    }
    static copy(keyInstruction) {
        const newKeyInstruction = new KeyInstruction(keyInstruction.parent, keyInstruction.Key, keyInstruction.Mode);
        // note that newKeyInstruction.keyTypeOriginal is set incorrectly in the constructor, but we fix that here:
        newKeyInstruction.keyTypeOriginal = keyInstruction.keyTypeOriginal;
        return newKeyInstruction;
    }
    static getAllPossibleMajorKeyInstructions() {
        const keyInstructionList = [];
        for (let keyType = -7; keyType < 7; keyType++) {
            const currentKeyInstruction = new KeyInstruction(undefined, keyType, KeyEnum.major);
            keyInstructionList.push(currentKeyInstruction);
        }
        return keyInstructionList;
    }
    get Key() {
        return this.keyType;
    }
    set Key(value) {
        this.keyType = value;
        this.alteratedNotes = this.calcAlteratedNotes();
    }
    get Mode() {
        return this.mode;
    }
    set Mode(value) {
        this.mode = value;
    }
    get AlteratedNotes() {
        return this.alteratedNotes;
    }
    calcAlteratedNotes() {
        const noteList = [];
        if (this.keyType > 0) {
            for (let i = 0; i < this.keyType; i++) {
                noteList.push(KeyInstruction.sharpPositionList[i]);
            }
        }
        else if (this.keyType < 0) {
            for (let i = 0; i < -this.keyType; i++) {
                noteList.push(KeyInstruction.flatPositionList[i]);
            }
        }
        return noteList;
    }
    willAlterateNote(note) {
        if (this.alteratedNotes.indexOf(note) >= 0) {
            return true;
        }
        return false;
    }
    getAlterationForPitch(pitch) {
        if (this.keyType > 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) <= this.keyType) {
            // if (this.keyType > 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) > -1) {
            return Pitch_2.AccidentalEnum.SHARP;
            // } else if (this.keyType < 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) > -1) {
        }
        else if (this.keyType < 0 && this.alteratedNotes.indexOf(pitch.FundamentalNote) <= Math.abs(this.keyType)) {
            return Pitch_2.AccidentalEnum.FLAT;
        }
        return Pitch_2.AccidentalEnum.NONE;
    }
    ToString() {
        return "Key: " + this.keyType + "" + this.mode;
    }
    OperatorEquals(key2) {
        const key1 = this;
        if (key1 === key2) {
            return true;
        }
        if (!key1 || !key2) {
            return false;
        }
        return (key1.Key === key2.Key && key1.Mode === key2.Mode);
    }
    OperatorNotEqual(key2) {
        return !(this.OperatorEquals(key2));
    }
}
exports.KeyInstruction = KeyInstruction;
KeyInstruction.sharpPositionList = [Pitch_1.NoteEnum.F, Pitch_1.NoteEnum.C, Pitch_1.NoteEnum.G, Pitch_1.NoteEnum.D, Pitch_1.NoteEnum.A, Pitch_1.NoteEnum.E, Pitch_1.NoteEnum.B];
KeyInstruction.flatPositionList = [Pitch_1.NoteEnum.B, Pitch_1.NoteEnum.E, Pitch_1.NoteEnum.A, Pitch_1.NoteEnum.D, Pitch_1.NoteEnum.G, Pitch_1.NoteEnum.C, Pitch_1.NoteEnum.F];
class NoteEnumToHalfToneLink {
    constructor(note, halftone) {
        this.note = note;
        this.halfTone = halftone;
    }
}
exports.NoteEnumToHalfToneLink = NoteEnumToHalfToneLink;
var KeyEnum;
(function (KeyEnum) {
    KeyEnum[KeyEnum["major"] = 0] = "major";
    KeyEnum[KeyEnum["minor"] = 1] = "minor";
    KeyEnum[KeyEnum["none"] = 2] = "none";
    KeyEnum[KeyEnum["dorian"] = 3] = "dorian";
    KeyEnum[KeyEnum["phrygian"] = 4] = "phrygian";
    KeyEnum[KeyEnum["lydian"] = 5] = "lydian";
    KeyEnum[KeyEnum["mixolydian"] = 6] = "mixolydian";
    KeyEnum[KeyEnum["aeolian"] = 7] = "aeolian";
    KeyEnum[KeyEnum["ionian"] = 8] = "ionian";
    KeyEnum[KeyEnum["locrian"] = 9] = "locrian";
})(KeyEnum = exports.KeyEnum || (exports.KeyEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts":
/*!**************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AlignmentType = exports.RepetitionInstructionEnum = exports.RepetitionInstruction = exports.RepetitionInstructionComparer = void 0;
class RepetitionInstructionComparer /*implements IComparer<RepetitionInstruction>*/ {
    static Compare(x, y) {
        if (x.parentRepetition !== undefined && y.parentRepetition) {
            if (x.alignment === AlignmentType.End && y.alignment === AlignmentType.End) {
                if (x.parentRepetition.StartIndex < y.parentRepetition.StartIndex) {
                    return 1;
                }
                if (x.parentRepetition.StartIndex > y.parentRepetition.StartIndex) {
                    return -1;
                }
            }
            if (x.alignment === AlignmentType.Begin && y.alignment === AlignmentType.Begin) {
                if (x.parentRepetition.EndIndex < y.parentRepetition.EndIndex) {
                    return 1;
                }
                if (x.parentRepetition.EndIndex > y.parentRepetition.EndIndex) {
                    return -1;
                }
            }
        }
        return 0;
    }
}
exports.RepetitionInstructionComparer = RepetitionInstructionComparer;
class RepetitionInstruction /*implements IComparable*/ {
    /* FIXME: Check constructor calling from other classes
     constructor(measureIndex: number, type: RepetitionInstructionEnum) {
     this(measureIndex, [], type, AlignmentType.End, undefined);
     if (type === RepetitionInstructionEnum.StartLine || type === RepetitionInstructionEnum.Segno || type === RepetitionInstructionEnum.Coda) {
     this.alignment = AlignmentType.Begin;
     }
     }
     constructor(measureIndex: number, type: RepetitionInstructionEnum, alignment: AlignmentType, parentRepetition: Repetition) {
     this(measureIndex, [], type, alignment, parentRepetition);

     }
     constructor(measureIndex: number, endingIndex: number, type: RepetitionInstructionEnum, alignment: AlignmentType, parentRepetition: Repetition) {
     this(measureIndex, [endingIndex], type, alignment, parentRepetition);

     }
     */
    constructor(measureIndex, type, alignment = AlignmentType.End, parentRepetition = undefined, endingIndices = undefined) {
        this.endingIndices = undefined;
        this.measureIndex = measureIndex;
        if (endingIndices) {
            this.endingIndices = endingIndices.slice(); // slice=arrayCopy
        }
        this.type = type;
        this.alignment = alignment;
        this.parentRepetition = parentRepetition;
    }
    CompareTo(obj) {
        const other = obj;
        if (this.measureIndex > other.measureIndex) {
            return 1;
        }
        else if (this.measureIndex < other.measureIndex) {
            return -1;
        }
        if (this.alignment === AlignmentType.Begin) {
            if (other.alignment === AlignmentType.End) {
                return -1;
            }
            switch (this.type) {
                case RepetitionInstructionEnum.Ending:
                    return 1;
                case RepetitionInstructionEnum.StartLine:
                    if (other.type === RepetitionInstructionEnum.Ending) {
                        return -1;
                    }
                    return 1;
                case RepetitionInstructionEnum.Coda:
                case RepetitionInstructionEnum.Segno:
                    if (other.type === RepetitionInstructionEnum.Coda) {
                        return 1;
                    }
                    return -1;
                default:
            }
        }
        else {
            if (other.alignment === AlignmentType.Begin) {
                return 1;
            }
            switch (this.type) {
                case RepetitionInstructionEnum.Ending:
                    return -1;
                case RepetitionInstructionEnum.Fine:
                case RepetitionInstructionEnum.ToCoda:
                    if (other.type === RepetitionInstructionEnum.Ending) {
                        return 1;
                    }
                    return -1;
                case RepetitionInstructionEnum.ForwardJump:
                    switch (other.type) {
                        case RepetitionInstructionEnum.Ending:
                        case RepetitionInstructionEnum.Fine:
                        case RepetitionInstructionEnum.ToCoda:
                            return 1;
                        default:
                    }
                    return -1;
                case RepetitionInstructionEnum.DalSegnoAlFine:
                case RepetitionInstructionEnum.DaCapoAlFine:
                case RepetitionInstructionEnum.DalSegnoAlCoda:
                case RepetitionInstructionEnum.DaCapoAlCoda:
                case RepetitionInstructionEnum.DaCapo:
                case RepetitionInstructionEnum.DalSegno:
                case RepetitionInstructionEnum.BackJumpLine:
                    return 1;
                default:
            }
        }
        return 0;
    }
    equals(other) {
        if (this.measureIndex !== other.measureIndex
            || this.type !== other.type
            || this.alignment !== other.alignment) {
            return false;
        }
        if (this.endingIndices === other.endingIndices) {
            return true;
        }
        if (!this.endingIndices || !other.endingIndices ||
            this.endingIndices.length !== other.endingIndices.length) {
            return false;
        }
        for (let i = 0; i < this.endingIndices.length; i++) {
            if (this.endingIndices[i] !== other.endingIndices[i]) {
                return false;
            }
        }
        return true;
    }
}
exports.RepetitionInstruction = RepetitionInstruction;
var RepetitionInstructionEnum;
(function (RepetitionInstructionEnum) {
    RepetitionInstructionEnum[RepetitionInstructionEnum["StartLine"] = 0] = "StartLine";
    RepetitionInstructionEnum[RepetitionInstructionEnum["ForwardJump"] = 1] = "ForwardJump";
    RepetitionInstructionEnum[RepetitionInstructionEnum["BackJumpLine"] = 2] = "BackJumpLine";
    RepetitionInstructionEnum[RepetitionInstructionEnum["Ending"] = 3] = "Ending";
    RepetitionInstructionEnum[RepetitionInstructionEnum["DaCapo"] = 4] = "DaCapo";
    RepetitionInstructionEnum[RepetitionInstructionEnum["DalSegno"] = 5] = "DalSegno";
    RepetitionInstructionEnum[RepetitionInstructionEnum["Fine"] = 6] = "Fine";
    RepetitionInstructionEnum[RepetitionInstructionEnum["ToCoda"] = 7] = "ToCoda";
    RepetitionInstructionEnum[RepetitionInstructionEnum["DalSegnoAlFine"] = 8] = "DalSegnoAlFine";
    RepetitionInstructionEnum[RepetitionInstructionEnum["DaCapoAlFine"] = 9] = "DaCapoAlFine";
    RepetitionInstructionEnum[RepetitionInstructionEnum["DalSegnoAlCoda"] = 10] = "DalSegnoAlCoda";
    RepetitionInstructionEnum[RepetitionInstructionEnum["DaCapoAlCoda"] = 11] = "DaCapoAlCoda";
    RepetitionInstructionEnum[RepetitionInstructionEnum["Coda"] = 12] = "Coda";
    RepetitionInstructionEnum[RepetitionInstructionEnum["Segno"] = 13] = "Segno";
    RepetitionInstructionEnum[RepetitionInstructionEnum["None"] = 14] = "None";
})(RepetitionInstructionEnum = exports.RepetitionInstructionEnum || (exports.RepetitionInstructionEnum = {}));
var AlignmentType;
(function (AlignmentType) {
    AlignmentType[AlignmentType["Begin"] = 0] = "Begin";
    AlignmentType[AlignmentType["End"] = 1] = "End";
})(AlignmentType = exports.AlignmentType || (exports.AlignmentType = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts":
/*!**********************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.RhythmSymbolEnum = exports.RhythmInstruction = void 0;
const AbstractNotationInstruction_1 = __webpack_require__(/*! ./AbstractNotationInstruction */ "./src/MusicalScore/VoiceData/Instructions/AbstractNotationInstruction.ts");
/**
 * A [[RhythmInstruction]] is the time signature which specifies the number of beats in each bar, and the value of one beat.
 */
class RhythmInstruction extends AbstractNotationInstruction_1.AbstractNotationInstruction {
    constructor(rhythm, rhythmSymbolEnum) {
        super(undefined); // FIXME no parent SourceStaffEntry
        this.rhythm = rhythm;
        this.numerator = rhythm.Numerator;
        this.denominator = rhythm.Denominator;
        this.symbolEnum = rhythmSymbolEnum;
    }
    get Rhythm() {
        return this.rhythm;
    }
    set Rhythm(value) {
        this.rhythm = value;
    }
    get SymbolEnum() {
        return this.symbolEnum;
    }
    set SymbolEnum(value) {
        this.symbolEnum = value;
    }
    clone() {
        return new RhythmInstruction(this.rhythm.clone(), this.symbolEnum);
    }
    OperatorEquals(rhythm2) {
        const rhythm1 = this;
        if (rhythm1 === rhythm2) {
            return true;
        }
        if (!rhythm1 || !rhythm2) {
            return false;
        }
        return (rhythm1.numerator === rhythm2.numerator && rhythm1.denominator === rhythm2.denominator);
    }
    OperatorNotEqual(rhythm2) {
        const rhythm1 = this;
        return !(rhythm1 === rhythm2);
    }
    ToString() {
        return "Rhythm: " + this.rhythm.toString();
    }
}
exports.RhythmInstruction = RhythmInstruction;
var RhythmSymbolEnum;
(function (RhythmSymbolEnum) {
    RhythmSymbolEnum[RhythmSymbolEnum["NONE"] = 0] = "NONE";
    RhythmSymbolEnum[RhythmSymbolEnum["COMMON"] = 1] = "COMMON";
    RhythmSymbolEnum[RhythmSymbolEnum["CUT"] = 2] = "CUT";
})(RhythmSymbolEnum = exports.RhythmSymbolEnum || (exports.RhythmSymbolEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Instructions/TechnicalInstruction.ts":
/*!*************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Instructions/TechnicalInstruction.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TechnicalInstruction = exports.TechnicalInstructionType = void 0;
var TechnicalInstructionType;
(function (TechnicalInstructionType) {
    TechnicalInstructionType[TechnicalInstructionType["Fingering"] = 0] = "Fingering";
    TechnicalInstructionType[TechnicalInstructionType["String"] = 1] = "String";
})(TechnicalInstructionType = exports.TechnicalInstructionType || (exports.TechnicalInstructionType = {}));
class TechnicalInstruction {
}
exports.TechnicalInstruction = TechnicalInstruction;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/LinkedVoice.ts":
/*!***************************************************!*\
  !*** ./src/MusicalScore/VoiceData/LinkedVoice.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedVoice = void 0;
const Voice_1 = __webpack_require__(/*! ./Voice */ "./src/MusicalScore/VoiceData/Voice.ts");
class LinkedVoice extends Voice_1.Voice {
    constructor(parent, voiceId, master) {
        super(parent, voiceId);
        this.master = master;
    }
    get Master() {
        return this.master;
    }
}
exports.LinkedVoice = LinkedVoice;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Lyrics/LyricsEntry.ts":
/*!**********************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Lyrics/LyricsEntry.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LyricsEntry = void 0;
const FontStyles_1 = __webpack_require__(/*! ../../../Common/Enums/FontStyles */ "./src/Common/Enums/FontStyles.ts");
class LyricsEntry {
    constructor(text, verseNumber, word, parent, syllableNumber = -1) {
        this.text = text;
        this.word = word;
        this.parent = parent;
        this.verseNumber = verseNumber;
        if (syllableNumber >= 0) {
            this.syllableIndex = syllableNumber;
        }
    }
    get Text() {
        return this.text;
    }
    set Text(value) {
        this.text = value;
    }
    get Word() {
        return this.word;
    }
    get Parent() {
        return this.parent;
    }
    set Parent(value) {
        this.parent = value;
    }
    get VerseNumber() {
        return this.verseNumber;
    }
    get SyllableIndex() {
        return this.syllableIndex;
    }
    get IsTranslation() {
        return this.VerseNumber.endsWith("translation");
    }
    get IsChorus() {
        return this.VerseNumber.startsWith("chorus");
    }
    get FontStyle() {
        return this.IsChorus || this.IsTranslation ? FontStyles_1.FontStyles.Italic : FontStyles_1.FontStyles.Regular;
    }
}
exports.LyricsEntry = LyricsEntry;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Lyrics/LyricsWord.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Lyrics/LyricsWord.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LyricWord = void 0;
class LyricWord {
    constructor() {
        this.syllables = [];
    }
    get Syllables() {
        return this.syllables;
    }
    containsVoiceEntry(voiceEntry) {
        for (let idx = 0, len = this.Syllables.length; idx < len; ++idx) {
            const lyricsEntry = this.Syllables[idx];
            if (lyricsEntry.Parent === voiceEntry) {
                return true;
            }
        }
        return false;
    }
    findLyricEntryInVoiceEntry(voiceEntry) {
        for (let idx = 0, len = this.Syllables.length; idx < len; ++idx) {
            const lyricsEntry = this.Syllables[idx];
            if (lyricsEntry.Parent === voiceEntry) {
                return lyricsEntry;
            }
        }
    }
}
exports.LyricWord = LyricWord;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Note.ts":
/*!********************************************!*\
  !*** ./src/MusicalScore/VoiceData/Note.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Appearance = exports.Note = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
/**
 * Represents a single pitch with a duration (length)
 */
class Note {
    constructor(voiceEntry, parentStaffEntry, length, pitch, sourceMeasure, isRest) {
        this.slurs = [];
        this.playbackInstrumentId = undefined;
        this.notehead = undefined;
        /** States whether the note should be displayed. False if xmlNode.attribute("print-object").value = "no". */
        this.printObject = true;
        this.voiceEntry = voiceEntry;
        this.parentStaffEntry = parentStaffEntry;
        this.length = length;
        this.pitch = pitch;
        this.sourceMeasure = sourceMeasure;
        this.isRestFlag = isRest !== null && isRest !== void 0 ? isRest : false;
        if (pitch) {
            this.halfTone = pitch.getHalfTone();
        }
        else {
            this.halfTone = 0;
        }
    }
    get NoteAsString() {
        return this.pitch.toString();
    }
    get ParentVoiceEntry() {
        return this.voiceEntry;
    }
    set ParentVoiceEntry(value) {
        this.voiceEntry = value;
    }
    get ParentStaffEntry() {
        return this.parentStaffEntry;
    }
    get ParentStaff() {
        return this.parentStaffEntry.ParentStaff;
    }
    get Length() {
        return this.length;
    }
    set Length(value) {
        this.length = value;
    }
    get SourceMeasure() {
        return this.sourceMeasure;
    }
    get TypeLength() {
        return this.typeLength;
    }
    set TypeLength(value) {
        this.typeLength = value;
    }
    get NoteTypeXml() {
        return this.noteTypeXml;
    }
    set NoteTypeXml(value) {
        this.noteTypeXml = value;
    }
    get NormalNotes() {
        return this.normalNotes;
    }
    set NormalNotes(value) {
        this.normalNotes = value;
    }
    get Pitch() {
        return this.pitch;
    }
    get NoteBeam() {
        return this.beam;
    }
    set NoteBeam(value) {
        this.beam = value;
    }
    set Notehead(value) {
        this.notehead = value;
    }
    get Notehead() {
        return this.notehead;
    }
    get NoteTuplet() {
        return this.tuplet;
    }
    set NoteTuplet(value) {
        this.tuplet = value;
    }
    get NoteGlissando() {
        return this.glissando;
    }
    set NoteGlissando(value) {
        this.glissando = value;
    }
    get NoteTie() {
        return this.tie;
    }
    set NoteTie(value) {
        this.tie = value;
    }
    get NoteSlurs() {
        return this.slurs;
    }
    set NoteSlurs(value) {
        this.slurs = value;
    }
    get PlaybackInstrumentId() {
        return this.playbackInstrumentId;
    }
    set PlaybackInstrumentId(value) {
        this.playbackInstrumentId = value;
    }
    get PrintObject() {
        return this.printObject;
    }
    set PrintObject(value) {
        this.printObject = value;
    }
    get Arpeggio() {
        return this.arpeggio;
    }
    set Arpeggio(value) {
        this.arpeggio = value;
    }
    get IsCueNote() {
        return this.isCueNote;
    }
    set IsCueNote(value) {
        this.isCueNote = value;
    }
    get StemDirectionXml() {
        return this.stemDirectionXml;
    }
    set StemDirectionXml(value) {
        this.stemDirectionXml = value;
    }
    get TremoloStrokes() {
        var _a;
        return (_a = this.TremoloInfo) === null || _a === void 0 ? void 0 : _a.tremoloStrokes;
    }
    get StemColorXml() {
        return this.stemColorXml;
    }
    set StemColorXml(value) {
        this.stemColorXml = value;
    }
    get NoteheadColorXml() {
        return this.noteheadColorXml;
    }
    set NoteheadColorXml(value) {
        this.noteheadColorXml = value;
    }
    /** The desired notehead color for the next render. */
    get NoteheadColor() {
        return this.noteheadColor;
    }
    set NoteheadColor(value) {
        this.noteheadColor = value;
    }
    get NoteheadColorCurrentlyRendered() {
        return this.noteheadColorCurrentlyRendered;
    }
    set NoteheadColorCurrentlyRendered(value) {
        this.noteheadColorCurrentlyRendered = value;
    }
    isRest() {
        return this.isRestFlag;
    }
    /** Note: May be dangerous to use if ParentStaffEntry.VerticalContainerParent etc is not set.
     * better calculate this directly when you have access to the note's measure.
     * whole rest: length = measure length. (4/4 in a 4/4 time signature, 3/4 in a 3/4 time signature, 1/4 in a 1/4 time signature, etc.)
     */
    isWholeRest() {
        return this.isRest() && this.Length.RealValue === this.sourceMeasure.ActiveTimeSignature.RealValue;
    }
    /** Whether the note fills the whole measure. */
    isWholeMeasureNote() {
        return this.Length.RealValue === this.sourceMeasure.ActiveTimeSignature.RealValue;
    }
    ToString() {
        if (this.pitch) {
            return this.Pitch.ToString() + ", length: " + this.length.toString();
        }
        else {
            return "rest note, length: " + this.length.toString();
        }
    }
    getAbsoluteTimestamp() {
        return Fraction_1.Fraction.plus(this.voiceEntry.Timestamp, this.sourceMeasure.AbsoluteTimestamp);
    }
    isDuplicateSlur(slur) {
        for (let idx = 0, len = this.slurs.length; idx < len; ++idx) {
            const noteSlur = this.slurs[idx];
            if (noteSlur.StartNote !== undefined &&
                noteSlur.EndNote !== undefined &&
                slur.StartNote !== undefined &&
                slur.StartNote === noteSlur.StartNote &&
                noteSlur.EndNote === this &&
                slur.PlacementXml === noteSlur.PlacementXml) {
                return true;
            }
        }
        return false;
    }
}
exports.Note = Note;
var Appearance;
(function (Appearance) {
    Appearance[Appearance["Normal"] = 0] = "Normal";
    Appearance[Appearance["Grace"] = 1] = "Grace";
    Appearance[Appearance["Cue"] = 2] = "Cue";
})(Appearance = exports.Appearance || (exports.Appearance = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/NoteType.ts":
/*!************************************************!*\
  !*** ./src/MusicalScore/VoiceData/NoteType.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NoteTypeHandler = exports.NoteType = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const ITextTranslation_1 = __webpack_require__(/*! ../Interfaces/ITextTranslation */ "./src/MusicalScore/Interfaces/ITextTranslation.ts");
const Exceptions_1 = __webpack_require__(/*! ../Exceptions */ "./src/MusicalScore/Exceptions.ts");
var NoteType;
(function (NoteType) {
    // xml note types, e.g. given as <note><type>quarter, see:
    //https://usermanuals.musicxml.com/MusicXML/Content/ST-MusicXML-note-type-value.htm
    NoteType[NoteType["UNDEFINED"] = 0] = "UNDEFINED";
    NoteType[NoteType["_1024th"] = 1] = "_1024th";
    NoteType[NoteType["_512th"] = 2] = "_512th";
    NoteType[NoteType["_256th"] = 3] = "_256th";
    NoteType[NoteType["_128th"] = 4] = "_128th";
    NoteType[NoteType["_64th"] = 5] = "_64th";
    NoteType[NoteType["_32nd"] = 6] = "_32nd";
    NoteType[NoteType["_16th"] = 7] = "_16th";
    NoteType[NoteType["EIGTH"] = 8] = "EIGTH";
    NoteType[NoteType["QUARTER"] = 9] = "QUARTER";
    NoteType[NoteType["HALF"] = 10] = "HALF";
    NoteType[NoteType["WHOLE"] = 11] = "WHOLE";
    NoteType[NoteType["BREVE"] = 12] = "BREVE";
    NoteType[NoteType["LONG"] = 13] = "LONG";
    NoteType[NoteType["MAXIMA"] = 14] = "MAXIMA";
})(NoteType = exports.NoteType || (exports.NoteType = {}));
class NoteTypeHandler {
    // alternative to array: use switch/case
    static NoteTypeToString(noteType) {
        return this.NoteTypeXmlValues[noteType];
        // assumes that the enum values are ordered from 0 to x, like NoteTypeXmlValues array members
        // see NoteType_Test.ts
    }
    static StringToNoteType(noteType) {
        const indexInArray = this.NoteTypeXmlValues.indexOf(noteType);
        return indexInArray !== -1 ? indexInArray : NoteType.UNDEFINED;
    }
    /**
     *
     * @param type
     * @returns {Fraction} - a Note's Duration from a given type (type must be valid).
     */
    static getNoteDurationFromType(type) {
        switch (type) {
            case "1024th":
                return new Fraction_1.Fraction(1, 1024);
            case "512th":
                return new Fraction_1.Fraction(1, 512);
            case "256th":
                return new Fraction_1.Fraction(1, 256);
            case "128th":
                return new Fraction_1.Fraction(1, 128);
            case "64th":
                return new Fraction_1.Fraction(1, 64);
            case "32th":
            case "32nd":
                return new Fraction_1.Fraction(1, 32);
            case "16th":
                return new Fraction_1.Fraction(1, 16);
            case "eighth":
                return new Fraction_1.Fraction(1, 8);
            case "quarter":
                return new Fraction_1.Fraction(1, 4);
            case "half":
                return new Fraction_1.Fraction(1, 2);
            case "whole":
                return new Fraction_1.Fraction(1, 1);
            case "breve":
                return new Fraction_1.Fraction(2, 1);
            case "long":
                return new Fraction_1.Fraction(4, 1);
            case "maxima":
                return new Fraction_1.Fraction(8, 1);
            default: {
                const errorMsg = ITextTranslation_1.ITextTranslation.translateText("ReaderErrorMessages/NoteDurationError", "Invalid note duration.");
                throw new Exceptions_1.MusicSheetReadingException(errorMsg);
            }
        }
    }
}
exports.NoteTypeHandler = NoteTypeHandler;
NoteTypeHandler.NoteTypeXmlValues = ["", "1024th", "512th", "256th", "128th", "64th", "32nd", "16th",
    "eigth", "quarter", "half", "whole", "breve", "long", "maxima"];


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Notehead.ts":
/*!************************************************!*\
  !*** ./src/MusicalScore/VoiceData/Notehead.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NoteHeadShape = exports.Notehead = void 0;
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
/**
 * A note head with shape and fill information belonging to a [[Note]].
 */
class Notehead {
    /**
     * @param sourceNote
     * @param shapeTypeXml The shape type given from XML.
     *                     See https://usermanuals.musicxml.com/MusicXML/Content/ST-MusicXML-notehead-value.htm
     * @param filledXml The XML flag to fill the note shape. Can be undefined if not included in XML.
     *                  If undefined, the filled parameter will be calculated by note duration (d < half note => filled)
     */
    constructor(sourceNote, shapeTypeXml, filledXml = undefined) {
        this.sourceNote = sourceNote;
        this.setShapeFromXml(shapeTypeXml, filledXml);
    }
    // note that color is stored in the sourceNote, because note.Notehead is undefined for normal noteheads.
    /** Sets the note head's shape from XML parameters.
     * @param shapeTypeXml The XML shape.
     * @param filledXmlAttribute the filled parameter as given in XML.
     *                           Can be undefined if not given in XML or if it should be calculated from note duration.
     *                           If undefined, this.sourceNote should not be undefined.
     */
    setShapeFromXml(shapeTypeXml, filledXmlAttribute = undefined) {
        this.shape = Notehead.ShapeTypeXmlToShape(shapeTypeXml);
        let filled = filledXmlAttribute;
        if (filled === undefined) { // don't replace undefined check
            if (!this.sourceNote) {
                // this should not happen. Either filledXmlAttribute or sourceNote should be defined.
                loglevel_1.default.warn("notehead: sourceNote and filledXmlAttribute undefined.");
                filled = true;
            }
            else {
                filled = this.sourceNote.Length.Denominator > 2;
            }
        }
        this.filled = filled;
    }
    get SourceNote() {
        return this.sourceNote;
    }
    get Shape() {
        return this.shape;
    }
    get Filled() {
        return this.filled;
    }
    /** Converts xml attribute to NoteHeadShape.
     * Necessary because "circle-x" is not a valid enum member name.
     */
    static ShapeTypeXmlToShape(shapeTypeXml) {
        switch (shapeTypeXml.toLowerCase()) {
            case "normal":
                return NoteHeadShape.NORMAL;
            case "x":
                return NoteHeadShape.X;
            case "slash":
                return NoteHeadShape.SLASH;
            case "diamond":
                return NoteHeadShape.DIAMOND;
            case "square":
                return NoteHeadShape.SQUARE;
            case "la": // Musescore displays this as a square
                return NoteHeadShape.SQUARE;
            case "do":
            case "triangle":
                return NoteHeadShape.TRIANGLE;
            case "inverted triangle":
                return NoteHeadShape.TRIANGLE_INVERTED;
            case "rectangle":
                return NoteHeadShape.RECTANGLE;
            case "circle-x":
                return NoteHeadShape.CIRCLEX;
            default:
                loglevel_1.default.info("unsupported/unhandled xml notehead '" + shapeTypeXml + "'. Using normal notehead.");
                return NoteHeadShape.NORMAL;
        }
    }
}
exports.Notehead = Notehead;
/** shape of a note head, needs to be supported by MusicXML and Vexflow. */
var NoteHeadShape;
(function (NoteHeadShape) {
    NoteHeadShape[NoteHeadShape["CIRCLEX"] = 0] = "CIRCLEX";
    NoteHeadShape[NoteHeadShape["DIAMOND"] = 1] = "DIAMOND";
    NoteHeadShape[NoteHeadShape["NORMAL"] = 2] = "NORMAL";
    NoteHeadShape[NoteHeadShape["RECTANGLE"] = 3] = "RECTANGLE";
    NoteHeadShape[NoteHeadShape["SLASH"] = 4] = "SLASH";
    NoteHeadShape[NoteHeadShape["SQUARE"] = 5] = "SQUARE";
    NoteHeadShape[NoteHeadShape["TRIANGLE"] = 6] = "TRIANGLE";
    NoteHeadShape[NoteHeadShape["TRIANGLE_INVERTED"] = 7] = "TRIANGLE_INVERTED";
    NoteHeadShape[NoteHeadShape["X"] = 8] = "X";
    // TODO: Add the rest from https://usermanuals.musicxml.com/MusicXML/Content/ST-MusicXML-notehead-value.htm
    // currently all Vexflow supported shapes present
})(NoteHeadShape = exports.NoteHeadShape || (exports.NoteHeadShape = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/OrnamentContainer.ts":
/*!*********************************************************!*\
  !*** ./src/MusicalScore/VoiceData/OrnamentContainer.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OrnamentEnum = exports.OrnamentContainer = void 0;
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const AbstractExpression_1 = __webpack_require__(/*! ./Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
class OrnamentContainer {
    constructor(ornament) {
        this.placement = AbstractExpression_1.PlacementEnum.Above;
        this.accidentalAbove = Pitch_1.AccidentalEnum.NONE;
        this.accidentalBelow = Pitch_1.AccidentalEnum.NONE;
        this.ornament = ornament;
    }
    get GetOrnament() {
        return this.ornament;
    }
    get AccidentalAbove() {
        return this.accidentalAbove;
    }
    set AccidentalAbove(value) {
        this.accidentalAbove = value;
    }
    get AccidentalBelow() {
        return this.accidentalBelow;
    }
    set AccidentalBelow(value) {
        this.accidentalBelow = value;
    }
}
exports.OrnamentContainer = OrnamentContainer;
var OrnamentEnum;
(function (OrnamentEnum) {
    OrnamentEnum[OrnamentEnum["Trill"] = 0] = "Trill";
    OrnamentEnum[OrnamentEnum["Turn"] = 1] = "Turn";
    OrnamentEnum[OrnamentEnum["InvertedTurn"] = 2] = "InvertedTurn";
    OrnamentEnum[OrnamentEnum["DelayedTurn"] = 3] = "DelayedTurn";
    OrnamentEnum[OrnamentEnum["DelayedInvertedTurn"] = 4] = "DelayedInvertedTurn";
    OrnamentEnum[OrnamentEnum["Mordent"] = 5] = "Mordent";
    OrnamentEnum[OrnamentEnum["InvertedMordent"] = 6] = "InvertedMordent";
    // the following ornaments are not yet supported by MusicXML (3.1).
    // there is a "other-ornament"-node, but most programs probably don't export as such, e.g. Musescore
    // see musicXML manuals -> Ornaments
    /*
    UpPrall,
    DownPrall,
    PrallUp,
    PrallDown,
    UpMordent,
    DownMordent,
    LinePrall,
    PrallPrall
    */
})(OrnamentEnum = exports.OrnamentEnum || (exports.OrnamentEnum = {}));


/***/ }),

/***/ "./src/MusicalScore/VoiceData/SourceMeasure.ts":
/*!*****************************************************!*\
  !*** ./src/MusicalScore/VoiceData/SourceMeasure.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceMeasure = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const VerticalSourceStaffEntryContainer_1 = __webpack_require__(/*! ./VerticalSourceStaffEntryContainer */ "./src/MusicalScore/VoiceData/VerticalSourceStaffEntryContainer.ts");
const SourceStaffEntry_1 = __webpack_require__(/*! ./SourceStaffEntry */ "./src/MusicalScore/VoiceData/SourceStaffEntry.ts");
const RepetitionInstruction_1 = __webpack_require__(/*! ./Instructions/RepetitionInstruction */ "./src/MusicalScore/VoiceData/Instructions/RepetitionInstruction.ts");
const VoiceEntry_1 = __webpack_require__(/*! ./VoiceEntry */ "./src/MusicalScore/VoiceData/VoiceEntry.ts");
const ClefInstruction_1 = __webpack_require__(/*! ./Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const KeyInstruction_1 = __webpack_require__(/*! ./Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const SystemLinesEnum_1 = __webpack_require__(/*! ../Graphical/SystemLinesEnum */ "./src/MusicalScore/Graphical/SystemLinesEnum.ts");
//import {BaseIdClass} from "../../Util/BaseIdClass"; // SourceMeasure originally extended BaseIdClass, but ids weren't used.
/**
 * The Source Measure represents the source data of a unique measure, including all instruments with their staves.
 * There exists one source measure per XML measure or per paper sheet measure (e.g. the source measures are not doubled in repetitions)
 */
class SourceMeasure {
    /**
     * The data entries and data lists will be filled with null values according to the total number of staves,
     * so that existing objects can be referred to by staff index.
     * @param completeNumberOfStaves
     * @param rules
     */
    constructor(completeNumberOfStaves, rules) {
        /** Whether the MusicXML says to print a new system (line break). See OSMDOptions.newSystemFromXML */
        this.printNewSystemXml = false;
        /** Whether the MusicXML says to print a new page (page break). See OSMDOptions.newPageFromXML */
        this.printNewPageXml = false;
        this.IsSystemStartMeasure = false;
        this.hasLyrics = false;
        this.hasMoodExpressions = false;
        /** Whether the SourceMeasure only has rests, no other entries.
         *  Not the same as GraphicalMeasure.hasOnlyRests, because one SourceMeasure can have many GraphicalMeasures (staffs).
         */
        this.allRests = false;
        this.isReducedToMultiRest = false;
        /** If this measure is a MultipleRestMeasure, this is the number of the measure in that sequence of measures. */
        this.multipleRestMeasureNumber = 0;
        this.staffLinkedExpressions = [];
        this.tempoExpressions = [];
        this.verticalSourceStaffEntryContainers = [];
        this.graphicalMeasureErrors = [];
        this.firstRepetitionInstructions = [];
        this.lastRepetitionInstructions = [];
        this.completeNumberOfStaves = completeNumberOfStaves;
        this.implicitMeasure = false;
        this.hasEndLine = false;
        this.endingBarStyleXml = "";
        this.endingBarStyleEnum = SystemLinesEnum_1.SystemLinesEnum.SingleThin;
        this.firstInstructionsStaffEntries = new Array(completeNumberOfStaves);
        this.lastInstructionsStaffEntries = new Array(completeNumberOfStaves);
        this.rules = rules;
        this.TempoInBPM = 0;
        for (let i = 0; i < completeNumberOfStaves; i++) {
            this.graphicalMeasureErrors.push(false);
            this.staffLinkedExpressions.push([]);
        }
    }
    get MeasureNumber() {
        return this.measureNumber;
    }
    set MeasureNumber(value) {
        this.measureNumber = value;
    }
    getPrintedMeasureNumber() {
        if (this.rules.UseXMLMeasureNumbers) {
            if (Number.isInteger(this.MeasureNumberXML)) { // false for NaN, undefined, null, "5" (string)
                this.MeasureNumberPrinted = this.MeasureNumberXML;
                return this.MeasureNumberPrinted;
            }
        }
        this.MeasureNumberPrinted = this.MeasureNumber;
        return this.MeasureNumberPrinted;
    }
    get AbsoluteTimestamp() {
        return this.absoluteTimestamp;
    }
    set AbsoluteTimestamp(value) {
        this.absoluteTimestamp = value;
    }
    get CompleteNumberOfStaves() {
        return this.completeNumberOfStaves;
    }
    get Duration() {
        return this.duration; // can be 1/1 in a 4/4 measure
    }
    set Duration(value) {
        this.duration = value;
    }
    get ActiveTimeSignature() {
        return this.activeTimeSignature;
    }
    set ActiveTimeSignature(value) {
        this.activeTimeSignature = value;
    }
    get ImplicitMeasure() {
        return this.implicitMeasure;
    }
    set ImplicitMeasure(value) {
        this.implicitMeasure = value;
    }
    get HasEndLine() {
        return this.hasEndLine;
    }
    set HasEndLine(value) {
        this.hasEndLine = value;
    }
    get StaffLinkedExpressions() {
        return this.staffLinkedExpressions;
    }
    get TempoExpressions() {
        return this.tempoExpressions;
    }
    get VerticalSourceStaffEntryContainers() {
        return this.verticalSourceStaffEntryContainers;
    }
    get FirstInstructionsStaffEntries() {
        return this.firstInstructionsStaffEntries;
    }
    get LastInstructionsStaffEntries() {
        return this.lastInstructionsStaffEntries;
    }
    get FirstRepetitionInstructions() {
        return this.firstRepetitionInstructions;
    }
    get LastRepetitionInstructions() {
        return this.lastRepetitionInstructions;
    }
    getErrorInMeasure(staffIndex) {
        return this.graphicalMeasureErrors[staffIndex];
    }
    setErrorInGraphicalMeasure(staffIndex, hasError) {
        this.graphicalMeasureErrors[staffIndex] = hasError;
    }
    getNextMeasure(measures) {
        return measures[this.measureListIndex + 1];
    }
    getPreviousMeasure(measures) {
        if (this.measureListIndex > 1) {
            return measures[this.measureListIndex - 1];
        }
        return undefined;
    }
    get Rules() {
        return this.rules;
    }
    get VerticalMeasureList() {
        return this.verticalMeasureList;
    }
    set VerticalMeasureList(value) {
        this.verticalMeasureList = value;
    }
    get TempoInBPM() {
        return this.tempoInBPM;
    }
    set TempoInBPM(value) {
        this.tempoInBPM = value;
    }
    /**
     * Check at the given timestamp if a VerticalContainer exists, if not creates a new, timestamp-ordered one,
     * and at the given index, if a [[SourceStaffEntry]] exists, and if not, creates a new one.
     * @param inMeasureTimestamp
     * @param inSourceMeasureStaffIndex
     * @param staff
     * @returns {{createdNewContainer: boolean, staffEntry: SourceStaffEntry}}
     */
    findOrCreateStaffEntry(inMeasureTimestamp, inSourceMeasureStaffIndex, staff) {
        let staffEntry = undefined;
        // Find:
        let existingVerticalSourceStaffEntryContainer;
        for (const container of this.verticalSourceStaffEntryContainers) {
            if (container.Timestamp.Equals(inMeasureTimestamp)) {
                existingVerticalSourceStaffEntryContainer = container;
                break;
            }
        }
        if (existingVerticalSourceStaffEntryContainer) {
            if (existingVerticalSourceStaffEntryContainer.StaffEntries[inSourceMeasureStaffIndex]) {
                staffEntry = existingVerticalSourceStaffEntryContainer.StaffEntries[inSourceMeasureStaffIndex];
            }
            else {
                staffEntry = new SourceStaffEntry_1.SourceStaffEntry(existingVerticalSourceStaffEntryContainer, staff);
                existingVerticalSourceStaffEntryContainer.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;
            }
            return { createdNewContainer: false, staffEntry: staffEntry };
        }
        const last = this.verticalSourceStaffEntryContainers[this.verticalSourceStaffEntryContainers.length - 1];
        if (this.verticalSourceStaffEntryContainers.length === 0 || last.Timestamp.lt(inMeasureTimestamp)) {
            const container = new VerticalSourceStaffEntryContainer_1.VerticalSourceStaffEntryContainer(this, inMeasureTimestamp.clone(), this.completeNumberOfStaves);
            this.verticalSourceStaffEntryContainers.push(container);
            staffEntry = new SourceStaffEntry_1.SourceStaffEntry(container, staff);
            container.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;
        }
        else {
            for (let i = this.verticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {
                if (this.verticalSourceStaffEntryContainers[i].Timestamp.lt(inMeasureTimestamp)) {
                    const container = new VerticalSourceStaffEntryContainer_1.VerticalSourceStaffEntryContainer(this, inMeasureTimestamp.clone(), this.completeNumberOfStaves);
                    this.verticalSourceStaffEntryContainers.splice(i + 1, 0, container);
                    staffEntry = new SourceStaffEntry_1.SourceStaffEntry(container, staff);
                    container.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;
                    break;
                }
                if (i === 0) {
                    const container = new VerticalSourceStaffEntryContainer_1.VerticalSourceStaffEntryContainer(this, inMeasureTimestamp.clone(), this.completeNumberOfStaves);
                    this.verticalSourceStaffEntryContainers.splice(i, 0, container);
                    staffEntry = new SourceStaffEntry_1.SourceStaffEntry(container, staff);
                    container.StaffEntries[inSourceMeasureStaffIndex] = staffEntry;
                    break;
                }
            }
        }
        return { createdNewContainer: true, staffEntry: staffEntry };
    }
    /**
     * Check if a VerticalContainer, a staffEntry and a voiceEntry exist at the given timestamp.
     * If not, create the necessary entries.
     * @param sse
     * @param voice
     * @returns {{createdVoiceEntry: boolean, voiceEntry: VoiceEntry}}
     */
    findOrCreateVoiceEntry(sse, voice) {
        let ve = undefined;
        let createdNewVoiceEntry = false;
        for (const voiceEntry of sse.VoiceEntries) {
            if (voiceEntry.ParentVoice === voice) {
                ve = voiceEntry;
                break;
            }
        }
        if (!ve) {
            ve = new VoiceEntry_1.VoiceEntry(sse.Timestamp, voice, sse);
            createdNewVoiceEntry = true;
        }
        return { createdVoiceEntry: createdNewVoiceEntry, voiceEntry: ve };
    }
    /**
     * Search for a non-null [[SourceStaffEntry]] at the given verticalIndex,
     * starting from the given horizontalIndex and moving backwards. If none is found, then return undefined.
     * @param verticalIndex
     * @param horizontalIndex
     * @returns {any}
     */
    getPreviousSourceStaffEntryFromIndex(verticalIndex, horizontalIndex) {
        for (let i = horizontalIndex - 1; i >= 0; i--) {
            if (this.verticalSourceStaffEntryContainers[i][verticalIndex]) {
                return this.verticalSourceStaffEntryContainers[i][verticalIndex];
            }
        }
        return undefined;
    }
    /**
     * Return the index of the existing VerticalContainer at the given timestamp.
     * @param musicTimestamp
     * @returns {number}
     */
    getVerticalContainerIndexByTimestamp(musicTimestamp) {
        for (let idx = 0, len = this.VerticalSourceStaffEntryContainers.length; idx < len; ++idx) {
            if (this.VerticalSourceStaffEntryContainers[idx].Timestamp.Equals(musicTimestamp)) {
                return idx; // this.verticalSourceStaffEntryContainers.indexOf(verticalSourceStaffEntryContainer);
            }
        }
        return -1;
    }
    /**
     * Return the existing VerticalContainer at the given timestamp.
     * @param musicTimestamp
     * @returns {any}
     */
    getVerticalContainerByTimestamp(musicTimestamp) {
        for (let idx = 0, len = this.VerticalSourceStaffEntryContainers.length; idx < len; ++idx) {
            const verticalSourceStaffEntryContainer = this.VerticalSourceStaffEntryContainers[idx];
            if (verticalSourceStaffEntryContainer.Timestamp.Equals(musicTimestamp)) {
                return verticalSourceStaffEntryContainer;
            }
        }
        return undefined;
    }
    /**
     * Check the [[SourceMeasure]] for a possible VerticalContainer with all of its [[StaffEntry]]s undefined,
     * and if found, remove the VerticalContainer from the [[SourceMeasure]].
     * @param index
     */
    checkForEmptyVerticalContainer(index) {
        let undefinedCounter = 0;
        for (let i = 0; i < this.completeNumberOfStaves; i++) {
            if (!this.verticalSourceStaffEntryContainers[index][i]) {
                undefinedCounter++;
            }
        }
        if (undefinedCounter === this.completeNumberOfStaves) {
            this.verticalSourceStaffEntryContainers.splice(index, 1);
        }
    }
    /**
     * This method is used for handling a measure with the following error (in the procedure of finding out the Instrument's Duration):
     * If the LastStaffEntry is missing (implied restNote or error), then go back the StaffEntries until you find a TiedNote (tie Start),
     * which gives the correct MeasureDuration.
     * @param musicSheet
     * @param maxInstDuration
     * @returns {Fraction}
     */
    reverseCheck(musicSheet, maxInstDuration) {
        let maxDuration = new Fraction_1.Fraction(0, 1);
        const instrumentsDurations = [];
        for (let i = 0; i < musicSheet.Instruments.length; i++) {
            let instrumentDuration = new Fraction_1.Fraction(0, 1);
            const inSourceMeasureInstrumentIndex = musicSheet.getGlobalStaffIndexOfFirstStaff(musicSheet.Instruments[i]);
            for (let j = 0; j < musicSheet.Instruments[i].Staves.length; j++) {
                const lastStaffEntry = this.getLastSourceStaffEntryForInstrument(inSourceMeasureInstrumentIndex + j);
                if (lastStaffEntry !== undefined && !lastStaffEntry.hasTie()) {
                    const verticalContainerIndex = this.verticalSourceStaffEntryContainers.indexOf(lastStaffEntry.VerticalContainerParent);
                    for (let m = verticalContainerIndex - 1; m >= 0; m--) {
                        const previousStaffEntry = this.verticalSourceStaffEntryContainers[m][inSourceMeasureInstrumentIndex + j];
                        if (previousStaffEntry !== undefined && previousStaffEntry.hasTie()) {
                            if (instrumentDuration.lt(Fraction_1.Fraction.plus(previousStaffEntry.Timestamp, previousStaffEntry.calculateMaxNoteLength()))) {
                                instrumentDuration = Fraction_1.Fraction.plus(previousStaffEntry.Timestamp, previousStaffEntry.calculateMaxNoteLength());
                                break;
                            }
                        }
                    }
                }
            }
            instrumentsDurations.push(instrumentDuration);
        }
        for (let idx = 0, len = instrumentsDurations.length; idx < len; ++idx) {
            const instrumentsDuration = instrumentsDurations[idx];
            if (maxDuration.lt(instrumentsDuration)) {
                maxDuration = instrumentsDuration;
            }
        }
        return Fraction_1.Fraction.max(maxDuration, maxInstDuration);
    }
    /**
     * Calculate all the [[Instrument]]'s NotesDurations for this Measures.
     * @param musicSheet
     * @param instrumentMaxTieNoteFractions
     * @returns {Fraction[]}
     */
    calculateInstrumentsDuration(musicSheet, instrumentMaxTieNoteFractions) {
        const instrumentsDurations = [];
        for (let i = 0; i < musicSheet.Instruments.length; i++) {
            let instrumentDuration = new Fraction_1.Fraction(0, 1);
            const inSourceMeasureInstrumentIndex = musicSheet.getGlobalStaffIndexOfFirstStaff(musicSheet.Instruments[i]);
            for (let j = 0; j < musicSheet.Instruments[i].Staves.length; j++) {
                const lastStaffEntry = this.getLastSourceStaffEntryForInstrument(inSourceMeasureInstrumentIndex + j);
                if (lastStaffEntry !== undefined && lastStaffEntry.Timestamp) {
                    if (instrumentDuration.lt(Fraction_1.Fraction.plus(lastStaffEntry.Timestamp, lastStaffEntry.calculateMaxNoteLength()))) {
                        instrumentDuration = Fraction_1.Fraction.plus(lastStaffEntry.Timestamp, lastStaffEntry.calculateMaxNoteLength());
                    }
                }
            }
            if (instrumentDuration.lt(instrumentMaxTieNoteFractions[i])) {
                instrumentDuration = instrumentMaxTieNoteFractions[i];
            }
            instrumentsDurations.push(instrumentDuration);
        }
        return instrumentsDurations;
    }
    getEntriesPerStaff(staffIndex) {
        const sourceStaffEntries = [];
        for (const container of this.VerticalSourceStaffEntryContainers) {
            const sse = container.StaffEntries[staffIndex];
            if (sse) {
                sourceStaffEntries.push(sse);
            }
        }
        return sourceStaffEntries;
    }
    /**
     *
     * @returns {boolean} true iff some measure begin instructions have been found for at least one staff
     */
    hasBeginInstructions() {
        for (let staffIndex = 0, len = this.FirstInstructionsStaffEntries.length; staffIndex < len; staffIndex++) {
            const beginInstructionsStaffEntry = this.FirstInstructionsStaffEntries[staffIndex];
            if (beginInstructionsStaffEntry !== undefined && beginInstructionsStaffEntry.Instructions.length > 0) {
                return true;
            }
        }
        return false;
    }
    beginsWithLineRepetition() {
        for (let idx = 0, len = this.FirstRepetitionInstructions.length; idx < len; ++idx) {
            const instr = this.FirstRepetitionInstructions[idx];
            if (instr.type === RepetitionInstruction_1.RepetitionInstructionEnum.StartLine) {
                return true;
            }
            if (instr.parentRepetition !== undefined && instr === instr.parentRepetition.startMarker && !instr.parentRepetition.FromWords) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if this measure is a Repetition Ending.
     * @returns {boolean}
     */
    endsWithLineRepetition() {
        for (let idx = 0, len = this.LastRepetitionInstructions.length; idx < len; ++idx) {
            const instruction = this.LastRepetitionInstructions[idx];
            if (instruction.type === RepetitionInstruction_1.RepetitionInstructionEnum.BackJumpLine) {
                return true;
            }
            const rep = instruction.parentRepetition;
            if (!rep) {
                continue;
            }
            if (rep.FromWords) {
                continue;
            }
            for (let idx2 = 0, len2 = rep.BackwardJumpInstructions.length; idx2 < len2; ++idx2) {
                const backJumpInstruction = rep.BackwardJumpInstructions[idx2];
                if (instruction === backJumpInstruction) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Check if a Repetition starts at the next Measure.
     * @returns {boolean}
     */
    beginsWithWordRepetition() {
        for (let idx = 0, len = this.FirstRepetitionInstructions.length; idx < len; ++idx) {
            const instruction = this.FirstRepetitionInstructions[idx];
            if (instruction.parentRepetition !== undefined &&
                instruction === instruction.parentRepetition.startMarker && instruction.parentRepetition.FromWords) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if this Measure ends a Repetition.
     * @returns {boolean}
     */
    endsWithWordRepetition() {
        for (let idx = 0, len = this.LastRepetitionInstructions.length; idx < len; ++idx) {
            const instruction = this.LastRepetitionInstructions[idx];
            const rep = instruction.parentRepetition;
            if (!rep) {
                continue;
            }
            if (!rep.FromWords) {
                continue;
            }
            for (let idx2 = 0, len2 = rep.BackwardJumpInstructions.length; idx2 < len2; ++idx2) {
                const backJumpInstruction = rep.BackwardJumpInstructions[idx2];
                if (instruction === backJumpInstruction) {
                    return true;
                }
            }
            if (instruction === rep.forwardJumpInstruction) {
                return true;
            }
        }
        return false;
    }
    beginsRepetitionEnding() {
        for (const instruction of this.FirstRepetitionInstructions) {
            if (instruction.type === RepetitionInstruction_1.RepetitionInstructionEnum.Ending &&
                instruction.alignment === RepetitionInstruction_1.AlignmentType.Begin) {
                return true;
            }
        }
        return false;
    }
    endsRepetitionEnding() {
        for (const instruction of this.LastRepetitionInstructions) {
            if (instruction.type === RepetitionInstruction_1.RepetitionInstructionEnum.Ending &&
                instruction.alignment === RepetitionInstruction_1.AlignmentType.End) {
                return true;
            }
        }
        return false;
    }
    getKeyInstruction(staffIndex) {
        if (this.FirstInstructionsStaffEntries[staffIndex]) {
            const sourceStaffEntry = this.FirstInstructionsStaffEntries[staffIndex];
            for (let idx = 0, len = sourceStaffEntry.Instructions.length; idx < len; ++idx) {
                const abstractNotationInstruction = sourceStaffEntry.Instructions[idx];
                if (abstractNotationInstruction instanceof KeyInstruction_1.KeyInstruction) {
                    return abstractNotationInstruction;
                }
            }
        }
        return undefined;
    }
    /**
     * Return the first non-null [[SourceStaffEntry]] at the given InstrumentIndex.
     * @param instrumentIndex
     * @returns {SourceStaffEntry}
     */
    getLastSourceStaffEntryForInstrument(instrumentIndex) {
        let entry;
        for (let i = this.verticalSourceStaffEntryContainers.length - 1; i >= 0; i--) {
            entry = this.verticalSourceStaffEntryContainers[i].StaffEntries[instrumentIndex];
            if (entry) {
                break;
            }
        }
        return entry;
    }
    canBeReducedToMultiRest() {
        var _a, _b;
        if (this.firstRepetitionInstructions.length > 0 || this.lastRepetitionInstructions.length > 0) {
            return false;
        }
        let allRestsOrInvisible = true;
        let visibleLyrics = false;
        for (const container of this.verticalSourceStaffEntryContainers) {
            if (!container) {
                continue;
            }
            for (const staffEntry of container.StaffEntries) {
                if (!staffEntry || !staffEntry.ParentStaff.ParentInstrument.Visible) {
                    continue; // ignore notes in invisible instruments (instruments not shown)
                }
                if (staffEntry.ChordContainers.length > 0) {
                    return false;
                }
                if (staffEntry.ParentStaff.hasLyrics) {
                    visibleLyrics = true;
                }
                for (const voiceEntry of staffEntry.VoiceEntries) {
                    for (const note of voiceEntry.Notes) {
                        if (!note.isRest()) {
                            allRestsOrInvisible = false;
                            break;
                        }
                    }
                    if (!allRestsOrInvisible) {
                        break;
                    }
                }
            }
        }
        if (!allRestsOrInvisible || visibleLyrics || this.hasMoodExpressions || this.tempoExpressions.length > 0) {
            return false;
        }
        // check for StaffLinkedExpressions (e.g. MultiExpression, StaffText) (per staff)
        for (const multiExpressions of this.staffLinkedExpressions) {
            if (multiExpressions.length > 0) {
                return false;
            }
        }
        // check for clef instruction for next measure
        for (const lastStaffEntry of this.lastInstructionsStaffEntries) {
            for (let idx = 0, len = lastStaffEntry === null || lastStaffEntry === void 0 ? void 0 : lastStaffEntry.Instructions.length; idx < len; ++idx) {
                const abstractNotationInstruction = lastStaffEntry.Instructions[idx];
                if (abstractNotationInstruction instanceof ClefInstruction_1.ClefInstruction) {
                    return false;
                }
            }
        }
        // don't auto-rest pickup measures that aren't whole measure rests
        return ((_a = this.Duration) === null || _a === void 0 ? void 0 : _a.RealValue) === ((_b = this.ActiveTimeSignature) === null || _b === void 0 ? void 0 : _b.RealValue);
        // if adding further checks, replace the above line with this:
        // if (this.Duration?.RealValue !== this.ActiveTimeSignature?.RealValue) {
        //     return false;
        // }
        // // TODO further checks?
        // return true;
    }
}
exports.SourceMeasure = SourceMeasure;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/SourceStaffEntry.ts":
/*!********************************************************!*\
  !*** ./src/MusicalScore/VoiceData/SourceStaffEntry.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SourceStaffEntry = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const ClefInstruction_1 = __webpack_require__(/*! ./Instructions/ClefInstruction */ "./src/MusicalScore/VoiceData/Instructions/ClefInstruction.ts");
const KeyInstruction_1 = __webpack_require__(/*! ./Instructions/KeyInstruction */ "./src/MusicalScore/VoiceData/Instructions/KeyInstruction.ts");
const RhythmInstruction_1 = __webpack_require__(/*! ./Instructions/RhythmInstruction */ "./src/MusicalScore/VoiceData/Instructions/RhythmInstruction.ts");
/**
 * A [[SourceStaffEntry]] is a container spanning all the [[VoiceEntry]]s at one timestamp for one [[StaffLine]].
 */
class SourceStaffEntry {
    constructor(verticalContainerParent, parentStaff) {
        this.voiceEntries = [];
        this.instructions = [];
        this.chordSymbolContainers = [];
        this.verticalContainerParent = verticalContainerParent;
        this.parentStaff = parentStaff;
    }
    get ParentStaff() {
        return this.parentStaff;
    }
    get VerticalContainerParent() {
        return this.verticalContainerParent;
    }
    get Timestamp() {
        if (this.VerticalContainerParent) {
            return this.VerticalContainerParent.Timestamp;
        }
        return undefined;
    }
    get AbsoluteTimestamp() {
        if (this.VerticalContainerParent) {
            return Fraction_1.Fraction.plus(this.VerticalContainerParent.ParentMeasure.AbsoluteTimestamp, this.VerticalContainerParent.Timestamp);
        }
        return undefined;
    }
    get VoiceEntries() {
        return this.voiceEntries;
    }
    set VoiceEntries(value) {
        this.voiceEntries = value;
    }
    get Link() {
        return this.staffEntryLink;
    }
    set Link(value) {
        this.staffEntryLink = value;
    }
    get Instructions() {
        return this.instructions;
    }
    set Instructions(value) {
        this.instructions = value;
    }
    get ChordContainers() {
        return this.chordSymbolContainers;
    }
    set ChordContainers(value) {
        this.chordSymbolContainers = value;
    }
    // public removeAllInstructionsOfType(type: AbstractNotationInstruction): number {
    //     let i: number = 0;
    //     let ret: number = 0;
    //     while (i < this.instructions.length) {
    //         let instruction: AbstractNotationInstruction = this.instructions[i];
    //         if (instruction instanceof type) {
    //             this.instructions.splice(i, 1);
    //             ret++;
    //         } else {
    //             i++;
    //         }
    //     }
    //     return ret;
    // }
    //
    // public removeFirstInstructionOfType(type: AbstractNotationInstruction): boolean {
    //     for (let i: number = 0; i < this.instructions.length; i++) {
    //         if (this.instructions[i] instanceof type) {
    //             this.instructions.splice(i, 1);
    //             return true;
    //         }
    //     }
    //     return false;
    // }
    removeAllInstructionsOfTypeClefInstruction() {
        let i = 0;
        let ret = 0;
        while (i < this.instructions.length) {
            if (this.instructions[i] instanceof ClefInstruction_1.ClefInstruction) {
                this.instructions.splice(i, 1);
                ret++;
            }
            else {
                i++;
            }
        }
        return ret;
    }
    /**
     * Similar to RemoveAllInstructionsOfType but faster,
     * because it stops searching when the first instruction of the given type is found.
     * @returns {boolean}
     */
    removeFirstInstructionOfTypeClefInstruction() {
        for (let i = 0; i < this.instructions.length; i++) {
            if (this.instructions[i] instanceof ClefInstruction_1.ClefInstruction) {
                this.instructions.splice(i, 1);
                return true;
            }
        }
        return false;
    }
    removeAllInstructionsOfTypeKeyInstruction() {
        let i = 0;
        let ret = 0;
        while (i < this.instructions.length) {
            if (this.instructions[i] instanceof KeyInstruction_1.KeyInstruction) {
                this.instructions.splice(i, 1);
                ret++;
            }
            else {
                i++;
            }
        }
        return ret;
    }
    /**
     * Similar to RemoveAllInstructionsOfType but faster,
     * because it stops searching when the first instruction of the given type is found.
     * @returns {boolean}
     */
    removeFirstInstructionOfTypeKeyInstruction() {
        for (let i = 0; i < this.instructions.length; i++) {
            if (this.instructions[i] instanceof KeyInstruction_1.KeyInstruction) {
                this.instructions.splice(i, 1);
                return true;
            }
        }
        return false;
    }
    removeAllInstructionsOfTypeRhythmInstruction() {
        let i = 0;
        let ret = 0;
        while (i < this.instructions.length) {
            if (this.instructions[i] instanceof RhythmInstruction_1.RhythmInstruction) {
                this.instructions.splice(i, 1);
                ret++;
            }
            else {
                i++;
            }
        }
        return ret;
    }
    removeFirstInstructionOfTypeRhythmInstruction() {
        for (let i = 0; i < this.instructions.length; i++) {
            if (this.instructions[i] instanceof RhythmInstruction_1.RhythmInstruction) {
                this.instructions.splice(i, 1);
                return true;
            }
        }
        return false;
    }
    /**
     * Calculate the [[SourceStaffEntry]]'s minimum NoteLength.
     * @returns {Fraction}
     */
    calculateMinNoteLength() {
        let duration = new Fraction_1.Fraction(Number.MAX_VALUE, 1);
        for (let idx = 0, len = this.VoiceEntries.length; idx < len; ++idx) {
            const voiceEntry = this.VoiceEntries[idx];
            for (let idx2 = 0, len2 = voiceEntry.Notes.length; idx2 < len2; ++idx2) {
                const note = voiceEntry.Notes[idx2];
                if (note.Length.lt(duration)) {
                    duration = note.Length;
                }
            }
        }
        return duration;
    }
    calculateMaxNoteLength(untilEndOfTie = true) {
        let duration = new Fraction_1.Fraction(0, 1);
        for (let idx = 0, len = this.VoiceEntries.length; idx < len; ++idx) {
            const voiceEntry = this.VoiceEntries[idx];
            for (let idx2 = 0, len2 = voiceEntry.Notes.length; idx2 < len2; ++idx2) {
                const note = voiceEntry.Notes[idx2];
                if (untilEndOfTie && note.NoteTie) {
                    // only add notes from this and after this sse!!
                    const tieRestDuration = Fraction_1.Fraction.createFromFraction(note.Length);
                    let addFollowingNotes = false;
                    for (const n of note.NoteTie.Notes) {
                        if (n === note) {
                            addFollowingNotes = true;
                            continue;
                        }
                        if (addFollowingNotes) {
                            tieRestDuration.Add(n.Length);
                        }
                    }
                    if (duration.lt(tieRestDuration)) {
                        duration = tieRestDuration;
                    }
                }
                else if (duration.lt(note.Length)) {
                    duration = note.Length;
                }
            }
        }
        return duration;
    }
    hasNotes() {
        for (let idx = 0, len = this.VoiceEntries.length; idx < len; ++idx) {
            const voiceEntry = this.VoiceEntries[idx];
            if (voiceEntry.Notes.length > 0) {
                return true;
            }
        }
        return false;
    }
    hasTie() {
        for (let idx = 0, len = this.VoiceEntries.length; idx < len; ++idx) {
            const voiceEntry = this.VoiceEntries[idx];
            if (voiceEntry.hasTie()) {
                return true;
            }
        }
        return false;
    }
    findLinkedNotes(linkedNotes) {
        for (let idx = 0, len = this.voiceEntries.length; idx < len; ++idx) {
            const voiceEntry = this.voiceEntries[idx];
            for (let idx2 = 0, len2 = voiceEntry.Notes.length; idx2 < len2; ++idx2) {
                const note = voiceEntry.Notes[idx2];
                if (note.ParentStaffEntry === this) {
                    linkedNotes.push(note);
                }
            }
        }
    }
    get hasOnlyRests() {
        for (const voiceEntry of this.voiceEntries) {
            for (const note of voiceEntry.Notes) {
                if (!note.isRest) {
                    return false;
                }
            }
        }
        return true;
    }
}
exports.SourceStaffEntry = SourceStaffEntry;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Staff.ts":
/*!*********************************************!*\
  !*** ./src/MusicalScore/VoiceData/Staff.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Staff = void 0;
class Staff {
    constructor(parentInstrument, instrumentStaffId) {
        this.isTab = false;
        this.voices = [];
        this.volume = 1;
        this.stafflineCount = 5;
        this.hasLyrics = false;
        this.openTieDict = {};
        this.parentInstrument = parentInstrument;
        this.id = instrumentStaffId;
        this.audible = true;
        this.following = true;
    }
    get ParentInstrument() {
        return this.parentInstrument;
    }
    set ParentInstrument(value) {
        this.parentInstrument = value;
    }
    get Voices() {
        return this.voices;
    }
    get Id() {
        return this.id;
    }
    get Volume() {
        return this.volume;
    }
    set Volume(value) {
        this.volume = value;
    }
    get StafflineCount() {
        return this.stafflineCount;
    }
    set StafflineCount(value) {
        this.stafflineCount = value;
    }
}
exports.Staff = Staff;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/StaffEntryLink.ts":
/*!******************************************************!*\
  !*** ./src/MusicalScore/VoiceData/StaffEntryLink.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StaffEntryLink = void 0;
/**
 * Used for linked voices.
 */
class StaffEntryLink {
    constructor(voiceEntry) {
        this.linkStaffEntries = [];
        this.voiceEntry = voiceEntry;
    }
    get GetVoiceEntry() {
        return this.voiceEntry;
    }
    get LinkStaffEntries() {
        return this.linkStaffEntries;
    }
    set LinkStaffEntries(value) {
        this.linkStaffEntries = value;
    }
}
exports.StaffEntryLink = StaffEntryLink;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/TabNote.ts":
/*!***********************************************!*\
  !*** ./src/MusicalScore/VoiceData/TabNote.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TabNote = void 0;
const Note_1 = __webpack_require__(/*! ./Note */ "./src/MusicalScore/VoiceData/Note.ts");
class TabNote extends Note_1.Note {
    constructor(voiceEntry, parentStaffEntry, length, pitch, sourceMeasure, stringNumber, fretNumber, bendArray, vibratoStroke) {
        super(voiceEntry, parentStaffEntry, length, pitch, sourceMeasure);
        this.stringNumberTab = stringNumber;
        this.fretNumber = fretNumber;
        this.bendArray = bendArray;
        this.vibratoStroke = vibratoStroke;
    }
    /** Returns the string number the note should be played on. Note there can also be violin string numbers in treble clef. */
    get StringNumberTab() {
        return this.stringNumberTab;
    }
    get FretNumber() {
        return this.fretNumber;
    }
    get BendArray() {
        return this.bendArray;
    }
    get VibratoStroke() {
        return this.vibratoStroke;
    }
}
exports.TabNote = TabNote;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Tie.ts":
/*!*******************************************!*\
  !*** ./src/MusicalScore/VoiceData/Tie.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tie = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
/**
 * A [[Tie]] connects two notes of the same pitch and name, indicating that they have to be played as a single note.
 */
class Tie {
    constructor(note, type) {
        this.notes = [];
        this.TieNumber = 1;
        this.TieDirection = AbstractExpression_1.PlacementEnum.NotYetDefined;
        /** Can contain tie directions at certain note indices.
         *  For example, if it contains {2: PlacementEnum.Below}, then
         *  the tie should go downwards from Tie.Notes[2] onwards,
         *  even if tie.TieDirection is PlacementEnum.Above (tie starts going up on Notes[0]).
         */
        this.NoteIndexToTieDirection = {};
        this.AddNote(note);
        this.type = type;
    }
    getTieDirection(startNote) {
        if (!startNote) {
            return this.TieDirection;
        }
        for (let i = 0; i < this.Notes.length; i++) {
            const tieNote = this.Notes[i];
            if (tieNote === startNote) {
                const directionAtIndex = this.NoteIndexToTieDirection[i];
                if (directionAtIndex) {
                    return directionAtIndex;
                }
                else {
                    return this.TieDirection;
                }
            }
        }
        loglevel_1.default.debug("tie.getTieDuration note not in tie.Notes");
        // ^ happens in Christbaum measure 19 - probably note sharing stem
        return this.TieDirection;
    }
    get Notes() {
        return this.notes;
    }
    get Type() {
        return this.type;
    }
    get StartNote() {
        return this.notes[0];
    }
    get Duration() {
        const duration = new Fraction_1.Fraction();
        for (const note of this.notes) {
            duration.Add(note.Length);
        }
        return duration;
    }
    get Pitch() {
        return this.StartNote.Pitch;
    }
    AddNote(note) {
        this.notes.push(note);
        note.NoteTie = this;
    }
}
exports.Tie = Tie;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Tuplet.ts":
/*!**********************************************!*\
  !*** ./src/MusicalScore/VoiceData/Tuplet.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tuplet = void 0;
/**
 * Tuplets create irregular rhythms; e.g. triplets, quadruplets, quintuplets, etc.
 */
class Tuplet {
    constructor(tupletLabelNumber, bracket = false) {
        this.PlacementFromXml = false;
        this.RenderTupletNumber = true;
        /** Notes contained in the tuplet, per VoiceEntry (list of VoiceEntries, which has a list of notes). */
        this.notes = []; // TODO should probably be VoiceEntry[], not Note[][].
        this.fractions = [];
        this.tupletLabelNumber = tupletLabelNumber;
        this.bracket = bracket;
    }
    /** Determines whether the tuplet should be bracketed (arguments are EngravingRules). */
    shouldBeBracketed(useXmlValue, tupletsBracketed, tripletsBracketed) {
        if (useXmlValue && this.BracketedXmlValue !== undefined) {
            return this.BracketedXmlValue;
        }
        // Gould: tuplets need bracket if they're not on one single beam (see #1400)
        const startingBeam = this.Notes[0][0].NoteBeam;
        // const startingVFBeam: VF.Beam = (tupletStaveNotes[0] as any).beam; // alternative way to check. see for loop
        if (!startingBeam) {
            return true;
        }
        else {
            for (const tupletNotes of this.Notes) {
                if (tupletNotes[0].NoteBeam !== startingBeam) {
                    return true;
                }
            }
        }
        return this.Bracket ||
            (this.TupletLabelNumber === 3 && tripletsBracketed) ||
            (this.TupletLabelNumber !== 3 && tupletsBracketed);
    }
    get TupletLabelNumber() {
        return this.tupletLabelNumber;
    }
    set TupletLabelNumber(value) {
        this.tupletLabelNumber = value;
    }
    get Notes() {
        return this.notes;
    }
    set Notes(value) {
        this.notes = value;
    }
    get Fractions() {
        return this.fractions;
    }
    set Fractions(value) {
        this.fractions = value;
    }
    get Bracket() {
        return this.bracket;
    }
    set Bracket(value) {
        this.bracket = value;
    }
    /**
     * Returns the index of the given Note in the Tuplet List (notes[0], notes[1],...).
     * @param note
     * @returns {number}
     */
    getNoteIndex(note) {
        for (let i = this.notes.length - 1; i >= 0; i--) {
            for (let j = 0; j < this.notes[i].length; j++) {
                if (note === this.notes[i][j]) {
                    return i;
                }
            }
        }
        return 0;
    }
}
exports.Tuplet = Tuplet;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/VerticalSourceStaffEntryContainer.ts":
/*!*************************************************************************!*\
  !*** ./src/MusicalScore/VoiceData/VerticalSourceStaffEntryContainer.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VerticalSourceStaffEntryContainer = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
/**
 * A [[VerticalSourceStaffEntryContainer]] contains the [[StaffEntry]]s at one timestamp through all the [[StaffLine]]s.
 */
class VerticalSourceStaffEntryContainer {
    constructor(parentMeasure, timestamp, size) {
        this.staffEntries = [];
        this.comments = [];
        this.timestamp = timestamp;
        this.staffEntries = new Array(size);
        this.parentMeasure = parentMeasure;
    }
    $get$(index) {
        return this.staffEntries[index];
    }
    $set$(index, value) {
        this.staffEntries[index] = value;
    }
    get Timestamp() {
        return this.timestamp;
    }
    set Timestamp(value) {
        this.timestamp = value;
    }
    get StaffEntries() {
        return this.staffEntries;
    }
    set StaffEntries(value) {
        this.staffEntries = value;
    }
    get Comments() {
        return this.comments;
    }
    set Comments(value) {
        this.comments = value;
    }
    get ParentMeasure() {
        return this.parentMeasure;
    }
    set ParentMeasure(value) {
        this.parentMeasure = value;
    }
    getAbsoluteTimestamp() {
        return Fraction_1.Fraction.plus(this.timestamp, this.parentMeasure.AbsoluteTimestamp);
    }
}
exports.VerticalSourceStaffEntryContainer = VerticalSourceStaffEntryContainer;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/Voice.ts":
/*!*********************************************!*\
  !*** ./src/MusicalScore/VoiceData/Voice.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Voice = void 0;
/**
 * A [[Voice]] contains all the [[VoiceEntry]]s in a voice in a [[StaffLine]].
 */
class Voice {
    constructor(parent, voiceId) {
        this.voiceEntries = [];
        this.volume = 1;
        this.parent = parent;
        this.visible = true;
        this.audible = true;
        this.following = true;
        this.voiceId = voiceId;
    }
    get VoiceEntries() {
        return this.voiceEntries;
    }
    get Parent() {
        return this.parent;
    }
    get Visible() {
        return this.visible;
    }
    set Visible(value) {
        this.visible = value;
    }
    get Audible() {
        return this.audible;
    }
    set Audible(value) {
        this.audible = value;
    }
    get Following() {
        return this.following;
    }
    set Following(value) {
        this.following = value;
    }
    get VoiceId() {
        return this.voiceId;
    }
    get Volume() {
        return this.volume;
    }
    set Volume(value) {
        this.volume = value;
    }
}
exports.Voice = Voice;


/***/ }),

/***/ "./src/MusicalScore/VoiceData/VoiceEntry.ts":
/*!**************************************************!*\
  !*** ./src/MusicalScore/VoiceData/VoiceEntry.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.StemDirectionType = exports.ArticulationEnum = exports.VoiceEntry = void 0;
const Fraction_1 = __webpack_require__(/*! ../../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
const Note_1 = __webpack_require__(/*! ./Note */ "./src/MusicalScore/VoiceData/Note.ts");
const Pitch_1 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const OrnamentContainer_1 = __webpack_require__(/*! ./OrnamentContainer */ "./src/MusicalScore/VoiceData/OrnamentContainer.ts");
const Pitch_2 = __webpack_require__(/*! ../../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
/**
 * A [[VoiceEntry]] contains the notes in a voice at a timestamp.
 */
class VoiceEntry {
    /**
     *
     * @param timestamp The relative timestamp within the source measure.
     * @param parentVoice
     * @param parentSourceStaffEntry
     * @param isGrace States whether the VoiceEntry has (only) grace notes.
     * @param graceNoteSlash States whether the grace note(s) have a slash (Acciaccatura, played before the beat)
     */
    constructor(timestamp, parentVoice, parentSourceStaffEntry, isGrace = false, graceNoteSlash = false, graceSlur = false) {
        this.notes = [];
        this.articulations = [];
        this.technicalInstructions = [];
        this.lyricsEntries = new typescript_collections_1.Dictionary();
        this.wantedStemDirection = StemDirectionType.Undefined;
        /** Stem direction specified in the xml stem element. */
        this.stemDirectionXml = StemDirectionType.Undefined;
        this.stemDirection = StemDirectionType.Undefined;
        this.timestamp = timestamp;
        this.parentVoice = parentVoice;
        this.parentSourceStaffEntry = parentSourceStaffEntry;
        this.isGrace = isGrace;
        this.graceAfterMainNote = false;
        this.graceNoteSlash = graceNoteSlash;
        this.graceSlur = graceSlur;
        // add currentVoiceEntry to staff entry:
        if (parentSourceStaffEntry !== undefined) {
            const list = parentSourceStaffEntry.VoiceEntries;
            if (list.indexOf(this) === -1) {
                list.push(this);
            }
        }
    }
    get ParentSourceStaffEntry() {
        return this.parentSourceStaffEntry;
    }
    get ParentVoice() {
        return this.parentVoice;
    }
    get Timestamp() {
        return this.timestamp;
    }
    set Timestamp(value) {
        this.timestamp = value;
    }
    get Notes() {
        return this.notes;
    }
    get IsGrace() {
        return this.isGrace;
    }
    set IsGrace(value) {
        this.isGrace = value;
    }
    get GraceAfterMainNote() {
        return this.graceAfterMainNote;
    }
    set GraceAfterMainNote(value) {
        this.graceAfterMainNote = value;
    }
    get GraceNoteSlash() {
        return this.graceNoteSlash;
    }
    set GraceNoteSlash(value) {
        this.graceNoteSlash = value;
    }
    get GraceSlur() {
        return this.graceSlur;
    }
    set GraceSlur(value) {
        this.graceSlur = value;
    }
    get Articulations() {
        return this.articulations;
    }
    set Articulations(value) {
        this.articulations = value;
    }
    get TechnicalInstructions() {
        return this.technicalInstructions;
    }
    get LyricsEntries() {
        return this.lyricsEntries;
    }
    get Arpeggio() {
        return this.arpeggio;
    }
    set Arpeggio(value) {
        this.arpeggio = value;
    }
    get OrnamentContainer() {
        return this.ornamentContainer;
    }
    set OrnamentContainer(value) {
        this.ornamentContainer = value;
    }
    // WantedStemDirection provides the stem direction to VexFlow in case of more than 1 voice
    // for optimal graphical appearance
    set WantedStemDirection(value) {
        this.wantedStemDirection = value;
    }
    get WantedStemDirection() {
        return this.wantedStemDirection;
    }
    set StemDirectionXml(value) {
        this.stemDirectionXml = value;
    }
    get StemDirectionXml() {
        return this.stemDirectionXml;
    }
    // StemDirection holds the actual value of the stem
    set StemDirection(value) {
        this.stemDirection = value;
    }
    get StemDirection() {
        return this.stemDirection;
    }
    get StemColorXml() {
        return this.stemColorXml;
    }
    set StemColorXml(value) {
        this.stemColorXml = value;
    }
    get StemColor() {
        return this.stemColor;
    }
    set StemColor(value) {
        this.stemColor = value;
    }
    hasArticulation(articulation) {
        for (const existingArticulation of this.articulations) {
            if (existingArticulation.Equals(articulation)) {
                return true;
            }
        }
        return false;
    }
    static isSupportedArticulation(articulation) {
        switch (articulation) {
            case ArticulationEnum.accent:
            case ArticulationEnum.strongaccent:
            case ArticulationEnum.softaccent:
            case ArticulationEnum.invertedstrongaccent:
            case ArticulationEnum.staccato:
            case ArticulationEnum.staccatissimo:
            case ArticulationEnum.spiccato:
            case ArticulationEnum.tenuto:
            case ArticulationEnum.fermata:
            case ArticulationEnum.invertedfermata:
            case ArticulationEnum.breathmark:
            case ArticulationEnum.caesura:
            case ArticulationEnum.lefthandpizzicato:
            case ArticulationEnum.naturalharmonic:
            case ArticulationEnum.snappizzicato:
            case ArticulationEnum.upbow:
            case ArticulationEnum.downbow:
            case ArticulationEnum.bend:
                return true;
            default:
                return false;
        }
    }
    hasTie() {
        for (let idx = 0, len = this.Notes.length; idx < len; ++idx) {
            const note = this.Notes[idx];
            if (note.NoteTie) {
                return true;
            }
        }
        return false;
    }
    hasSlur() {
        for (let idx = 0, len = this.Notes.length; idx < len; ++idx) {
            const note = this.Notes[idx];
            if (note.NoteSlurs.length > 0) {
                return true;
            }
        }
        return false;
    }
    isStaccato() {
        for (const articulation of this.Articulations) {
            if (articulation.articulationEnum === ArticulationEnum.staccato) {
                return true;
            }
        }
        return false;
    }
    isAccent() {
        for (const articulation of this.Articulations) {
            if (articulation.articulationEnum === ArticulationEnum.accent || articulation.articulationEnum === ArticulationEnum.strongaccent) {
                return true;
            }
        }
        return false;
    }
    getVerseNumberForLyricEntry(lyricsEntry) {
        let verseNumber = "1";
        this.lyricsEntries.forEach((key, value) => {
            if (lyricsEntry === value) {
                verseNumber = key;
            }
        });
        return verseNumber;
    }
    //public createVoiceEntriesForOrnament(activeKey: KeyInstruction): VoiceEntry[] {
    //    return this.createVoiceEntriesForOrnament(this, activeKey);
    //}
    createVoiceEntriesForOrnament(voiceEntryWithOrnament, activeKey) {
        if (!voiceEntryWithOrnament) {
            voiceEntryWithOrnament = this;
        }
        const voiceEntries = [];
        if (!voiceEntryWithOrnament.ornamentContainer) {
            return;
        }
        const baseNote = this.notes[0];
        const baselength = baseNote.Length;
        const baseVoice = voiceEntryWithOrnament.ParentVoice;
        const baseTimestamp = voiceEntryWithOrnament.Timestamp;
        let currentTimestamp = Fraction_1.Fraction.createFromFraction(baseTimestamp);
        //let length: Fraction;
        switch (voiceEntryWithOrnament.ornamentContainer.GetOrnament) {
            case OrnamentContainer_1.OrnamentEnum.Trill: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 8);
                const higherPitch = baseNote.Pitch.getTransposedPitch(1);
                let alteration = activeKey.getAlterationForPitch(higherPitch);
                if (voiceEntryWithOrnament.OrnamentContainer.AccidentalAbove !== Pitch_2.AccidentalEnum.NONE) {
                    alteration = voiceEntryWithOrnament.ornamentContainer.AccidentalAbove;
                }
                for (let i = 0; i < 8; i++) {
                    currentTimestamp = Fraction_1.Fraction.plus(baseTimestamp, new Fraction_1.Fraction(i * length.Numerator, length.Denominator));
                    if ((i % 2) === 0) {
                        this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                    }
                    else {
                        this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, alteration, voiceEntries);
                    }
                }
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.Turn: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 4);
                const lowerPitch = baseNote.Pitch.getTransposedPitch(-1);
                const lowerAlteration = activeKey.getAlterationForPitch(lowerPitch);
                const higherPitch = baseNote.Pitch.getTransposedPitch(1);
                const higherAlteration = activeKey.getAlterationForPitch(higherPitch);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp.Add(length);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.InvertedTurn: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 4);
                const lowerPitch = baseNote.Pitch.getTransposedPitch(-1);
                const lowerAlteration = activeKey.getAlterationForPitch(lowerPitch);
                const higherPitch = baseNote.Pitch.getTransposedPitch(1);
                const higherAlteration = activeKey.getAlterationForPitch(higherPitch);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp.Add(length);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.DelayedTurn: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 2);
                const lowerPitch = baseNote.Pitch.getTransposedPitch(-1);
                const lowerAlteration = activeKey.getAlterationForPitch(lowerPitch);
                const higherPitch = baseNote.Pitch.getTransposedPitch(1);
                const higherAlteration = activeKey.getAlterationForPitch(higherPitch);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp = Fraction_1.Fraction.plus(baseTimestamp, length);
                length.Denominator = baselength.Denominator * 8;
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp.Add(length);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.DelayedInvertedTurn: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 2);
                const lowerPitch = baseNote.Pitch.getTransposedPitch(-1);
                const lowerAlteration = activeKey.getAlterationForPitch(lowerPitch);
                const higherPitch = baseNote.Pitch.getTransposedPitch(1);
                const higherAlteration = activeKey.getAlterationForPitch(higherPitch);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp = Fraction_1.Fraction.plus(baseTimestamp, length);
                length.Denominator = baselength.Denominator * 8;
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, lowerAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp.Add(length);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, higherAlteration, voiceEntries);
                currentTimestamp.Add(length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.Mordent: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 4);
                const higherPitch = baseNote.Pitch.getTransposedPitch(1);
                const alteration = activeKey.getAlterationForPitch(higherPitch);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp.Add(length);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, higherPitch, alteration, voiceEntries);
                length.Denominator = baselength.Denominator * 2;
                currentTimestamp = Fraction_1.Fraction.plus(baseTimestamp, length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                break;
            }
            case OrnamentContainer_1.OrnamentEnum.InvertedMordent: {
                const length = new Fraction_1.Fraction(baselength.Numerator, baselength.Denominator * 4);
                const lowerPitch = baseNote.Pitch.getTransposedPitch(-1);
                const alteration = activeKey.getAlterationForPitch(lowerPitch);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                currentTimestamp.Add(length);
                this.createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, baseNote.SourceMeasure, lowerPitch, alteration, voiceEntries);
                length.Denominator = baselength.Denominator * 2;
                currentTimestamp = Fraction_1.Fraction.plus(baseTimestamp, length);
                this.createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries);
                break;
            }
            default:
                throw new RangeError();
        }
        return voiceEntries;
    }
    createBaseVoiceEntry(currentTimestamp, length, baseVoice, baseNote, voiceEntries) {
        const voiceEntry = new VoiceEntry(currentTimestamp, baseVoice, baseNote.ParentStaffEntry);
        const pitch = new Pitch_1.Pitch(baseNote.Pitch.FundamentalNote, baseNote.Pitch.Octave, baseNote.Pitch.Accidental);
        const note = new Note_1.Note(voiceEntry, undefined, length, pitch, baseNote.SourceMeasure);
        voiceEntry.Notes.push(note);
        voiceEntries.push(voiceEntry);
    }
    createAlteratedVoiceEntry(currentTimestamp, length, baseVoice, sourceMeasure, higherPitch, alteration, voiceEntries) {
        const voiceEntry = new VoiceEntry(currentTimestamp, baseVoice, undefined);
        const pitch = new Pitch_1.Pitch(higherPitch.FundamentalNote, higherPitch.Octave, alteration);
        const note = new Note_1.Note(voiceEntry, undefined, length, pitch, sourceMeasure);
        voiceEntry.Notes.push(note);
        voiceEntries.push(voiceEntry);
    }
}
exports.VoiceEntry = VoiceEntry;
var ArticulationEnum;
(function (ArticulationEnum) {
    ArticulationEnum[ArticulationEnum["accent"] = 0] = "accent";
    ArticulationEnum[ArticulationEnum["strongaccent"] = 1] = "strongaccent";
    ArticulationEnum[ArticulationEnum["softaccent"] = 2] = "softaccent";
    ArticulationEnum[ArticulationEnum["marcatoup"] = 3] = "marcatoup";
    ArticulationEnum[ArticulationEnum["marcatodown"] = 4] = "marcatodown";
    ArticulationEnum[ArticulationEnum["invertedstrongaccent"] = 5] = "invertedstrongaccent";
    ArticulationEnum[ArticulationEnum["staccato"] = 6] = "staccato";
    ArticulationEnum[ArticulationEnum["staccatissimo"] = 7] = "staccatissimo";
    ArticulationEnum[ArticulationEnum["spiccato"] = 8] = "spiccato";
    ArticulationEnum[ArticulationEnum["tenuto"] = 9] = "tenuto";
    ArticulationEnum[ArticulationEnum["fermata"] = 10] = "fermata";
    ArticulationEnum[ArticulationEnum["invertedfermata"] = 11] = "invertedfermata";
    ArticulationEnum[ArticulationEnum["breathmark"] = 12] = "breathmark";
    ArticulationEnum[ArticulationEnum["caesura"] = 13] = "caesura";
    ArticulationEnum[ArticulationEnum["lefthandpizzicato"] = 14] = "lefthandpizzicato";
    ArticulationEnum[ArticulationEnum["naturalharmonic"] = 15] = "naturalharmonic";
    ArticulationEnum[ArticulationEnum["snappizzicato"] = 16] = "snappizzicato";
    ArticulationEnum[ArticulationEnum["upbow"] = 17] = "upbow";
    ArticulationEnum[ArticulationEnum["downbow"] = 18] = "downbow";
    ArticulationEnum[ArticulationEnum["scoop"] = 19] = "scoop";
    ArticulationEnum[ArticulationEnum["plop"] = 20] = "plop";
    ArticulationEnum[ArticulationEnum["doit"] = 21] = "doit";
    ArticulationEnum[ArticulationEnum["falloff"] = 22] = "falloff";
    ArticulationEnum[ArticulationEnum["stress"] = 23] = "stress";
    ArticulationEnum[ArticulationEnum["unstress"] = 24] = "unstress";
    ArticulationEnum[ArticulationEnum["detachedlegato"] = 25] = "detachedlegato";
    ArticulationEnum[ArticulationEnum["otherarticulation"] = 26] = "otherarticulation";
    ArticulationEnum[ArticulationEnum["bend"] = 27] = "bend";
})(ArticulationEnum = exports.ArticulationEnum || (exports.ArticulationEnum = {}));
var StemDirectionType;
(function (StemDirectionType) {
    StemDirectionType[StemDirectionType["Undefined"] = -1] = "Undefined";
    StemDirectionType[StemDirectionType["Up"] = 0] = "Up";
    StemDirectionType[StemDirectionType["Down"] = 1] = "Down";
    StemDirectionType[StemDirectionType["None"] = 2] = "None";
    StemDirectionType[StemDirectionType["Double"] = 3] = "Double";
})(StemDirectionType = exports.StemDirectionType || (exports.StemDirectionType = {}));


/***/ }),

/***/ "./src/OpenSheetMusicDisplay/AJAX.ts":
/*!*******************************************!*\
  !*** ./src/OpenSheetMusicDisplay/AJAX.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AJAX = void 0;
/**
 * Class with helper methods to handle asynchronous JavaScript requests
 */
class AJAX {
    /**
     * Retrieve the content of the file at url
     * @param url
     * @returns {any}
     */
    static ajax(url, timeout = 9000) {
        let xhttp;
        const mimeType = url.indexOf(".mxl") > -1 ? "text/plain; charset=x-user-defined" : "application/xml";
        if (XMLHttpRequest) {
            xhttp = new XMLHttpRequest();
        }
        else if (ActiveXObject) {
            // for IE<7
            xhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
        else {
            return Promise.reject(new Error("XMLHttp not supported."));
        }
        xhttp.timeout = timeout;
        return new Promise((resolve, reject) => {
            xhttp.onreadystatechange = () => {
                if (xhttp.readyState === XMLHttpRequest.DONE) {
                    if (xhttp.status === 200) {
                        resolve(xhttp.responseText);
                    }
                    else if (xhttp.status === 0 && xhttp.responseText) {
                        resolve(xhttp.responseText);
                    }
                    else {
                        //reject(new Error("AJAX error: '" + xhttp.statusText + "'"));
                        reject(new Error("Could not retrieve requested URL " + xhttp.status));
                    }
                }
            };
            xhttp.ontimeout = (e) => {
                // For IE and node
                reject(new Error("Server request Timeout"));
            };
            xhttp.overrideMimeType(mimeType);
            xhttp.open("GET", url, true);
            xhttp.send();
        });
    }
}
exports.AJAX = AJAX;


/***/ }),

/***/ "./src/OpenSheetMusicDisplay/Cursor.ts":
/*!*********************************************!*\
  !*** ./src/OpenSheetMusicDisplay/Cursor.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Cursor = void 0;
const Fraction_1 = __webpack_require__(/*! ../Common/DataObjects/Fraction */ "./src/Common/DataObjects/Fraction.ts");
/**
 * A cursor which can iterate through the music sheet.
 */
class Cursor {
    constructor(container, openSheetMusicDisplay, cursorOptions) {
        this.hidden = true;
        this.currentPageNumber = 1;
        this.skipInvisibleNotes = true;
        this.container = container;
        this.openSheetMusicDisplay = openSheetMusicDisplay;
        this.rules = this.openSheetMusicDisplay.EngravingRules;
        this.cursorOptions = cursorOptions;
        // set cursor id
        // TODO add this for the OSMD object as well and refactor this into a util method?
        let id = 0;
        this.cursorElementId = "cursorImg-0";
        // find unique cursor id in document
        while (document.getElementById(this.cursorElementId)) {
            id++;
            this.cursorElementId = `cursorImg-${id}`;
        }
        const curs = document.createElement("img");
        curs.id = this.cursorElementId;
        curs.style.position = "absolute";
        if (this.cursorOptions.follow === true) {
            this.wantedZIndex = "-1";
            curs.style.zIndex = this.wantedZIndex;
        }
        else {
            this.wantedZIndex = "-2";
            curs.style.zIndex = this.wantedZIndex;
        }
        this.cursorElement = curs;
        this.container.appendChild(curs);
    }
    adjustToBackgroundColor() {
        let zIndex;
        if (!this.rules.PageBackgroundColor) {
            zIndex = this.wantedZIndex;
        }
        else {
            zIndex = "1";
        }
        this.cursorElement.style.zIndex = zIndex;
    }
    /** Initialize the cursor. Necessary before using functions like show() and next(). */
    init(manager, graphic) {
        this.manager = manager;
        this.graphic = graphic;
        this.reset();
        this.hidden = true;
        this.hide();
    }
    /**
     * Make the cursor visible
     */
    show() {
        this.hidden = false;
        //this.resetIterator(); // TODO maybe not here? though setting measure range to draw, rerendering, then handling cursor show is difficult
        this.update();
        this.adjustToBackgroundColor();
    }
    resetIterator() {
        if (!this.openSheetMusicDisplay.Sheet || !this.openSheetMusicDisplay.Sheet.SourceMeasures) { // just a safety measure
            console.log("OSMD.Cursor.resetIterator(): sheet or measures were null/undefined.");
            return;
        }
        // set selection start, so that when there's MinMeasureToDraw set, the cursor starts there right away instead of at measure 1
        const lastSheetMeasureIndex = this.openSheetMusicDisplay.Sheet.SourceMeasures.length - 1; // last measure in data model
        let startMeasureIndex = this.rules.MinMeasureToDrawIndex;
        startMeasureIndex = Math.min(startMeasureIndex, lastSheetMeasureIndex);
        let endMeasureIndex = this.rules.MaxMeasureToDrawIndex;
        endMeasureIndex = Math.min(endMeasureIndex, lastSheetMeasureIndex);
        if (this.openSheetMusicDisplay.Sheet && this.openSheetMusicDisplay.Sheet.SourceMeasures.length > startMeasureIndex) {
            this.openSheetMusicDisplay.Sheet.SelectionStart = this.openSheetMusicDisplay.Sheet.SourceMeasures[startMeasureIndex].AbsoluteTimestamp;
        }
        if (this.openSheetMusicDisplay.Sheet && this.openSheetMusicDisplay.Sheet.SourceMeasures.length > endMeasureIndex) {
            const lastMeasure = this.openSheetMusicDisplay.Sheet.SourceMeasures[endMeasureIndex];
            this.openSheetMusicDisplay.Sheet.SelectionEnd = Fraction_1.Fraction.plus(lastMeasure.AbsoluteTimestamp, lastMeasure.Duration);
        }
        this.iterator = this.manager.getIterator();
        // remember SkipInvisibleNotes setting, which otherwise gets reset to default value
        this.iterator.SkipInvisibleNotes = this.skipInvisibleNotes;
    }
    getStaffEntryFromVoiceEntry(voiceEntry) {
        const measureIndex = voiceEntry.ParentSourceStaffEntry.VerticalContainerParent.ParentMeasure.measureListIndex;
        const staffIndex = voiceEntry.ParentSourceStaffEntry.ParentStaff.idInMusicSheet;
        return this.graphic.findGraphicalStaffEntryFromMeasureList(staffIndex, measureIndex, voiceEntry.ParentSourceStaffEntry);
    }
    update() {
        if (this.hidden || this.hidden === undefined || this.hidden === null) {
            return;
        }
        this.updateCurrentPage(); // attach cursor to new page DOM if necessary
        // this.graphic?.Cursors?.length = 0;
        const iterator = this.iterator;
        // TODO when measure draw range (drawUpToMeasureNumber) was changed, next/update can fail to move cursor. but of course it can be reset before.
        let voiceEntries = iterator.CurrentVisibleVoiceEntries();
        let currentMeasureIndex = iterator.CurrentMeasureIndex;
        let x = 0, y = 0, height = 0;
        let musicSystem;
        if (voiceEntries.length === 0 && !iterator.FrontReached && !iterator.EndReached) {
            // e.g. when the note at the current position is in an instrument that's now invisible, and there's no other note at this position, vertically
            iterator.moveToPrevious();
            voiceEntries = iterator.CurrentVisibleVoiceEntries();
            iterator.moveToNext();
            // after this, the else condition below should trigger, positioning the cursor at the left-most note. See #1312
        }
        if (iterator.FrontReached && voiceEntries.length === 0) {
            // show beginning of first measure (of stafflines, to create a visual difference to the first note position)
            //   this position is technically before the sheet/first note - e.g. cursor.Iterator.CurrentTimestamp.RealValue = -1
            iterator.moveToNext();
            voiceEntries = iterator.CurrentVisibleVoiceEntries();
            const firstVisibleMeasure = this.findVisibleGraphicalMeasure(iterator.CurrentMeasureIndex);
            x = firstVisibleMeasure.PositionAndShape.AbsolutePosition.x;
            musicSystem = firstVisibleMeasure.ParentMusicSystem;
            iterator.moveToPrevious();
        }
        else if (iterator.EndReached || !iterator.CurrentVoiceEntries || voiceEntries.length === 0) {
            // show end of last measure (of stafflines, to create a visual difference to the first note position)
            //   this position is technically after the sheet/last note - e.g. cursor.Iterator.CurrentTimestamp.RealValue = 99999
            iterator.moveToPrevious();
            voiceEntries = iterator.CurrentVisibleVoiceEntries();
            currentMeasureIndex = iterator.CurrentMeasureIndex;
            const lastVisibleMeasure = this.findVisibleGraphicalMeasure(iterator.CurrentMeasureIndex);
            x = lastVisibleMeasure.PositionAndShape.AbsolutePosition.x + lastVisibleMeasure.PositionAndShape.Size.width;
            musicSystem = lastVisibleMeasure.ParentMusicSystem;
            iterator.moveToNext();
        }
        else if (iterator.CurrentMeasure.isReducedToMultiRest) {
            // multiple measure rests aren't used when one
            const multiRestGMeasure = this.findVisibleGraphicalMeasure(iterator.CurrentMeasureIndex);
            const totalRestMeasures = multiRestGMeasure.parentSourceMeasure.multipleRestMeasures;
            const currentRestMeasureNumber = iterator.CurrentMeasure.multipleRestMeasureNumber;
            const progressRatio = currentRestMeasureNumber / (totalRestMeasures + 1);
            const effectiveWidth = multiRestGMeasure.PositionAndShape.Size.width - multiRestGMeasure.beginInstructionsWidth;
            x = multiRestGMeasure.PositionAndShape.AbsolutePosition.x + multiRestGMeasure.beginInstructionsWidth + progressRatio * effectiveWidth;
            musicSystem = multiRestGMeasure.ParentMusicSystem;
        }
        else {
            // get all staff entries inside the current voice entry
            const gseArr = voiceEntries.map(ve => this.getStaffEntryFromVoiceEntry(ve));
            // sort them by x position and take the leftmost entry
            const gse = gseArr.sort((a, b) => { var _a, _b, _c, _d; return ((_b = (_a = a === null || a === void 0 ? void 0 : a.PositionAndShape) === null || _a === void 0 ? void 0 : _a.AbsolutePosition) === null || _b === void 0 ? void 0 : _b.x) <= ((_d = (_c = b === null || b === void 0 ? void 0 : b.PositionAndShape) === null || _c === void 0 ? void 0 : _c.AbsolutePosition) === null || _d === void 0 ? void 0 : _d.x) ? -1 : 1; })[0];
            if (gse) {
                x = gse.PositionAndShape.AbsolutePosition.x;
                musicSystem = gse.parentMeasure.ParentMusicSystem;
            }
            // debug: change color of notes under cursor (needs re-render)
            // for (const gve of gse.graphicalVoiceEntries) {
            //   for (const note of gve.notes) {
            //     note.sourceNote.NoteheadColor = "#0000FF";
            //   }
            // }
        }
        if (!musicSystem) {
            return;
        }
        // y is common for both multirest and non-multirest, given the MusicSystem
        //   note: StaffLines[0] is guaranteed to exist in this.findVisibleGraphicalMeasure
        y = musicSystem.PositionAndShape.AbsolutePosition.y + musicSystem.StaffLines[0].PositionAndShape.RelativePosition.y;
        let endY = musicSystem.PositionAndShape.AbsolutePosition.y;
        const bottomStaffline = musicSystem.StaffLines[musicSystem.StaffLines.length - 1];
        if (bottomStaffline) { // can be undefined if drawFromMeasureNumber changed after cursor was shown
            endY += bottomStaffline.PositionAndShape.RelativePosition.y + bottomStaffline.StaffHeight;
        }
        height = endY - y;
        // Update the graphical cursor
        const visibleMeasure = this.findVisibleGraphicalMeasure(currentMeasureIndex);
        if (!visibleMeasure) {
            return;
        }
        const measurePositionAndShape = visibleMeasure.PositionAndShape;
        this.updateWidthAndStyle(measurePositionAndShape, x, y, height);
        if (this.openSheetMusicDisplay.FollowCursor && this.cursorOptions.follow) {
            if (!this.openSheetMusicDisplay.EngravingRules.RenderSingleHorizontalStaffline) {
                const diff = this.cursorElement.getBoundingClientRect().top;
                this.cursorElement.scrollIntoView({ behavior: diff < 1000 ? "smooth" : "auto", block: "center" });
            }
            else {
                this.cursorElement.scrollIntoView({ behavior: "smooth", inline: "center" });
            }
        }
        // Show cursor
        // // Old cursor: this.graphic.Cursors.push(cursor);
        this.cursorElement.style.display = "";
    }
    findVisibleGraphicalMeasure(measureIndex) {
        for (let i = 0; i < this.graphic.NumberOfStaves; i++) {
            const measure = this.graphic.findGraphicalMeasure(this.iterator.CurrentMeasureIndex, i);
            if (measure === null || measure === void 0 ? void 0 : measure.ParentStaff.ParentInstrument.Visible) {
                return measure;
            }
        }
    }
    updateWidthAndStyle(measurePositionAndShape, x, y, height) {
        const cursorElement = this.cursorElement;
        let newWidth = 0;
        switch (this.cursorOptions.type) {
            case 1:
                cursorElement.style.top = (y * 10.0 * this.openSheetMusicDisplay.zoom) + "px";
                cursorElement.style.left = ((x - 1.5) * 10.0 * this.openSheetMusicDisplay.zoom) + "px";
                cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);
                newWidth = 5 * this.openSheetMusicDisplay.zoom;
                break;
            case 2:
                cursorElement.style.top = ((y - 2.5) * 10.0 * this.openSheetMusicDisplay.zoom) + "px";
                cursorElement.style.left = (x * 10.0 * this.openSheetMusicDisplay.zoom) + "px";
                cursorElement.height = (1.5 * 10.0 * this.openSheetMusicDisplay.zoom);
                newWidth = 5 * this.openSheetMusicDisplay.zoom;
                break;
            case 3:
                cursorElement.style.top = measurePositionAndShape.AbsolutePosition.y * 10.0 * this.openSheetMusicDisplay.zoom + "px";
                cursorElement.style.left = measurePositionAndShape.AbsolutePosition.x * 10.0 * this.openSheetMusicDisplay.zoom + "px";
                cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);
                newWidth = measurePositionAndShape.Size.width * 10 * this.openSheetMusicDisplay.zoom;
                break;
            case 4:
                cursorElement.style.top = measurePositionAndShape.AbsolutePosition.y * 10.0 * this.openSheetMusicDisplay.zoom + "px";
                cursorElement.style.left = measurePositionAndShape.AbsolutePosition.x * 10.0 * this.openSheetMusicDisplay.zoom + "px";
                cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);
                newWidth = (x - measurePositionAndShape.AbsolutePosition.x) * 10 * this.openSheetMusicDisplay.zoom;
                break;
            default:
                cursorElement.style.top = (y * 10.0 * this.openSheetMusicDisplay.zoom) + "px";
                cursorElement.style.left = ((x - 1.5) * 10.0 * this.openSheetMusicDisplay.zoom) + "px";
                cursorElement.height = (height * 10.0 * this.openSheetMusicDisplay.zoom);
                newWidth = 3 * 10.0 * this.openSheetMusicDisplay.zoom;
                break;
        }
        if (newWidth !== cursorElement.width) {
            cursorElement.width = newWidth;
            this.updateStyle(newWidth, this.cursorOptions);
        }
    }
    /**
     * Hide the cursor
     */
    hide() {
        // Hide the actual cursor element
        this.cursorElement.style.display = "none";
        //this.graphic.Cursors.length = 0;
        // Forcing the sheet to re-render is not necessary anymore
        //if (!this.hidden) {
        //    this.openSheetMusicDisplay.render();
        //}
        this.hidden = true;
    }
    /**
     * Go to previous entry
     */
    previous() {
        this.iterator.moveToPreviousVisibleVoiceEntry(false);
        this.update();
    }
    /**
     * Go to next entry
     */
    next() {
        this.iterator.moveToNextVisibleVoiceEntry(false); // moveToNext() would not skip notes in hidden (visible = false) parts
        this.update();
    }
    /**
     * reset cursor to start
     */
    reset() {
        this.resetIterator();
        //this.iterator.moveToNext();
        this.update();
    }
    updateStyle(width, cursorOptions = undefined) {
        if (cursorOptions !== undefined) {
            this.cursorOptions = cursorOptions;
        }
        // Create a dummy canvas to generate the gradient for the cursor
        // FIXME This approach needs to be improved
        const c = document.createElement("canvas");
        c.width = this.cursorElement.width;
        c.height = 1;
        const ctx = c.getContext("2d");
        ctx.globalAlpha = this.cursorOptions.alpha;
        // Generate the gradient
        const gradient = ctx.createLinearGradient(0, 0, this.cursorElement.width, 0);
        switch (this.cursorOptions.type) {
            case 1:
            case 2:
            case 3:
            case 4:
                gradient.addColorStop(1, this.cursorOptions.color);
                break;
            default:
                gradient.addColorStop(0, "white"); // it was: "transparent"
                gradient.addColorStop(0.2, this.cursorOptions.color);
                gradient.addColorStop(0.8, this.cursorOptions.color);
                gradient.addColorStop(1, "white"); // it was: "transparent"
                break;
        }
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, width, 1);
        // Set the actual image
        this.cursorElement.src = c.toDataURL("image/png");
    }
    get Iterator() {
        return this.iterator;
    }
    get Hidden() {
        return this.hidden;
    }
    /** returns voices under the current Cursor position. Without instrument argument, all voices are returned. */
    VoicesUnderCursor(instrument) {
        return this.iterator.CurrentVisibleVoiceEntries(instrument);
    }
    NotesUnderCursor(instrument) {
        const voiceEntries = this.VoicesUnderCursor(instrument);
        const notes = [];
        voiceEntries.forEach(voiceEntry => {
            notes.push.apply(notes, voiceEntry.Notes);
        });
        return notes;
    }
    GNotesUnderCursor(instrument) {
        const voiceEntries = this.VoicesUnderCursor(instrument);
        const notes = [];
        voiceEntries.forEach(voiceEntry => {
            notes.push(...voiceEntry.Notes.map(note => this.rules.GNote(note)));
        });
        return notes;
    }
    /** Check if there was a change in current page, and attach cursor element to the corresponding HTMLElement (div).
     *  This is only necessary if using PageFormat (multiple pages).
     */
    updateCurrentPage() {
        let timestamp = this.iterator.currentTimeStamp;
        if (timestamp.RealValue < 0) {
            timestamp = new Fraction_1.Fraction(0, 0);
        }
        for (const page of this.graphic.MusicPages) {
            const lastSystemTimestamp = page.MusicSystems.last().GetSystemsLastTimeStamp();
            if (lastSystemTimestamp.gt(timestamp)) {
                // gt: the last timestamp of the last system is equal to the first of the next page,
                //   so we do need to use gt, not gte here.
                const newPageNumber = page.PageNumber;
                if (newPageNumber !== this.currentPageNumber) {
                    this.container.removeChild(this.cursorElement);
                    this.container = document.getElementById("osmdCanvasPage" + newPageNumber);
                    this.container.appendChild(this.cursorElement);
                    // TODO maybe store this.pageCurrentlyAttachedTo, though right now it isn't necessary
                    // alternative to remove/append:
                    // this.openSheetMusicDisplay.enableOrDisableCursor(true);
                }
                return this.currentPageNumber = newPageNumber;
            }
        }
        return 1;
    }
    get SkipInvisibleNotes() {
        return this.skipInvisibleNotes;
    }
    set SkipInvisibleNotes(value) {
        this.skipInvisibleNotes = value;
        this.iterator.SkipInvisibleNotes = value;
    }
    get CursorOptions() {
        return this.cursorOptions;
    }
    set CursorOptions(value) {
        this.cursorOptions = value;
    }
}
exports.Cursor = Cursor;


/***/ }),

/***/ "./src/OpenSheetMusicDisplay/OSMDOptions.ts":
/*!**************************************************!*\
  !*** ./src/OpenSheetMusicDisplay/OSMDOptions.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OSMDOptions = exports.SkyBottomLineBatchCalculatorBackendType = exports.BackendType = exports.FillEmptyMeasuresWithWholeRests = exports.AlignRestOption = exports.CursorType = void 0;
const DrawingParameters_1 = __webpack_require__(/*! ../MusicalScore/Graphical/DrawingParameters */ "./src/MusicalScore/Graphical/DrawingParameters.ts");
var CursorType;
(function (CursorType) {
    CursorType[CursorType["Standard"] = 0] = "Standard";
    CursorType[CursorType["ThinLeft"] = 1] = "ThinLeft";
    CursorType[CursorType["ShortThinTopLeft"] = 2] = "ShortThinTopLeft";
    CursorType[CursorType["CurrentArea"] = 3] = "CurrentArea";
    CursorType[CursorType["CurrentAreaLeft"] = 4] = "CurrentAreaLeft";
})(CursorType = exports.CursorType || (exports.CursorType = {}));
var AlignRestOption;
(function (AlignRestOption) {
    AlignRestOption[AlignRestOption["Never"] = 0] = "Never";
    AlignRestOption[AlignRestOption["Always"] = 1] = "Always";
    AlignRestOption[AlignRestOption["Auto"] = 2] = "Auto";
})(AlignRestOption = exports.AlignRestOption || (exports.AlignRestOption = {}));
var FillEmptyMeasuresWithWholeRests;
(function (FillEmptyMeasuresWithWholeRests) {
    FillEmptyMeasuresWithWholeRests[FillEmptyMeasuresWithWholeRests["No"] = 0] = "No";
    FillEmptyMeasuresWithWholeRests[FillEmptyMeasuresWithWholeRests["YesVisible"] = 1] = "YesVisible";
    FillEmptyMeasuresWithWholeRests[FillEmptyMeasuresWithWholeRests["YesInvisible"] = 2] = "YesInvisible"; // fill with invisible whole rests
})(FillEmptyMeasuresWithWholeRests = exports.FillEmptyMeasuresWithWholeRests || (exports.FillEmptyMeasuresWithWholeRests = {}));
var BackendType;
(function (BackendType) {
    BackendType[BackendType["SVG"] = 0] = "SVG";
    BackendType[BackendType["Canvas"] = 1] = "Canvas";
})(BackendType = exports.BackendType || (exports.BackendType = {}));
var SkyBottomLineBatchCalculatorBackendType;
(function (SkyBottomLineBatchCalculatorBackendType) {
    SkyBottomLineBatchCalculatorBackendType[SkyBottomLineBatchCalculatorBackendType["Plain"] = 0] = "Plain";
    SkyBottomLineBatchCalculatorBackendType[SkyBottomLineBatchCalculatorBackendType["WebGL"] = 1] = "WebGL";
})(SkyBottomLineBatchCalculatorBackendType = exports.SkyBottomLineBatchCalculatorBackendType || (exports.SkyBottomLineBatchCalculatorBackendType = {}));
/** Handles [[IOSMDOptions]], e.g. returning default options with OSMDOptionsStandard() */
class OSMDOptions {
    /** Returns the default options for OSMD.
     * These are e.g. used if no options are given in the [[OpenSheetMusicDisplay]] constructor.
     */
    static OSMDOptionsStandard() {
        return {
            autoResize: true,
            backend: "svg",
            drawingParameters: DrawingParameters_1.DrawingParametersEnum.default,
        };
    }
    static BackendTypeFromString(value) {
        if (value && value.toLowerCase() === "canvas") {
            return BackendType.Canvas;
        }
        else {
            return BackendType.SVG;
        }
    }
}
exports.OSMDOptions = OSMDOptions;


/***/ }),

/***/ "./src/OpenSheetMusicDisplay/OpenSheetMusicDisplay.ts":
/*!************************************************************!*\
  !*** ./src/OpenSheetMusicDisplay/OpenSheetMusicDisplay.ts ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OpenSheetMusicDisplay = void 0;
const Xml_1 = __webpack_require__(/*! ./../Common/FileIO/Xml */ "./src/Common/FileIO/Xml.ts");
const VexFlowMusicSheetCalculator_1 = __webpack_require__(/*! ./../MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetCalculator.ts");
const MusicSheetReader_1 = __webpack_require__(/*! ./../MusicalScore/ScoreIO/MusicSheetReader */ "./src/MusicalScore/ScoreIO/MusicSheetReader.ts");
const GraphicalMusicSheet_1 = __webpack_require__(/*! ./../MusicalScore/Graphical/GraphicalMusicSheet */ "./src/MusicalScore/Graphical/GraphicalMusicSheet.ts");
const MusicSheetCalculator_1 = __webpack_require__(/*! ./../MusicalScore/Graphical/MusicSheetCalculator */ "./src/MusicalScore/Graphical/MusicSheetCalculator.ts");
const VexFlowMusicSheetDrawer_1 = __webpack_require__(/*! ./../MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer */ "./src/MusicalScore/Graphical/VexFlow/VexFlowMusicSheetDrawer.ts");
const SvgVexFlowBackend_1 = __webpack_require__(/*! ./../MusicalScore/Graphical/VexFlow/SvgVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/SvgVexFlowBackend.ts");
const CanvasVexFlowBackend_1 = __webpack_require__(/*! ./../MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend */ "./src/MusicalScore/Graphical/VexFlow/CanvasVexFlowBackend.ts");
const Cursor_1 = __webpack_require__(/*! ./Cursor */ "./src/OpenSheetMusicDisplay/Cursor.ts");
const Mxl_1 = __webpack_require__(/*! ../Common/FileIO/Mxl */ "./src/Common/FileIO/Mxl.ts");
const AJAX_1 = __webpack_require__(/*! ./AJAX */ "./src/OpenSheetMusicDisplay/AJAX.ts");
const loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js"));
const DrawingParameters_1 = __webpack_require__(/*! ../MusicalScore/Graphical/DrawingParameters */ "./src/MusicalScore/Graphical/DrawingParameters.ts");
const OSMDOptions_1 = __webpack_require__(/*! ./OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
const EngravingRules_1 = __webpack_require__(/*! ../MusicalScore/Graphical/EngravingRules */ "./src/MusicalScore/Graphical/EngravingRules.ts");
const AbstractExpression_1 = __webpack_require__(/*! ../MusicalScore/VoiceData/Expressions/AbstractExpression */ "./src/MusicalScore/VoiceData/Expressions/AbstractExpression.ts");
const typescript_collections_1 = __webpack_require__(/*! typescript-collections */ "./node_modules/typescript-collections/dist/lib/index.js");
const DrawingEnums_1 = __webpack_require__(/*! ../MusicalScore/Graphical/DrawingEnums */ "./src/MusicalScore/Graphical/DrawingEnums.ts");
const Pitch_1 = __webpack_require__(/*! ../Common/DataObjects/Pitch */ "./src/Common/DataObjects/Pitch.ts");
/**
 * The main class and control point of OpenSheetMusicDisplay.<br>
 * It can display MusicXML sheet music files in an HTML element container.<br>
 * After the constructor, use load() and render() to load and render a MusicXML file.
 */
class OpenSheetMusicDisplay {
    // at release, bump version and change to -release, afterwards to -dev again
    /**
     * Creates and attaches an OpenSheetMusicDisplay object to an HTML element container.<br>
     * After the constructor, use load() and render() to load and render a MusicXML file.
     * @param container The container element OSMD will be rendered into.<br>
     *                  Either a string specifying the ID of an HTML container element,<br>
     *                  or a reference to the HTML element itself (e.g. div)
     * @param options An object for rendering options like the backend (svg/canvas) or autoResize.<br>
     *                For defaults see the OSMDOptionsStandard method in the [[OSMDOptions]] class.
     */
    constructor(container, options = OSMDOptions_1.OSMDOptions.OSMDOptionsStandard()) {
        this.version = "1.8.2-dev"; // getter: this.Version
        this.cursorsOptions = [];
        this.cursors = [];
        this.zoom = 1.0;
        this.zoomUpdated = false;
        /** Timeout in milliseconds used in osmd.load(string) when string is a URL. */
        this.loadUrlTimeout = 5000;
        // Store container element
        if (typeof container === "string") {
            // ID passed
            this.container = document.getElementById(container);
        }
        else if (container && "appendChild" in container) {
            // Element passed
            this.container = container;
        }
        if (!this.container) {
            throw new Error("Please pass a valid div container to OpenSheetMusicDisplay");
        }
        if (options.autoResize === undefined) {
            options.autoResize = true;
        }
        this.backendType = OSMDOptions_1.BackendType.SVG; // default, can be changed by options
        this.setOptions(options);
    }
    get cursor() {
        return this.cursors[0];
    }
    /**
     * Load a MusicXML file
     * @param content is either the url of a file, or the root node of a MusicXML document, or the string content of a .xml/.mxl file
     * @param tempTitle is used as the title for the piece if there is no title in the XML.
     */
    load(content, tempTitle = "Untitled Score") {
        // Warning! This function is asynchronous! No error handling is done here.
        this.reset();
        //console.log("typeof content: " + typeof content);
        if (typeof content === "string") {
            const str = content;
            const self = this;
            // console.log("substring: " + str.substr(0, 5));
            if (str.substr(0, 4) === "\x50\x4b\x03\x04") {
                loglevel_1.default.debug("[OSMD] This is a zip file, unpack it first: " + str);
                // This is a zip file, unpack it first
                return Mxl_1.MXLHelper.MXLtoXMLstring(str).then((x) => {
                    return self.load(x);
                }, (err) => {
                    loglevel_1.default.debug(err);
                    throw new Error("OpenSheetMusicDisplay: Invalid MXL file");
                });
            }
            // Javascript loads strings as utf-16, which is wonderful BS if you want to parse UTF-8 :S
            if (str.substr(0, 3) === "\uf7ef\uf7bb\uf7bf") {
                loglevel_1.default.debug("[OSMD] UTF with BOM detected, truncate first three bytes and pass along: " + str);
                // UTF with BOM detected, truncate first three bytes and pass along
                return self.load(str.substr(3));
            }
            let trimmedStr = str;
            if (/^\s/.test(trimmedStr)) { // only trim if we need to. (end of string is irrelevant)
                trimmedStr = trimmedStr.trim(); // trim away empty lines at beginning etc
            }
            if (trimmedStr.substr(0, 6).includes("<?xml")) { // first character is sometimes null, making first five characters '<?xm'.
                const modifiedXml = this.OnXMLRead(trimmedStr); // by default just returns trimmedStr unless a function options.OnXMLRead was set.
                loglevel_1.default.debug("[OSMD] Finally parsing XML content, length: " + modifiedXml.length);
                // Parse the string representing an xml file
                const parser = new DOMParser();
                content = parser.parseFromString(modifiedXml, "application/xml");
            }
            else if (trimmedStr.length < 2083) { // TODO do proper URL format check
                loglevel_1.default.debug("[OSMD] Retrieve the file at the given URL: " + trimmedStr);
                // Assume now "str" is a URL
                // Retrieve the file at the given URL
                return AJAX_1.AJAX.ajax(trimmedStr, this.loadUrlTimeout).then((s) => { return self.load(s); }, (exc) => { throw exc; });
            }
            else {
                console.error("[OSMD] osmd.load(string): Could not process string. Did not find <?xml at beginning.");
            }
        }
        if (!content || !content.nodeName) {
            return Promise.reject(new Error("OpenSheetMusicDisplay: The document which was provided is invalid"));
        }
        const xmlDocument = content;
        const xmlDocumentNodes = xmlDocument.childNodes;
        loglevel_1.default.debug("[OSMD] load(), Document url: " + xmlDocument.URL);
        let scorePartwiseElement;
        for (let i = 0, length = xmlDocumentNodes.length; i < length; i += 1) {
            const node = xmlDocumentNodes[i];
            if (node.nodeType === Node.ELEMENT_NODE && node.nodeName.toLowerCase() === "score-partwise") {
                scorePartwiseElement = node;
                break;
            }
        }
        if (!scorePartwiseElement) {
            console.error("Could not parse MusicXML, no valid partwise element found");
            return Promise.reject(new Error("OpenSheetMusicDisplay: Document is not a valid 'partwise' MusicXML"));
        }
        const score = new Xml_1.IXmlElement(scorePartwiseElement);
        const reader = new MusicSheetReader_1.MusicSheetReader(undefined, this.rules);
        this.sheet = reader.createMusicSheet(score, tempTitle);
        if (this.sheet === undefined) {
            // error loading sheet, probably already logged, do nothing
            return Promise.reject(new Error("given music sheet was incomplete or could not be loaded."));
        }
        loglevel_1.default.info(`[OSMD] Loaded sheet ${this.sheet.TitleString} successfully.`);
        this.needBackendUpdate = true;
        this.updateGraphic();
        return Promise.resolve({});
    }
    /**
     * (Re-)creates the graphic sheet from the music sheet
     */
    updateGraphic() {
        const calc = new VexFlowMusicSheetCalculator_1.VexFlowMusicSheetCalculator(this.rules);
        this.graphic = new GraphicalMusicSheet_1.GraphicalMusicSheet(this.sheet, calc);
        if (this.drawingParameters.drawCursors) {
            this.cursors.forEach(cursor => {
                cursor.init(this.sheet.MusicPartManager, this.graphic);
            });
        }
    }
    /**
     * Render the music sheet in the container
     */
    render() {
        var _a;
        if (!this.graphic) {
            throw new Error("OpenSheetMusicDisplay: Before rendering a music sheet, please load a MusicXML file");
        }
        (_a = this.drawer) === null || _a === void 0 ? void 0 : _a.clear(); // clear canvas before setting width
        // this.graphic.GetCalculator.clearSystemsAndMeasures(); // maybe?
        // this.graphic.GetCalculator.clearRecreatedObjects();
        // Set page width
        let width = this.container.offsetWidth;
        if (this.rules.RenderSingleHorizontalStaffline) {
            width = this.rules.SheetMaximumWidth; // set safe maximum (browser limit), will be reduced later
            // reduced later in MusicSheetCalculator.calculatePageLabels (sets sheet.pageWidth to page.PositionAndShape.Size.width before labels)
            // rough calculation:
            // width = 600 * this.sheet.SourceMeasures.length;
        }
        // log.debug("[OSMD] render width: " + width);
        this.sheet.pageWidth = width / this.zoom / 10.0;
        if (this.rules.PageFormat && !this.rules.PageFormat.IsUndefined) {
            this.rules.PageHeight = this.sheet.pageWidth / this.rules.PageFormat.aspectRatio;
            loglevel_1.default.debug("[OSMD] PageHeight: " + this.rules.PageHeight);
        }
        else {
            loglevel_1.default.debug("[OSMD] endless/undefined pageformat, id: " + this.rules.PageFormat.idString);
            this.rules.PageHeight = 100001; // infinite page height // TODO maybe Number.MAX_VALUE or Math.pow(10, 20)?
        }
        // Before introducing the following optimization (maybe irrelevant), tests
        // have to be modified to ensure that width is > 0 when executed
        //if (isNaN(width) || width === 0) {
        //    return;
        //}
        // Calculate again
        this.graphic.reCalculate();
        if (this.drawingParameters.drawCursors) {
            this.graphic.Cursors.length = 0;
        }
        // needBackendUpdate is well intentioned, but we need to cover all cases.
        //   backends also need an update when this.zoom was set from outside, which unfortunately doesn't have a setter method to set this in.
        //   so just for compatibility, we need to assume users set osmd.zoom, so we'd need to check whether it was changed compared to last time.
        if (true) {
            this.createOrRefreshRenderBackend();
            this.needBackendUpdate = false;
        }
        this.drawer.setZoom(this.zoom);
        // Finally, draw
        this.drawer.drawSheet(this.graphic);
        this.enableOrDisableCursors(this.drawingParameters.drawCursors);
        if (this.drawingParameters.drawCursors) {
            // Update the cursor position
            this.cursors.forEach(cursor => {
                cursor.update();
            });
        }
        this.zoomUpdated = false;
        //console.log("[OSMD] render finished");
    }
    createOrRefreshRenderBackend() {
        // console.log("[OSMD] createOrRefreshRenderBackend()");
        // Remove old backends
        if (this.drawer && this.drawer.Backends) {
            // removing single children to remove all is error-prone, because sometimes a random SVG-child remains.
            // for (const backend of this.drawer.Backends) {
            //     backend.removeFromContainer(this.container);
            // }
            if (this.drawer.Backends[0]) {
                this.drawer.Backends[0].removeAllChildrenFromContainer(this.container);
            }
            this.drawer.Backends.clear();
        }
        // Create the drawer
        this.drawingParameters.Rules = this.rules;
        this.drawer = new VexFlowMusicSheetDrawer_1.VexFlowMusicSheetDrawer(this.drawingParameters); // note that here the drawer.drawableBoundingBoxElement is lost. now saved in OSMD.
        this.drawer.drawableBoundingBoxElement = this.DrawBoundingBox;
        this.drawer.bottomLineVisible = this.drawBottomLine;
        this.drawer.skyLineVisible = this.drawSkyLine;
        // Set page width
        let width = this.container.offsetWidth;
        if (this.rules.RenderSingleHorizontalStaffline) {
            width = (this.EngravingRules.PageLeftMargin + this.graphic.MusicPages[0].PositionAndShape.Size.width + this.EngravingRules.PageRightMargin)
                * 10 * this.zoom;
            // this.container.style.width = width + "px";
            // console.log("width: " + width)
        }
        // TODO width may need to be coordinated with render() where width is also used
        let height;
        const canvasDimensionsLimit = 32767; // browser limitation. Chrome/Firefox (16 bit, 32768 causes an error).
        // Could be calculated by canvas-size module.
        // see #678 on Github and here: https://stackoverflow.com/a/11585939/10295942
        // TODO check if resize is necessary. set needResize or something when size was changed
        for (const page of this.graphic.MusicPages) {
            if (page.PageNumber > this.rules.MaxPageToDrawNumber) {
                break; // don't add the bounding boxes of pages that aren't drawn to the container height etc
            }
            const backend = this.createBackend(this.backendType, page);
            const sizeWarningPartTwo = " exceeds CanvasBackend limit of 32767. Cutting off score.";
            if (backend.getOSMDBackendType() === OSMDOptions_1.BackendType.Canvas && width > canvasDimensionsLimit) {
                loglevel_1.default.warn("[OSMD] Warning: width of " + width + sizeWarningPartTwo);
                width = canvasDimensionsLimit;
            }
            if (this.rules.PageFormat && !this.rules.PageFormat.IsUndefined) {
                height = width / this.rules.PageFormat.aspectRatio;
                // console.log("pageformat given. height: " + page.PositionAndShape.Size.height);
            }
            else {
                height = page.PositionAndShape.Size.height;
                height += this.rules.PageBottomMargin;
                if (backend.getOSMDBackendType() === OSMDOptions_1.BackendType.Canvas) {
                    height += 0.1; // Canvas bug: cuts off bottom pixel with PageBottomMargin = 0. Doesn't happen with SVG.
                    //  we could only add 0.1 if PageBottomMargin === 0, but that would mean a margin of 0.1 has no effect compared to 0.
                }
                //height += this.rules.CompactMode ? this.rules.PageTopMarginNarrow : this.rules.PageTopMargin;
                // adding the PageTopMargin with a composer label leads to the margin also added to the bottom of the page
                height += page.PositionAndShape.BorderTop;
                // try to respect elements like composer cut off: this gets messy.
                // if (page.PositionAndShape.BorderTop < 0 && this.rules.PageTopMargin === 0) {
                //     height += page.PositionAndShape.BorderTop + this.rules.PageTopMargin;
                // }
                if (this.rules.RenderTitle) {
                    height += this.rules.TitleTopDistance;
                }
                height *= this.zoom * 10.0;
                // console.log("pageformat not given. height: " + page.PositionAndShape.Size.height);
            }
            if (backend.getOSMDBackendType() === OSMDOptions_1.BackendType.Canvas && height > canvasDimensionsLimit) {
                loglevel_1.default.warn("[OSMD] Warning: height of " + height + sizeWarningPartTwo);
                height = Math.min(height, canvasDimensionsLimit); // this cuts off the the score, but doesn't break rendering.
                // TODO optional: reduce zoom to fit the score within the limit.
            }
            backend.resize(width, height); // this resets strokeStyle for Canvas
            backend.clear(); // set bgcolor if defined (this.rules.PageBackgroundColor, see OSMDOptions)
            backend.getContext().setFillStyle(this.rules.DefaultColorMusic);
            backend.getContext().setStrokeStyle(this.rules.DefaultColorMusic); // needs to be set after resize()
            this.drawer.Backends.push(backend);
            this.graphic.drawer = this.drawer;
        }
    }
    // for now SVG only, see generateImages_browserless (PNG/SVG)
    exportSVG() {
        var _a;
        for (const backend of (_a = this.drawer) === null || _a === void 0 ? void 0 : _a.Backends) {
            if (backend instanceof SvgVexFlowBackend_1.SvgVexFlowBackend) {
                backend.export();
            }
            // if we add CanvasVexFlowBackend exporting, rename function to export() or exportImages() again
        }
    }
    /** States whether the render() function can be safely called. */
    IsReadyToRender() {
        return this.graphic !== undefined;
    }
    /** Clears what OSMD has drawn on its canvas. */
    clear() {
        this.drawer.clear();
        this.reset(); // without this, resize will draw loaded sheet again
    }
    /** Set OSMD rendering options using an IOSMDOptions object.
     *  Can be called during runtime. Also called by constructor.
     *  For example, setOptions({autoResize: false}) will disable autoResize even during runtime.
     */
    setOptions(options) {
        if (!this.rules) {
            this.rules = new EngravingRules_1.EngravingRules();
        }
        if (!this.drawingParameters && !options.drawingParameters) {
            this.drawingParameters = new DrawingParameters_1.DrawingParameters(DrawingParameters_1.DrawingParametersEnum.default, this.rules);
            // if "default", will be created below
        }
        else if (options.drawingParameters) {
            if (!this.drawingParameters) {
                this.drawingParameters = new DrawingParameters_1.DrawingParameters(DrawingParameters_1.DrawingParametersEnum[options.drawingParameters], this.rules);
            }
            else {
                this.drawingParameters.DrawingParametersEnum =
                    DrawingParameters_1.DrawingParametersEnum[options.drawingParameters.toLowerCase()];
                // see DrawingParameters.ts: set DrawingParametersEnum, and DrawingParameters.ts:setForCompactTightMode()
            }
        }
        if (options === undefined || options === null) {
            loglevel_1.default.warn("warning: osmd.setOptions() called without an options parameter, has no effect."
                + "\n" + "example usage: osmd.setOptions({drawCredits: false, drawPartNames: false})");
            return;
        }
        this.OnXMLRead = function (xml) { return xml; };
        if (options.onXMLRead) {
            this.OnXMLRead = options.onXMLRead;
        }
        const backendNotInitialized = !this.drawer || !this.drawer.Backends || this.drawer.Backends.length < 1;
        let needBackendUpdate = backendNotInitialized;
        if (options.backend !== undefined) {
            const backendTypeGiven = OSMDOptions_1.OSMDOptions.BackendTypeFromString(options.backend);
            needBackendUpdate = needBackendUpdate || this.backendType !== backendTypeGiven;
            this.backendType = backendTypeGiven;
        }
        this.needBackendUpdate = needBackendUpdate;
        // TODO this is a necessary step during the OSMD constructor. Maybe move this somewhere else
        // individual drawing parameters options
        if (options.autoBeam !== undefined) { // only change an option if it was given in options, otherwise it will be undefined
            this.rules.AutoBeamNotes = options.autoBeam;
        }
        const autoBeamOptions = options.autoBeamOptions;
        if (autoBeamOptions) {
            if (autoBeamOptions.maintain_stem_directions === undefined) {
                autoBeamOptions.maintain_stem_directions = false;
            }
            this.rules.AutoBeamOptions = autoBeamOptions;
            if (autoBeamOptions.groups && autoBeamOptions.groups.length) {
                for (const fraction of autoBeamOptions.groups) {
                    if (fraction.length !== 2) {
                        throw new Error("Each fraction in autoBeamOptions.groups must be of length 2, e.g. [3,4] for beaming three fourths");
                    }
                }
            }
        }
        if (options.percussionOneLineCutoff !== undefined) {
            this.rules.PercussionOneLineCutoff = options.percussionOneLineCutoff;
        }
        if (this.rules.PercussionOneLineCutoff !== 0 &&
            options.percussionForceVoicesOneLineCutoff !== undefined) {
            this.rules.PercussionForceVoicesOneLineCutoff = options.percussionForceVoicesOneLineCutoff;
        }
        if (options.alignRests !== undefined) {
            this.rules.AlignRests = options.alignRests;
        }
        if (options.coloringMode !== undefined) {
            this.setColoringMode(options);
        }
        if (options.coloringEnabled !== undefined) {
            this.rules.ColoringEnabled = options.coloringEnabled;
        }
        if (options.colorStemsLikeNoteheads !== undefined) {
            this.rules.ColorStemsLikeNoteheads = options.colorStemsLikeNoteheads;
        }
        if (options.disableCursor) {
            this.drawingParameters.drawCursors = false;
        }
        // alternative to if block: this.drawingsParameters.drawCursors = options.drawCursors !== false. No if, but always sets drawingParameters.
        // note that every option can be undefined, which doesn't mean the option should be set to false.
        if (options.drawHiddenNotes) {
            this.drawingParameters.drawHiddenNotes = true; // not yet supported
        }
        if (options.drawCredits !== undefined) {
            this.drawingParameters.DrawCredits = options.drawCredits; // sets DrawComposer, DrawTitle, DrawSubtitle, DrawLyricist.
        }
        if (options.drawComposer !== undefined) {
            this.drawingParameters.DrawComposer = options.drawComposer;
        }
        if (options.drawTitle !== undefined) {
            this.drawingParameters.DrawTitle = options.drawTitle;
        }
        if (options.drawSubtitle !== undefined) {
            this.drawingParameters.DrawSubtitle = options.drawSubtitle;
        }
        if (options.drawLyricist !== undefined) {
            this.drawingParameters.DrawLyricist = options.drawLyricist;
        }
        if (options.drawMetronomeMarks !== undefined) {
            this.rules.MetronomeMarksDrawn = options.drawMetronomeMarks;
        }
        if (options.drawPartNames !== undefined) {
            this.drawingParameters.DrawPartNames = options.drawPartNames; // indirectly writes to EngravingRules
            // by default, disable part abbreviations too, unless set explicitly.
            if (!options.drawPartAbbreviations) {
                this.rules.RenderPartAbbreviations = options.drawPartNames;
            }
        }
        if (options.drawPartAbbreviations !== undefined) {
            this.rules.RenderPartAbbreviations = options.drawPartAbbreviations;
        }
        if (options.drawFingerings === false) {
            this.rules.RenderFingerings = false;
        }
        if (options.drawMeasureNumbers !== undefined) {
            this.rules.RenderMeasureNumbers = options.drawMeasureNumbers;
        }
        if (options.drawMeasureNumbersOnlyAtSystemStart) {
            this.rules.RenderMeasureNumbersOnlyAtSystemStart = options.drawMeasureNumbersOnlyAtSystemStart;
        }
        if (options.drawLyrics !== undefined) {
            this.rules.RenderLyrics = options.drawLyrics;
        }
        if (options.drawTimeSignatures !== undefined) {
            this.rules.RenderTimeSignatures = options.drawTimeSignatures;
        }
        if (options.drawSlurs !== undefined) {
            this.rules.RenderSlurs = options.drawSlurs;
        }
        if (options.measureNumberInterval !== undefined) {
            this.rules.MeasureNumberLabelOffset = options.measureNumberInterval;
        }
        if (options.useXMLMeasureNumbers !== undefined) {
            this.rules.UseXMLMeasureNumbers = options.useXMLMeasureNumbers;
        }
        if (options.fingeringPosition !== undefined) {
            this.rules.FingeringPosition = AbstractExpression_1.AbstractExpression.PlacementEnumFromString(options.fingeringPosition);
        }
        if (options.fingeringInsideStafflines !== undefined) {
            this.rules.FingeringInsideStafflines = options.fingeringInsideStafflines;
        }
        if (options.newSystemFromXML !== undefined) {
            this.rules.NewSystemAtXMLNewSystemAttribute = options.newSystemFromXML;
        }
        if (options.newSystemFromNewPageInXML !== undefined) {
            this.rules.NewSystemAtXMLNewPageAttribute = options.newSystemFromNewPageInXML;
        }
        if (options.newPageFromXML !== undefined) {
            this.rules.NewPageAtXMLNewPageAttribute = options.newPageFromXML;
        }
        if (options.fillEmptyMeasuresWithWholeRest !== undefined) {
            this.rules.FillEmptyMeasuresWithWholeRest = options.fillEmptyMeasuresWithWholeRest;
        }
        if (options.followCursor !== undefined) {
            this.FollowCursor = options.followCursor;
        }
        if (options.setWantedStemDirectionByXml !== undefined) {
            this.rules.SetWantedStemDirectionByXml = options.setWantedStemDirectionByXml;
        }
        if (options.darkMode) {
            this.rules.applyDefaultColorMusic("#FFFFFF");
            this.rules.PageBackgroundColor = "#000000";
        }
        else if (options.darkMode === false) { // not if undefined!
            this.rules.applyDefaultColorMusic("#000000");
            this.rules.PageBackgroundColor = undefined;
        }
        if (options.defaultColorMusic) {
            this.rules.applyDefaultColorMusic(options.defaultColorMusic);
        }
        if (options.defaultColorNotehead) {
            this.rules.DefaultColorNotehead = options.defaultColorNotehead;
        }
        if (options.defaultColorRest) {
            this.rules.DefaultColorRest = options.defaultColorRest;
        }
        if (options.defaultColorStem) {
            this.rules.DefaultColorStem = options.defaultColorStem;
        }
        if (options.defaultColorLabel) {
            this.rules.DefaultColorLabel = options.defaultColorLabel;
        }
        if (options.defaultColorTitle) {
            this.rules.DefaultColorTitle = options.defaultColorTitle;
        }
        if (options.defaultFontFamily) {
            this.rules.DefaultFontFamily = options.defaultFontFamily; // default "Times New Roman", also used if font family not found
        }
        if (options.defaultFontStyle) {
            this.rules.DefaultFontStyle = options.defaultFontStyle; // e.g. FontStyles.Bold
        }
        if (options.drawUpToMeasureNumber) {
            this.rules.MaxMeasureToDrawIndex = options.drawUpToMeasureNumber - 1;
        }
        if (options.drawFromMeasureNumber) {
            this.rules.MinMeasureToDrawIndex = options.drawFromMeasureNumber - 1;
        }
        if (options.drawUpToPageNumber) {
            this.rules.MaxPageToDrawNumber = options.drawUpToPageNumber;
        }
        if (options.drawUpToSystemNumber) {
            this.rules.MaxSystemToDrawNumber = options.drawUpToSystemNumber;
        }
        if (options.tupletsRatioed) {
            this.rules.TupletsRatioed = true;
        }
        if (options.tupletsBracketed) {
            this.rules.TupletsBracketed = true;
        }
        if (options.tripletsBracketed) {
            this.rules.TripletsBracketed = true;
        }
        if (options.autoResize) {
            if (!this.resizeHandlerAttached) {
                this.autoResize();
            }
            this.autoResizeEnabled = true;
        }
        else if (options.autoResize === false) { // not undefined
            this.autoResizeEnabled = false;
            // we could remove the window EventListener here, but not necessary.
        }
        if (options.pageFormat !== undefined) { // only change this option if it was given, see above
            this.setPageFormat(options.pageFormat);
        }
        if (options.pageBackgroundColor !== undefined) {
            this.rules.PageBackgroundColor = options.pageBackgroundColor;
        }
        if (options.renderSingleHorizontalStaffline !== undefined) {
            this.rules.RenderSingleHorizontalStaffline = options.renderSingleHorizontalStaffline;
        }
        if (options.spacingFactorSoftmax !== undefined) {
            this.rules.SoftmaxFactorVexFlow = options.spacingFactorSoftmax;
        }
        if (options.spacingBetweenTextLines !== undefined) {
            this.rules.SpacingBetweenTextLines = options.spacingBetweenTextLines;
        }
        if (options.stretchLastSystemLine !== undefined) {
            this.rules.StretchLastSystemLine = options.stretchLastSystemLine;
        }
        if (options.autoGenerateMultipleRestMeasuresFromRestMeasures !== undefined) {
            this.rules.AutoGenerateMultipleRestMeasuresFromRestMeasures = options.autoGenerateMultipleRestMeasuresFromRestMeasures;
        }
        if (options.cursorsOptions !== undefined) {
            this.cursorsOptions = options.cursorsOptions;
        }
        else {
            this.cursorsOptions = [{ type: 0, color: this.EngravingRules.DefaultColorCursor, alpha: 0.5, follow: true }];
        }
        if (options.preferredSkyBottomLineBatchCalculatorBackend !== undefined) {
            this.rules.PreferredSkyBottomLineBatchCalculatorBackend = options.preferredSkyBottomLineBatchCalculatorBackend;
        }
        if (options.skyBottomLineBatchMinMeasures !== undefined) {
            this.rules.SkyBottomLineBatchMinMeasures = options.skyBottomLineBatchMinMeasures;
        }
    }
    setColoringMode(options) {
        if (options.coloringMode === DrawingParameters_1.ColoringModes.XML) {
            this.rules.ColoringMode = DrawingParameters_1.ColoringModes.XML;
            return;
        }
        const noteIndices = [Pitch_1.NoteEnum.C, Pitch_1.NoteEnum.D, Pitch_1.NoteEnum.E, Pitch_1.NoteEnum.F, Pitch_1.NoteEnum.G, Pitch_1.NoteEnum.A, Pitch_1.NoteEnum.B];
        let colorSetString;
        if (options.coloringMode === DrawingParameters_1.ColoringModes.CustomColorSet) {
            if (!options.coloringSetCustom || options.coloringSetCustom.length !== 8) {
                throw new Error("Invalid amount of colors: With coloringModes.customColorSet, " +
                    "you have to provide a coloringSetCustom parameter (array) with 8 strings (C to B, rest note).");
            }
            // validate strings input
            for (const colorString of options.coloringSetCustom) {
                const regExp = /^\#[0-9a-fA-F]{6}$/;
                if (!regExp.test(colorString)) {
                    throw new Error("One of the color strings in options.coloringSetCustom was not a valid HTML Hex color:\n" + colorString);
                }
            }
            colorSetString = options.coloringSetCustom;
        }
        else if (options.coloringMode === DrawingParameters_1.ColoringModes.AutoColoring) {
            colorSetString = [];
            const keys = Object.keys(DrawingEnums_1.AutoColorSet);
            for (let i = 0; i < keys.length; i++) {
                colorSetString.push(DrawingEnums_1.AutoColorSet[keys[i]]);
            }
        } // for both cases:
        const coloringSetCurrent = new typescript_collections_1.Dictionary();
        for (let i = 0; i < noteIndices.length; i++) {
            coloringSetCurrent.setValue(noteIndices[i], colorSetString[i]);
        }
        coloringSetCurrent.setValue(-1, colorSetString.last()); // index 7. Unfortunately -1 is not a NoteEnum value, so we can't put it into noteIndices
        this.rules.ColoringSetCurrent = coloringSetCurrent;
        this.rules.ColoringMode = options.coloringMode;
    }
    /**
     * Sets the logging level for this OSMD instance. By default, this is set to `warn`.
     *
     * @param: content can be `trace`, `debug`, `info`, `warn` or `error`.
     */
    setLogLevel(level) {
        switch (level) {
            case "trace":
                loglevel_1.default.setLevel(loglevel_1.default.levels.TRACE);
                break;
            case "debug":
                loglevel_1.default.setLevel(loglevel_1.default.levels.DEBUG);
                break;
            case "info":
                loglevel_1.default.setLevel(loglevel_1.default.levels.INFO);
                break;
            case "warn":
                loglevel_1.default.setLevel(loglevel_1.default.levels.WARN);
                break;
            case "error":
                loglevel_1.default.setLevel(loglevel_1.default.levels.ERROR);
                break;
            case "silent":
                loglevel_1.default.setLevel(loglevel_1.default.levels.SILENT);
                break;
            default:
                loglevel_1.default.warn(`Could not set log level to ${level}. Using warn instead.`);
                loglevel_1.default.setLevel(loglevel_1.default.levels.WARN);
                break;
        }
    }
    getLogLevel() {
        return loglevel_1.default.getLevel();
    }
    /**
     * Initialize this object to default values
     * FIXME: Probably unnecessary
     */
    reset() {
        if (this.drawingParameters.drawCursors) {
            this.cursors.forEach(cursor => {
                cursor.hide();
            });
        }
        this.sheet = undefined;
        this.graphic = undefined;
        this.zoom = 1.0;
    }
    /**
     * Attach the appropriate handler to the window.onResize event
     */
    autoResize() {
        const self = this;
        this.handleResize(() => {
            // empty
        }, () => {
            // The following code is probably not needed
            // (the width should adapt itself to the max allowed)
            //let width: number = Math.max(
            //    document.documentElement.clientWidth,
            //    document.body.scrollWidth,
            //    document.documentElement.scrollWidth,
            //    document.body.offsetWidth,
            //    document.documentElement.offsetWidth
            //);
            //self.container.style.width = width + "px";
            var _a;
            // recalculate beams, are otherwise not updated and can detach from stems, see #724
            if (((_a = this.graphic) === null || _a === void 0 ? void 0 : _a.GetCalculator) instanceof VexFlowMusicSheetCalculator_1.VexFlowMusicSheetCalculator) { // null and type check
                this.graphic.GetCalculator.beamsNeedUpdate = true;
            }
            if (self.IsReadyToRender()) {
                self.render();
            }
        });
    }
    /**
     * Helper function for managing window's onResize events
     * @param startCallback is the function called when resizing starts
     * @param endCallback is the function called when resizing (kind-of) ends
     */
    handleResize(startCallback, endCallback) {
        let rtime;
        let timeout = undefined;
        const delta = 200;
        const self = this;
        function resizeStart() {
            if (!self.AutoResizeEnabled) {
                return;
            }
            rtime = (new Date()).getTime();
            if (!timeout) {
                startCallback();
                rtime = (new Date()).getTime();
                timeout = window.setTimeout(resizeEnd, delta);
            }
        }
        function resizeEnd() {
            timeout = undefined;
            window.clearTimeout(timeout);
            if ((new Date()).getTime() - rtime < delta) {
                timeout = window.setTimeout(resizeEnd, delta);
            }
            else {
                endCallback();
            }
        }
        if (window.attachEvent) {
            // Support IE<9
            window.attachEvent("onresize", resizeStart);
        }
        else {
            window.addEventListener("resize", resizeStart);
        }
        this.resizeHandlerAttached = true;
        window.setTimeout(startCallback, 0);
        window.setTimeout(endCallback, 1);
    }
    /** Enable or disable (hide) the cursor.
     * @param enable whether to enable (true) or disable (false) the cursor
     */
    enableOrDisableCursors(enable) {
        var _a, _b, _c, _d;
        this.drawingParameters.drawCursors = enable;
        if (enable) {
            for (let i = 0; i < this.cursorsOptions.length; i++) {
                // save previous cursor state
                const hidden = (_a = this.cursors[i]) === null || _a === void 0 ? void 0 : _a.Hidden;
                const previousIterator = (_b = this.cursors[i]) === null || _b === void 0 ? void 0 : _b.Iterator;
                (_c = this.cursors[i]) === null || _c === void 0 ? void 0 : _c.hide();
                // check which page/backend to draw the cursor on (the pages may have changed since last cursor)
                let backendToDrawOn = (_d = this.drawer) === null || _d === void 0 ? void 0 : _d.Backends[0];
                if (backendToDrawOn && this.rules.RestoreCursorAfterRerender && this.cursors[i]) {
                    const newPageNumber = this.cursors[i].updateCurrentPage();
                    backendToDrawOn = this.drawer.Backends[newPageNumber - 1];
                }
                // create new cursor
                if (backendToDrawOn && backendToDrawOn.getRenderElement()) {
                    this.cursors[i] = new Cursor_1.Cursor(backendToDrawOn.getRenderElement(), this, this.cursorsOptions[i]);
                }
                if (this.sheet && this.graphic && this.cursors[i]) { // else init is called in load()
                    this.cursors[i].init(this.sheet.MusicPartManager, this.graphic);
                }
                // restore old cursor state
                if (this.rules.RestoreCursorAfterRerender) {
                    this.cursors[i].hidden = hidden;
                    if (previousIterator) {
                        this.cursors[i].iterator = previousIterator;
                        this.cursors[i].update();
                    }
                }
            }
        }
        else { // disable cursor
            this.cursors.forEach(cursor => {
                cursor.hide();
            });
            // this.cursor = undefined;
            // TODO cursor should be disabled, not just hidden. otherwise user can just call osmd.cursor.hide().
            // however, this could cause null calls (cursor.next() etc), maybe that needs some solution.
        }
    }
    createBackend(type, page) {
        let backend;
        if (type === undefined || type === OSMDOptions_1.BackendType.SVG) {
            backend = new SvgVexFlowBackend_1.SvgVexFlowBackend(this.rules);
        }
        else {
            backend = new CanvasVexFlowBackend_1.CanvasVexFlowBackend(this.rules);
        }
        backend.graphicalMusicPage = page; // the page the backend renders on. needed to identify DOM element to extract image/SVG
        backend.initialize(this.container, this.zoom);
        //backend.getContext().setFillStyle(this.rules.DefaultColorMusic);
        //backend.getContext().setStrokeStyle(this.rules.DefaultColorMusic);
        // color needs to be set after resize() for CanvasBackend
        return backend;
    }
    static StringToPageFormat(pageFormatString) {
        let pageFormat = EngravingRules_1.PageFormat.UndefinedPageFormat; // default: 'endless' page height, take canvas/container width
        // check for widthxheight parameter, e.g. "800x600"
        if (pageFormatString.match("^[0-9]+x[0-9]+$")) {
            const widthAndHeight = pageFormatString.split("x");
            const width = Number.parseInt(widthAndHeight[0], 10);
            const height = Number.parseInt(widthAndHeight[1], 10);
            if (width > 0 && width < 32768 && height > 0 && height < 32768) {
                pageFormat = new EngravingRules_1.PageFormat(width, height, `customPageFormat${pageFormatString}`);
            }
        }
        // check for formatId from OpenSheetMusicDisplay.PageFormatStandards
        pageFormatString = pageFormatString.replace(" ", "_");
        pageFormatString = pageFormatString.replace("Landscape", "L");
        pageFormatString = pageFormatString.replace("Portrait", "P");
        //console.log("change format to: " + formatId);
        if (OpenSheetMusicDisplay.PageFormatStandards.hasOwnProperty(pageFormatString)) {
            pageFormat = OpenSheetMusicDisplay.PageFormatStandards[pageFormatString];
            return pageFormat;
        }
        return pageFormat;
    }
    /** Sets page format by string. Used by setOptions({pageFormat: "A4_P"}) for example. */
    setPageFormat(formatId) {
        const newPageFormat = OpenSheetMusicDisplay.StringToPageFormat(formatId);
        this.needBackendUpdate = !(newPageFormat.Equals(this.rules.PageFormat));
        this.rules.PageFormat = newPageFormat;
    }
    setCustomPageFormat(width, height) {
        if (width > 0 && height > 0) {
            const f = new EngravingRules_1.PageFormat(width, height);
            this.rules.PageFormat = f;
        }
    }
    //#region GETTER / SETTER
    set DrawSkyLine(value) {
        this.drawSkyLine = value;
        if (this.drawer) {
            this.drawer.skyLineVisible = value;
            // this.render(); // note: we probably shouldn't automatically render when someone sets the setter
            //   this can cause a lot of rendering time.
        }
    }
    get DrawSkyLine() {
        return this.drawer.skyLineVisible;
    }
    set DrawBottomLine(value) {
        this.drawBottomLine = value;
        if (this.drawer) {
            this.drawer.bottomLineVisible = value;
            // this.render(); // note: we probably shouldn't automatically render when someone sets the setter
            //   this can cause a lot of rendering time.
        }
    }
    get DrawBottomLine() {
        return this.drawer.bottomLineVisible;
    }
    set DrawBoundingBox(value) {
        this.setDrawBoundingBox(value, true);
    }
    get DrawBoundingBox() {
        return this.drawBoundingBox;
    }
    setDrawBoundingBox(value, render = false) {
        this.drawBoundingBox = value;
        if (this.drawer) {
            this.drawer.drawableBoundingBoxElement = value; // drawer is sometimes created anew, losing this value, so it's saved in OSMD now.
        }
        if (render) {
            this.render(); // may create new Drawer.
        }
    }
    get AutoResizeEnabled() {
        return this.autoResizeEnabled;
    }
    set AutoResizeEnabled(value) {
        this.autoResizeEnabled = value;
    }
    get Zoom() {
        return this.zoom;
    }
    set Zoom(value) {
        var _a;
        this.zoom = value;
        this.zoomUpdated = true;
        if (((_a = this.graphic) === null || _a === void 0 ? void 0 : _a.GetCalculator) instanceof VexFlowMusicSheetCalculator_1.VexFlowMusicSheetCalculator) { // null and type check
            this.graphic.GetCalculator.beamsNeedUpdate = this.zoomUpdated;
        }
    }
    set FollowCursor(value) {
        this.followCursor = value;
    }
    get FollowCursor() {
        return this.followCursor;
    }
    set TransposeCalculator(calculator) {
        MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator = calculator;
    }
    get TransposeCalculator() {
        return MusicSheetCalculator_1.MusicSheetCalculator.transposeCalculator;
    }
    get Sheet() {
        return this.sheet;
    }
    get Drawer() {
        return this.drawer;
    }
    get GraphicSheet() {
        return this.graphic;
    }
    get DrawingParameters() {
        return this.drawingParameters;
    }
    get EngravingRules() {
        return this.rules;
    }
    /** Returns the version of OSMD this object is built from (the version you are using). */
    get Version() {
        return this.version;
    }
}
exports.OpenSheetMusicDisplay = OpenSheetMusicDisplay;
/** Standard page format options like A4 or Letter, in portrait and landscape. E.g. PageFormatStandards["A4_P"] or PageFormatStandards["Letter_L"]. */
OpenSheetMusicDisplay.PageFormatStandards = {
    "A3_L": new EngravingRules_1.PageFormat(420, 297, "A3_L"),
    "A3_P": new EngravingRules_1.PageFormat(297, 420, "A3_P"),
    "A4_L": new EngravingRules_1.PageFormat(297, 210, "A4_L"),
    "A4_P": new EngravingRules_1.PageFormat(210, 297, "A4_P"),
    "A5_L": new EngravingRules_1.PageFormat(210, 148, "A5_L"),
    "A5_P": new EngravingRules_1.PageFormat(148, 210, "A5_P"),
    "A6_L": new EngravingRules_1.PageFormat(148, 105, "A6_L"),
    "A6_P": new EngravingRules_1.PageFormat(105, 148, "A6_P"),
    "Endless": EngravingRules_1.PageFormat.UndefinedPageFormat,
    "Letter_L": new EngravingRules_1.PageFormat(279.4, 215.9, "Letter_L"),
    "Letter_P": new EngravingRules_1.PageFormat(215.9, 279.4, "Letter_P")
};


/***/ }),

/***/ "./src/OpenSheetMusicDisplay/index.ts":
/*!********************************************!*\
  !*** ./src/OpenSheetMusicDisplay/index.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// created from 'create-ts-index'
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(/*! ./AJAX */ "./src/OpenSheetMusicDisplay/AJAX.ts"), exports);
__exportStar(__webpack_require__(/*! ./Cursor */ "./src/OpenSheetMusicDisplay/Cursor.ts"), exports);
__exportStar(__webpack_require__(/*! ./OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts"), exports);
__exportStar(__webpack_require__(/*! ./OpenSheetMusicDisplay */ "./src/OpenSheetMusicDisplay/OpenSheetMusicDisplay.ts"), exports);


/***/ }),

/***/ "./src/Plugins/Transpose/TransposeCalculator.ts":
/*!******************************************************!*\
  !*** ./src/Plugins/Transpose/TransposeCalculator.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TransposeCalculator = void 0;
const DataObjects_1 = __webpack_require__(/*! ../../Common/DataObjects */ "./src/Common/DataObjects/index.ts");
/** Calculates transposition of individual notes and keys,
 * which is used by multiple OSMD classes to transpose the whole sheet.
 * Note: This class may not look like much, but a lot of thought has gone into the algorithms,
 * and the exact usage within OSMD classes. */
class TransposeCalculator {
    transposePitch(pitch, currentKeyInstruction, halftones) {
        let transposedFundamentalNote = DataObjects_1.NoteEnum.C;
        let transposedOctave = 0;
        let transposedAccidental = DataObjects_1.AccidentalEnum.NONE;
        const result = DataObjects_1.Pitch.CalculateTransposedHalfTone(pitch, halftones);
        let transposedHalfTone = result.halftone;
        let octaveChange = result.overflow;
        for (let i = 0; i < TransposeCalculator.noteEnums.length; i++) {
            const currentValue = TransposeCalculator.noteEnums[i];
            if (currentValue === transposedHalfTone) {
                const noteIndex = i;
                transposedFundamentalNote = TransposeCalculator.noteEnums[noteIndex];
                transposedOctave = (pitch.Octave + octaveChange);
                transposedAccidental = DataObjects_1.AccidentalEnum.NONE;
                return new DataObjects_1.Pitch(transposedFundamentalNote, transposedOctave, transposedAccidental);
            }
            else if (currentValue > transposedHalfTone) {
                break;
            }
        }
        for (let i = 0; i < TransposeCalculator.noteEnums.length; i++) {
            const currentValue = TransposeCalculator.noteEnums[i];
            if (currentValue > transposedHalfTone) {
                let noteIndex = i;
                const accidentalHalfTones = DataObjects_1.Pitch.HalfTonesFromAccidental(pitch.Accidental);
                if (accidentalHalfTones > 0 || (accidentalHalfTones === 0 && currentKeyInstruction.Key >= 0)) {
                    noteIndex--;
                }
                while (noteIndex < 0) {
                    noteIndex += 7;
                    transposedHalfTone += 12;
                    octaveChange--;
                }
                while (noteIndex >= 7) {
                    noteIndex -= 7;
                    transposedHalfTone -= 12;
                    octaveChange++;
                }
                transposedFundamentalNote = TransposeCalculator.noteEnums[noteIndex];
                transposedAccidental = DataObjects_1.Pitch.AccidentalFromHalfTones(transposedHalfTone - transposedFundamentalNote);
                transposedOctave = (pitch.Octave + octaveChange);
                break;
            }
        }
        const transposedPitch = new DataObjects_1.Pitch(transposedFundamentalNote, transposedOctave, transposedAccidental);
        return transposedPitch;
    }
    transposeKey(keyInstruction, transpose) {
        let currentIndex = 0;
        let previousKeyType = 0;
        for (; currentIndex < TransposeCalculator.keyMapping.length; currentIndex++) {
            previousKeyType = TransposeCalculator.keyMapping[currentIndex];
            if (previousKeyType === keyInstruction.keyTypeOriginal) {
                break;
            }
        }
        let newIndex = (currentIndex + transpose);
        while (newIndex >= 12) {
            newIndex -= 12;
        }
        while (newIndex < 0) {
            newIndex += 12;
        }
        keyInstruction.Key = TransposeCalculator.keyMapping[newIndex];
        keyInstruction.isTransposedBy = transpose;
    }
}
exports.TransposeCalculator = TransposeCalculator;
TransposeCalculator.keyMapping = [0, -5, 2, -3, 4, -1, 6, 1, -4, 3, -2, 5];
TransposeCalculator.noteEnums = [DataObjects_1.NoteEnum.C, DataObjects_1.NoteEnum.D, DataObjects_1.NoteEnum.E, DataObjects_1.NoteEnum.F, DataObjects_1.NoteEnum.G, DataObjects_1.NoteEnum.A, DataObjects_1.NoteEnum.B];


/***/ }),

/***/ "./src/Util/CollectionUtil.ts":
/*!************************************!*\
  !*** ./src/Util/CollectionUtil.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CollectionUtil = void 0;
if (!Array.prototype.last) {
    // using Object.defineProperty instead of assigning Array.prototype.x directly prevents prototype pollution, see #980
    Object.defineProperty(Array.prototype, "last", {
        enumerable: false,
        writable: true,
        value: function () {
            return this[this.length - 1];
        }
    });
}
if (!Array.prototype.clear) {
    Object.defineProperty(Array.prototype, "clear", {
        enumerable: false,
        writable: true,
        value: function () {
            this.length = 0;
        }
    });
}
if (!Array.prototype.contains) {
    Object.defineProperty(Array.prototype, "contains", {
        enumerable: false,
        writable: true,
        value: function (elem) {
            return this.indexOf(elem) !== -1;
        }
    });
}
/**
 * This class implements static methods to perform useful operations on lists, dictionaries, ...
 */
class CollectionUtil {
    static contains2(array, object) {
        for (let i = 0; i < array.length; i++) {
            if (array[i] === object) {
                return true;
            }
        }
        return false;
    }
    static last(array) {
        return array[array.length - 1];
    }
    /** Array.flat(), introduced in ES2019, polyfilled here to stick with ES2017 target in tsconfig.json.
     *  Performance tests: https://github.com/opensheetmusicdisplay/opensheetmusicdisplay/issues/1299#issuecomment-1399062038
     */
    static flat(array) {
        return [].concat(...array);
    }
    /**
     * Iterates through a dictionary and calls iterationFunction.
     * If iterationFunction returns true the key gets stored.
     * all stored key will finally be removed from the dictionary.
     * @param dict
     * @param iterationFunction
     */
    static removeDictElementIfTrue(thisPointer, dict, iterationFunction) {
        const toDeleteEntries = [];
        dict.forEach(function (key, value) {
            const shallDelete = iterationFunction(thisPointer, key, value);
            if (shallDelete) {
                toDeleteEntries.push(key);
            }
        });
        for (let i = 0; i < toDeleteEntries.length; i++) {
            dict.remove(toDeleteEntries[i]);
        }
    }
    static getLastElement(array) {
        return array[array.length - 1];
    }
    static binarySearch(array, element, cmp, startIndex = 0, endIndex = array.length - 1) {
        let mid = 1;
        let lastMidChecked = -1;
        while (startIndex <= endIndex) {
            mid = Math.floor((startIndex + endIndex) / 2);
            if (mid === lastMidChecked) {
                break;
                // this fixes a rare infinite loop when no matching element can be found,
                //   e.g. with very small fraction difference in AbsoluteTimestamp like 511/1024 instead of 1/2 (#1201)
            }
            const c = cmp(array[mid], element);
            if (c === 0) {
                return mid;
            }
            if (c < 0) {
                startIndex = mid + 1;
            }
            if (0 < c) {
                endIndex = mid;
            }
            lastMidChecked = mid;
        }
        return -mid;
    }
}
exports.CollectionUtil = CollectionUtil;


/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/BSTree.js":
/*!****************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/BSTree.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var BSTreeKV_1 = __webpack_require__(/*! ./BSTreeKV */ "./node_modules/typescript-collections/dist/lib/BSTreeKV.js");
/**
 * Special-case of the binary search tree in which the search key is equal to the element type.
 * This definition is suitable when the element type can not be split between what defines its order
 * and what does not (eg. primitive types as opposed to indexed records).
 *
 * The table below shows some use-case examples for both interfaces:
 *
 *           element type              |  most suitable interface
 * ------------------------------------|----------------------------
 *    number                           |  BSTree<number>
 *    string                           |  BSTree<string>
 * { order: number, data: string }     |  BSTreeKV<{order: number}, {order: number, data: string}>
 *
 * @see BSTreeKV
 */
var BSTree = /** @class */ (function (_super) {
    __extends(BSTree, _super);
    function BSTree() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BSTree;
}(BSTreeKV_1.default));
exports["default"] = BSTree;
//# sourceMappingURL=BSTree.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/BSTreeKV.js":
/*!******************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/BSTreeKV.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var Queue_1 = __webpack_require__(/*! ./Queue */ "./node_modules/typescript-collections/dist/lib/Queue.js");
/**
 * General binary search tree implementation.
 *
 * This interface allows one to search elements using a subset of their attributes (thus the
 * tree can be used as an index for complex objects).
 * The attributes required to define an ordering in the tree must be defined in the type K.
 * Any additional attribute must be defined in the type V.
 *
 * @see BSTree
 */
var BSTreeKV = /** @class */ (function () {
    /**
     * Creates an empty binary search tree.
     * @class <p>A binary search tree is a binary tree in which each
     * internal node stores an element such that the elements stored in the
     * left subtree are less than it and the elements
     * stored in the right subtree are greater.</p>
     * <p>Formally, a binary search tree is a node-based binary tree data structure which
     * has the following properties:</p>
     * <ul>
     * <li>The left subtree of a node contains only nodes with elements less
     * than the node's element</li>
     * <li>The right subtree of a node contains only nodes with elements greater
     * than the node's element</li>
     * <li>Both the left and right subtrees must also be binary search trees.</li>
     * </ul>
     * <p>If the inserted elements are custom objects a compare function must
     * be provided at construction time, otherwise the <=, === and >= operators are
     * used to compare elements. Example:</p>
     * <pre>
     * function compare(a, b) {
     *  if (a is less than b by some ordering criterion) {
     *     return -1;
     *  } if (a is greater than b by the ordering criterion) {
     *     return 1;
     *  }
     *  // a must be equal to b
     *  return 0;
     * }
     * </pre>
     * @constructor
     * @param {function(Object,Object):number=} compareFunction optional
     * function used to compare two elements. Must return a negative integer,
     * zero, or a positive integer as the first argument is less than, equal to,
     * or greater than the second.
     */
    function BSTreeKV(compareFunction) {
        this.root = null;
        this.compare = compareFunction || util.defaultCompare;
        this.nElements = 0;
    }
    /**
     * Adds the specified element to this tree if it is not already present.
     * @param {Object} element the element to insert.
     * @return {boolean} true if this tree did not already contain the specified element.
     */
    BSTreeKV.prototype.add = function (element) {
        if (util.isUndefined(element)) {
            return false;
        }
        if (this.insertNode(this.createNode(element)) !== null) {
            this.nElements++;
            return true;
        }
        return false;
    };
    /**
     * Removes all of the elements from this tree.
     */
    BSTreeKV.prototype.clear = function () {
        this.root = null;
        this.nElements = 0;
    };
    /**
     * Returns true if this tree contains no elements.
     * @return {boolean} true if this tree contains no elements.
     */
    BSTreeKV.prototype.isEmpty = function () {
        return this.nElements === 0;
    };
    /**
     * Returns the number of elements in this tree.
     * @return {number} the number of elements in this tree.
     */
    BSTreeKV.prototype.size = function () {
        return this.nElements;
    };
    /**
     * Returns true if this tree contains the specified element.
     * @param {Object} element element to search for.
     * @return {boolean} true if this tree contains the specified element,
     * false otherwise.
     */
    BSTreeKV.prototype.contains = function (element) {
        if (util.isUndefined(element)) {
            return false;
        }
        return this.searchNode(this.root, element) !== null;
    };
    /**
     * Looks for the value with the provided search key.
     * @param {Object} element The key to look for
     * @return {Object} The value found or undefined if it was not found.
     */
    BSTreeKV.prototype.search = function (element) {
        var ret = this.searchNode(this.root, element);
        if (ret === null) {
            return undefined;
        }
        return ret.element;
    };
    /**
     * Removes the specified element from this tree if it is present.
     * @return {boolean} true if this tree contained the specified element.
     */
    BSTreeKV.prototype.remove = function (element) {
        var node = this.searchNode(this.root, element);
        if (node === null) {
            return false;
        }
        this.removeNode(node);
        this.nElements--;
        return true;
    };
    /**
     * Executes the provided function once for each element present in this tree in
     * in-order.
     * @param {function(Object):*} callback function to execute, it is invoked with one
     * argument: the element value, to break the iteration you can optionally return false.
     */
    BSTreeKV.prototype.inorderTraversal = function (callback) {
        this.inorderTraversalAux(this.root, callback, {
            stop: false
        });
    };
    /**
     * Executes the provided function once for each element present in this tree in pre-order.
     * @param {function(Object):*} callback function to execute, it is invoked with one
     * argument: the element value, to break the iteration you can optionally return false.
     */
    BSTreeKV.prototype.preorderTraversal = function (callback) {
        this.preorderTraversalAux(this.root, callback, {
            stop: false
        });
    };
    /**
     * Executes the provided function once for each element present in this tree in post-order.
     * @param {function(Object):*} callback function to execute, it is invoked with one
     * argument: the element value, to break the iteration you can optionally return false.
     */
    BSTreeKV.prototype.postorderTraversal = function (callback) {
        this.postorderTraversalAux(this.root, callback, {
            stop: false
        });
    };
    /**
     * Executes the provided function once for each element present in this tree in
     * level-order.
     * @param {function(Object):*} callback function to execute, it is invoked with one
     * argument: the element value, to break the iteration you can optionally return false.
     */
    BSTreeKV.prototype.levelTraversal = function (callback) {
        this.levelTraversalAux(this.root, callback);
    };
    /**
     * Returns the minimum element of this tree.
     * @return {*} the minimum element of this tree or undefined if this tree is
     * is empty.
     */
    BSTreeKV.prototype.minimum = function () {
        if (this.isEmpty() || this.root === null) {
            return undefined;
        }
        return this.minimumAux(this.root).element;
    };
    /**
     * Returns the maximum element of this tree.
     * @return {*} the maximum element of this tree or undefined if this tree is
     * is empty.
     */
    BSTreeKV.prototype.maximum = function () {
        if (this.isEmpty() || this.root === null) {
            return undefined;
        }
        return this.maximumAux(this.root).element;
    };
    /**
     * Executes the provided function once for each element present in this tree in inorder.
     * Equivalent to inorderTraversal.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element value, to break the iteration you can
     * optionally return false.
     */
    BSTreeKV.prototype.forEach = function (callback) {
        this.inorderTraversal(callback);
    };
    /**
     * Returns an array containing all of the elements in this tree in in-order.
     * @return {Array} an array containing all of the elements in this tree in in-order.
     */
    BSTreeKV.prototype.toArray = function () {
        var array = [];
        this.inorderTraversal(function (element) {
            array.push(element);
            return true;
        });
        return array;
    };
    /**
     * Returns the height of this tree.
     * @return {number} the height of this tree or -1 if is empty.
     */
    BSTreeKV.prototype.height = function () {
        return this.heightAux(this.root);
    };
    /**
     * @private
     */
    BSTreeKV.prototype.searchNode = function (node, element) {
        var cmp = 1;
        while (node !== null && cmp !== 0) {
            cmp = this.compare(element, node.element);
            if (cmp < 0) {
                node = node.leftCh;
            }
            else if (cmp > 0) {
                node = node.rightCh;
            }
        }
        return node;
    };
    /**
     * @private
     */
    BSTreeKV.prototype.transplant = function (n1, n2) {
        if (n1.parent === null) {
            this.root = n2;
        }
        else if (n1 === n1.parent.leftCh) {
            n1.parent.leftCh = n2;
        }
        else {
            n1.parent.rightCh = n2;
        }
        if (n2 !== null) {
            n2.parent = n1.parent;
        }
    };
    /**
     * @private
     */
    BSTreeKV.prototype.removeNode = function (node) {
        if (node.leftCh === null) {
            this.transplant(node, node.rightCh);
        }
        else if (node.rightCh === null) {
            this.transplant(node, node.leftCh);
        }
        else {
            var y = this.minimumAux(node.rightCh);
            if (y.parent !== node) {
                this.transplant(y, y.rightCh);
                y.rightCh = node.rightCh;
                y.rightCh.parent = y;
            }
            this.transplant(node, y);
            y.leftCh = node.leftCh;
            y.leftCh.parent = y;
        }
    };
    /**
     * @private
     */
    BSTreeKV.prototype.inorderTraversalAux = function (node, callback, signal) {
        if (node === null || signal.stop) {
            return;
        }
        this.inorderTraversalAux(node.leftCh, callback, signal);
        if (signal.stop) {
            return;
        }
        signal.stop = callback(node.element) === false;
        if (signal.stop) {
            return;
        }
        this.inorderTraversalAux(node.rightCh, callback, signal);
    };
    /**
     * @private
     */
    BSTreeKV.prototype.levelTraversalAux = function (node, callback) {
        var queue = new Queue_1.default();
        if (node !== null) {
            queue.enqueue(node);
        }
        node = queue.dequeue() || null;
        while (node != null) {
            if (callback(node.element) === false) {
                return;
            }
            if (node.leftCh !== null) {
                queue.enqueue(node.leftCh);
            }
            if (node.rightCh !== null) {
                queue.enqueue(node.rightCh);
            }
            node = queue.dequeue() || null;
        }
    };
    /**
     * @private
     */
    BSTreeKV.prototype.preorderTraversalAux = function (node, callback, signal) {
        if (node === null || signal.stop) {
            return;
        }
        signal.stop = callback(node.element) === false;
        if (signal.stop) {
            return;
        }
        this.preorderTraversalAux(node.leftCh, callback, signal);
        if (signal.stop) {
            return;
        }
        this.preorderTraversalAux(node.rightCh, callback, signal);
    };
    /**
     * @private
     */
    BSTreeKV.prototype.postorderTraversalAux = function (node, callback, signal) {
        if (node === null || signal.stop) {
            return;
        }
        this.postorderTraversalAux(node.leftCh, callback, signal);
        if (signal.stop) {
            return;
        }
        this.postorderTraversalAux(node.rightCh, callback, signal);
        if (signal.stop) {
            return;
        }
        signal.stop = callback(node.element) === false;
    };
    BSTreeKV.prototype.minimumAux = function (node) {
        while (node != null && node.leftCh !== null) {
            node = node.leftCh;
        }
        return node;
    };
    BSTreeKV.prototype.maximumAux = function (node) {
        while (node != null && node.rightCh !== null) {
            node = node.rightCh;
        }
        return node;
    };
    /**
     * @private
     */
    BSTreeKV.prototype.heightAux = function (node) {
        if (node === null) {
            return -1;
        }
        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;
    };
    /*
    * @private
    */
    BSTreeKV.prototype.insertNode = function (node) {
        var parent = null;
        var position = this.root;
        while (position !== null) {
            var cmp = this.compare(node.element, position.element);
            if (cmp === 0) {
                return null;
            }
            else if (cmp < 0) {
                parent = position;
                position = position.leftCh;
            }
            else {
                parent = position;
                position = position.rightCh;
            }
        }
        node.parent = parent;
        if (parent === null) {
            // tree is empty
            this.root = node;
        }
        else if (this.compare(node.element, parent.element) < 0) {
            parent.leftCh = node;
        }
        else {
            parent.rightCh = node;
        }
        return node;
    };
    /**
     * @private
     */
    BSTreeKV.prototype.createNode = function (element) {
        return {
            element: element,
            leftCh: null,
            rightCh: null,
            parent: null
        };
    };
    return BSTreeKV;
}());
exports["default"] = BSTreeKV;
//# sourceMappingURL=BSTreeKV.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/Bag.js":
/*!*************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/Bag.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var Dictionary_1 = __webpack_require__(/*! ./Dictionary */ "./node_modules/typescript-collections/dist/lib/Dictionary.js");
var Set_1 = __webpack_require__(/*! ./Set */ "./node_modules/typescript-collections/dist/lib/Set.js");
var Bag = /** @class */ (function () {
    /**
     * Creates an empty bag.
     * @class <p>A bag is a special kind of set in which members are
     * allowed to appear more than once.</p>
     * <p>If the inserted elements are custom objects a function
     * which converts elements to unique strings must be provided. Example:</p>
     *
     * <pre>
     * function petToString(pet) {
     *  return pet.name;
     * }
     * </pre>
     *
     * @constructor
     * @param {function(Object):string=} toStrFunction optional function used
     * to convert elements to strings. If the elements aren't strings or if toString()
     * is not appropriate, a custom function which receives an object and returns a
     * unique string must be provided.
     */
    function Bag(toStrFunction) {
        this.toStrF = toStrFunction || util.defaultToString;
        this.dictionary = new Dictionary_1.default(this.toStrF);
        this.nElements = 0;
    }
    /**
     * Adds nCopies of the specified object to this bag.
     * @param {Object} element element to add.
     * @param {number=} nCopies the number of copies to add, if this argument is
     * undefined 1 copy is added.
     * @return {boolean} true unless element is undefined.
     */
    Bag.prototype.add = function (element, nCopies) {
        if (nCopies === void 0) { nCopies = 1; }
        if (util.isUndefined(element) || nCopies <= 0) {
            return false;
        }
        if (!this.contains(element)) {
            var node = {
                value: element,
                copies: nCopies
            };
            this.dictionary.setValue(element, node);
        }
        else {
            this.dictionary.getValue(element).copies += nCopies;
        }
        this.nElements += nCopies;
        return true;
    };
    /**
     * Counts the number of copies of the specified object in this bag.
     * @param {Object} element the object to search for..
     * @return {number} the number of copies of the object, 0 if not found
     */
    Bag.prototype.count = function (element) {
        if (!this.contains(element)) {
            return 0;
        }
        else {
            return this.dictionary.getValue(element).copies;
        }
    };
    /**
     * Returns true if this bag contains the specified element.
     * @param {Object} element element to search for.
     * @return {boolean} true if this bag contains the specified element,
     * false otherwise.
     */
    Bag.prototype.contains = function (element) {
        return this.dictionary.containsKey(element);
    };
    /**
     * Removes nCopies of the specified object to this bag.
     * If the number of copies to remove is greater than the actual number
     * of copies in the Bag, all copies are removed.
     * @param {Object} element element to remove.
     * @param {number=} nCopies the number of copies to remove, if this argument is
     * undefined 1 copy is removed.
     * @return {boolean} true if at least 1 element was removed.
     */
    Bag.prototype.remove = function (element, nCopies) {
        if (nCopies === void 0) { nCopies = 1; }
        if (util.isUndefined(element) || nCopies <= 0) {
            return false;
        }
        if (!this.contains(element)) {
            return false;
        }
        else {
            var node = this.dictionary.getValue(element);
            if (nCopies > node.copies) {
                this.nElements -= node.copies;
            }
            else {
                this.nElements -= nCopies;
            }
            node.copies -= nCopies;
            if (node.copies <= 0) {
                this.dictionary.remove(element);
            }
            return true;
        }
    };
    /**
     * Returns an array containing all of the elements in this big in arbitrary order,
     * including multiple copies.
     * @return {Array} an array containing all of the elements in this bag.
     */
    Bag.prototype.toArray = function () {
        var a = [];
        var values = this.dictionary.values();
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var node = values_1[_i];
            var element = node.value;
            var copies = node.copies;
            for (var j = 0; j < copies; j++) {
                a.push(element);
            }
        }
        return a;
    };
    /**
     * Returns a set of unique elements in this bag.
     * @return {collections.Set<T>} a set of unique elements in this bag.
     */
    Bag.prototype.toSet = function () {
        var toret = new Set_1.default(this.toStrF);
        var elements = this.dictionary.values();
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var ele = elements_1[_i];
            var value = ele.value;
            toret.add(value);
        }
        return toret;
    };
    /**
     * Executes the provided function once for each element
     * present in this bag, including multiple copies.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element. To break the iteration you can
     * optionally return false.
     */
    Bag.prototype.forEach = function (callback) {
        this.dictionary.forEach(function (k, v) {
            var value = v.value;
            var copies = v.copies;
            for (var i = 0; i < copies; i++) {
                if (callback(value) === false) {
                    return false;
                }
            }
            return true;
        });
    };
    /**
     * Returns the number of elements in this bag.
     * @return {number} the number of elements in this bag.
     */
    Bag.prototype.size = function () {
        return this.nElements;
    };
    /**
     * Returns true if this bag contains no elements.
     * @return {boolean} true if this bag contains no elements.
     */
    Bag.prototype.isEmpty = function () {
        return this.nElements === 0;
    };
    /**
     * Removes all of the elements from this bag.
     */
    Bag.prototype.clear = function () {
        this.nElements = 0;
        this.dictionary.clear();
    };
    return Bag;
}()); // End of bag
exports["default"] = Bag;
//# sourceMappingURL=Bag.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/Dictionary.js":
/*!********************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/Dictionary.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var Dictionary = /** @class */ (function () {
    /**
     * Creates an empty dictionary.
     * @class <p>Dictionaries map keys to values; each key can map to at most one value.
     * This implementation accepts any kind of objects as keys.</p>
     *
     * <p>If the keys are custom objects a function which converts keys to unique
     * strings must be provided. Example:</p>
     * <pre>
     * function petToString(pet) {
     *  return pet.name;
     * }
     * </pre>
     * @constructor
     * @param {function(Object):string=} toStrFunction optional function used
     * to convert keys to strings. If the keys aren't strings or if toString()
     * is not appropriate, a custom function which receives a key and returns a
     * unique string must be provided.
     */
    function Dictionary(toStrFunction) {
        this.table = {};
        this.nElements = 0;
        this.toStr = toStrFunction || util.defaultToString;
    }
    /**
     * Returns the value to which this dictionary maps the specified key.
     * Returns undefined if this dictionary contains no mapping for this key.
     * @param {Object} key key whose associated value is to be returned.
     * @return {*} the value to which this dictionary maps the specified key or
     * undefined if the map contains no mapping for this key.
     */
    Dictionary.prototype.getValue = function (key) {
        var pair = this.table['$' + this.toStr(key)];
        if (util.isUndefined(pair)) {
            return undefined;
        }
        return pair.value;
    };
    /**
     * Associates the specified value with the specified key in this dictionary.
     * If the dictionary previously contained a mapping for this key, the old
     * value is replaced by the specified value.
     * @param {Object} key key with which the specified value is to be
     * associated.
     * @param {Object} value value to be associated with the specified key.
     * @return {*} previous value associated with the specified key, or undefined if
     * there was no mapping for the key or if the key/value are undefined.
     */
    Dictionary.prototype.setValue = function (key, value) {
        if (util.isUndefined(key) || util.isUndefined(value)) {
            return undefined;
        }
        var ret;
        var k = '$' + this.toStr(key);
        var previousElement = this.table[k];
        if (util.isUndefined(previousElement)) {
            this.nElements++;
            ret = undefined;
        }
        else {
            ret = previousElement.value;
        }
        this.table[k] = {
            key: key,
            value: value
        };
        return ret;
    };
    /**
     * Removes the mapping for this key from this dictionary if it is present.
     * @param {Object} key key whose mapping is to be removed from the
     * dictionary.
     * @return {*} previous value associated with specified key, or undefined if
     * there was no mapping for key.
     */
    Dictionary.prototype.remove = function (key) {
        var k = '$' + this.toStr(key);
        var previousElement = this.table[k];
        if (!util.isUndefined(previousElement)) {
            delete this.table[k];
            this.nElements--;
            return previousElement.value;
        }
        return undefined;
    };
    /**
     * Returns an array containing all of the keys in this dictionary.
     * @return {Array} an array containing all of the keys in this dictionary.
     */
    Dictionary.prototype.keys = function () {
        var array = [];
        for (var name_1 in this.table) {
            if (util.has(this.table, name_1)) {
                var pair = this.table[name_1];
                array.push(pair.key);
            }
        }
        return array;
    };
    /**
     * Returns an array containing all of the values in this dictionary.
     * @return {Array} an array containing all of the values in this dictionary.
     */
    Dictionary.prototype.values = function () {
        var array = [];
        for (var name_2 in this.table) {
            if (util.has(this.table, name_2)) {
                var pair = this.table[name_2];
                array.push(pair.value);
            }
        }
        return array;
    };
    /**
     * Executes the provided function once for each key-value pair
     * present in this dictionary.
     * @param {function(Object,Object):*} callback function to execute, it is
     * invoked with two arguments: key and value. To break the iteration you can
     * optionally return false.
     */
    Dictionary.prototype.forEach = function (callback) {
        for (var name_3 in this.table) {
            if (util.has(this.table, name_3)) {
                var pair = this.table[name_3];
                var ret = callback(pair.key, pair.value);
                if (ret === false) {
                    return;
                }
            }
        }
    };
    /**
     * Returns true if this dictionary contains a mapping for the specified key.
     * @param {Object} key key whose presence in this dictionary is to be
     * tested.
     * @return {boolean} true if this dictionary contains a mapping for the
     * specified key.
     */
    Dictionary.prototype.containsKey = function (key) {
        return !util.isUndefined(this.getValue(key));
    };
    /**
     * Removes all mappings from this dictionary.
     * @this {collections.Dictionary}
     */
    Dictionary.prototype.clear = function () {
        this.table = {};
        this.nElements = 0;
    };
    /**
     * Returns the number of keys in this dictionary.
     * @return {number} the number of key-value mappings in this dictionary.
     */
    Dictionary.prototype.size = function () {
        return this.nElements;
    };
    /**
     * Returns true if this dictionary contains no mappings.
     * @return {boolean} true if this dictionary contains no mappings.
     */
    Dictionary.prototype.isEmpty = function () {
        return this.nElements <= 0;
    };
    Dictionary.prototype.toString = function () {
        var toret = '{';
        this.forEach(function (k, v) {
            toret += "\n\t" + k + " : " + v;
        });
        return toret + '\n}';
    };
    return Dictionary;
}()); // End of dictionary
exports["default"] = Dictionary;
//# sourceMappingURL=Dictionary.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/FactoryDictionary.js":
/*!***************************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/FactoryDictionary.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Dictionary_1 = __webpack_require__(/*! ./Dictionary */ "./node_modules/typescript-collections/dist/lib/Dictionary.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var FactoryDictionary = /** @class */ (function (_super) {
    __extends(FactoryDictionary, _super);
    /**
     * Creates an empty dictionary.
     * @class <p>Dictionaries map keys to values; each key can map to at most one value.
     * This implementation accepts any kind of objects as keys.</p>
     *
     * <p>The default factory function should return a new object of the provided
     * type. Example:</p>
     * <pre>
     * function petFactory() {
     *  return new Pet();
     * }
     * </pre>
     *
     * <p>If the keys are custom objects a function which converts keys to unique
     * strings must be provided. Example:</p>
     * <pre>
     * function petToString(pet) {
     *  return pet.name;
     * }
     * </pre>
     * @constructor
     * @param {function():V=} defaultFactoryFunction function used to create a
     * default object.
     * @param {function(Object):string=} toStrFunction optional function used
     * to convert keys to strings. If the keys aren't strings or if toString()
     * is not appropriate, a custom function which receives a key and returns a
     * unique string must be provided.
     */
    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {
        var _this = _super.call(this, toStrFunction) || this;
        _this.defaultFactoryFunction = defaultFactoryFunction;
        return _this;
    }
    /**
     * Associates the specified default value with the specified key in this dictionary,
     * if it didn't contain the key yet. If the key existed, the existing value will be used.
     * @param {Object} key key with which the specified value is to be
     * associated.
     * @param {Object} defaultValue default value to be associated with the specified key.
     * @return {*} previous value associated with the specified key, or the default value,
     * if the key didn't exist yet.
     */
    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {
        var currentValue = _super.prototype.getValue.call(this, key);
        if (util.isUndefined(currentValue)) {
            this.setValue(key, defaultValue);
            return defaultValue;
        }
        return currentValue;
    };
    /**
     * Returns the value to which this dictionary maps the specified key.
     * Returns a default value created by the factory passed in the constructor,
     * if this dictionary contains no mapping for this key. The missing key will
     * automatically be added to the dictionary.
     * @param {Object} key key whose associated value is to be returned.
     * @return {*} the value to which this dictionary maps the specified key or
     * a default value if the map contains no mapping for this key.
     */
    FactoryDictionary.prototype.getValue = function (key) {
        return this.setDefault(key, this.defaultFactoryFunction());
    };
    return FactoryDictionary;
}(Dictionary_1.default));
exports["default"] = FactoryDictionary;
//# sourceMappingURL=FactoryDictionary.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/Heap.js":
/*!**************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/Heap.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var collections = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var arrays = __webpack_require__(/*! ./arrays */ "./node_modules/typescript-collections/dist/lib/arrays.js");
var Heap = /** @class */ (function () {
    /**
     * Creates an empty Heap.
     * @class
     * <p>A heap is a binary tree, where the nodes maintain the heap property:
     * each node is smaller than each of its children and therefore a MinHeap
     * This implementation uses an array to store elements.</p>
     * <p>If the inserted elements are custom objects a compare function must be provided,
     *  at construction time, otherwise the <=, === and >= operators are
     * used to compare elements. Example:</p>
     *
     * <pre>
     * function compare(a, b) {
     *  if (a is less than b by some ordering criterion) {
     *     return -1;
     *  } if (a is greater than b by the ordering criterion) {
     *     return 1;
     *  }
     *  // a must be equal to b
     *  return 0;
     * }
     * </pre>
     *
     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a
     * reverse compare function to accomplish that behavior. Example:</p>
     *
     * <pre>
     * function reverseCompare(a, b) {
     *  if (a is less than b by some ordering criterion) {
     *     return 1;
     *  } if (a is greater than b by the ordering criterion) {
     *     return -1;
     *  }
     *  // a must be equal to b
     *  return 0;
     * }
     * </pre>
     *
     * @constructor
     * @param {function(Object,Object):number=} compareFunction optional
     * function used to compare two elements. Must return a negative integer,
     * zero, or a positive integer as the first argument is less than, equal to,
     * or greater than the second.
     */
    function Heap(compareFunction) {
        /**
         * Array used to store the elements of the heap.
         * @type {Array.<Object>}
         * @private
         */
        this.data = [];
        this.compare = compareFunction || collections.defaultCompare;
    }
    /**
     * Returns the index of the left child of the node at the given index.
     * @param {number} nodeIndex The index of the node to get the left child
     * for.
     * @return {number} The index of the left child.
     * @private
     */
    Heap.prototype.leftChildIndex = function (nodeIndex) {
        return (2 * nodeIndex) + 1;
    };
    /**
     * Returns the index of the right child of the node at the given index.
     * @param {number} nodeIndex The index of the node to get the right child
     * for.
     * @return {number} The index of the right child.
     * @private
     */
    Heap.prototype.rightChildIndex = function (nodeIndex) {
        return (2 * nodeIndex) + 2;
    };
    /**
     * Returns the index of the parent of the node at the given index.
     * @param {number} nodeIndex The index of the node to get the parent for.
     * @return {number} The index of the parent.
     * @private
     */
    Heap.prototype.parentIndex = function (nodeIndex) {
        return Math.floor((nodeIndex - 1) / 2);
    };
    /**
     * Returns the index of the smaller child node (if it exists).
     * @param {number} leftChild left child index.
     * @param {number} rightChild right child index.
     * @return {number} the index with the minimum value or -1 if it doesn't
     * exists.
     * @private
     */
    Heap.prototype.minIndex = function (leftChild, rightChild) {
        if (rightChild >= this.data.length) {
            if (leftChild >= this.data.length) {
                return -1;
            }
            else {
                return leftChild;
            }
        }
        else {
            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {
                return leftChild;
            }
            else {
                return rightChild;
            }
        }
    };
    /**
     * Moves the node at the given index up to its proper place in the heap.
     * @param {number} index The index of the node to move up.
     * @private
     */
    Heap.prototype.siftUp = function (index) {
        var parent = this.parentIndex(index);
        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {
            arrays.swap(this.data, parent, index);
            index = parent;
            parent = this.parentIndex(index);
        }
    };
    /**
     * Moves the node at the given index down to its proper place in the heap.
     * @param {number} nodeIndex The index of the node to move down.
     * @private
     */
    Heap.prototype.siftDown = function (nodeIndex) {
        //smaller child index
        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));
        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {
            arrays.swap(this.data, min, nodeIndex);
            nodeIndex = min;
            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));
        }
    };
    /**
     * Retrieves but does not remove the root element of this heap.
     * @return {*} The value at the root of the heap. Returns undefined if the
     * heap is empty.
     */
    Heap.prototype.peek = function () {
        if (this.data.length > 0) {
            return this.data[0];
        }
        else {
            return undefined;
        }
    };
    /**
     * Adds the given element into the heap.
     * @param {*} element the element.
     * @return true if the element was added or fals if it is undefined.
     */
    Heap.prototype.add = function (element) {
        if (collections.isUndefined(element)) {
            return false;
        }
        this.data.push(element);
        this.siftUp(this.data.length - 1);
        return true;
    };
    /**
     * Retrieves and removes the root element of this heap.
     * @return {*} The value removed from the root of the heap. Returns
     * undefined if the heap is empty.
     */
    Heap.prototype.removeRoot = function () {
        if (this.data.length > 0) {
            var obj = this.data[0];
            this.data[0] = this.data[this.data.length - 1];
            this.data.splice(this.data.length - 1, 1);
            if (this.data.length > 0) {
                this.siftDown(0);
            }
            return obj;
        }
        return undefined;
    };
    /**
     * Returns true if this heap contains the specified element.
     * @param {Object} element element to search for.
     * @return {boolean} true if this Heap contains the specified element, false
     * otherwise.
     */
    Heap.prototype.contains = function (element) {
        var equF = collections.compareToEquals(this.compare);
        return arrays.contains(this.data, element, equF);
    };
    /**
     * Returns the number of elements in this heap.
     * @return {number} the number of elements in this heap.
     */
    Heap.prototype.size = function () {
        return this.data.length;
    };
    /**
     * Checks if this heap is empty.
     * @return {boolean} true if and only if this heap contains no items; false
     * otherwise.
     */
    Heap.prototype.isEmpty = function () {
        return this.data.length <= 0;
    };
    /**
     * Removes all of the elements from this heap.
     */
    Heap.prototype.clear = function () {
        this.data.length = 0;
    };
    /**
     * Executes the provided function once for each element present in this heap in
     * no particular order.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element value, to break the iteration you can
     * optionally return false.
     */
    Heap.prototype.forEach = function (callback) {
        arrays.forEach(this.data, callback);
    };
    return Heap;
}());
exports["default"] = Heap;
//# sourceMappingURL=Heap.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/LinkedDictionary.js":
/*!**************************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/LinkedDictionary.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Dictionary_1 = __webpack_require__(/*! ./Dictionary */ "./node_modules/typescript-collections/dist/lib/Dictionary.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
/**
 * This class is used by the LinkedDictionary Internally
 * Has to be a class, not an interface, because it needs to have
 * the 'unlink' function defined.
 */
var LinkedDictionaryPair = /** @class */ (function () {
    function LinkedDictionaryPair(key, value) {
        this.key = key;
        this.value = value;
    }
    LinkedDictionaryPair.prototype.unlink = function () {
        this.prev.next = this.next;
        this.next.prev = this.prev;
    };
    return LinkedDictionaryPair;
}());
/**
 * The head and tail elements of the list have null key and value properties but they
 * usually link to normal nodes.
 */
var HeadOrTailLinkedDictionaryPair = /** @class */ (function () {
    function HeadOrTailLinkedDictionaryPair() {
        this.key = null;
        this.value = null;
    }
    HeadOrTailLinkedDictionaryPair.prototype.unlink = function () {
        this.prev.next = this.next;
        this.next.prev = this.prev;
    };
    return HeadOrTailLinkedDictionaryPair;
}());
function isHeadOrTailLinkedDictionaryPair(p) {
    return !p.next;
}
var LinkedDictionary = /** @class */ (function (_super) {
    __extends(LinkedDictionary, _super);
    function LinkedDictionary(toStrFunction) {
        var _this = _super.call(this, toStrFunction) || this;
        _this.head = new HeadOrTailLinkedDictionaryPair();
        _this.tail = new HeadOrTailLinkedDictionaryPair();
        _this.head.next = _this.tail;
        _this.tail.prev = _this.head;
        return _this;
    }
    /**
     * Inserts the new node to the 'tail' of the list, updating the
     * neighbors, and moving 'this.tail' (the End of List indicator) that
     * to the end.
     */
    LinkedDictionary.prototype.appendToTail = function (entry) {
        var lastNode = this.tail.prev;
        lastNode.next = entry;
        entry.prev = lastNode;
        entry.next = this.tail;
        this.tail.prev = entry;
    };
    /**
     * Retrieves a linked dictionary from the table internally
     */
    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {
        if (util.isUndefined(key)) {
            return undefined;
        }
        var k = '$' + this.toStr(key);
        var pair = (this.table[k]);
        return pair;
    };
    /**
     * Returns the value to which this dictionary maps the specified key.
     * Returns undefined if this dictionary contains no mapping for this key.
     * @param {Object} key key whose associated value is to be returned.
     * @return {*} the value to which this dictionary maps the specified key or
     * undefined if the map contains no mapping for this key.
     */
    LinkedDictionary.prototype.getValue = function (key) {
        var pair = this.getLinkedDictionaryPair(key);
        if (!util.isUndefined(pair)) {
            return pair.value;
        }
        return undefined;
    };
    /**
     * Removes the mapping for this key from this dictionary if it is present.
     * Also, if a value is present for this key, the entry is removed from the
     * insertion ordering.
     * @param {Object} key key whose mapping is to be removed from the
     * dictionary.
     * @return {*} previous value associated with specified key, or undefined if
     * there was no mapping for key.
     */
    LinkedDictionary.prototype.remove = function (key) {
        var pair = this.getLinkedDictionaryPair(key);
        if (!util.isUndefined(pair)) {
            _super.prototype.remove.call(this, key); // This will remove it from the table
            pair.unlink(); // This will unlink it from the chain
            return pair.value;
        }
        return undefined;
    };
    /**
     * Removes all mappings from this LinkedDictionary.
     * @this {collections.LinkedDictionary}
     */
    LinkedDictionary.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this.head.next = this.tail;
        this.tail.prev = this.head;
    };
    /**
     * Internal function used when updating an existing KeyValue pair.
     * It places the new value indexed by key into the table, but maintains
     * its place in the linked ordering.
     */
    LinkedDictionary.prototype.replace = function (oldPair, newPair) {
        var k = '$' + this.toStr(newPair.key);
        // set the new Pair's links to existingPair's links
        newPair.next = oldPair.next;
        newPair.prev = oldPair.prev;
        // Delete Existing Pair from the table, unlink it from chain.
        // As a result, the nElements gets decremented by this operation
        this.remove(oldPair.key);
        // Link new Pair in place of where oldPair was,
        // by pointing the old pair's neighbors to it.
        newPair.prev.next = newPair;
        newPair.next.prev = newPair;
        this.table[k] = newPair;
        // To make up for the fact that the number of elements was decremented,
        // We need to increase it by one.
        ++this.nElements;
    };
    /**
     * Associates the specified value with the specified key in this dictionary.
     * If the dictionary previously contained a mapping for this key, the old
     * value is replaced by the specified value.
     * Updating of a key that already exists maintains its place in the
     * insertion order into the map.
     * @param {Object} key key with which the specified value is to be
     * associated.
     * @param {Object} value value to be associated with the specified key.
     * @return {*} previous value associated with the specified key, or undefined if
     * there was no mapping for the key or if the key/value are undefined.
     */
    LinkedDictionary.prototype.setValue = function (key, value) {
        if (util.isUndefined(key) || util.isUndefined(value)) {
            return undefined;
        }
        var existingPair = this.getLinkedDictionaryPair(key);
        var newPair = new LinkedDictionaryPair(key, value);
        var k = '$' + this.toStr(key);
        // If there is already an element for that key, we
        // keep it's place in the LinkedList
        if (!util.isUndefined(existingPair)) {
            this.replace(existingPair, newPair);
            return existingPair.value;
        }
        else {
            this.appendToTail(newPair);
            this.table[k] = newPair;
            ++this.nElements;
            return undefined;
        }
    };
    /**
     * Returns an array containing all of the keys in this LinkedDictionary, ordered
     * by insertion order.
     * @return {Array} an array containing all of the keys in this LinkedDictionary,
     * ordered by insertion order.
     */
    LinkedDictionary.prototype.keys = function () {
        var array = [];
        this.forEach(function (key, value) {
            array.push(key);
        });
        return array;
    };
    /**
     * Returns an array containing all of the values in this LinkedDictionary, ordered by
     * insertion order.
     * @return {Array} an array containing all of the values in this LinkedDictionary,
     * ordered by insertion order.
     */
    LinkedDictionary.prototype.values = function () {
        var array = [];
        this.forEach(function (key, value) {
            array.push(value);
        });
        return array;
    };
    /**
     * Executes the provided function once for each key-value pair
     * present in this LinkedDictionary. It is done in the order of insertion
     * into the LinkedDictionary
     * @param {function(Object,Object):*} callback function to execute, it is
     * invoked with two arguments: key and value. To break the iteration you can
     * optionally return false.
     */
    LinkedDictionary.prototype.forEach = function (callback) {
        var crawlNode = this.head.next;
        while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {
            var ret = callback(crawlNode.key, crawlNode.value);
            if (ret === false) {
                return;
            }
            crawlNode = crawlNode.next;
        }
    };
    return LinkedDictionary;
}(Dictionary_1.default)); // End of LinkedDictionary
exports["default"] = LinkedDictionary;
// /**
//  * Returns true if this dictionary is equal to the given dictionary.
//  * Two dictionaries are equal if they contain the same mappings.
//  * @param {collections.Dictionary} other the other dictionary.
//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional
//  * function used to check if two values are equal.
//  * @return {boolean} true if this dictionary is equal to the given dictionary.
//  */
// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {
// 	const eqF = valuesEqualFunction || collections.defaultEquals;
// 	if(!(other instanceof collections.Dictionary)){
// 		return false;
// 	}
// 	if(this.size() !== other.size()){
// 		return false;
// 	}
// 	return this.equalsAux(this.firstNode,other.firstNode,eqF);
// }
//# sourceMappingURL=LinkedDictionary.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/LinkedList.js":
/*!********************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/LinkedList.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var arrays = __webpack_require__(/*! ./arrays */ "./node_modules/typescript-collections/dist/lib/arrays.js");
var LinkedList = /** @class */ (function () {
    /**
     * Creates an empty Linked List.
     * @class A linked list is a data structure consisting of a group of nodes
     * which together represent a sequence.
     * @constructor
     */
    function LinkedList() {
        /**
         * First node in the list
         * @type {Object}
         * @private
         */
        this.firstNode = null;
        /**
         * Last node in the list
         * @type {Object}
         * @private
         */
        this.lastNode = null;
        /**
         * Number of elements in the list
         * @type {number}
         * @private
         */
        this.nElements = 0;
    }
    /**
     * Adds an element to this list.
     * @param {Object} item element to be added.
     * @param {number=} index optional index to add the element. If no index is specified
     * the element is added to the end of this list.
     * @return {boolean} true if the element was added or false if the index is invalid
     * or if the element is undefined.
     */
    LinkedList.prototype.add = function (item, index) {
        if (util.isUndefined(index)) {
            index = this.nElements;
        }
        if (index < 0 || index > this.nElements || util.isUndefined(item)) {
            return false;
        }
        var newNode = this.createNode(item);
        if (this.nElements === 0 || this.lastNode === null) {
            // First node in the list.
            this.firstNode = newNode;
            this.lastNode = newNode;
        }
        else if (index === this.nElements) {
            // Insert at the end.
            this.lastNode.next = newNode;
            this.lastNode = newNode;
        }
        else if (index === 0) {
            // Change first node.
            newNode.next = this.firstNode;
            this.firstNode = newNode;
        }
        else {
            var prev = this.nodeAtIndex(index - 1);
            if (prev === null) {
                return false;
            }
            newNode.next = prev.next;
            prev.next = newNode;
        }
        this.nElements++;
        return true;
    };
    /**
     * Returns the first element in this list.
     * @return {*} the first element of the list or undefined if the list is
     * empty.
     */
    LinkedList.prototype.first = function () {
        if (this.firstNode !== null) {
            return this.firstNode.element;
        }
        return undefined;
    };
    /**
     * Returns the last element in this list.
     * @return {*} the last element in the list or undefined if the list is
     * empty.
     */
    LinkedList.prototype.last = function () {
        if (this.lastNode !== null) {
            return this.lastNode.element;
        }
        return undefined;
    };
    /**
     * Returns the element at the specified position in this list.
     * @param {number} index desired index.
     * @return {*} the element at the given index or undefined if the index is
     * out of bounds.
     */
    LinkedList.prototype.elementAtIndex = function (index) {
        var node = this.nodeAtIndex(index);
        if (node === null) {
            return undefined;
        }
        return node.element;
    };
    /**
     * Returns the index in this list of the first occurrence of the
     * specified element, or -1 if the List does not contain this element.
     * <p>If the elements inside this list are
     * not comparable with the === operator a custom equals function should be
     * provided to perform searches, the function must receive two arguments and
     * return true if they are equal, false otherwise. Example:</p>
     *
     * <pre>
     * const petsAreEqualByName = function(pet1, pet2) {
     *  return pet1.name === pet2.name;
     * }
     * </pre>
     * @param {Object} item element to search for.
     * @param {function(Object,Object):boolean=} equalsFunction Optional
     * function used to check if two elements are equal.
     * @return {number} the index in this list of the first occurrence
     * of the specified element, or -1 if this list does not contain the
     * element.
     */
    LinkedList.prototype.indexOf = function (item, equalsFunction) {
        var equalsF = equalsFunction || util.defaultEquals;
        if (util.isUndefined(item)) {
            return -1;
        }
        var currentNode = this.firstNode;
        var index = 0;
        while (currentNode !== null) {
            if (equalsF(currentNode.element, item)) {
                return index;
            }
            index++;
            currentNode = currentNode.next;
        }
        return -1;
    };
    /**
     * Returns true if this list contains the specified element.
     * <p>If the elements inside the list are
     * not comparable with the === operator a custom equals function should be
     * provided to perform searches, the function must receive two arguments and
     * return true if they are equal, false otherwise. Example:</p>
     *
     * <pre>
     * const petsAreEqualByName = function(pet1, pet2) {
     *  return pet1.name === pet2.name;
     * }
     * </pre>
     * @param {Object} item element to search for.
     * @param {function(Object,Object):boolean=} equalsFunction Optional
     * function used to check if two elements are equal.
     * @return {boolean} true if this list contains the specified element, false
     * otherwise.
     */
    LinkedList.prototype.contains = function (item, equalsFunction) {
        return (this.indexOf(item, equalsFunction) >= 0);
    };
    /**
     * Removes the first occurrence of the specified element in this list.
     * <p>If the elements inside the list are
     * not comparable with the === operator a custom equals function should be
     * provided to perform searches, the function must receive two arguments and
     * return true if they are equal, false otherwise. Example:</p>
     *
     * <pre>
     * const petsAreEqualByName = function(pet1, pet2) {
     *  return pet1.name === pet2.name;
     * }
     * </pre>
     * @param {Object} item element to be removed from this list, if present.
     * @return {boolean} true if the list contained the specified element.
     */
    LinkedList.prototype.remove = function (item, equalsFunction) {
        var equalsF = equalsFunction || util.defaultEquals;
        if (this.nElements < 1 || util.isUndefined(item)) {
            return false;
        }
        var previous = null;
        var currentNode = this.firstNode;
        while (currentNode !== null) {
            if (equalsF(currentNode.element, item)) {
                if (previous === null) {
                    this.firstNode = currentNode.next;
                    if (currentNode === this.lastNode) {
                        this.lastNode = null;
                    }
                }
                else if (currentNode === this.lastNode) {
                    this.lastNode = previous;
                    previous.next = currentNode.next;
                    currentNode.next = null;
                }
                else {
                    previous.next = currentNode.next;
                    currentNode.next = null;
                }
                this.nElements--;
                return true;
            }
            previous = currentNode;
            currentNode = currentNode.next;
        }
        return false;
    };
    /**
     * Removes all of the elements from this list.
     */
    LinkedList.prototype.clear = function () {
        this.firstNode = null;
        this.lastNode = null;
        this.nElements = 0;
    };
    /**
     * Returns true if this list is equal to the given list.
     * Two lists are equal if they have the same elements in the same order.
     * @param {LinkedList} other the other list.
     * @param {function(Object,Object):boolean=} equalsFunction optional
     * function used to check if two elements are equal. If the elements in the lists
     * are custom objects you should provide a function, otherwise
     * the === operator is used to check equality between elements.
     * @return {boolean} true if this list is equal to the given list.
     */
    LinkedList.prototype.equals = function (other, equalsFunction) {
        var eqF = equalsFunction || util.defaultEquals;
        if (!(other instanceof LinkedList)) {
            return false;
        }
        if (this.size() !== other.size()) {
            return false;
        }
        return this.equalsAux(this.firstNode, other.firstNode, eqF);
    };
    /**
     * @private
     */
    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {
        while (n1 !== null && n2 !== null) {
            if (!eqF(n1.element, n2.element)) {
                return false;
            }
            n1 = n1.next;
            n2 = n2.next;
        }
        return true;
    };
    /**
     * Removes the element at the specified position in this list.
     * @param {number} index given index.
     * @return {*} removed element or undefined if the index is out of bounds.
     */
    LinkedList.prototype.removeElementAtIndex = function (index) {
        if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {
            return undefined;
        }
        var element;
        if (this.nElements === 1) {
            //First node in the list.
            element = this.firstNode.element;
            this.firstNode = null;
            this.lastNode = null;
        }
        else {
            var previous = this.nodeAtIndex(index - 1);
            if (previous === null) {
                element = this.firstNode.element;
                this.firstNode = this.firstNode.next;
            }
            else if (previous.next === this.lastNode) {
                element = this.lastNode.element;
                this.lastNode = previous;
            }
            if (previous !== null && previous.next !== null) {
                element = previous.next.element;
                previous.next = previous.next.next;
            }
        }
        this.nElements--;
        return element;
    };
    /**
     * Executes the provided function once for each element present in this list in order.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element value, to break the iteration you can
     * optionally return false.
     */
    LinkedList.prototype.forEach = function (callback) {
        var currentNode = this.firstNode;
        while (currentNode !== null) {
            if (callback(currentNode.element) === false) {
                break;
            }
            currentNode = currentNode.next;
        }
    };
    /**
     * Reverses the order of the elements in this linked list (makes the last
     * element first, and the first element last).
     */
    LinkedList.prototype.reverse = function () {
        var previous = null;
        var current = this.firstNode;
        var temp = null;
        while (current !== null) {
            temp = current.next;
            current.next = previous;
            previous = current;
            current = temp;
        }
        temp = this.firstNode;
        this.firstNode = this.lastNode;
        this.lastNode = temp;
    };
    /**
     * Returns an array containing all of the elements in this list in proper
     * sequence.
     * @return {Array.<*>} an array containing all of the elements in this list,
     * in proper sequence.
     */
    LinkedList.prototype.toArray = function () {
        var array = [];
        var currentNode = this.firstNode;
        while (currentNode !== null) {
            array.push(currentNode.element);
            currentNode = currentNode.next;
        }
        return array;
    };
    /**
     * Returns the number of elements in this list.
     * @return {number} the number of elements in this list.
     */
    LinkedList.prototype.size = function () {
        return this.nElements;
    };
    /**
     * Returns true if this list contains no elements.
     * @return {boolean} true if this list contains no elements.
     */
    LinkedList.prototype.isEmpty = function () {
        return this.nElements <= 0;
    };
    LinkedList.prototype.toString = function () {
        return arrays.toString(this.toArray());
    };
    /**
     * @private
     */
    LinkedList.prototype.nodeAtIndex = function (index) {
        if (index < 0 || index >= this.nElements) {
            return null;
        }
        if (index === (this.nElements - 1)) {
            return this.lastNode;
        }
        var node = this.firstNode;
        for (var i = 0; i < index && node !== null; i++) {
            node = node.next;
        }
        return node;
    };
    /**
     * @private
     */
    LinkedList.prototype.createNode = function (item) {
        return {
            element: item,
            next: null
        };
    };
    return LinkedList;
}()); // End of linked list
exports["default"] = LinkedList;
//# sourceMappingURL=LinkedList.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/MultiDictionary.js":
/*!*************************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/MultiDictionary.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var Dictionary_1 = __webpack_require__(/*! ./Dictionary */ "./node_modules/typescript-collections/dist/lib/Dictionary.js");
var arrays = __webpack_require__(/*! ./arrays */ "./node_modules/typescript-collections/dist/lib/arrays.js");
var MultiDictionary = /** @class */ (function () {
    /**
     * Creates an empty multi dictionary.
     * @class <p>A multi dictionary is a special kind of dictionary that holds
     * multiple values against each key. Setting a value into the dictionary will
     * add the value to an array at that key. Getting a key will return an array,
     * holding all the values set to that key.
     * You can configure to allow duplicates in the values.
     * This implementation accepts any kind of objects as keys.</p>
     *
     * <p>If the keys are custom objects a function which converts keys to strings must be
     * provided. Example:</p>
     *
     * <pre>
     * function petToString(pet) {
     *     return pet.name;
     * }
     * </pre>
     * <p>If the values are custom objects a function to check equality between values
     * must be provided. Example:</p>
     *
     * <pre>
     * function petsAreEqualByAge(pet1,pet2) {
     *     return pet1.age === pet2.age;
     * }
     * </pre>
     * @constructor
     * @param {function(Object):string=} toStrFunction optional function
     * to convert keys to strings. If the keys aren't strings or if toString()
     * is not appropriate, a custom function which receives a key and returns a
     * unique string must be provided.
     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional
     * function to check if two values are equal.
     *
     * @param allowDuplicateValues
     */
    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {
        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }
        this.dict = new Dictionary_1.default(toStrFunction);
        this.equalsF = valuesEqualsFunction || util.defaultEquals;
        this.allowDuplicate = allowDuplicateValues;
    }
    /**
     * Returns an array holding the values to which this dictionary maps
     * the specified key.
     * Returns an empty array if this dictionary contains no mappings for this key.
     * @param {Object} key key whose associated values are to be returned.
     * @return {Array} an array holding the values to which this dictionary maps
     * the specified key.
     */
    MultiDictionary.prototype.getValue = function (key) {
        var values = this.dict.getValue(key);
        if (util.isUndefined(values)) {
            return [];
        }
        return arrays.copy(values);
    };
    /**
     * Adds the value to the array associated with the specified key, if
     * it is not already present.
     * @param {Object} key key with which the specified value is to be
     * associated.
     * @param {Object} value the value to add to the array at the key
     * @return {boolean} true if the value was not already associated with that key.
     */
    MultiDictionary.prototype.setValue = function (key, value) {
        if (util.isUndefined(key) || util.isUndefined(value)) {
            return false;
        }
        var array = this.dict.getValue(key);
        if (util.isUndefined(array)) {
            this.dict.setValue(key, [value]);
            return true;
        }
        if (!this.allowDuplicate) {
            if (arrays.contains(array, value, this.equalsF)) {
                return false;
            }
        }
        array.push(value);
        return true;
    };
    /**
     * Removes the specified values from the array of values associated with the
     * specified key. If a value isn't given, all values associated with the specified
     * key are removed.
     * @param {Object} key key whose mapping is to be removed from the
     * dictionary.
     * @param {Object=} value optional argument to specify the value to remove
     * from the array associated with the specified key.
     * @return {*} true if the dictionary changed, false if the key doesn't exist or
     * if the specified value isn't associated with the specified key.
     */
    MultiDictionary.prototype.remove = function (key, value) {
        if (util.isUndefined(value)) {
            var v = this.dict.remove(key);
            return !util.isUndefined(v);
        }
        var array = this.dict.getValue(key);
        if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {
            if (array.length === 0) {
                this.dict.remove(key);
            }
            return true;
        }
        return false;
    };
    /**
     * Returns an array containing all of the keys in this dictionary.
     * @return {Array} an array containing all of the keys in this dictionary.
     */
    MultiDictionary.prototype.keys = function () {
        return this.dict.keys();
    };
    /**
     * Returns an array containing all of the values in this dictionary.
     * @return {Array} an array containing all of the values in this dictionary.
     */
    MultiDictionary.prototype.values = function () {
        var values = this.dict.values();
        var array = [];
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var v = values_1[_i];
            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {
                var w = v_1[_a];
                array.push(w);
            }
        }
        return array;
    };
    /**
     * Returns true if this dictionary at least one value associatted the specified key.
     * @param {Object} key key whose presence in this dictionary is to be
     * tested.
     * @return {boolean} true if this dictionary at least one value associatted
     * the specified key.
     */
    MultiDictionary.prototype.containsKey = function (key) {
        return this.dict.containsKey(key);
    };
    /**
     * Removes all mappings from this dictionary.
     */
    MultiDictionary.prototype.clear = function () {
        this.dict.clear();
    };
    /**
     * Returns the number of keys in this dictionary.
     * @return {number} the number of key-value mappings in this dictionary.
     */
    MultiDictionary.prototype.size = function () {
        return this.dict.size();
    };
    /**
     * Returns true if this dictionary contains no mappings.
     * @return {boolean} true if this dictionary contains no mappings.
     */
    MultiDictionary.prototype.isEmpty = function () {
        return this.dict.isEmpty();
    };
    return MultiDictionary;
}()); // end of multi dictionary
exports["default"] = MultiDictionary;
//# sourceMappingURL=MultiDictionary.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/MultiRootTree.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/MultiRootTree.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Direction;
(function (Direction) {
    Direction[Direction["BEFORE"] = 0] = "BEFORE";
    Direction[Direction["AFTER"] = 1] = "AFTER";
    Direction[Direction["INSIDE_AT_END"] = 2] = "INSIDE_AT_END";
    Direction[Direction["INSIDE_AT_START"] = 3] = "INSIDE_AT_START";
})(Direction || (Direction = {}));
var MultiRootTree = /** @class */ (function () {
    function MultiRootTree(rootIds, nodes) {
        if (rootIds === void 0) { rootIds = []; }
        if (nodes === void 0) { nodes = {}; }
        this.rootIds = rootIds;
        this.nodes = nodes;
        this.initRootIds();
        this.initNodes();
    }
    MultiRootTree.prototype.initRootIds = function () {
        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {
            var rootId = _a[_i];
            this.createEmptyNodeIfNotExist(rootId);
        }
    };
    MultiRootTree.prototype.initNodes = function () {
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {
                    var nodeListItem = _a[_i];
                    this.createEmptyNodeIfNotExist(nodeListItem);
                }
            }
        }
    };
    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {
        if (!this.nodes[nodeKey]) {
            this.nodes[nodeKey] = [];
        }
    };
    MultiRootTree.prototype.getRootIds = function () {
        var clone = this.rootIds.slice();
        return clone;
    };
    MultiRootTree.prototype.getNodes = function () {
        var clone = {};
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                clone[nodeKey] = this.nodes[nodeKey].slice();
            }
        }
        return clone;
    };
    MultiRootTree.prototype.getObject = function () {
        return {
            rootIds: this.getRootIds(),
            nodes: this.getNodes(),
        };
    };
    MultiRootTree.prototype.toObject = function () {
        return this.getObject();
    };
    MultiRootTree.prototype.flatten = function () {
        var _this = this;
        var extraPropsObject = [];
        for (var i = 0; i < this.rootIds.length; i++) {
            var rootId = this.rootIds[i];
            extraPropsObject.push({
                id: rootId,
                level: 0,
                hasParent: false,
                childrenCount: 0,
            });
            traverse(rootId, this.nodes, extraPropsObject, 0);
        }
        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {
            var o = extraPropsObject_1[_i];
            o.childrenCount = countChildren(o.id);
        }
        return extraPropsObject;
        function countChildren(id) {
            if (!_this.nodes[id]) {
                return 0;
            }
            else {
                var childrenCount = _this.nodes[id].length;
                return childrenCount;
            }
        }
        function traverse(startId, nodes, returnArray, level) {
            if (level === void 0) { level = 0; }
            if (!startId || !nodes || !returnArray || !nodes[startId]) {
                return;
            }
            level++;
            var idsList = nodes[startId];
            for (var i = 0; i < idsList.length; i++) {
                var id = idsList[i];
                returnArray.push({ id: id, level: level, hasParent: true });
                traverse(id, nodes, returnArray, level);
            }
            level--;
        }
    };
    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {
        return this.moveId(moveId, beforeId, Direction.BEFORE);
    };
    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {
        return this.moveId(moveId, afterId, Direction.AFTER);
    };
    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {
        if (atStart === void 0) { atStart = true; }
        if (atStart) {
            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);
        }
        else {
            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);
        }
    };
    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {
        var leftIndex = this.findRootId(rootId);
        var rightIndex = this.findRootId(withRootId);
        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);
    };
    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {
        var temp = this.rootIds[withRootPosition];
        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];
        this.rootIds[swapRootPosition] = temp;
    };
    MultiRootTree.prototype.deleteId = function (id) {
        this.rootDeleteId(id);
        this.nodeAndSubNodesDelete(id);
        this.nodeRefrencesDelete(id);
    };
    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {
        var foundRootIdIndex = this.findRootId(beforeId);
        if (foundRootIdIndex > -1) {
            this.insertIdIntoRoot(insertId, foundRootIdIndex);
        }
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);
                if (foundNodeIdIndex > -1) {
                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);
                }
            }
        }
    };
    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {
        var foundRootIdIndex = this.findRootId(belowId);
        if (foundRootIdIndex > -1) {
            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);
        }
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);
                if (foundNodeIdIndex > -1) {
                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);
                }
            }
        }
    };
    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {
        this.nodeInsertAtEnd(insideId, insertId);
        this.nodes[insertId] = [];
    };
    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {
        if (position === undefined) {
            this.rootInsertAtEnd(id);
        }
        else {
            if (position < 0) {
                var length_1 = this.rootIds.length;
                this.rootIds.splice((position + length_1 + 1), 0, id);
            }
            else {
                this.rootIds.splice(position, 0, id);
            }
        }
        this.nodes[id] = this.nodes[id] || [];
    };
    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {
        this.nodes[nodeKey] = this.nodes[nodeKey] || [];
        this.nodes[id] = this.nodes[id] || [];
        if (position === undefined) {
            this.nodeInsertAtEnd(nodeKey, id);
        }
        else {
            if (position < 0) {
                var length_2 = this.nodes[nodeKey].length;
                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);
            }
            else {
                this.nodes[nodeKey].splice(position, 0, id);
            }
        }
    };
    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {
        var sourceId = moveId;
        var sourceRootIndex = this.findRootId(sourceId);
        var sourceNodeKey;
        var sourceNodeIdIndex;
        if (this.nodes[beforeId]) {
            sourceNodeKey = beforeId;
        }
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);
                break;
            }
        }
        // got all
        var targetId = beforeId;
        var targetRootIndex = this.findRootId(targetId);
        var targetNodeKey;
        var targetNodeIdIndex;
        if (this.nodes[beforeId]) {
            targetNodeKey = beforeId;
        }
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);
                break;
            }
        }
        // got all
        if (sourceRootIndex > -1) {
            if (targetRootIndex > -1) {
                // moving root to root
                // console.log(`Moving ROOT to ROOT`);
                // console.log(`RootIds:`);
                // console.log(this.rootIds);
                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);
                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);
                this.rootDelete(sourceRootIndex); // indexes change now
                if (targetRootIndex > sourceRootIndex) {
                    targetRootIndex--;
                }
                else {
                }
                switch (direction) {
                    case Direction.BEFORE:
                        this.insertIdIntoRoot(sourceId, targetRootIndex);
                        break;
                    case Direction.AFTER:
                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);
                        break;
                    case Direction.INSIDE_AT_START:
                        this.nodeInsertAtStart(targetId, sourceId);
                        break;
                    case Direction.INSIDE_AT_END:
                        this.nodeInsertAtEnd(targetId, sourceId);
                        break;
                }
            }
            else {
                // moving root (source) ABOVE node (target)
                // will remove one entry from roots
                this.rootDelete(sourceRootIndex);
                for (var nodeKey in this.nodes) {
                    if (this.nodes.hasOwnProperty(nodeKey)) {
                        var index = this.findNodeId(nodeKey, targetId);
                        if (index > -1) {
                            switch (direction) {
                                case Direction.BEFORE:
                                    this.insertIdIntoNode(nodeKey, sourceId, index);
                                    break;
                                case Direction.AFTER:
                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);
                                    break;
                                case Direction.INSIDE_AT_START:
                                    this.nodeInsertAtStart(targetId, sourceId);
                                    break;
                                case Direction.INSIDE_AT_END:
                                    this.nodeInsertAtEnd(targetId, sourceId);
                                    break;
                            }
                            break;
                        }
                    }
                }
            }
        }
        else {
            if (targetRootIndex > -1) {
                // moving node (source) ABOVE root (target)
                // delete source id from each node
                for (var nodeKey in this.nodes) {
                    if (this.nodes.hasOwnProperty(nodeKey)) {
                        var index = this.findNodeId(nodeKey, sourceId);
                        if (index > -1) {
                            // this.nodeInsertId(nodeKey, sourceId, index);
                            this.nodeDeleteAtIndex(nodeKey, index);
                            break;
                        }
                    }
                }
                switch (direction) {
                    case Direction.BEFORE:
                        this.insertIdIntoRoot(sourceId, targetRootIndex);
                        break;
                    case Direction.AFTER:
                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);
                        break;
                    case Direction.INSIDE_AT_START:
                        this.nodeInsertAtStart(targetId, sourceId);
                        break;
                    case Direction.INSIDE_AT_END:
                        this.nodeInsertAtEnd(targetId, sourceId);
                        break;
                }
            }
            else {
                // moving node (source) ABOVE node (target)
                // delete source id from each node
                for (var nodeKey in this.nodes) {
                    if (this.nodes.hasOwnProperty(nodeKey)) {
                        var index = this.findNodeId(nodeKey, sourceId);
                        if (index > -1) {
                            this.nodeDeleteAtIndex(nodeKey, index);
                            break;
                        }
                    }
                }
                for (var nodeKey in this.nodes) {
                    if (this.nodes.hasOwnProperty(nodeKey)) {
                        var index = this.findNodeId(nodeKey, targetId);
                        if (index > -1) {
                            switch (direction) {
                                case Direction.BEFORE:
                                    this.insertIdIntoNode(nodeKey, sourceId, index);
                                    break;
                                case Direction.AFTER:
                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);
                                    break;
                                case Direction.INSIDE_AT_START:
                                    this.nodeInsertAtStart(targetId, sourceId);
                                    break;
                                case Direction.INSIDE_AT_END:
                                    this.nodeInsertAtEnd(targetId, sourceId);
                                    break;
                            }
                            break;
                        }
                    }
                }
            }
        }
    };
    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {
        var temp = arr[indexA];
        arr[indexA] = arr[indexB];
        arr[indexB] = temp;
        return arr;
    };
    MultiRootTree.prototype.rootDeleteId = function (id) {
        var index = this.findRootId(id);
        if (index > -1) {
            this.rootDelete(index);
        }
    };
    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {
        var toDeleteLater = [];
        for (var i = 0; i < this.nodes[nodeKey].length; i++) {
            var id = this.nodes[nodeKey][i];
            this.nodeAndSubNodesDelete(id);
            toDeleteLater.push(nodeKey);
        }
        this.nodeDelete(nodeKey);
        for (var i = 0; i < toDeleteLater.length; i++) {
            this.nodeDelete(toDeleteLater[i]);
        }
    };
    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {
        for (var nodeKey in this.nodes) {
            if (this.nodes.hasOwnProperty(nodeKey)) {
                for (var i = 0; i < this.nodes[nodeKey].length; i++) {
                    var targetId = this.nodes[nodeKey][i];
                    if (targetId === id) {
                        this.nodeDeleteAtIndex(nodeKey, i);
                    }
                }
            }
        }
    };
    MultiRootTree.prototype.nodeDelete = function (nodeKey) {
        delete this.nodes[nodeKey];
    };
    MultiRootTree.prototype.findRootId = function (id) {
        return this.rootIds.indexOf(id);
    };
    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {
        return this.nodes[nodeKey].indexOf(id);
    };
    MultiRootTree.prototype.findNode = function (nodeKey) {
        return this.nodes[nodeKey];
    };
    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {
        this.nodes[nodeKey].unshift(id);
    };
    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {
        this.nodes[nodeKey].push(id);
    };
    MultiRootTree.prototype.rootDelete = function (index) {
        this.rootIds.splice(index, 1);
    };
    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {
        this.nodes[nodeKey].splice(index, 1);
    };
    MultiRootTree.prototype.rootInsertAtStart = function (id) {
        this.rootIds.unshift(id);
    };
    MultiRootTree.prototype.rootInsertAtEnd = function (id) {
        this.rootIds.push(id);
    };
    return MultiRootTree;
}());
exports["default"] = MultiRootTree;
//# sourceMappingURL=MultiRootTree.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/PriorityQueue.js":
/*!***********************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/PriorityQueue.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var Heap_1 = __webpack_require__(/*! ./Heap */ "./node_modules/typescript-collections/dist/lib/Heap.js");
var PriorityQueue = /** @class */ (function () {
    /**
     * Creates an empty priority queue.
     * @class <p>In a priority queue each element is associated with a "priority",
     * elements are dequeued in highest-priority-first order (the elements with the
     * highest priority are dequeued first). Priority Queues are implemented as heaps.
     * If the inserted elements are custom objects a compare function must be provided,
     * otherwise the <=, === and >= operators are used to compare object priority.</p>
     * <pre>
     * function compare(a, b) {
     *  if (a is less than b by some ordering criterion) {
     *     return -1;
     *  } if (a is greater than b by the ordering criterion) {
     *     return 1;
     *  }
     *  // a must be equal to b
     *  return 0;
     * }
     * </pre>
     * @constructor
     * @param {function(Object,Object):number=} compareFunction optional
     * function used to compare two element priorities. Must return a negative integer,
     * zero, or a positive integer as the first argument is less than, equal to,
     * or greater than the second.
     */
    function PriorityQueue(compareFunction) {
        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));
    }
    /**
     * Inserts the specified element into this priority queue.
     * @param {Object} element the element to insert.
     * @return {boolean} true if the element was inserted, or false if it is undefined.
     */
    PriorityQueue.prototype.enqueue = function (element) {
        return this.heap.add(element);
    };
    /**
     * Inserts the specified element into this priority queue.
     * @param {Object} element the element to insert.
     * @return {boolean} true if the element was inserted, or false if it is undefined.
     */
    PriorityQueue.prototype.add = function (element) {
        return this.heap.add(element);
    };
    /**
     * Retrieves and removes the highest priority element of this queue.
     * @return {*} the the highest priority element of this queue,
     *  or undefined if this queue is empty.
     */
    PriorityQueue.prototype.dequeue = function () {
        if (this.heap.size() !== 0) {
            var el = this.heap.peek();
            this.heap.removeRoot();
            return el;
        }
        return undefined;
    };
    /**
     * Retrieves, but does not remove, the highest priority element of this queue.
     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.
     */
    PriorityQueue.prototype.peek = function () {
        return this.heap.peek();
    };
    /**
     * Returns true if this priority queue contains the specified element.
     * @param {Object} element element to search for.
     * @return {boolean} true if this priority queue contains the specified element,
     * false otherwise.
     */
    PriorityQueue.prototype.contains = function (element) {
        return this.heap.contains(element);
    };
    /**
     * Checks if this priority queue is empty.
     * @return {boolean} true if and only if this priority queue contains no items; false
     * otherwise.
     */
    PriorityQueue.prototype.isEmpty = function () {
        return this.heap.isEmpty();
    };
    /**
     * Returns the number of elements in this priority queue.
     * @return {number} the number of elements in this priority queue.
     */
    PriorityQueue.prototype.size = function () {
        return this.heap.size();
    };
    /**
     * Removes all of the elements from this priority queue.
     */
    PriorityQueue.prototype.clear = function () {
        this.heap.clear();
    };
    /**
     * Executes the provided function once for each element present in this queue in
     * no particular order.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element value, to break the iteration you can
     * optionally return false.
     */
    PriorityQueue.prototype.forEach = function (callback) {
        this.heap.forEach(callback);
    };
    return PriorityQueue;
}()); // end of priority queue
exports["default"] = PriorityQueue;
//# sourceMappingURL=PriorityQueue.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/Queue.js":
/*!***************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/Queue.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LinkedList_1 = __webpack_require__(/*! ./LinkedList */ "./node_modules/typescript-collections/dist/lib/LinkedList.js");
var Queue = /** @class */ (function () {
    /**
     * Creates an empty queue.
     * @class A queue is a First-In-First-Out (FIFO) data structure, the first
     * element added to the queue will be the first one to be removed. This
     * implementation uses a linked list as a container.
     * @constructor
     */
    function Queue() {
        this.list = new LinkedList_1.default();
    }
    /**
     * Inserts the specified element into the end of this queue.
     * @param {Object} elem the element to insert.
     * @return {boolean} true if the element was inserted, or false if it is undefined.
     */
    Queue.prototype.enqueue = function (elem) {
        return this.list.add(elem);
    };
    /**
     * Inserts the specified element into the end of this queue.
     * @param {Object} elem the element to insert.
     * @return {boolean} true if the element was inserted, or false if it is undefined.
     */
    Queue.prototype.add = function (elem) {
        return this.list.add(elem);
    };
    /**
     * Retrieves and removes the head of this queue.
     * @return {*} the head of this queue, or undefined if this queue is empty.
     */
    Queue.prototype.dequeue = function () {
        if (this.list.size() !== 0) {
            var el = this.list.first();
            this.list.removeElementAtIndex(0);
            return el;
        }
        return undefined;
    };
    /**
     * Retrieves, but does not remove, the head of this queue.
     * @return {*} the head of this queue, or undefined if this queue is empty.
     */
    Queue.prototype.peek = function () {
        if (this.list.size() !== 0) {
            return this.list.first();
        }
        return undefined;
    };
    /**
     * Returns the number of elements in this queue.
     * @return {number} the number of elements in this queue.
     */
    Queue.prototype.size = function () {
        return this.list.size();
    };
    /**
     * Returns true if this queue contains the specified element.
     * <p>If the elements inside this stack are
     * not comparable with the === operator, a custom equals function should be
     * provided to perform searches, the function must receive two arguments and
     * return true if they are equal, false otherwise. Example:</p>
     *
     * <pre>
     * const petsAreEqualByName (pet1, pet2) {
     *  return pet1.name === pet2.name;
     * }
     * </pre>
     * @param {Object} elem element to search for.
     * @param {function(Object,Object):boolean=} equalsFunction optional
     * function to check if two elements are equal.
     * @return {boolean} true if this queue contains the specified element,
     * false otherwise.
     */
    Queue.prototype.contains = function (elem, equalsFunction) {
        return this.list.contains(elem, equalsFunction);
    };
    /**
     * Checks if this queue is empty.
     * @return {boolean} true if and only if this queue contains no items; false
     * otherwise.
     */
    Queue.prototype.isEmpty = function () {
        return this.list.size() <= 0;
    };
    /**
     * Removes all of the elements from this queue.
     */
    Queue.prototype.clear = function () {
        this.list.clear();
    };
    /**
     * Executes the provided function once for each element present in this queue in
     * FIFO order.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element value, to break the iteration you can
     * optionally return false.
     */
    Queue.prototype.forEach = function (callback) {
        this.list.forEach(callback);
    };
    return Queue;
}()); // End of queue
exports["default"] = Queue;
//# sourceMappingURL=Queue.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/Set.js":
/*!*************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/Set.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
var arrays = __webpack_require__(/*! ./arrays */ "./node_modules/typescript-collections/dist/lib/arrays.js");
var Dictionary_1 = __webpack_require__(/*! ./Dictionary */ "./node_modules/typescript-collections/dist/lib/Dictionary.js");
var Set = /** @class */ (function () {
    /**
     * Creates an empty set.
     * @class <p>A set is a data structure that contains no duplicate items.</p>
     * <p>If the inserted elements are custom objects a function
     * which converts elements to strings must be provided. Example:</p>
     *
     * <pre>
     * function petToString(pet) {
     *  return pet.name;
     * }
     * </pre>
     *
     * @constructor
     * @param {function(Object):string=} toStringFunction optional function used
     * to convert elements to strings. If the elements aren't strings or if toString()
     * is not appropriate, a custom function which receives an object and returns a
     * unique string must be provided.
     */
    function Set(toStringFunction) {
        this.dictionary = new Dictionary_1.default(toStringFunction);
    }
    /**
     * Returns true if this set contains the specified element.
     * @param {Object} element element to search for.
     * @return {boolean} true if this set contains the specified element,
     * false otherwise.
     */
    Set.prototype.contains = function (element) {
        return this.dictionary.containsKey(element);
    };
    /**
     * Adds the specified element to this set if it is not already present.
     * @param {Object} element the element to insert.
     * @return {boolean} true if this set did not already contain the specified element.
     */
    Set.prototype.add = function (element) {
        if (this.contains(element) || util.isUndefined(element)) {
            return false;
        }
        else {
            this.dictionary.setValue(element, element);
            return true;
        }
    };
    /**
     * Performs an intersection between this and another set.
     * Removes all values that are not present this set and the given set.
     * @param {collections.Set} otherSet other set.
     */
    Set.prototype.intersection = function (otherSet) {
        var set = this;
        this.forEach(function (element) {
            if (!otherSet.contains(element)) {
                set.remove(element);
            }
            return true;
        });
    };
    /**
     * Performs a union between this and another set.
     * Adds all values from the given set to this set.
     * @param {collections.Set} otherSet other set.
     */
    Set.prototype.union = function (otherSet) {
        var set = this;
        otherSet.forEach(function (element) {
            set.add(element);
            return true;
        });
    };
    /**
     * Performs a difference between this and another set.
     * Removes from this set all the values that are present in the given set.
     * @param {collections.Set} otherSet other set.
     */
    Set.prototype.difference = function (otherSet) {
        var set = this;
        otherSet.forEach(function (element) {
            set.remove(element);
            return true;
        });
    };
    /**
     * Checks whether the given set contains all the elements in this set.
     * @param {collections.Set} otherSet other set.
     * @return {boolean} true if this set is a subset of the given set.
     */
    Set.prototype.isSubsetOf = function (otherSet) {
        if (this.size() > otherSet.size()) {
            return false;
        }
        var isSub = true;
        this.forEach(function (element) {
            if (!otherSet.contains(element)) {
                isSub = false;
                return false;
            }
            return true;
        });
        return isSub;
    };
    /**
     * Removes the specified element from this set if it is present.
     * @return {boolean} true if this set contained the specified element.
     */
    Set.prototype.remove = function (element) {
        if (!this.contains(element)) {
            return false;
        }
        else {
            this.dictionary.remove(element);
            return true;
        }
    };
    /**
     * Executes the provided function once for each element
     * present in this set.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one arguments: the element. To break the iteration you can
     * optionally return false.
     */
    Set.prototype.forEach = function (callback) {
        this.dictionary.forEach(function (k, v) {
            return callback(v);
        });
    };
    /**
     * Returns an array containing all of the elements in this set in arbitrary order.
     * @return {Array} an array containing all of the elements in this set.
     */
    Set.prototype.toArray = function () {
        return this.dictionary.values();
    };
    /**
     * Returns true if this set contains no elements.
     * @return {boolean} true if this set contains no elements.
     */
    Set.prototype.isEmpty = function () {
        return this.dictionary.isEmpty();
    };
    /**
     * Returns the number of elements in this set.
     * @return {number} the number of elements in this set.
     */
    Set.prototype.size = function () {
        return this.dictionary.size();
    };
    /**
     * Removes all of the elements from this set.
     */
    Set.prototype.clear = function () {
        this.dictionary.clear();
    };
    /*
    * Provides a string representation for display
    */
    Set.prototype.toString = function () {
        return arrays.toString(this.toArray());
    };
    return Set;
}()); // end of Set
exports["default"] = Set;
//# sourceMappingURL=Set.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/Stack.js":
/*!***************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/Stack.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var LinkedList_1 = __webpack_require__(/*! ./LinkedList */ "./node_modules/typescript-collections/dist/lib/LinkedList.js");
var Stack = /** @class */ (function () {
    /**
     * Creates an empty Stack.
     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last
     * element added to the stack will be the first one to be removed. This
     * implementation uses a linked list as a container.
     * @constructor
     */
    function Stack() {
        this.list = new LinkedList_1.default();
    }
    /**
     * Pushes an item onto the top of this stack.
     * @param {Object} elem the element to be pushed onto this stack.
     * @return {boolean} true if the element was pushed or false if it is undefined.
     */
    Stack.prototype.push = function (elem) {
        return this.list.add(elem, 0);
    };
    /**
     * Pushes an item onto the top of this stack.
     * @param {Object} elem the element to be pushed onto this stack.
     * @return {boolean} true if the element was pushed or false if it is undefined.
     */
    Stack.prototype.add = function (elem) {
        return this.list.add(elem, 0);
    };
    /**
     * Removes the object at the top of this stack and returns that object.
     * @return {*} the object at the top of this stack or undefined if the
     * stack is empty.
     */
    Stack.prototype.pop = function () {
        return this.list.removeElementAtIndex(0);
    };
    /**
     * Looks at the object at the top of this stack without removing it from the
     * stack.
     * @return {*} the object at the top of this stack or undefined if the
     * stack is empty.
     */
    Stack.prototype.peek = function () {
        return this.list.first();
    };
    /**
     * Returns the number of elements in this stack.
     * @return {number} the number of elements in this stack.
     */
    Stack.prototype.size = function () {
        return this.list.size();
    };
    /**
     * Returns true if this stack contains the specified element.
     * <p>If the elements inside this stack are
     * not comparable with the === operator, a custom equals function should be
     * provided to perform searches, the function must receive two arguments and
     * return true if they are equal, false otherwise. Example:</p>
     *
     * <pre>
     * const petsAreEqualByName (pet1, pet2) {
     *  return pet1.name === pet2.name;
     * }
     * </pre>
     * @param {Object} elem element to search for.
     * @param {function(Object,Object):boolean=} equalsFunction optional
     * function to check if two elements are equal.
     * @return {boolean} true if this stack contains the specified element,
     * false otherwise.
     */
    Stack.prototype.contains = function (elem, equalsFunction) {
        return this.list.contains(elem, equalsFunction);
    };
    /**
     * Checks if this stack is empty.
     * @return {boolean} true if and only if this stack contains no items; false
     * otherwise.
     */
    Stack.prototype.isEmpty = function () {
        return this.list.isEmpty();
    };
    /**
     * Removes all of the elements from this stack.
     */
    Stack.prototype.clear = function () {
        this.list.clear();
    };
    /**
     * Executes the provided function once for each element present in this stack in
     * LIFO order.
     * @param {function(Object):*} callback function to execute, it is
     * invoked with one argument: the element value, to break the iteration you can
     * optionally return false.
     */
    Stack.prototype.forEach = function (callback) {
        this.list.forEach(callback);
    };
    return Stack;
}()); // End of stack
exports["default"] = Stack;
//# sourceMappingURL=Stack.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/arrays.js":
/*!****************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/arrays.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
/**
 * Returns the position of the first occurrence of the specified item
 * within the specified array.4
 * @param {*} array the array in which to search the element.
 * @param {Object} item the element to search.
 * @param {function(Object,Object):boolean=} equalsFunction optional function used to
 * check equality between 2 elements.
 * @return {number} the position of the first occurrence of the specified element
 * within the specified array, or -1 if not found.
 */
function indexOf(array, item, equalsFunction) {
    var equals = equalsFunction || util.defaultEquals;
    var length = array.length;
    for (var i = 0; i < length; i++) {
        if (equals(array[i], item)) {
            return i;
        }
    }
    return -1;
}
exports.indexOf = indexOf;
/**
 * Returns the position of the last occurrence of the specified element
 * within the specified array.
 * @param {*} array the array in which to search the element.
 * @param {Object} item the element to search.
 * @param {function(Object,Object):boolean=} equalsFunction optional function used to
 * check equality between 2 elements.
 * @return {number} the position of the last occurrence of the specified element
 * within the specified array or -1 if not found.
 */
function lastIndexOf(array, item, equalsFunction) {
    var equals = equalsFunction || util.defaultEquals;
    var length = array.length;
    for (var i = length - 1; i >= 0; i--) {
        if (equals(array[i], item)) {
            return i;
        }
    }
    return -1;
}
exports.lastIndexOf = lastIndexOf;
/**
 * Returns true if the specified array contains the specified element.
 * @param {*} array the array in which to search the element.
 * @param {Object} item the element to search.
 * @param {function(Object,Object):boolean=} equalsFunction optional function to
 * check equality between 2 elements.
 * @return {boolean} true if the specified array contains the specified element.
 */
function contains(array, item, equalsFunction) {
    return indexOf(array, item, equalsFunction) >= 0;
}
exports.contains = contains;
/**
 * Removes the first ocurrence of the specified element from the specified array.
 * @param {*} array the array in which to search element.
 * @param {Object} item the element to search.
 * @param {function(Object,Object):boolean=} equalsFunction optional function to
 * check equality between 2 elements.
 * @return {boolean} true if the array changed after this call.
 */
function remove(array, item, equalsFunction) {
    var index = indexOf(array, item, equalsFunction);
    if (index < 0) {
        return false;
    }
    array.splice(index, 1);
    return true;
}
exports.remove = remove;
/**
 * Returns the number of elements in the specified array equal
 * to the specified object.
 * @param {Array} array the array in which to determine the frequency of the element.
 * @param {Object} item the element whose frequency is to be determined.
 * @param {function(Object,Object):boolean=} equalsFunction optional function used to
 * check equality between 2 elements.
 * @return {number} the number of elements in the specified array
 * equal to the specified object.
 */
function frequency(array, item, equalsFunction) {
    var equals = equalsFunction || util.defaultEquals;
    var length = array.length;
    var freq = 0;
    for (var i = 0; i < length; i++) {
        if (equals(array[i], item)) {
            freq++;
        }
    }
    return freq;
}
exports.frequency = frequency;
/**
 * Returns true if the two specified arrays are equal to one another.
 * Two arrays are considered equal if both arrays contain the same number
 * of elements, and all corresponding pairs of elements in the two
 * arrays are equal and are in the same order.
 * @param {Array} array1 one array to be tested for equality.
 * @param {Array} array2 the other array to be tested for equality.
 * @param {function(Object,Object):boolean=} equalsFunction optional function used to
 * check equality between elemements in the arrays.
 * @return {boolean} true if the two arrays are equal
 */
function equals(array1, array2, equalsFunction) {
    var equals = equalsFunction || util.defaultEquals;
    if (array1.length !== array2.length) {
        return false;
    }
    var length = array1.length;
    for (var i = 0; i < length; i++) {
        if (!equals(array1[i], array2[i])) {
            return false;
        }
    }
    return true;
}
exports.equals = equals;
/**
 * Returns shallow a copy of the specified array.
 * @param {*} array the array to copy.
 * @return {Array} a copy of the specified array
 */
function copy(array) {
    return array.concat();
}
exports.copy = copy;
/**
 * Swaps the elements at the specified positions in the specified array.
 * @param {Array} array The array in which to swap elements.
 * @param {number} i the index of one element to be swapped.
 * @param {number} j the index of the other element to be swapped.
 * @return {boolean} true if the array is defined and the indexes are valid.
 */
function swap(array, i, j) {
    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {
        return false;
    }
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
    return true;
}
exports.swap = swap;
function toString(array) {
    return '[' + array.toString() + ']';
}
exports.toString = toString;
/**
 * Executes the provided function once for each element present in this array
 * starting from index 0 to length - 1.
 * @param {Array} array The array in which to iterate.
 * @param {function(Object):*} callback function to execute, it is
 * invoked with one argument: the element value, to break the iteration you can
 * optionally return false.
 */
function forEach(array, callback) {
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var ele = array_1[_i];
        if (callback(ele) === false) {
            return;
        }
    }
}
exports.forEach = forEach;
//# sourceMappingURL=arrays.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// Copyright 2013 Basarat Ali Syed. All Rights Reserved.
//
// Licensed under MIT open source license http://opensource.org/licenses/MIT
//
// Orginal javascript code was by Mauricio Santos
//
var _arrays = __webpack_require__(/*! ./arrays */ "./node_modules/typescript-collections/dist/lib/arrays.js");
exports.arrays = _arrays;
var Bag_1 = __webpack_require__(/*! ./Bag */ "./node_modules/typescript-collections/dist/lib/Bag.js");
exports.Bag = Bag_1.default;
var BSTree_1 = __webpack_require__(/*! ./BSTree */ "./node_modules/typescript-collections/dist/lib/BSTree.js");
exports.BSTree = BSTree_1.default;
var BSTreeKV_1 = __webpack_require__(/*! ./BSTreeKV */ "./node_modules/typescript-collections/dist/lib/BSTreeKV.js");
exports.BSTreeKV = BSTreeKV_1.default;
var Dictionary_1 = __webpack_require__(/*! ./Dictionary */ "./node_modules/typescript-collections/dist/lib/Dictionary.js");
exports.Dictionary = Dictionary_1.default;
var Heap_1 = __webpack_require__(/*! ./Heap */ "./node_modules/typescript-collections/dist/lib/Heap.js");
exports.Heap = Heap_1.default;
var LinkedDictionary_1 = __webpack_require__(/*! ./LinkedDictionary */ "./node_modules/typescript-collections/dist/lib/LinkedDictionary.js");
exports.LinkedDictionary = LinkedDictionary_1.default;
var LinkedList_1 = __webpack_require__(/*! ./LinkedList */ "./node_modules/typescript-collections/dist/lib/LinkedList.js");
exports.LinkedList = LinkedList_1.default;
var MultiDictionary_1 = __webpack_require__(/*! ./MultiDictionary */ "./node_modules/typescript-collections/dist/lib/MultiDictionary.js");
exports.MultiDictionary = MultiDictionary_1.default;
var FactoryDictionary_1 = __webpack_require__(/*! ./FactoryDictionary */ "./node_modules/typescript-collections/dist/lib/FactoryDictionary.js");
exports.FactoryDictionary = FactoryDictionary_1.default;
var FactoryDictionary_2 = __webpack_require__(/*! ./FactoryDictionary */ "./node_modules/typescript-collections/dist/lib/FactoryDictionary.js");
exports.DefaultDictionary = FactoryDictionary_2.default;
var Queue_1 = __webpack_require__(/*! ./Queue */ "./node_modules/typescript-collections/dist/lib/Queue.js");
exports.Queue = Queue_1.default;
var PriorityQueue_1 = __webpack_require__(/*! ./PriorityQueue */ "./node_modules/typescript-collections/dist/lib/PriorityQueue.js");
exports.PriorityQueue = PriorityQueue_1.default;
var Set_1 = __webpack_require__(/*! ./Set */ "./node_modules/typescript-collections/dist/lib/Set.js");
exports.Set = Set_1.default;
var Stack_1 = __webpack_require__(/*! ./Stack */ "./node_modules/typescript-collections/dist/lib/Stack.js");
exports.Stack = Stack_1.default;
var MultiRootTree_1 = __webpack_require__(/*! ./MultiRootTree */ "./node_modules/typescript-collections/dist/lib/MultiRootTree.js");
exports.MultiRootTree = MultiRootTree_1.default;
var _util = __webpack_require__(/*! ./util */ "./node_modules/typescript-collections/dist/lib/util.js");
exports.util = _util;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/typescript-collections/dist/lib/util.js":
/*!**************************************************************!*\
  !*** ./node_modules/typescript-collections/dist/lib/util.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var _hasOwnProperty = Object.prototype.hasOwnProperty;
exports.has = function (obj, prop) {
    return _hasOwnProperty.call(obj, prop);
};
/**
 * Default function to compare element order.
 * @function
 */
function defaultCompare(a, b) {
    if (a < b) {
        return -1;
    }
    else if (a === b) {
        return 0;
    }
    else {
        return 1;
    }
}
exports.defaultCompare = defaultCompare;
/**
 * Default function to test equality.
 * @function
 */
function defaultEquals(a, b) {
    return a === b;
}
exports.defaultEquals = defaultEquals;
/**
 * Default function to convert an object to a string.
 * @function
 */
function defaultToString(item) {
    if (item === null) {
        return 'COLLECTION_NULL';
    }
    else if (isUndefined(item)) {
        return 'COLLECTION_UNDEFINED';
    }
    else if (isString(item)) {
        return '$s' + item;
    }
    else {
        return '$o' + item.toString();
    }
}
exports.defaultToString = defaultToString;
/**
 * Joins all the properies of the object using the provided join string
 */
function makeString(item, join) {
    if (join === void 0) { join = ','; }
    if (item === null) {
        return 'COLLECTION_NULL';
    }
    else if (isUndefined(item)) {
        return 'COLLECTION_UNDEFINED';
    }
    else if (isString(item)) {
        return item.toString();
    }
    else {
        var toret = '{';
        var first = true;
        for (var prop in item) {
            if (exports.has(item, prop)) {
                if (first) {
                    first = false;
                }
                else {
                    toret = toret + join;
                }
                toret = toret + prop + ':' + item[prop];
            }
        }
        return toret + '}';
    }
}
exports.makeString = makeString;
/**
 * Checks if the given argument is a function.
 * @function
 */
function isFunction(func) {
    return (typeof func) === 'function';
}
exports.isFunction = isFunction;
/**
 * Checks if the given argument is undefined.
 * @function
 */
function isUndefined(obj) {
    return (typeof obj) === 'undefined';
}
exports.isUndefined = isUndefined;
/**
 * Checks if the given argument is a string.
 * @function
 */
function isString(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
}
exports.isString = isString;
/**
 * Reverses a compare function.
 * @function
 */
function reverseCompareFunction(compareFunction) {
    if (isUndefined(compareFunction) || !isFunction(compareFunction)) {
        return function (a, b) {
            if (a < b) {
                return 1;
            }
            else if (a === b) {
                return 0;
            }
            else {
                return -1;
            }
        };
    }
    else {
        return function (d, v) {
            return compareFunction(d, v) * -1;
        };
    }
}
exports.reverseCompareFunction = reverseCompareFunction;
/**
 * Returns an equal function given a compare function.
 * @function
 */
function compareToEquals(compareFunction) {
    return function (a, b) {
        return compareFunction(a, b) === 0;
    };
}
exports.compareToEquals = compareToEquals;
//# sourceMappingURL=util.js.map

/***/ }),

/***/ "./node_modules/vexflow/src/accidental.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/accidental.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Accidental: () => (/* binding */ Accidental)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./music */ "./node_modules/vexflow/src/music.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// @author Mohit Cheppudira
// @author Greg Ristow (modifications)
//
// ## Description
//
// This file implements accidentals as modifiers that can be attached to
// notes. Support is included for both western and microtonal accidentals.
//
// See `tests/accidental_tests.js` for usage examples.








// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.
function L(...args) { if (Accidental.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Accidental', args); }

const getGlyphWidth = glyph => glyph.getMetrics().width;

// An `Accidental` inherits from `Modifier`, and is formatted within a
// `ModifierContext`.
class Accidental extends _modifier__WEBPACK_IMPORTED_MODULE_4__.Modifier {
  static get CATEGORY() { return 'accidentals'; }

  // Arrange accidentals inside a ModifierContext.
  static format(accidentals, state) {
    const noteheadAccidentalPadding = 1;
    const leftShift = state.left_shift + noteheadAccidentalPadding;
    const accidentalSpacing = 3;

    // If there are no accidentals, we needn't format their positions
    if (!accidentals || accidentals.length === 0) return;

    const accList = [];
    let prevNote = null;
    let shiftL = 0;

    // First determine the accidentals' Y positions from the note.keys
    let propsTemp;
    for (let i = 0; i < accidentals.length; ++i) {
      const acc = accidentals[i];
      const note = acc.getNote();
      const stave = note.getStave();
      const props = note.getKeyProps()[acc.getIndex()];
      if (note !== prevNote) {
        // Iterate through all notes to get the displaced pixels
        for (let n = 0; n < note.keys.length; ++n) {
          propsTemp = note.getKeyProps()[n];
          shiftL = propsTemp.displaced ? note.getExtraLeftPx() : shiftL;
        }
        prevNote = note;
      }
      if (stave !== null) {
        const lineSpace = stave.options.spacing_between_lines_px;
        const y = stave.getYForLine(props.line);
        const accLine = Math.round(y / lineSpace * 2) / 2;
        accList.push({ y, line: accLine, shift: shiftL, acc, lineSpace });
      } else {
        accList.push({ line: props.line, shift: shiftL, acc });
      }
    }

    // Sort accidentals by line number.
    accList.sort((a, b) => b.line - a.line);

    // FIXME: Confusing name. Each object in this array has a property called `line`.
    // So if this is a list of lines, you end up with: `line.line` which is very awkward.
    const lineList = [];

    // amount by which all accidentals must be shifted right or left for
    // stem flipping, notehead shifting concerns.
    let accShift = 0;
    let previousLine = null;

    // Create an array of unique line numbers (lineList) from accList
    for (let i = 0; i < accList.length; i++) {
      const acc = accList[i];

      // if this is the first line, or a new line, add a lineList
      if (previousLine === null || previousLine !== acc.line) {
        lineList.push({
          line: acc.line,
          flatLine: true,
          dblSharpLine: true,
          numAcc: 0,
          width: 0,
        });
      }
      // if this accidental is not a flat, the accidental needs 3.0 lines lower
      // clearance instead of 2.5 lines for b or bb.
      // FIXME: Naming could use work. acc.acc is very awkward
      if (acc.acc.type !== 'b' && acc.acc.type !== 'bb') {
        lineList[lineList.length - 1].flatLine = false;
      }

      // if this accidental is not a double sharp, the accidental needs 3.0 lines above
      if (acc.acc.type !== '##') {
        lineList[lineList.length - 1].dblSharpLine = false;
      }

      // Track how many accidentals are on this line:
      lineList[lineList.length - 1].numAcc++;

      // Track the total x_offset needed for this line which will be needed
      // for formatting lines w/ multiple accidentals:

      // width = accidental width + universal spacing between accidentals
      lineList[lineList.length - 1].width += acc.acc.getWidth() + accidentalSpacing;

      // if this accShift is larger, use it to keep first column accidentals in the same line
      accShift = acc.shift > accShift ? acc.shift : accShift;

      previousLine = acc.line;
    }

    // ### Place Accidentals in Columns
    //
    // Default to a classic triangular layout (middle accidental farthest left),
    // but follow exceptions as outlined in G. Read's _Music Notation_ and
    // Elaine Gould's _Behind Bars_.
    //
    // Additionally, this implements different vertical collision rules for
    // flats (only need 2.5 lines clearance below) and double sharps (only
    // need 2.5 lines of clearance above or below).
    //
    // Classic layouts and exception patterns are found in the 'tables.js'
    // in 'Vex.Flow.accidentalColumnsTable'
    //
    // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,
    // using as few columns as possible for the verticle structure.
    //
    // TODO (?): Allow column to be specified for an accidental at run-time?

    let totalColumns = 0;

    // establish the boundaries for a group of notes with clashing accidentals:
    for (let i = 0; i < lineList.length; i++) {
      let noFurtherConflicts = false;
      const groupStart = i;
      let groupEnd = i;

      while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {
        // if this note conflicts with the next:
        if (this.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {
          // include the next note in the group:
          groupEnd++;
        } else {
          noFurtherConflicts = true;
        }
      }

      // Gets an a line from the `lineList`, relative to the current group
      const getGroupLine = (index) => lineList[groupStart + index];
      const getGroupLines = (indexes) => indexes.map(getGroupLine);
      const lineDifference = (indexA, indexB) => {
        const [a, b] = getGroupLines([indexA, indexB]).map(item => item.line);
        return a - b;
      };

      const notColliding = (...indexPairs) =>
        indexPairs
          .map(getGroupLines)
          .every(lines => !this.checkCollision(...lines));

      // Set columns for the lines in this group:
      const groupLength = groupEnd - groupStart + 1;

      // Set the accidental column for each line of the group
      let endCase = this.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';

      switch (groupLength) {
        case 3:
          if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {
            endCase = 'second_on_bottom';
          }
          break;
        case 4:
          if (notColliding([0, 2], [1, 3])) {
            endCase = 'spaced_out_tetrachord';
          }
          break;
        case 5:
          if (endCase === 'b' && notColliding([1, 3])) {
            endCase = 'spaced_out_pentachord';
            if (notColliding([0, 2], [2, 4])) {
              endCase = 'very_spaced_out_pentachord';
            }
          }
          break;
        case 6:
          if (notColliding([0, 3], [1, 4], [2, 5])) {
            endCase = 'spaced_out_hexachord';
          }
          if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {
            endCase = 'very_spaced_out_hexachord';
          }
          break;
        default:
          break;
      }

      let groupMember;
      let column;
      // If the group contains more than seven members, use ascending parallel lines
      // of accidentals, using as few columns as possible while avoiding collisions.
      if (groupLength >= 7) {
        // First, determine how many columns to use:
        let patternLength = 2;
        let collisionDetected = true;
        while (collisionDetected === true) {
          collisionDetected = false;
          for (let line = 0; line + patternLength < lineList.length; line++) {
            if (this.checkCollision(lineList[line], lineList[line + patternLength])) {
              collisionDetected = true;
              patternLength++;
              break;
            }
          }
        }
        // Then, assign a column to each line of accidentals
        for (groupMember = i; groupMember <= groupEnd; groupMember++) {
          column = ((groupMember - i) % patternLength) + 1;
          lineList[groupMember].column = column;
          totalColumns = (totalColumns > column) ? totalColumns : column;
        }

        // Otherwise, if the group contains fewer than seven members, use the layouts from
        // the accidentalsColumnsTable housed in tables.js.
      } else {
        for (groupMember = i; groupMember <= groupEnd; groupMember++) {
          column = _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.accidentalColumnsTable[groupLength][endCase][groupMember - i];
          lineList[groupMember].column = column;
          totalColumns = (totalColumns > column) ? totalColumns : column;
        }
      }

      // Increment i to the last note that was set, so that if a lower set of notes
      // does not conflict at all with this group, it can have its own classic shape.
      i = groupEnd;
    }

    // ### Convert Columns to x_offsets
    //
    // This keeps columns aligned, even if they have different accidentals within them
    // which sometimes results in a larger x_offset than is an accidental might need
    // to preserve the symmetry of the accidental shape.
    //
    // Neither A.C. Vinci nor G. Read address this, and it typically only happens in
    // music with complex chord clusters.
    //
    // TODO (?): Optionally allow closer compression of accidentals, instead of forcing
    // parallel columns.

    // track each column's max width, which will be used as initial shift of later columns:
    const columnWidths = [];
    const columnXOffsets = [];
    for (let i = 0; i <= totalColumns; i++) {
      columnWidths[i] = 0;
      columnXOffsets[i] = 0;
    }

    columnWidths[0] = accShift + leftShift;
    columnXOffsets[0] = accShift + leftShift;

    // Fill columnWidths with widest needed x-space;
    // this is what keeps the columns parallel.
    lineList.forEach(line => {
      if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;
    });

    for (let i = 1; i < columnWidths.length; i++) {
      // this column's offset = this column's width + previous column's offset
      columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];
    }

    const totalShift = columnXOffsets[columnXOffsets.length - 1];
    // Set the xShift for each accidental according to column offsets:
    let accCount = 0;
    lineList.forEach(line => {
      let lineWidth = 0;
      const lastAccOnLine = accCount + line.numAcc;
      // handle all of the accidentals on a given line:
      for (accCount; accCount < lastAccOnLine; accCount++) {
        const xShift = (columnXOffsets[line.column - 1] + lineWidth);
        accList[accCount].acc.setXShift(xShift);
        // keep track of the width of accidentals we've added so far, so that when
        // we loop, we add space for them.
        lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;
        L('Line, accCount, shift: ', line.line, accCount, xShift);
      }
    });

    // update the overall layout with the full width of the accidental shapes:
    state.left_shift += totalShift;
  }

  // Helper function to determine whether two lines of accidentals collide vertically
  static checkCollision(line1, line2) {
    let clearance = line2.line - line1.line;
    let clearanceRequired = 3;
    // But less clearance is required for certain accidentals: b, bb and ##.
    if (clearance > 0) { // then line 2 is on top
      clearanceRequired = (line2.flatLine || line2.dblSharpLine) ? 2.5 : 3.0;
      if (line1.dblSharpLine) clearance -= 0.5;
    } else { // line 1 is on top
      clearanceRequired = (line1.flatLine || line1.dblSharpLine) ? 2.5 : 3.0;
      if (line2.dblSharpLine) clearance -= 0.5;
    }
    const collision = Math.abs(clearance) < clearanceRequired;
    L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);
    return collision;
  }

  // Use this method to automatically apply accidentals to a set of `voices`.
  // The accidentals will be remembered between all the voices provided.
  // Optionally, you can also provide an initial `keySignature`.
  static applyAccidentals(voices, keySignature) {
    const tickPositions = [];
    const tickNoteMap = {};

    // Sort the tickables in each voice by their tick position in the voice
    voices.forEach(voice => {
      const tickPosition = new _fraction__WEBPACK_IMPORTED_MODULE_1__.Fraction(0, 1);
      const notes = voice.getTickables();
      notes.forEach(note => {
        if (note.shouldIgnoreTicks()) return;

        const notesAtPosition = tickNoteMap[tickPosition.value()];

        if (!notesAtPosition) {
          tickPositions.push(tickPosition.value());
          tickNoteMap[tickPosition.value()] = [note];
        } else {
          notesAtPosition.push(note);
        }

        tickPosition.add(note.getTicks());
      });
    });

    const music = new _music__WEBPACK_IMPORTED_MODULE_3__.Music();

    // Default key signature is C major
    if (!keySignature) keySignature = 'C';

    // Get the scale map, which represents the current state of each pitch
    const scaleMap = music.createScaleMap(keySignature);

    tickPositions.forEach(tick => {
      const notes = tickNoteMap[tick];

      // Array to store all pitches that modified accidental states
      // at this tick position
      const modifiedPitches = [];

      const processNote = (note) => {
        if (note.isRest() || note.shouldIgnoreTicks()) return;

        // Go through each key and determine if an accidental should be
        // applied
        note.keys.forEach((keyString, keyIndex) => {
          const key = music.getNoteParts(keyString.split('/')[0]);

          // Force a natural for every key without an accidental
          const accidentalString = key.accidental || 'n';
          const pitch = key.root + accidentalString;

          // Determine if the current pitch has the same accidental
          // as the scale state
          const sameAccidental = scaleMap[key.root] === pitch;

          // Determine if an identical pitch in the chord already
          // modified the accidental state
          const previouslyModified = modifiedPitches.indexOf(pitch) > -1;

          // Add the accidental to the StaveNote
          if (!sameAccidental || (sameAccidental && previouslyModified)) {
            // Modify the scale map so that the root pitch has an
            // updated state
            scaleMap[key.root] = pitch;

            // Create the accidental
            const accidental = new Accidental(accidentalString);

            // Attach the accidental to the StaveNote
            note.addAccidental(keyIndex, accidental);

            // Add the pitch to list of pitches that modified accidentals
            modifiedPitches.push(pitch);
          }
        });

        // process grace notes
        note.getModifiers().forEach(modifier => {
          if (modifier.getCategory() === 'gracenotegroups') {
            modifier.getGraceNotes().forEach(processNote);
          }
        });
      };

      notes.forEach(processNote);
    });
  }

  // Create accidental. `type` can be a value from the
  // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For
  // example: `#`, `##`, `b`, `n`, etc.
  constructor(type = null) {
    super();
    this.setAttribute('type', 'Accidental');

    L('New accidental: ', type);

    this.note = null;
    // The `index` points to a specific note in a chord.
    this.index = null;
    this.type = type;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_4__.Modifier.Position.LEFT;

    this.render_options = {
      // Font size for glyphs
      font_scale: 38,

      // Length of stroke across heads above or below the stave.
      stroke_px: 3,

      // Padding between accidental and parentheses on each side
      parenLeftPadding: 2,
      parenRightPadding: 2,
    };

    this.accidental = _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.accidentalCodes(this.type);
    if (!this.accidental) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ArgumentError', `Unknown accidental type: ${type}`);
    }

    // Cautionary accidentals have parentheses around them
    this.cautionary = false;
    this.parenLeft = null;
    this.parenRight = null;

    this.reset();
  }

  reset() {
    const fontScale = this.render_options.font_scale;
    this.glyph = new _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph(this.accidental.code, fontScale);
    this.glyph.setOriginX(1.0);

    if (this.cautionary) {
      this.parenLeft = new _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph(_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.accidentalCodes('{').code, fontScale);
      this.parenRight = new _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph(_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.accidentalCodes('}').code, fontScale);
      this.parenLeft.setOriginX(1.0);
      this.parenRight.setOriginX(1.0);
    }
  }

  getCategory() { return Accidental.CATEGORY; }

  getWidth() {
    const parenWidth = this.cautionary
      ? (
        getGlyphWidth(this.parenLeft) +
        getGlyphWidth(this.parenRight) +
        this.render_options.parenLeftPadding +
        this.render_options.parenRightPadding
      )
      : 0;

    return getGlyphWidth(this.glyph) + parenWidth;
  }

  // Attach this accidental to `note`, which must be a `StaveNote`.
  setNote(note) {
    if (!note) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ArgumentError', `Bad note value: ${note}`);
    }

    this.note = note;

    // Accidentals attached to grace notes are rendered smaller.
    if (this.note.getCategory() === 'gracenotes') {
      this.render_options.font_scale = 25;
      this.reset();
    }
  }

  // If called, draws parenthesis around accidental.
  setAsCautionary() {
    this.cautionary = true;
    this.render_options.font_scale = 28;
    this.reset();
    return this;
  }

  // Render accidental onto canvas.
  draw() {
    const {
      context,
      type, position, note, index, cautionary,
      x_shift, y_shift,
      glyph, parenLeft, parenRight,
      render_options: { parenLeftPadding, parenRightPadding },
    } = this;

    this.checkContext();

    if (!(note && (index != null))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw accidental without a note and index.");
    }

    // Figure out the start `x` and `y` coordinates for note and index.
    const start = note.getModifierStartXY(position, index);
    let accX = start.x + x_shift;
    const accY = start.y + y_shift;
    L('Rendering: ', type, accX, accY);

    if (!cautionary) {
      glyph.render(context, accX, accY);
    } else {
      // Render the accidental in parentheses.
      parenRight.render(context, accX, accY);
      accX -= getGlyphWidth(parenRight);
      accX -= parenRightPadding;
      accX -= this.accidental.parenRightPaddingAdjustment;
      glyph.render(context, accX, accY);
      accX -= getGlyphWidth(glyph);
      accX -= parenLeftPadding;
      parenLeft.render(context, accX, accY);
    }

    this.setRendered();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/annotation.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/annotation.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Annotation: () => (/* binding */ Annotation)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements text annotations as modifiers that can be attached to
// notes.
//
// See `tests/annotation_tests.js` for usage examples.





// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.
function L(...args) { if (Annotation.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Annotation', args); }

class Annotation extends _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier {
  static get CATEGORY() { return 'annotations'; }

  // Text annotations can be positioned and justified relative to the note.
  static get Justify() {
    return {
      LEFT: 1,
      CENTER: 2,
      RIGHT: 3,
      CENTER_STEM: 4,
    };
  }

  static get JustifyString() {
    return {
      left: Annotation.Justify.LEFT,
      right: Annotation.Justify.RIGHT,
      center: Annotation.Justify.CENTER,
      centerStem: Annotation.Justify.CENTER_STEM,
    };
  }

  static get VerticalJustify() {
    return {
      TOP: 1,
      CENTER: 2,
      BOTTOM: 3,
      CENTER_STEM: 4,
    };
  }

  static get VerticalJustifyString() {
    return {
      above: Annotation.VerticalJustify.TOP,
      top: Annotation.VerticalJustify.TOP,
      below: Annotation.VerticalJustify.BOTTOM,
      bottom: Annotation.VerticalJustify.BOTTOM,
      center: Annotation.VerticalJustify.CENTER,
      centerStem: Annotation.VerticalJustify.CENTER_STEM,
    };
  }

  // Arrange annotations within a `ModifierContext`
  static format(annotations, state) {
    if (!annotations || annotations.length === 0) return false;

    let width = 0;
    for (let i = 0; i < annotations.length; ++i) {
      const annotation = annotations[i];
      width = Math.max(annotation.getWidth(), width);
      if (annotation.getPosition() === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE) {
        annotation.setTextLine(state.top_text_line);
        state.top_text_line++;
      } else {
        annotation.setTextLine(state.text_line);
        state.text_line++;
      }
    }

    state.left_shift += width / 2;
    state.right_shift += width / 2;
    return true;
  }

  // ## Prototype Methods
  //
  // Annotations inherit from `Modifier` and is positioned correctly when
  // in a `ModifierContext`.
  // Create a new `Annotation` with the string `text`.
  constructor(text) {
    super();
    this.setAttribute('type', 'Annotation');

    this.note = null;
    this.index = null;
    this.text = text;
    this.justification = Annotation.Justify.CENTER;
    this.vert_justification = Annotation.VerticalJustify.TOP;
    this.font = {
      family: 'Arial',
      size: 10,
      weight: '',
    };

    // The default width is calculated from the text.
    this.setWidth(_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.textWidth(text));
  }

  getCategory() { return Annotation.CATEGORY; }

  // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.
  setFont(family, size, weight) {
    this.font = { family, size, weight };
    return this;
  }

  // Set vertical position of text (above or below stave). `just` must be
  // a value in `Annotation.VerticalJustify`.
  setVerticalJustification(just) {
    this.vert_justification = typeof (just) === 'string'
      ? Annotation.VerticalJustifyString[just]
      : just;
    return this;
  }

  // Get and set horizontal justification. `justification` is a value in
  // `Annotation.Justify`.
  getJustification() { return this.justification; }
  setJustification(just) {
    this.justification = typeof (just) === 'string'
      ? Annotation.JustifyString[just]
      : just;
    return this;
  }

  // Render text beside the note.
  draw() {
    this.checkContext();

    if (!this.note) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'NoNoteForAnnotation', "Can't draw text annotation without an attached note."
      );
    }

    this.setRendered();
    const start = this.note.getModifierStartXY(_modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE,
      this.index);

    // We're changing context parameters. Save current state.
    this.context.save();
    this.context.setFont(this.font.family, this.font.size, this.font.weight);
    const text_width = this.context.measureText(this.text).width;

    // Estimate text height to be the same as the width of an 'm'.
    //
    // This is a hack to work around the inability to measure text height
    // in HTML5 Canvas (and SVG).
    const text_height = this.context.measureText('m').width;
    let x;
    let y;

    if (this.justification === Annotation.Justify.LEFT) {
      x = start.x;
    } else if (this.justification === Annotation.Justify.RIGHT) {
      x = start.x - text_width;
    } else if (this.justification === Annotation.Justify.CENTER) {
      x = start.x - text_width / 2;
    } else /* CENTER_STEM */ {
      x = this.note.getStemX() - text_width / 2;
    }

    let stem_ext;
    let spacing;
    const has_stem = this.note.hasStem();
    const stave = this.note.getStave();

    // The position of the text varies based on whether or not the note
    // has a stem.
    if (has_stem) {
      stem_ext = this.note.getStem().getExtents();
      spacing = stave.getSpacingBetweenLines();
    }

    if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {
      // HACK: We need to compensate for the text's height since its origin
      // is bottom-right.
      y = stave.getYForBottomText(this.text_line + _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.TEXT_HEIGHT_OFFSET_HACK);
      if (has_stem) {
        const stem_base = (this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY);
        y = Math.max(y, stem_base + (spacing * (this.text_line + 2)));
      }
    } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {
      const yt = this.note.getYForTopText(this.text_line) - 1;
      const yb = stave.getYForBottomText(this.text_line);
      y = yt + (yb - yt) / 2 + text_height / 2;
    } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {
      y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);
      if (has_stem) {
        y = Math.min(y, (stem_ext.topY - 5) - (spacing * this.text_line));
      }
    } else /* CENTER_STEM */ {
      const extents = this.note.getStemExtents();
      y = extents.topY + (extents.baseY - extents.topY) / 2 +
        text_height / 2;
    }

    L('Rendering annotation: ', this.text, x, y);
    this.context.fillText(this.text, x, y);
    this.context.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/articulation.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/articulation.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Articulation: () => (/* binding */ Articulation)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _tickcontext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tickcontext */ "./node_modules/vexflow/src/tickcontext.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Larry Kuhns.
//
// ## Description
//
// This file implements articulations and accents as modifiers that can be
// attached to notes. The complete list of articulations is available in
// `tables.js` under `Vex.Flow.articulationCodes`.
//
// See `tests/articulation_tests.js` for usage examples.








// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.
function L(...args) { if (Articulation.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Articulation', args); }

const { ABOVE, BELOW } = _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position;

const roundToNearestHalf = (mathFn, value) => mathFn(value / 0.5) * 0.5;

// This includes both staff and ledger lines
const isWithinLines = (line, position) => position === ABOVE ? line <= 5 : line >= 1;

const getRoundingFunction = (line, position) => {
  if (isWithinLines(line, position)) {
    if (position === ABOVE) {
      return Math.ceil;
    } else {
      return Math.floor;
    }
  } else {
    return Math.round;
  }
};

const snapLineToStaff = (canSitBetweenLines, line, position, offsetDirection) => {
  // Initially, snap to nearest staff line or space
  const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);
  const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);
  const onStaffLine = snappedLine % 1 === 0;

  if (canSnapToStaffSpace && onStaffLine) {
    const HALF_STAFF_SPACE = 0.5;
    return snappedLine + (HALF_STAFF_SPACE * -offsetDirection);
  } else {
    return snappedLine;
  }
};

const isStaveNote = (note) => {
  const noteCategory = note.getCategory();
  return noteCategory === 'stavenotes' || noteCategory === 'gracenotes';
};

const getTopY = (note, textLine) => {
  const stave = note.getStave();
  const stemDirection = note.getStemDirection();
  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();

  if (isStaveNote(note)) {
    if (note.hasStem()) {
      if (stemDirection === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP) {
        return stemTipY;
      } else {
        return stemBaseY;
      }
    } else {
      return Math.min(...note.getYs());
    }
  } else if (note.getCategory() === 'tabnotes') {
    if (note.hasStem()) {
      if (stemDirection === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP) {
        return stemTipY;
      } else {
        return stave.getYForTopText(textLine);
      }
    } else {
      return stave.getYForTopText(textLine);
    }
  } else {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
      'UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes'
    );
  }
};

const getBottomY = (note, textLine) => {
  const stave = note.getStave();
  const stemDirection = note.getStemDirection();
  const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();

  if (isStaveNote(note)) {
    if (note.hasStem()) {
      if (stemDirection === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP) {
        return stemBaseY;
      } else {
        return stemTipY;
      }
    } else {
      return Math.max(...note.getYs());
    }
  } else if (note.getCategory() === 'tabnotes') {
    if (note.hasStem()) {
      if (stemDirection === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP) {
        return stave.getYForBottomText(textLine);
      } else {
        return stemTipY;
      }
    } else {
      return stave.getYForBottomText(textLine);
    }
  } else {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
      'UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes'
    );
  }
};

// Gets the initial offset of the articulation from the y value of the starting position.
// This is required because the top/bottom text positions already have spacing applied to
// provide a "visually pleasent" default position. However the y values provided from
// the stavenote's top/bottom do *not* have any pre-applied spacing. This function
// normalizes this asymmetry.
const getInitialOffset = (note, position) => {
  const isOnStemTip = (
    (position === ABOVE && note.getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP) ||
    (position === BELOW && note.getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.DOWN)
  );

  if (isStaveNote(note)) {
    if (note.hasStem() && isOnStemTip) {
      return 0.5;
    } else {
      // this amount is larger than the stem-tip offset because we start from
      // the center of the notehead
      return 1;
    }
  } else {
    if (note.hasStem() && isOnStemTip) {
      return 1;
    } else {
      return 0;
    }
  }
};

class Articulation extends _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier {
  static get CATEGORY() { return 'articulations'; }
  static get INITIAL_OFFSET() { return -0.5; }

  // FIXME:
  // Most of the complex formatting logic (ie: snapping to space) is
  // actually done in .render(). But that logic belongs in this method.
  //
  // Unfortunately, this isn't possible because, by this point, stem lengths
  // have not yet been finalized. Finalized stem lengths are required to determine the
  // initial position of any stem-side articulation.
  //
  // This indicates that all objects should have their stave set before being
  // formatted. It can't be an optional if you want accurate vertical positioning.
  // Consistently positioned articulations that play nice with other modifiers
  // won't be possible until we stop relying on render-time formatting.
  //
  // Ideally, when this function has completed, the vertical articulation positions
  // should be ready to render without further adjustment. But the current state
  // is far from this ideal.
  static format(articulations, state) {
    if (!articulations || articulations.length === 0) return false;

    const isAbove = artic => artic.getPosition() === ABOVE;
    const isBelow = artic => artic.getPosition() === BELOW;
    const margin = 0.5;
    const getIncrement = (articulation, line, position) =>
      roundToNearestHalf(
        getRoundingFunction(line, position),
        (articulation.glyph.getMetrics().height / 10) + margin
      );

    articulations
      .filter(isAbove)
      .forEach(articulation => {
        articulation.setTextLine(state.top_text_line);
        state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);
      });

    articulations
      .filter(isBelow)
      .forEach(articulation => {
        articulation.setTextLine(state.text_line);
        state.text_line += getIncrement(articulation, state.text_line, BELOW);
      });

    const width = articulations
      .map(articulation => articulation.getWidth())
      .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));

    state.left_shift += width / 2;
    state.right_shift += width / 2;
    return true;
  }

  static easyScoreHook({ articulations }, note, builder) {
    if (!articulations) return;

    const articNameToCode = {
      staccato: 'a.',
      tenuto: 'a-',
    };

    articulations
      .split(',')
      .map(articString => articString.trim().split('.'))
      .map(([name, position]) => {
        const artic = { type: articNameToCode[name] };
        if (position) artic.position = _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.PositionString[position];
        return builder.getFactory().Articulation(artic);
      })
      .map(artic => note.addModifier(0, artic));
  }

  // Create a new articulation of type `type`, which is an entry in
  // `Vex.Flow.articulationCodes` in `tables.js`.
  constructor(type) {
    super();
    this.setAttribute('type', 'Articulation');

    this.note = null;
    this.index = null;
    this.type = type;
    this.position = BELOW;
    this.render_options = {
      font_scale: 38,
    };

    //VexFlowPatch
    this.breathMarkDistance = 0.8; // % distance to next note or end of stave (0.8 = 80%)
    this.articulation = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.articulationCodes(this.type);
    if (this.type === 'abr') { // breath mark. we could put this in tables.js:articulationCodes()
      this.articulation = { code: 'v6c', between_lines: false }; // v6c: breathmarkcomma
    }
    if (!this.articulation) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ArgumentError', `Articulation not found: ${this.type}`);
    }

    this.glyph = new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph(this.articulation.code, this.render_options.font_scale);

    this.setWidth(this.glyph.getMetrics().width);
  }

  getCategory() { return Articulation.CATEGORY; }

  // Render articulation in position next to note.
  draw() {
    const {
      note, index, position, glyph,
      articulation: { between_lines: canSitBetweenLines },
      text_line: textLine,
      context: ctx,
    } = this;

    this.checkContext();

    if (!note || index == null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw Articulation without a note and index.");
    }

    this.setRendered();

    const stave = note.getStave();
    const staffSpace = stave.getSpacingBetweenLines();
    const isTab = note.getCategory() === 'tabnotes';

    // Articulations are centered over/under the note head.
    let { x } = note.getModifierStartXY(position, index);
    // VexFlowPatch: breath mark support
    if (this.type === 'abr') { // breath mark
      let delayXShift = 0;
      // delay code similar to ornament.js delayed variable handling
      const noteTickContext = note.getTickContext();
      const nextContext = _tickcontext__WEBPACK_IMPORTED_MODULE_5__.TickContext.getNextContext(noteTickContext);
      const noteX = note.getTickContext().getX();
      if (nextContext) {
          delayXShift = (nextContext.getX() - noteX) * this.breathMarkDistance;
      } else {
          const stave = note.getStave();
          delayXShift = (stave.getX() + stave.getWidth() - noteX) * this.breathMarkDistance;
      }
      x += delayXShift;
    }
    const x_shift = this.getXShift();
    if (x_shift) {
      x += x_shift; // VexFlowPatch: support x_shift for breath_mark
    }
    const shouldSitOutsideStaff = !canSitBetweenLines || isTab;

    const initialOffset = getInitialOffset(note, position);

    let y = {
      [ABOVE]: () => {
        glyph.setOrigin(0.5, 1);
        const y = getTopY(note, textLine) - ((textLine + initialOffset) * staffSpace);
        return shouldSitOutsideStaff
          ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y)
          : y;
      },
      [BELOW]: () => {
        glyph.setOrigin(0.5, 0);
        const y = getBottomY(note, textLine) + ((textLine + initialOffset) * staffSpace);
        return shouldSitOutsideStaff
          ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y)
          : y;
      },
    }[position]();
    // VexFlowPatch: respect modifier.y_shift
    if (this.y_shift) {
        y += this.y_shift;
    }

    if (!isTab) {
      const offsetDirection = position === ABOVE ? -1 : +1;
      const noteLine = isTab ? note.positions[index].str : note.getKeyProps()[index].line;
      const distanceFromNote = (note.getYs()[index] - y) / staffSpace;
      const articLine = distanceFromNote + noteLine;
      const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);

      if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);

      y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;
    }

    L(`Rendering articulation at (x: ${x}, y: ${y})`);

    glyph.render(ctx, x, y);
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/barnote.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/barnote.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BarNote: () => (/* binding */ BarNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _stavebarline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavebarline */ "./node_modules/vexflow/src/stavebarline.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can
// be added to a voice and rendered in the middle of a stave. Since it has no
// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.
//
// See `tests/barnote_tests.js` for usage examples.





// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.
function L(...args) { if (BarNote.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.BarNote', args); }

class BarNote extends _note__WEBPACK_IMPORTED_MODULE_1__.Note {
  constructor(type = _stavebarline__WEBPACK_IMPORTED_MODULE_2__.Barline.type.SINGLE) {
    super({ duration: 'b' });
    this.setAttribute('type', 'BarNote');

    this.metrics = {
      widths: {},
    };

    const TYPE = _stavebarline__WEBPACK_IMPORTED_MODULE_2__.Barline.type;
    this.metrics.widths = {
      [TYPE.SINGLE]: 8,
      [TYPE.DOUBLE]: 12,
      [TYPE.END]: 15,
      [TYPE.REPEAT_BEGIN]: 14,
      [TYPE.REPEAT_END]: 14,
      [TYPE.REPEAT_BOTH]: 18,
      [TYPE.NONE]: 0,
    };

    // Tell the formatter that bar notes have no duration.
    this.ignore_ticks = true;
    this.setType(type);
  }

  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.
  getType() { return this.type; }
  setType(type) {
    this.type = typeof(type) === 'string'
      ? _stavebarline__WEBPACK_IMPORTED_MODULE_2__.Barline.typeString[type]
      : type;

    // Set width to width of relevant `Barline`.
    this.setWidth(this.metrics.widths[this.type]);
    return this;
  }

  getBoundingBox() {
    return super.getBoundingBox();
  }

  addToModifierContext() {
    /* overridden to ignore */
    return this;
  }

  preFormat() {
    /* overridden to ignore */
    this.setPreFormatted(true);
    return this;
  }

  // Render note to stave.
  draw() {
    this.checkContext();
    if (!this.stave) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't draw without a stave.");
    L('Rendering bar line at: ', this.getAbsoluteX());
    const barline = new _stavebarline__WEBPACK_IMPORTED_MODULE_2__.Barline(this.type);
    barline.setX(this.getAbsoluteX());
    barline.draw(this.stave);
    this.setRendered();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/beam.js":
/*!******************************************!*\
  !*** ./node_modules/vexflow/src/beam.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Beam: () => (/* binding */ Beam)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tuplet */ "./node_modules/vexflow/src/tuplet.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements `Beams` that span over a set of `StemmableNotes`.








function calculateStemDirection(notes) {
  let lineSum = 0;
  notes.forEach(note => {
    if (note.keyProps) {
      note.keyProps.forEach(keyProp => {
        lineSum += (keyProp.line - 3);
      });
    }
  });

  if (lineSum >= 0) {
    return _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN;
  }
  return _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP;
}

const getStemSlope = (firstNote, lastNote) => {
  const firstStemTipY = firstNote.getStemExtents().topY;
  const firstStemX = firstNote.getStemX();
  const lastStemTipY = lastNote.getStemExtents().topY;
  const lastStemX = lastNote.getStemX();
  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);
};

const BEAM_LEFT = 'L';
const BEAM_RIGHT = 'R';
const BEAM_BOTH = 'B';

class Beam extends _element__WEBPACK_IMPORTED_MODULE_2__.Element {
  // Gets the default beam groups for a provided time signature.
  // Attempts to guess if the time signature is not found in table.
  // Currently this is fairly naive.
  static getDefaultBeamGroups(time_sig) {
    if (!time_sig || time_sig === 'c') {
      time_sig = '4/4';
    }

    const defaults = {
      '1/2': ['1/2'],
      '2/2': ['1/2'],
      '3/2': ['1/2'],
      '4/2': ['1/2'],

      '1/4': ['1/4'],
      '2/4': ['1/4'],
      '3/4': ['1/4'],
      '4/4': ['1/4'],

      '1/8': ['1/8'],
      '2/8': ['2/8'],
      '3/8': ['3/8'],
      '4/8': ['2/8'],

      '1/16': ['1/16'],
      '2/16': ['2/16'],
      '3/16': ['3/16'],
      '4/16': ['2/16'],
    };

    const groups = defaults[time_sig];

    if (groups === undefined) {
      // If no beam groups found, naively determine
      // the beam groupings from the time signature
      const beatTotal = parseInt(time_sig.split('/')[0], 10);
      const beatValue = parseInt(time_sig.split('/')[1], 10);

      const tripleMeter = beatTotal % 3 === 0;

      if (tripleMeter) {
        return [new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(3, beatValue)];
      } else if (beatValue > 4) {
        return [new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(2, beatValue)];
      } else if (beatValue <= 4) {
        return [new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(1, beatValue)];
      }
    } else {
      return groups.map(group => new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction().parse(group));
    }

    return [new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(1, 4)];
  }

  // A helper function to automatically build basic beams for a voice. For more
  // complex auto-beaming use `Beam.generateBeams()`.
  //
  // Parameters:
  // * `voice` - The voice to generate the beams for
  // * `stem_direction` - A stem direction to apply to the entire voice
  // * `groups` - An array of `Fraction` representing beat groupings for the beam
  static applyAndGetBeams(voice, stem_direction, groups) {
    return Beam.generateBeams(voice.getTickables(), {
      groups,
      stem_direction,
    });
  }

  // A helper function to autimatically build beams for a voice with
  // configuration options.
  //
  // Example configuration object:
  //
  // ```
  // config = {
  //   groups: [new Vex.Flow.Fraction(2, 8)],
  //   stem_direction: -1,
  //   beam_rests: true,
  //   beam_middle_only: true,
  //   show_stemlets: false
  // };
  // ```
  //
  // Parameters:
  // * `notes` - An array of notes to create the beams for
  // * `config` - The configuration object
  //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes
  //    * `stem_direction` - Set to apply the same direction to all notes
  //    * `beam_rests` - Set to `true` to include rests in the beams
  //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat
  //    * `show_stemlets` - Set to `true` to draw stemlets for rests
  //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions
  //
  static generateBeams(notes, config) {
    if (!config) config = {};

    if (!config.groups || !config.groups.length) {
      config.groups = [new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(2, 8)];
    }

    // Convert beam groups to tick amounts
    const tickGroups = config.groups.map(group => {
      if (!group.multiply) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('InvalidBeamGroups',
          'The beam groups must be an array of Vex.Flow.Fractions');
      }
      return group.clone().multiply(_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.RESOLUTION, 1);
    });

    const unprocessedNotes = notes;
    let currentTickGroup = 0;
    let noteGroups = [];
    let currentGroup = [];

    function getTotalTicks(vf_notes) {
      return vf_notes.reduce((memo, note) => note.getTicks().clone().add(memo), new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(0, 1));
    }

    function nextTickGroup() {
      if (tickGroups.length - 1 > currentTickGroup) {
        currentTickGroup += 1;
      } else {
        currentTickGroup = 0;
      }
    }

    function createGroups() {
      let nextGroup = [];

      unprocessedNotes.forEach(unprocessedNote => {
        nextGroup = [];
        if (unprocessedNote.shouldIgnoreTicks()) {
          noteGroups.push(currentGroup);
          currentGroup = nextGroup;
          return; // Ignore untickables (like bar notes)
        }

        currentGroup.push(unprocessedNote);
        const ticksPerGroup = tickGroups[currentTickGroup].clone();
        const totalTicks = getTotalTicks(currentGroup);

        // Double the amount of ticks in a group, if it's an unbeamable tuplet
        const unbeamable = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToNumber(unprocessedNote.duration) < 8;
        if (unbeamable && unprocessedNote.tuplet) {
          ticksPerGroup.numerator *= 2;
        }

        // If the note that was just added overflows the group tick total
        if (totalTicks.greaterThan(ticksPerGroup)) {
          // If the overflow note can be beamed, start the next group
          // with it. Unbeamable notes leave the group overflowed.
          if (!unbeamable) {
            nextGroup.push(currentGroup.pop());
          }
          noteGroups.push(currentGroup);
          currentGroup = nextGroup;
          nextTickGroup();
        } else if (totalTicks.equals(ticksPerGroup)) {
          noteGroups.push(currentGroup);
          currentGroup = nextGroup;
          nextTickGroup();
        }
      });

      // Adds any remainder notes
      if (currentGroup.length > 0) {
        noteGroups.push(currentGroup);
      }
    }

    function getBeamGroups() {
      return noteGroups.filter(group => {
        if (group.length > 1) {
          let beamable = true;
          group.forEach(note => {
            if (note.getIntrinsicTicks() >= _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks('4')) {
              beamable = false;
            }
          });
          return beamable;
        }
        return false;
      });
    }

    // Splits up groups by Rest
    function sanitizeGroups() {
      const sanitizedGroups = [];
      noteGroups.forEach(group => {
        let tempGroup = [];
        group.forEach((note, index, group) => {
          const isFirstOrLast = index === 0 || index === group.length - 1;
          const prevNote = group[index - 1];

          const breaksOnEachRest = !config.beam_rests && note.isRest();
          const breaksOnFirstOrLastRest = (config.beam_rests &&
            config.beam_middle_only && note.isRest() && isFirstOrLast);

          let breakOnStemChange = false;
          if (config.maintain_stem_directions && prevNote &&
            !note.isRest() && !prevNote.isRest()) {
            const prevDirection = prevNote.getStemDirection();
            const currentDirection = note.getStemDirection();
            breakOnStemChange = currentDirection !== prevDirection;
          }

          const isUnbeamableDuration = parseInt(note.duration, 10) < 8;

          // Determine if the group should be broken at this note
          const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest ||
            breakOnStemChange || isUnbeamableDuration;

          if (shouldBreak) {
            // Add current group
            if (tempGroup.length > 0) {
              sanitizedGroups.push(tempGroup);
            }

            // Start a new group. Include the current note if the group
            // was broken up by stem direction, as that note needs to start
            // the next group of notes
            tempGroup = breakOnStemChange ? [note] : [];
          } else {
            // Add note to group
            tempGroup.push(note);
          }
        });

        // If there is a remaining group, add it as well
        if (tempGroup.length > 0) {
          sanitizedGroups.push(tempGroup);
        }
      });

      noteGroups = sanitizedGroups;
    }

    function formatStems() {
      noteGroups.forEach(group => {
        let stemDirection;
        if (config.maintain_stem_directions) {
          const note = findFirstNote(group);
          stemDirection = note ? note.getStemDirection() : _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP;
        } else {
          if (config.stem_direction) {
            stemDirection = config.stem_direction;
          } else {
            stemDirection = calculateStemDirection(group);
          }
        }
        applyStemDirection(group, stemDirection);
      });
    }

    function findFirstNote(group) {
      for (let i = 0; i < group.length; i++) {
        const note = group[i];
        if (!note.isRest()) {
          return note;
        }
      }

      return false;
    }

    function applyStemDirection(group, direction) {
      group.forEach(note => {
        note.setStemDirection(direction);
      });
    }

    // Get all of the tuplets in all of the note groups
    function getTuplets() {
      const uniqueTuplets = [];

      // Go through all of the note groups and inspect for tuplets
      noteGroups.forEach(group => {
        let tuplet = null;
        group.forEach(note => {
          if (note.tuplet && (tuplet !== note.tuplet)) {
            tuplet = note.tuplet;
            uniqueTuplets.push(tuplet);
          }
        });
      });
      return uniqueTuplets;
    }


    // Using closures to store the variables throughout the various functions
    // IMO Keeps it this process lot cleaner - but not super consistent with
    // the rest of the API's style - Silverwolf90 (Cyril)
    createGroups();
    sanitizeGroups();
    formatStems();

    // Get the notes to be beamed
    const beamedNoteGroups = getBeamGroups();

    // Get the tuplets in order to format them accurately
    const allTuplets = getTuplets();

    // Create a Vex.Flow.Beam from each group of notes to be beamed
    const beams = [];
    beamedNoteGroups.forEach(group => {
      const beam = new Beam(group);

      if (config.show_stemlets) {
        beam.render_options.show_stemlets = true;
      }
      if (config.secondary_breaks) {
        beam.render_options.secondary_break_ticks = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks(config.secondary_breaks);
      }
      if (config.flat_beams === true) {
        beam.render_options.flat_beams = true;
        beam.render_options.flat_beam_offset = config.flat_beam_offset;
      }
      beams.push(beam);
    });

    // Reformat tuplets
    allTuplets.forEach(tuplet => {
      // Set the tuplet location based on the stem direction
      const direction = tuplet.notes[0].stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN ?
        _tuplet__WEBPACK_IMPORTED_MODULE_4__.Tuplet.LOCATION_BOTTOM : _tuplet__WEBPACK_IMPORTED_MODULE_4__.Tuplet.LOCATION_TOP;
      tuplet.setTupletLocation(direction);

      // If any of the notes in the tuplet are not beamed, draw a bracket.
      let bracketed = false;
      for (let i = 0; i < tuplet.notes.length; i++) {
        const note = tuplet.notes[i];
        if (note.beam === null) {
          bracketed = true;
          break;
        }
      }
      tuplet.setBracketed(bracketed);
    });

    return beams;
  }

  constructor(notes, auto_stem) {
    super();
    this.setAttribute('type', 'Beam');

    if (!notes || notes === []) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments', 'No notes provided for beam.');
    }

    if (notes.length === 1) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments', 'Too few notes for beam.');
    }

    // Validate beam line, direction and ticks.
    this.ticks = notes[0].getIntrinsicTicks();

    if (this.ticks >= _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks('4')) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments',
        'Beams can only be applied to notes shorter than a quarter note.');
    }

    let i; // shared iterator
    let note;

    this.stem_direction = _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP;

    for (i = 0; i < notes.length; ++i) {
      note = notes[i];
      if (note.hasStem()) {
        this.stem_direction = note.getStemDirection();
        break;
      }
    }

    let stem_direction = this.stem_direction;
    // Figure out optimal stem direction based on given notes
    if (auto_stem && notes[0].getCategory() === 'stavenotes') {
      stem_direction = calculateStemDirection(notes);
    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {
      // Auto Stem TabNotes
      const stem_weight = notes.reduce((memo, note) => memo + note.stem_direction, 0);

      stem_direction = stem_weight > -1 ? _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP : _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN;
    }

    // Apply stem directions and attach beam to notes
    for (i = 0; i < notes.length; ++i) {
      note = notes[i];
      if (auto_stem) {
        note.setStemDirection(stem_direction);
        this.stem_direction = stem_direction;
      }
      note.setBeam(this);
    }

    this.postFormatted = false;
    this.notes = notes;
    this.beam_count = this.getBeamCount();
    this.break_on_indices = [];
    this.render_options = {
      beam_width: 5,
      max_slope: 0.25,
      min_slope: -0.25,
      slope_iterations: 20,
      slope_cost: 100,
      show_stemlets: false,
      stemlet_extension: 7,
      partial_beam_length: 10,
      flat_beams: false,
      min_flat_beam_offset: 15,
    };
  }

  // Get the notes in this beam
  getNotes() { return this.notes; }

  // Get the max number of beams in the set of notes
  getBeamCount() {
    const beamCounts = this.notes.map(note => note.getGlyph().beam_count);

    const maxBeamCount = beamCounts.reduce((max, beamCount) => beamCount > max ? beamCount : max);

    return maxBeamCount;
  }

  // Set which note `indices` to break the secondary beam at
  breakSecondaryAt(indices) {
    this.break_on_indices = indices;
    return this;
  }

  // Return the y coordinate for linear function
  getSlopeY(x, first_x_px, first_y_px, slope) {
    return first_y_px + ((x - first_x_px) * slope);
  }

  // Calculate the best possible slope for the provided notes
  calculateSlope() {
    const {
      notes,
      stem_direction: stemDirection,
      render_options: { max_slope, min_slope, slope_iterations, slope_cost },
    } = this;

    const firstNote = notes[0];
    const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);
    const increment = (max_slope - min_slope) / slope_iterations;
    let minCost = Number.MAX_VALUE;
    let bestSlope = 0;
    let yShift = 0;

    // iterate through slope values to find best weighted fit
    for (let slope = min_slope; slope <= max_slope; slope += increment) {
      let totalStemExtension = 0;
      let yShiftTemp = 0;

      // iterate through notes, calculating y shift and stem extension
      for (let i = 1; i < notes.length; ++i) {
        const note = notes[i];
        const adjustedStemTipY = this.getSlopeY(
          note.getStemX(),
          firstNote.getStemX(),
          firstNote.getStemExtents().topY,
          slope
        ) + yShiftTemp;

        const stemTipY = note.getStemExtents().topY;
        // beam needs to be shifted up to accommodate note
        if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {
          const diff = Math.abs(stemTipY - adjustedStemTipY);
          yShiftTemp += diff * -stemDirection;
          totalStemExtension += diff * i;
        } else { // beam overshoots note, account for the difference
          totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;
        }
      }

      // most engraving books suggest aiming for a slope about half the angle of the
      // difference between the first and last notes' stem length;
      const idealSlope = initialSlope / 2;
      const distanceFromIdeal = Math.abs(idealSlope - slope);

      // This tries to align most beams to something closer to the idealSlope, but
      // doesn't go crazy. To disable, set this.render_options.slope_cost = 0
      const cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);

      // update state when a more ideal slope is found
      if (cost < minCost) {
        minCost = cost;
        bestSlope = slope;
        yShift = yShiftTemp;
      }
    }

    this.slope = bestSlope;
    this.y_shift = yShift;
  }

  // Calculate a slope and y-shift for flat beams
  calculateFlatSlope() {
    const {
      notes, stem_direction,
      render_options: { beam_width, min_flat_beam_offset, flat_beam_offset },
    } = this;

    // If a flat beam offset has not yet been supplied or calculated,
    // generate one based on the notes in this particular note group
    let total = 0;
    let extremeY = 0;  // Store the highest or lowest note here
    let extremeBeamCount = 0;  // The beam count of the extreme note
    let currentExtreme = 0;
    for (let i = 0; i < notes.length; i++) {
      // Total up all of the offsets so we can average them out later
      const note = notes[i];
      const stemTipY = note.getStemExtents().topY;
      total += stemTipY;

      // Store the highest (stems-up) or lowest (stems-down) note so the
      //  offset can be adjusted in case the average isn't enough
      if (stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN && currentExtreme < stemTipY) {
        currentExtreme = stemTipY;
        extremeY = Math.max(...note.getYs());
        extremeBeamCount = note.getBeamCount();
      } else if (
        stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)
      ) {
        currentExtreme = stemTipY;
        extremeY = Math.min(...note.getYs());
        extremeBeamCount = note.getBeamCount();
      }
    }

    // Average the offsets to try and come up with a reasonable one that
    //  works for all of the notes in the beam group.
    let offset = total / notes.length;

    // In case the average isn't long enough, add or subtract some more
    //  based on the highest or lowest note (again, based on the stem
    //  direction). This also takes into account the added height due to
    //  the width of the beams.
    const beamWidth = beam_width * 1.5;
    const extremeTest = min_flat_beam_offset + (extremeBeamCount * beamWidth);
    const newOffset = extremeY + (extremeTest * -stem_direction);
    if (stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN && offset < newOffset) {
      offset = extremeY + extremeTest;
    } else if (stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP && offset > newOffset) {
      offset = extremeY - extremeTest;
    }

    if (!(flat_beam_offset + this.render_options.flat_beam_offset_per_beam > 0)) {
      // Set the offset for the group based on the calculations above.
      this.render_options.flat_beam_offset = offset;
    } else if (stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.DOWN && offset > flat_beam_offset && !this.render_options.flat_beams) {
       this.render_options.flat_beam_offset = offset;
    } else if (stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP && offset < flat_beam_offset && !this.render_options.flat_beams) {
       this.render_options.flat_beam_offset = offset;
    }

    // for flat beams, the slope and y_shift are simply 0
    this.slope = 0;
    this.y_shift = 0;
  }

  getBeamYToDraw() {
    const firstNote = this.notes[0];
    const firstStemTipY = firstNote.getStemExtents().topY;
    let beamY = firstStemTipY;

    // For flat beams, set the first and last Y to the offset, rather than
    //  using the note's stem extents.
    if (this.render_options.flat_beams && this.render_options.flat_beam_offset + this.render_options.flat_beam_offset_per_beam > 0) {
        let offset = this.render_options.flat_beam_offset;
        if (this.render_options.flat_beam_offset_per_beam) {
            offset += this.render_options.flat_beam_offset_per_beam * this.getBeamCount();
        }
        let maxY = this.notes[0].note_heads[0].y;
        const minOrMax = this.stem_direction > 0 ? Math.min : Math.max;
        for (const note of this.notes) {
            for (const note_head of note.note_heads) {
                maxY = minOrMax(maxY, note_head.y);
            }
        }
      beamY = maxY + (offset * -this.stem_direction);
    }
    return beamY;
  }

  // Create new stems for the notes in the beam, so that each stem
  // extends into the beams.
  applyStemExtensions() {
    const {
      notes, slope, y_shift, stem_direction, beam_count,
      render_options: {
        show_stemlets,
        stemlet_extension,
        beam_width,
      },
    } = this;

    const firstNote = notes[0];
    const firstStemTipY = this.getBeamYToDraw();
    const firstStemX = firstNote.getStemX();

    for (let i = 0; i < notes.length; ++i) {
      const note = notes[i];
      const stemX = note.getStemX();
      const { topY: stemTipY } = note.getStemExtents();
      const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;
      const preBeamExtension = note.getStem().getExtension();
      const beamExtension = stem_direction === _stem__WEBPACK_IMPORTED_MODULE_5__.Stem.UP
        ? stemTipY - beamedStemTipY
        : beamedStemTipY - stemTipY;

      note.stem.setExtension(preBeamExtension + beamExtension);
      note.stem.renderHeightAdjustment = -_stem__WEBPACK_IMPORTED_MODULE_5__.Stem.WIDTH / 2;

      if (note.isRest() && show_stemlets) {
        const beamWidth = beam_width;
        const totalBeamWidth = ((beam_count - 1) * beamWidth * 1.5) + beamWidth;
        note.stem
          .setVisibility(true)
          .setStemlet(true, totalBeamWidth + stemlet_extension);
      }
    }
  }

  // return upper level beam direction.
  lookupBeamDirection(duration, prev_tick, tick, next_tick) {
    if (duration === '4') {
      return BEAM_LEFT;
    }

    const lookup_duration =  `${_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToNumber(duration) / 2}`;
    const prev_note_gets_beam = prev_tick < _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks(lookup_duration);
    const next_note_gets_beam = next_tick < _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks(lookup_duration);
    const note_gets_beam = tick < _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks(lookup_duration);

    if (prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {
      return BEAM_BOTH;
    } else if (prev_note_gets_beam && !next_note_gets_beam && note_gets_beam) {
      return BEAM_LEFT;
    } else if (!prev_note_gets_beam && next_note_gets_beam && note_gets_beam) {
      return BEAM_RIGHT;
    }

    return this.lookupBeamDirection(lookup_duration, prev_tick, tick, next_tick);
  }

  // Get the x coordinates for the beam lines of specific `duration`
  getBeamLines(duration) {
    const tick_of_duration = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToTicks(duration);
    const beam_lines = [];
    let beam_started = false;
    let current_beam = null;
    const partial_beam_length = this.render_options.partial_beam_length;
    let previous_should_break = false;
    let tick_tally = 0;
    for (let i = 0; i < this.notes.length; ++i) {
      const note = this.notes[i];

      // See if we need to break secondary beams on this note.
      const ticks = note.ticks.value();
      tick_tally += ticks;
      let should_break = false;

      // 8th note beams are always drawn.
      if (parseInt(duration, 10) >= 8) {
        // First, check to see if any indices were set up through breakSecondaryAt()
        should_break = this.break_on_indices.indexOf(i) !== -1;

        // If the secondary breaks were auto-configured in the render options,
        //  handle that as well.
        if (this.render_options.secondary_break_ticks && tick_tally >=
          this.render_options.secondary_break_ticks) {
          tick_tally = 0;
          should_break = true;
        }
      }
      const note_gets_beam = note.getIntrinsicTicks() < tick_of_duration;

      const stem_x = note.getStemX() - (_stem__WEBPACK_IMPORTED_MODULE_5__.Stem.WIDTH / 2);

      // Check to see if the next note in the group will get a beam at this
      //  level. This will help to inform the partial beam logic below.
      const prev_note = this.notes[i - 1];
      const next_note = this.notes[i + 1];
      const next_note_gets_beam = next_note && next_note.getIntrinsicTicks() < tick_of_duration;
      const prev_note_gets_beam = prev_note && prev_note.getIntrinsicTicks() < tick_of_duration;
      const beam_alone = prev_note && next_note &&
      note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;
      // const beam_alone = note_gets_beam && !prev_note_gets_beam && !next_note_gets_beam;
      if (note_gets_beam) {
        // This note gets a beam at the current level
        if (beam_started) {
          // We're currently in the middle of a beam. Just continue it on to
          //  the stem X of the current note.
          current_beam = beam_lines[beam_lines.length - 1];
          current_beam.end = stem_x;

          // If a secondary beam break is set up, end the beam right now.
          if (should_break) {
            beam_started = false;
            if (next_note && !next_note_gets_beam && current_beam.end === null) {
              // This note gets a beam,.but the next one does not. This means
              //  we need a partial pointing right.
              current_beam.end = current_beam.start - partial_beam_length;
            }
          }
        } else {
          // No beam started yet. Start a new one.
          current_beam = { start: stem_x, end: null, start_note: note };
          beam_started = true;

          if (beam_alone) {
            // previous and next beam exists and does not get a beam but current gets it.
            const prev_tick = prev_note.getIntrinsicTicks();
            const next_tick = next_note.getIntrinsicTicks();
            const tick = note.getIntrinsicTicks();
            const beam_direction = this.lookupBeamDirection(duration, prev_tick, tick, next_tick);

            if ([BEAM_LEFT, BEAM_BOTH].includes(beam_direction)) {
              current_beam.end = current_beam.start - partial_beam_length;
            } else {
              current_beam.end = current_beam.start + partial_beam_length;
            }
          } else if (!next_note_gets_beam) {
            // The next note doesn't get a beam. Draw a partial.
            if ((previous_should_break || i === 0) && next_note) {
              // This is the first note (but not the last one), or it is
              //  following a secondary break. Draw a partial to the right.
              current_beam.end = current_beam.start + partial_beam_length;
            } else {
              // By default, draw a partial to the left.
              current_beam.end = current_beam.start - partial_beam_length;
            }
          } else if (should_break) {
            // This note should have a secondary break after it. Even though
            //  we just started a beam, it needs to end immediately.
            current_beam.end = current_beam.start - partial_beam_length;
            beam_started = false;
          }
          beam_lines.push(current_beam);
        }
      } else {
        // The current note does not get a beam.
        beam_started = false;
      }

      // Store the secondary break flag to inform the partial beam logic in
      //  the next iteration of the loop.
      previous_should_break = should_break;
    }

    // Add a partial beam pointing left if this is the last note in the group
    const last_beam = beam_lines[beam_lines.length - 1];
    if (last_beam && last_beam.end === null) {
      last_beam.end = last_beam.start - partial_beam_length;
    }
    return beam_lines;
  }

  // Render the stems for each notes
  drawStems() {
    this.notes.forEach(note => {
      if (note.getStem()) {
        this.context.openGroup('stem', note.getAttribute('id') + '-stem');
        note.getStem().setContext(this.context).draw();
        this.context.closeGroup();
      }
    }, this);
  }

  // Render the beam lines
  drawBeamLines() {
    this.checkContext();

    const valid_beam_durations = ['4', '8', '16', '32', '64'];

    const firstNote = this.notes[0];
    let beamY = this.getBeamYToDraw();
    const firstStemX = firstNote.getStemX();
    const beamThickness = this.render_options.beam_width * this.stem_direction;

    const beamsPerStartNote = {};
    for (const note of this.notes) {
      beamsPerStartNote[note.getAttribute("id")] = 0;
    }
    
    // Draw the beams.
    for (let i = 0; i < valid_beam_durations.length; ++i) {
      const duration = valid_beam_durations[i];
      const beamLines = this.getBeamLines(duration);
      
      for (let j = 0; j < beamLines.length; ++j) {
        const beam_line = beamLines[j];
        const startBeamX = beam_line.start;

        const startNoteId = beam_line.start_note.getAttribute("id");
        const beamNumber = beamsPerStartNote[startNoteId];
        beamsPerStartNote[startNoteId]++;

        const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);
        const lastBeamX = beam_line.end;
        const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);

        const noteSVGId = startNoteId;
        this.context.openGroup('beam', `${noteSVGId}-beam${beamNumber}`);
        this.context.beginPath();
        this.context.moveTo(startBeamX, startBeamY);
        this.context.lineTo(startBeamX, startBeamY + beamThickness);
        this.context.lineTo(lastBeamX + 1, lastBeamY + beamThickness);
        this.context.lineTo(lastBeamX + 1, lastBeamY);
        this.context.closePath();
        this.context.fill();
        this.context.closeGroup();
      }

      beamY += beamThickness * 1.5;
    }
  }

  // Pre-format the beam
  preFormat() { return this; }

  // Post-format the beam. This can only be called after
  // the notes in the beam have both `x` and `y` values. ie: they've
  // been formatted and have staves
  postFormat() {
    if (this.postFormatted) return;

    // Calculate a smart slope if we're not forcing the beams to be flat.
    if (this.notes[0].getCategory() === 'tabnotes' || this.render_options.flat_beams) {
      this.calculateFlatSlope();
    } else {
      this.calculateSlope();
    }
    this.applyStemExtensions();

    this.postFormatted = true;
  }

  // Render the beam to the canvas context
  draw() {
    this.checkContext();
    this.setRendered();
    if (this.unbeamable) return;

    if (!this.postFormatted) {
      this.postFormat();
    }

    this.drawStems();
    this.applyStyle();
    this.drawBeamLines();
    this.restoreStyle();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/bend.js":
/*!******************************************!*\
  !*** ./node_modules/vexflow/src/bend.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Bend: () => (/* binding */ Bend)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements tablature bends.




/**
   @param text Text for bend ("Full", "Half", etc.) (DEPRECATED)
   @param release If true, render a release. (DEPRECATED)
   @param phrase If set, ignore "text" and "release", and use the more
                 sophisticated phrase specified.

   Example of a phrase:

     [{
       type: UP,
       text: "whole"
       width: 8;
     },
     {
       type: DOWN,
       text: "whole"
       width: 8;
     },
     {
       type: UP,
       text: "half"
       width: 8;
     },
     {
       type: UP,
       text: "whole"
       width: 8;
     },
     {
       type: DOWN,
       text: "1 1/2"
       width: 8;
     }]
 */
class Bend extends _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier {
  static get CATEGORY() { return 'bends'; }

  static get UP() {
    return 0;
  }
  static get DOWN() {
    return 1;
  }

  // ## Static Methods
  // Arrange bends in `ModifierContext`
  static format(bends, state) {
    if (!bends || bends.length === 0) return false;

    let last_width = 0;
    // Bends are always on top.
    const text_line = state.top_text_line;

    // Format Bends
    for (let i = 0; i < bends.length; ++i) {
      const bend = bends[i];
      bend.setXShift(last_width);
      last_width = bend.getWidth();
      bend.setTextLine(text_line);
    }

    state.right_shift += last_width;
    state.top_text_line += 1;
    return true;
  }

  // ## Prototype Methods
  constructor(text, release, phrase) {
    super();
    this.setAttribute('type', 'Bend');

    this.text = text;
    this.x_shift = 0;
    this.release = release || false;
    this.font = '10pt Arial';
    this.render_options = {
      line_width: 1.5,
      line_style: '#777777',
      bend_width: 8,
      release_width: 8,
    };

    if (phrase) {
      this.phrase = phrase;
    } else {
      // Backward compatibility
      this.phrase = [{ type: Bend.UP, text: this.text }];
      if (this.release) this.phrase.push({ type: Bend.DOWN, text: '' });
    }

    this.updateWidth();
  }

  getCategory() { return Bend.CATEGORY; }

  setXShift(value) {
    this.x_shift = value;
    this.updateWidth();
  }
  setFont(font) { this.font = font; return this; }
  getText() { return this.text; }
  updateWidth() {
    const that = this;

    function measure_text(text) {
      let text_width;
      if (that.context) {
        text_width = that.context.measureText(text).width;
      } else {
        text_width = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.textWidth(text);
      }

      return text_width;
    }

    let total_width = 0;
    for (let i = 0; i < this.phrase.length; ++i) {
      const bend = this.phrase[i];
      if ('width' in bend) {
        total_width += bend.width;
      } else {
        const additional_width = (bend.type === Bend.UP) ?
          this.render_options.bend_width : this.render_options.release_width;

        bend.width = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Max(additional_width, measure_text(bend.text)) + 3;
        bend.draw_width = bend.width / 2;
        total_width += bend.width;
      }
    }

    this.setWidth(total_width + this.x_shift);
    return this;
  }
  draw() {
    this.checkContext();
    if (!(this.note && (this.index != null))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoNoteForBend', "Can't draw bend without a note or index.");
    }

    this.setRendered();

    const start = this.note.getModifierStartXY(_modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.RIGHT,
      this.index);
    start.x += 3;
    start.y += 0.5;
    const x_shift = this.x_shift;

    const ctx = this.context;
    const bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;
    const annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;
    const that = this;

    function renderBend(x, y, width, height) {
      const cp_x = x + width;
      const cp_y = y;

      ctx.save();
      ctx.beginPath();
      ctx.setLineWidth(that.render_options.line_width);
      ctx.setStrokeStyle(that.render_options.line_style);
      ctx.setFillStyle(that.render_options.line_style);
      ctx.moveTo(x, y);
      ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);
      ctx.stroke();
      ctx.restore();
    }

    function renderRelease(x, y, width, height) {
      ctx.save();
      ctx.beginPath();
      ctx.setLineWidth(that.render_options.line_width);
      ctx.setStrokeStyle(that.render_options.line_style);
      ctx.setFillStyle(that.render_options.line_style);
      ctx.moveTo(x, height);
      ctx.quadraticCurveTo(
        x + width, height,
        x + width, y);
      ctx.stroke();
      ctx.restore();
    }

    function renderArrowHead(x, y, direction) {
      const width = 4;
      const dir = direction || 1;

      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x - width, y + width * dir);
      ctx.lineTo(x + width, y + width * dir);
      ctx.closePath();
      ctx.fill();
    }

    function renderText(x, text) {
      ctx.save();
      ctx.setRawFont(that.font);
      const render_x = x - (ctx.measureText(text).width / 2);
      ctx.fillText(text, render_x, annotation_y);
      ctx.restore();
    }

    let last_bend = null;
    let last_drawn_width = 0;
    for (let i = 0; i < this.phrase.length; ++i) {
      const bend = this.phrase[i];
      if (i === 0) bend.draw_width += x_shift;

      last_drawn_width = bend.draw_width +
        (last_bend ? last_bend.draw_width : 0) -
        (i === 1 ? x_shift : 0);
      if (bend.type === Bend.UP) {
        if (last_bend && last_bend.type === Bend.UP) {
          renderArrowHead(start.x, bend_height);
        }

        renderBend(start.x, start.y, last_drawn_width, bend_height);
      }

      if (bend.type === Bend.DOWN) {
        if (last_bend && last_bend.type === Bend.UP) {
          renderRelease(start.x, start.y, last_drawn_width, bend_height);
        }

        if (last_bend && last_bend.type === Bend.DOWN) {
          renderArrowHead(start.x, start.y, -1);
          renderRelease(start.x, start.y, last_drawn_width, bend_height);
        }

        if (last_bend === null) {
          last_drawn_width = bend.draw_width;
          renderRelease(start.x, start.y, last_drawn_width, bend_height);
        }
      }

      renderText(start.x + last_drawn_width, bend.text);
      last_bend = bend;
      last_bend.x = start.x;

      start.x += last_drawn_width;
    }

    // Final arrowhead and text
    if (last_bend.type === Bend.UP) {
      renderArrowHead(last_bend.x + last_drawn_width, bend_height);
    } else if (last_bend.type === Bend.DOWN) {
      renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/boundingbox.js":
/*!*************************************************!*\
  !*** ./node_modules/vexflow/src/boundingbox.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BoundingBox: () => (/* binding */ BoundingBox)
/* harmony export */ });
// Vex Music Notation
// Mohit Muthanna <mohit@muthanna.com>
//
// Copyright Mohit Muthanna 2010

// Bounding boxes for interactive notation

class BoundingBox {
  static copy(that) {
    return new BoundingBox(that.x, that.y, that.w, that.h);
  }

  constructor(x, y, w, h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  getX() { return this.x; }
  getY() { return this.y; }
  getW() { return this.w; }
  getH() { return this.h; }
  setX(x) { this.x = x; return this; }
  setY(y) { this.y = y; return this; }
  setW(w) { this.w = w; return this; }
  setH(h) { this.h = h; return this; }
  move(x, y) { this.x += x; this.y += y; }
  clone() { return BoundingBox.copy(this); }

  // Merge my box with given box. Creates a bigger bounding box unless
  // the given box is contained in this one.
  mergeWith(boundingBox, ctx) {
    const that = boundingBox;

    const new_x = this.x < that.x ? this.x : that.x;
    const new_y = this.y < that.y ? this.y : that.y;
    const new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;
    const new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;

    this.x = new_x;
    this.y = new_y;
    this.w = new_w;
    this.h = new_h;

    if (ctx) this.draw(ctx);
    return this;
  }

  draw(ctx, x, y) {
    if (!x) x = 0;
    if (!y) y = 0;
    ctx.rect(this.x + x, this.y + y, this.w, this.h);
    ctx.stroke();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/boundingboxcomputation.js":
/*!************************************************************!*\
  !*** ./node_modules/vexflow/src/boundingboxcomputation.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BoundingBoxComputation: () => (/* binding */ BoundingBoxComputation)
/* harmony export */ });
// ## Description
//
// Object which computes metrics for a bounding box by continuously
// taking canvas path commands

// Warning: This file is merely a crutch to get bounding box information without
// explicit metadata. This is likely to get deprecated following SMuFL support.
//
// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/ca
// nvg.js#L449

class BoundingBoxComputation {
  constructor(x1, y1, x2, y2) { // pass in initial points if you want
    this.x1 = Number.NaN;
    this.y1 = Number.NaN;
    this.x2 = Number.NaN;
    this.y2 = Number.NaN;

    this.addPoint(x1, y1);
    this.addPoint(x2, y2);
  }

  width() {
    return this.x2 - this.x1;
  }

  height() {
    return this.y2 - this.y1;
  }

  addPoint(x, y) {
    if (x != null) {
      if (isNaN(this.x1) || isNaN(this.x2)) {
        this.x1 = x;
        this.x2 = x;
      }
      if (x < this.x1) this.x1 = x;
      if (x > this.x2) this.x2 = x;
    }

    if (y != null) {
      if (isNaN(this.y1) || isNaN(this.y2)) {
        this.y1 = y;
        this.y2 = y;
      }
      if (y < this.y1) this.y1 = y;
      if (y > this.y2) this.y2 = y;
    }
  }

  addX(x) {
    this.addPoint(x, null);
  }

  addY(y) {
    this.addPoint(null, y);
  }

  addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {
    const cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)
    const cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)
    const cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)
    const cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)
    this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);
  }

  addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
    // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
    const p0 = [p0x, p0y];
    const p1 = [p1x, p1y];
    const p2 = [p2x, p2y];
    const p3 = [p3x, p3y];
    let i;

    this.addPoint(p0[0], p0[1]);
    this.addPoint(p3[0], p3[1]);

    const f = (t, i) => Math.pow(1 - t, 3) * p0[i] +
      3 * Math.pow(1 - t, 2) * t * p1[i] +
      3 * (1 - t) * Math.pow(t, 2) * p2[i] +
      Math.pow(t, 3) * p3[i];

    for (i = 0; i <= 1; i++) {
      const b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
      const a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
      const c = 3 * p1[i] - 3 * p0[i];

      if (a === 0) {
        if (b === 0) continue;
        const t = -c / b;
        if (0 < t && t < 1) {
          if (i === 0) this.addX(f(t, i));
          if (i === 1) this.addY(f(t, i));
        }
        continue;
      }

      const b2ac = Math.pow(b, 2) - 4 * c * a;
      if (b2ac < 0) continue;
      const t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
      if (0 < t1 && t1 < 1) {
        if (i === 0) this.addX(f(t1, i));
        if (i === 1) this.addY(f(t1, i));
      }
      const t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
      if (0 < t2 && t2 < 1) {
        if (i === 0) this.addX(f(t2, i));
        if (i === 1) this.addY(f(t2, i));
      }
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/canvascontext.js":
/*!***************************************************!*\
  !*** ./node_modules/vexflow/src/canvascontext.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanvasContext: () => (/* binding */ CanvasContext)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Mohit Muthanna <mohit@muthanna.com>
//
// A rendering context for the Raphael backend.
//
// Copyright Mohit Cheppudira 2010



/** @constructor */
class CanvasContext {
  static get WIDTH() {
    return 600;
  }
  static get HEIGHT() {
    return 400;
  }
  static get CANVAS_BROWSER_SIZE_LIMIT() {
    return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size
  }

  static SanitizeCanvasDims(width, height) {
    if (Math.max(width, height) > this.CANVAS_BROWSER_SIZE_LIMIT) {
      _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.W(
        'Canvas dimensions exceed browser limit. Cropping to ' +
        this.CANVAS_BROWSER_SIZE_LIMIT
      );
      if (width > this.CANVAS_BROWSER_SIZE_LIMIT) {
        width = this.CANVAS_BROWSER_SIZE_LIMIT;
        // note: Math.min return 0 for undefined, NaN for null. Would change inputs.
      }
      if (height > this.CANVAS_BROWSER_SIZE_LIMIT) {
        height = this.CANVAS_BROWSER_SIZE_LIMIT;
      }
    }
    return [width, height];
  }

  constructor(context) {
    // Use a name that is unlikely to clash with a canvas context
    // property
    this.vexFlowCanvasContext = context;
    if (!context.canvas) {
      this.canvas = {
        width: CanvasContext.WIDTH,
        height: CanvasContext.HEIGHT,
      };
    } else {
      this.canvas = context.canvas;
    }
  }

  clear() {
    this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }

  // Containers not implemented
  openGroup() {}
  closeGroup() {}
  add() {}

  setFont(family, size, weight) {
    this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;
    return this;
  }

  setRawFont(font) {
    this.vexFlowCanvasContext.font = font;
    return this;
  }

  setFillStyle(style) {
    this.vexFlowCanvasContext.fillStyle = style;
    return this;
  }

  setBackgroundFillStyle(style) {
    this.background_fillStyle = style;
    return this;
  }

  setStrokeStyle(style) {
    this.vexFlowCanvasContext.strokeStyle = style;
    return this;
  }

  setShadowColor(style) {
    this.vexFlowCanvasContext.shadowColor = style;
    return this;
  }

  setShadowBlur(blur) {
    this.vexFlowCanvasContext.shadowBlur = blur;
    return this;
  }

  setLineWidth(width) {
    this.vexFlowCanvasContext.lineWidth = width;
    return this;
  }

  setLineCap(cap_type) {
    this.vexFlowCanvasContext.lineCap = cap_type;
    return this;
  }

  // setLineDash: is the one native method in a canvas context
  // that begins with set, therefore we don't bolster the method
  // if it already exists (see renderer.bolsterCanvasContext).
  // If it doesn't exist, we bolster it and assume it's looking for
  // a ctx.lineDash method, as previous versions of VexFlow
  // expected.
  setLineDash(dash) {
    this.vexFlowCanvasContext.lineDash = dash;
    return this;
  }

  scale(x, y) {
    return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));
  }

  resize(width, height) {
    [width, height] = this.SanitizeCanvasDims(parseInt(width, 10), parseInt(height, 10));
    return this.vexFlowCanvasContext.resize(width, height);
  }

  rect(x, y, width, height) {
    return this.vexFlowCanvasContext.rect(x, y, width, height);
  }

  fillRect(x, y, width, height) {
    return this.vexFlowCanvasContext.fillRect(x, y, width, height);
  }

  clearRect(x, y, width, height) {
    return this.vexFlowCanvasContext.clearRect(x, y, width, height);
  }

  beginPath() {
    return this.vexFlowCanvasContext.beginPath();
  }

  moveTo(x, y) {
    return this.vexFlowCanvasContext.moveTo(x, y);
  }

  lineTo(x, y) {
    return this.vexFlowCanvasContext.lineTo(x, y);
  }

  bezierCurveTo(x1, y1, x2, y2, x, y) {
    return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);
  }

  quadraticCurveTo(x1, y1, x, y) {
    return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);
  }

  // This is an attempt (hack) to simulate the HTML5 canvas
  // arc method.
  arc(x, y, radius, startAngle, endAngle, antiClockwise) {
    return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);
  }

  // Adapted from the source for Raphael's Element.glow
  glow() {
    return this.vexFlowCanvasContext.glow();
  }

  fill() {
    return this.vexFlowCanvasContext.fill();
  }

  stroke() {
    return this.vexFlowCanvasContext.stroke();
  }

  closePath() {
    return this.vexFlowCanvasContext.closePath();
  }

  measureText(text) {
    return this.vexFlowCanvasContext.measureText(text);
  }

  fillText(text, x, y) {
    return this.vexFlowCanvasContext.fillText(text, x, y);
  }

  save() {
    return this.vexFlowCanvasContext.save();
  }

  restore() {
    return this.vexFlowCanvasContext.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/clef.js":
/*!******************************************!*\
  !*** ./node_modules/vexflow/src/clef.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Clef: () => (/* binding */ Clef)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.
// Co-author: Benjamin W. Bohl
//
// ## Description
//
// This file implements various types of clefs that can be rendered on a stave.
//
// See `tests/clef_tests.js` for usage examples.





// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.
function L(...args) { if (Clef.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Clef', args); }

class Clef extends _stavemodifier__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
  static get CATEGORY() { return 'clefs'; }

  // Every clef name is associated with a glyph code from the font file
  // and a default stave line number.
  static get types() {
    return {
      'treble': {
        code: 'v83',
        line: 3,
      },
      'bass': {
        code: 'v79',
        line: 1,
      },
      'alto': {
        code: 'vad',
        line: 2,
      },
      'tenor': {
        code: 'vad',
        line: 1,
      },
      'percussion': {
        code: 'v59',
        line: 2,
      },
      'soprano': {
        code: 'vad',
        line: 4,
      },
      'mezzo-soprano': {
        code: 'vad',
        line: 3,
      },
      'baritone-c': {
        code: 'vad',
        line: 0,
      },
      'baritone-f': {
        code: 'v79',
        line: 2,
      },
      'subbass': {
        code: 'v79',
        line: 0,
      },
      'french': {
        code: 'v83',
        line: 4,
      },
      'tab': {
        code: 'v2f',
      },
    };
  }

  // Sizes affect the point-size of the clef.
  static get sizes() {
    return {
      'default': {
        point: 40,
        width: 26
      },
      'small': {
        point: 32,
        width: 20,
      },
    };
  }

  // Annotations attach to clefs -- such as "8" for octave up or down.
  static get annotations() {
    return {
      '8va': {
        code: 'v8',
        sizes: {
          'default': {
            point: 20,
            attachments: {
              'treble': {
                line: -1.2,
                x_shift: 11,
              },
            },
          },
          'small': {
            point: 18,
            attachments: {
              'treble': {
                line: -0.4,
                x_shift: 8,
              },
            },
          },
        },
      },
      '8vb': {
        code: 'v8',
        sizes: {
          'default': {
            point: 20,
            attachments: {
              'treble': {
                line: 6.3,
                x_shift: 10,
              },
              'bass': {
                line: 4,
                x_shift: 1,
              },
            },
          },
          'small': {
            point: 18,
            attachments: {
              'treble': {
                line: 5.8,
                x_shift: 6,
              },
              'bass': {
                line: 3.5,
                x_shift: 0.5,
              },
            },
          },
        },
      },
    };
  }

  // Create a new clef. The parameter `clef` must be a key from
  // `Clef.types`.
  constructor(type, size, annotation) {
    super();
    this.setAttribute('type', 'Clef');

    this.setPosition(_stavemodifier__WEBPACK_IMPORTED_MODULE_1__.StaveModifier.Position.BEGIN);
    this.setType(type, size, annotation);
    this.setWidth(Clef.sizes[this.size].width);
    L('Creating clef:', type);
  }

  getCategory() { return Clef.CATEGORY; }

  setType(type, size, annotation) {
    this.type = type;
    this.clef = Clef.types[type];
    if (size === undefined) {
      this.size = 'default';
    } else {
      this.size = size;
    }
    this.clef.point = Clef.sizes[this.size].point;
    this.glyph = new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.clef.code, this.clef.point);

    // If an annotation, such as 8va, is specified, add it to the Clef object.
    if (annotation !== undefined) {
      const anno_dict = Clef.annotations[annotation];
      this.annotation = {
        code: anno_dict.code,
        point: anno_dict.sizes[this.size].point,
        line: anno_dict.sizes[this.size].attachments[this.type].line,
        x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift,
      };

      this.attachment = new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.annotation.code, this.annotation.point);
      this.attachment.metrics.x_max = 0;
      this.attachment.setXShift(this.annotation.x_shift);
    } else {
      this.annotation = undefined;
    }

    return this;
  }

  getWidth() {
    if (this.type === 'tab' && !this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ClefError', "Can't get width without stave.");
    }

    return this.width;
  }

  setStave(stave) {
    this.stave = stave;

    if (this.type !== 'tab') return this;

    let glyphScale;
    let glyphOffset;
    const numLines = this.stave.getOptions().num_lines;
    switch (numLines) {
      case 8:
        glyphScale = 55;
        glyphOffset = 14;
        break;
      case 7:
        glyphScale = 47;
        glyphOffset = 8;
        break;
      case 6:
        glyphScale = 40;
        glyphOffset = 1;
        break;
      case 5:
        glyphScale = 30;
        glyphOffset = -6;
        break;
      case 4:
        glyphScale = 23;
        glyphOffset = -12;
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ClefError', `Invalid number of lines: ${numLines}`);
    }

    this.glyph.setPoint(glyphScale);
    this.glyph.setYShift(glyphOffset);

    return this;
  }

  draw() {
    if (!this.x) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ClefError', "Can't draw clef without x.");
    if (!this.stave) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ClefError', "Can't draw clef without stave.");
    this.setRendered();

    this.glyph.setStave(this.stave);
    this.glyph.setContext(this.stave.context);
    if (this.clef.line !== undefined) {
      this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);
    }

    this.stave.context.openGroup("clef");
    this.glyph.renderToStave(this.x);

    if (this.annotation !== undefined) {
      this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);
      this.attachment.setStave(this.stave);
      this.attachment.setContext(this.stave.context);
      this.attachment.renderToStave(this.x);
    }
    this.stave.context.closeGroup();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/clefnote.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/clefnote.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClefNote: () => (/* binding */ ClefNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _clef__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clef */ "./node_modules/vexflow/src/clef.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Copyright Mohit Muthanna 2010
//
// Author Taehoon Moon 2014






/** @constructor */
class ClefNote extends _note__WEBPACK_IMPORTED_MODULE_1__.Note {
  static get CATEGORY() { return 'clefnote'; }

  constructor(type, size, annotation) {
    super({ duration: 'b' });
    this.setAttribute('type', 'ClefNote');

    this.setType(type, size, annotation);

    // Note properties
    this.ignore_ticks = true;
  }

  setType(type, size, annotation) {
    this.type = type;
    this.clef_obj = new _clef__WEBPACK_IMPORTED_MODULE_2__.Clef(type, size, annotation);
    this.clef = this.clef_obj.clef;
    this.glyph = new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph(this.clef.code, this.clef.point);
    this.setWidth(this.glyph.getMetrics().width);
    return this;
  }

  getClef() {
    return this.clef;
  }

  setContext(context) {
    this.context = context;
    this.glyph.setContext(this.context);
    return this;
  }

  getBoundingBox() {
    return super.getBoundingBox();
  }

  addToModifierContext() {
    /* overridden to ignore */
    return this;
  }

  getCategory() { return ClefNote.CATEGORY; }

  preFormat() {
    this.setPreFormatted(true);
    return this;
  }

  draw() {
    if (!this.stave) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't draw without a stave.");

    if (!this.glyph.getContext()) {
      this.glyph.setContext(this.context);
    }

    this.setRendered();
    const abs_x = this.getAbsoluteX();

    this.glyph.setStave(this.stave);
    this.glyph.setYShift(
      this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());
    this.glyph.renderToStave(abs_x);

    // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.
    if (this.clef_obj.annotation !== undefined) {
      const attachment = new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);
      if (!attachment.getContext()) {
        attachment.setContext(this.context);
      }
      attachment.setStave(this.stave);
      attachment.setYShift(
        this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());
      attachment.setXShift(this.clef_obj.annotation.x_shift);
      attachment.renderToStave(abs_x);
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/crescendo.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/crescendo.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Crescendo: () => (/* binding */ Crescendo)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _tickcontext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tickcontext */ "./node_modules/vexflow/src/tickcontext.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements the `Crescendo` object which draws crescendos and
// decrescendo dynamics markings. A `Crescendo` is initialized with a
// duration and formatted as part of a `Voice` like any other `Note`
// type in VexFlow. This object would most likely be formatted in a Voice
// with `TextNotes` - which are used to represent other dynamics markings.





// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.
function L(...args) { if (Crescendo.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Crescendo', args); }

// Private helper to draw the hairpin
function renderHairpin(ctx, params) {
  const begin_x = params.begin_x;
  const end_x = params.end_x;
  const y = params.y;
  const half_height =  params.height / 2;

  ctx.beginPath();

  if (params.reverse) {
    ctx.moveTo(begin_x, y - half_height);
    ctx.lineTo(end_x,  y);
    ctx.lineTo(begin_x, y + half_height);
  } else {
    ctx.moveTo(end_x,  y - half_height);
    ctx.lineTo(begin_x, y);
    ctx.lineTo(end_x,  y + half_height);
  }

  ctx.stroke();
  ctx.closePath();
}

class Crescendo extends _note__WEBPACK_IMPORTED_MODULE_1__.Note {
  // Initialize the crescendo's properties
  constructor(note_struct) {
    super(note_struct);
    this.setAttribute('type', 'Crescendo');

    // Whether the object is a decrescendo
    this.decrescendo = false;

    // The staff line to be placed on
    this.line = note_struct.line || 0;

    // The height at the open end of the cresc/decresc
    this.height = 15;

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, {
      // Extensions to the length of the crescendo on either side
      extend_left: 0,
      extend_right: 0,
      // Vertical shift
      y_shift: 0,
    });
  }

  // Set the line to center the element on
  setLine(line) { this.line = line; return this; }

  // Set the full height at the open end
  setHeight(height) { this.height = height; return this; }

  // Set whether the sign should be a descresendo by passing a bool
  // to `decresc`
  setDecrescendo(decresc) {
    this.decrescendo = decresc;
    return this;
  }

  // Preformat the note
  preFormat() { this.preFormatted = true; return this; }

  // Render the Crescendo object onto the canvas
  draw() {
    this.checkContext();
    this.setRendered();

    const tick_context = this.getTickContext();
    const next_context = _tickcontext__WEBPACK_IMPORTED_MODULE_2__.TickContext.getNextContext(tick_context);

    const begin_x = this.getAbsoluteX();
    const end_x  = next_context ? next_context.getX() : this.stave.x + this.stave.width;
    const y = this.stave.getYForLine(this.line + (-3)) + 1;

    L(
      'Drawing ',
      this.decrescendo ? 'decrescendo ' : 'crescendo ',
      this.height,
      'x',
      begin_x - end_x
    );

    renderHairpin(this.context, {
      begin_x: begin_x - this.render_options.extend_left,
      end_x: end_x + this.render_options.extend_right,
      y: y + this.render_options.y_shift,
      height: this.height,
      reverse: this.decrescendo,
    });
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/curve.js":
/*!*******************************************!*\
  !*** ./node_modules/vexflow/src/curve.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Curve: () => (/* binding */ Curve)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
// VexFlow - Music Engraving for HTML5
// Copyright Mohit Muthanna 2010
//
// This class implements curves (for slurs)




class Curve extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  static get Position() {
    return {
      NEAR_HEAD: 1,
      NEAR_TOP: 2,
    };
  }

  static get PositionString() {
    return {
      nearHead: Curve.Position.NEAR_HEAD,
      nearTop: Curve.Position.NEAR_TOP,
    };
  }

  // from: Start note
  // to: End note
  // options:
  //    cps: List of control points
  //    x_shift: pixels to shift
  //    y_shift: pixels to shift
  constructor(from, to, options) {
    super();
    this.setAttribute('type', 'Curve');

    this.render_options = {
      spacing: 2,
      thickness: 2,
      x_shift: 0,
      y_shift: 10,
      position: Curve.Position.NEAR_HEAD,
      position_end: Curve.Position.NEAR_HEAD,
      invert: false,
      cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }],
    };

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, options);
    this.setNotes(from, to);
  }

  setNotes(from, to) {
    if (!from && !to) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments', 'Curve needs to have either first_note or last_note set.'
      );
    }

    this.from = from;
    this.to = to;
    return this;
  }

  /**
   * @return {boolean} Returns true if this is a partial bar.
   */
  isPartial() {
    return (!this.from || !this.to);
  }

  renderCurve(params) {
    const ctx = this.context;
    const cps = this.render_options.cps;

    const x_shift = this.render_options.x_shift;
    const y_shift = this.render_options.y_shift * params.direction;

    const first_x = params.first_x + x_shift;
    const first_y = params.first_y + y_shift;
    const last_x = params.last_x - x_shift;
    const last_y = params.last_y + y_shift;
    const thickness = this.render_options.thickness;

    const cp_spacing = (last_x - first_x) / (cps.length + 2);

    ctx.beginPath();
    ctx.moveTo(first_x, first_y);
    ctx.bezierCurveTo(
      first_x + cp_spacing + cps[0].x,
      first_y + (cps[0].y * params.direction),
      last_x - cp_spacing + cps[1].x,
      last_y + (cps[1].y * params.direction),
      last_x,
      last_y
    );
    ctx.bezierCurveTo(
      last_x - cp_spacing + cps[1].x,
      last_y + ((cps[1].y + thickness) * params.direction),
      first_x + cp_spacing + cps[0].x,
      first_y + ((cps[0].y + thickness) * params.direction),
      first_x,
      first_y
    );
    ctx.stroke();
    ctx.closePath();
    ctx.fill();
  }

  draw() {
    this.checkContext();
    this.setRendered();

    const first_note = this.from;
    const last_note = this.to;
    let first_x;
    let last_x;
    let first_y;
    let last_y;
    let stem_direction;

    let metric = 'baseY';
    let end_metric = 'baseY';

    function getPosition(position) {
      return typeof(position) === 'string'
        ? Curve.PositionString[position]
        : position;
    }
    const position = getPosition(this.render_options.position);
    const position_end = getPosition(this.render_options.position_end);

    if (position === Curve.Position.NEAR_TOP) {
      metric = 'topY';
      end_metric = 'topY';
    }

    if (position_end === Curve.Position.NEAR_HEAD) {
      end_metric = 'baseY';
    } else if (position_end === Curve.Position.NEAR_TOP) {
      end_metric = 'topY';
    }

    if (first_note) {
      first_x = first_note.getTieRightX();
      stem_direction = first_note.getStemDirection();
      first_y = first_note.getStemExtents()[metric];
    } else {
      first_x = last_note.getStave().getTieStartX();
      first_y = last_note.getStemExtents()[metric];
    }

    if (last_note) {
      last_x = last_note.getTieLeftX();
      stem_direction = last_note.getStemDirection();
      last_y = last_note.getStemExtents()[end_metric];
    } else {
      last_x = first_note.getStave().getTieEndX();
      last_y = first_note.getStemExtents()[end_metric];
    }

    this.renderCurve({
      first_x,
      last_x,
      first_y,
      last_y,
      direction: stem_direction * (this.render_options.invert === true ? -1 : 1),
    });
    return true;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/dot.js":
/*!*****************************************!*\
  !*** ./node_modules/vexflow/src/dot.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dot: () => (/* binding */ Dot)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
// VexFlow - Music Engraving for HTML5
// Copyright Mohit Muthanna 2010
//
// This class implements dot modifiers for notes.




class Dot extends _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier {
  static get CATEGORY() { return 'dots'; }

  // Arrange dots inside a ModifierContext.
  static format(dots, state) {
    const right_shift = state.right_shift;
    const dot_spacing = 1;

    if (!dots || dots.length === 0) return false;

    const dot_list = [];
    const max_shift_map = {};
    for (let i = 0; i < dots.length; ++i) {
      const dot = dots[i];
      const note = dot.getNote();

      let props;
      let shift;
      // Only StaveNote has .getKeyProps()
      if (typeof note.getKeyProps === 'function') {
        props = note.getKeyProps()[dot.getIndex()];
        shift = (props.displaced ? note.getExtraRightPx() : 0);
      } else { // Else it's a TabNote
        props = { line: 0.5 }; // Shim key props for dot placement
        shift = 0;
      }

      const note_id = note.getAttribute('id');
      dot_list.push({ line: props.line, note, note_id, dot });
      max_shift_map[note_id] = Math.max(max_shift_map[note_id] || shift, shift);
    }

    // Sort dots by line number.
    dot_list.sort((a, b) => b.line - a.line);

    let dot_shift = right_shift;
    let x_width = 0;
    let last_line = null;
    let last_note = null;
    let prev_dotted_space = null;
    let half_shiftY = 0;

    for (let i = 0; i < dot_list.length; ++i) {
      const { dot, note, note_id, line } = dot_list[i];

      // Reset the position of the dot every line.
      if (line !== last_line || note !== last_note) {
        dot_shift = max_shift_map[note_id];
      }

      if (!note.isRest() && line !== last_line) {
        if (Math.abs(line % 1) === 0.5) {
          // note is on a space, so no dot shift
          half_shiftY = 0;
        } else {
          // note is on a line, so shift dot to space above the line
          half_shiftY = 0.5;
          if (last_note != null &&
              !last_note.isRest() && last_line - line === 0.5) {
            // previous note on a space, so shift dot to space below the line
            half_shiftY = -0.5;
          } else if (line + half_shiftY === prev_dotted_space) {
            // previous space is dotted, so shift dot to space below the line
            half_shiftY = -0.5;
          }
        }
      }

      // convert half_shiftY to a multiplier for dots.draw()
      if (note.isRest()) {
        dot.dot_shiftY += -half_shiftY;
      } else {
        dot.dot_shiftY = -half_shiftY;
      }
      prev_dotted_space = line + half_shiftY;

      dot.setXShift(dot_shift);
      dot_shift += dot.getWidth() + dot_spacing; // spacing
      x_width = (dot_shift > x_width) ? dot_shift : x_width;
      last_line = line;
      last_note = note;
    }

    // Update state.
    state.right_shift += x_width;
    return true;
  }

  /**
   * @constructor
   */
  constructor() {
    super();
    this.setAttribute('type', 'Dot');

    this.note = null;
    this.index = null;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT;

    this.radius = 2;
    this.setWidth(5);
    this.dot_shiftY = 0;
  }

  getCategory() { return Dot.CATEGORY; }

  setNote(note) {
    this.note = note;

    if (this.note.getCategory() === 'gracenotes') {
      this.radius *= 0.50;
      this.setWidth(3);
    }
  }

  setDotShiftY(y) { this.dot_shiftY = y; return this; }

  draw() {
    this.checkContext();
    this.setRendered();

    if (!this.note || this.index === null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw dot without a note and index.");
    }

    const lineSpace = this.note.stave.options.spacing_between_lines_px;

    const start = this.note.getModifierStartXY(this.position, this.index,
      { forceFlagRight: true });

    // Set the starting y coordinate to the base of the stem for TabNotes
    if (this.note.getCategory() === 'tabnotes') {
      start.y = this.note.getStemExtents().baseY;
    }

    const x = (start.x + this.x_shift) + this.width - this.radius;
    const y = start.y + this.y_shift + (this.dot_shiftY * lineSpace);
    const ctx = this.context;

    ctx.beginPath();
    ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);
    ctx.fill();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/easyscore.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/easyscore.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EasyScore: () => (/* binding */ EasyScore),
/* harmony export */   X: () => (/* binding */ X)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser */ "./node_modules/vexflow/src/parser.js");
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./articulation */ "./node_modules/vexflow/src/articulation.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// This class implements a parser for a simple language to generate
// VexFlow objects.

/* eslint max-classes-per-file: "off" */






// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.
function L(...args) { if (EasyScore.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.EasyScore', args); }

const X = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MakeException('EasyScoreError');

class Grammar {
  constructor(builder) {
    this.builder = builder;
  }

  begin() { return this.LINE; }

  LINE() {
    return {
      expect: [this.PIECE, this.PIECES, this.EOL],
    };
  }
  PIECE() {
    return {
      expect: [this.CHORDORNOTE, this.PARAMS],
      run: () => this.builder.commitPiece(),
    };
  }
  PIECES() {
    return {
      expect: [this.COMMA, this.PIECE],
      zeroOrMore: true,
    };
  }
  PARAMS() {
    return {
      expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],
    };
  }
  CHORDORNOTE() {
    return {
      expect: [this.CHORD, this.SINGLENOTE],
      or: true,
    };
  }
  CHORD() {
    return {
      expect: [this.LPAREN, this.NOTES, this.RPAREN],
      run: (state) => this.builder.addChord(state.matches[1]),
    };
  }
  NOTES() {
    return {
      expect: [this.NOTE],
      oneOrMore: true,
    };
  }
  NOTE() {
    return {
      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
    };
  }
  SINGLENOTE() {
    return {
      expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
      run: (state) =>
        this.builder.addSingleNote(state.matches[0], state.matches[1], state.matches[2]),
    };
  }
  ACCIDENTAL() {
    return {
      expect: [this.ACCIDENTALS],
      maybe: true,
    };
  }
  DOTS() {
    return {
      expect: [this.DOT],
      zeroOrMore: true,
      run: (state) => this.builder.setNoteDots(state.matches[0]),
    };
  }
  TYPE() {
    return {
      expect: [this.SLASH, this.MAYBESLASH, this.TYPES],
      maybe: true,
      run: (state) => this.builder.setNoteType(state.matches[2]),
    };
  }
  DURATION() {
    return {
      expect: [this.SLASH, this.DURATIONS],
      maybe: true,
      run: (state) => this.builder.setNoteDuration(state.matches[1]),
    };
  }
  OPTS() {
    return {
      expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],
      maybe: true,
    };
  }
  KEYVALS() {
    return {
      expect: [this.COMMA, this.KEYVAL],
      zeroOrMore: true,
    };
  }
  KEYVAL() {
    const unquote = (str) => str.slice(1, -1);

    return {
      expect: [this.KEY, this.EQUALS, this.VAL],
      run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),
    };
  }
  VAL() {
    return {
      expect: [this.SVAL, this.DVAL],
      or: true,
    };
  }

  KEY() { return { token: '[a-zA-Z][a-zA-Z0-9]*' }; }
  DVAL() { return { token: '["][^"]*["]' }; }
  SVAL() { return { token: "['][^']*[']" }; }
  NOTENAME() { return { token: '[a-gA-G]' }; }
  OCTAVE() { return { token: '[0-9]+' }; }
  ACCIDENTALS() { return { token: 'bbs|bb|bss|bs|b|db|d|##|#|n|\\+\\+-|\\+-|\\+\\+|\\+|k|o' }; }
  DURATIONS() { return { token: '[0-9whq]+' }; }
  TYPES() { return { token: '[rRsSxX]' }; }
  LPAREN() { return { token: '[(]' }; }
  RPAREN() { return { token: '[)]' }; }
  COMMA() { return { token: '[,]' }; }
  DOT() { return { token: '[.]' }; }
  SLASH() { return { token: '[/]' }; }
  MAYBESLASH() { return { token: '[/]?' }; }
  EQUALS() { return { token: '[=]' }; }
  LBRACKET() { return { token: '\\[' }; }
  RBRACKET() { return { token: '\\]' }; }
  EOL() { return { token: '$' }; }
}

class Builder {
  constructor(factory) {
    this.factory = factory;
    this.commitHooks = [];
    this.reset();
  }

  reset(options = {}) {
    this.options = {
      stem: 'auto',
      clef: 'treble',
    };
    this.elements = {
      notes: [],
      accidentals: [],
    };
    this.rollingDuration = '8';
    this.resetPiece();
    Object.assign(this.options, options);
  }

  getFactory() { return this.factory; }

  getElements() { return this.elements; }

  addCommitHook(commitHook) {
    this.commitHooks.push(commitHook);
  }

  resetPiece() {
    L('resetPiece');
    this.piece = {
      chord: [],
      duration: this.rollingDuration,
      dots: 0,
      type: undefined,
      options: {},
    };
  }

  setNoteDots(dots) {
    L('setNoteDots:', dots);
    if (dots) this.piece.dots = dots.length;
  }

  setNoteDuration(duration) {
    L('setNoteDuration:', duration);
    this.rollingDuration = this.piece.duration = duration || this.rollingDuration;
  }

  setNoteType(type) {
    L('setNoteType:', type);
    if (type) this.piece.type = type;
  }

  addNoteOption(key, value) {
    L('addNoteOption: key:', key, 'value:', value);
    this.piece.options[key] = value;
  }

  addNote(key, accid, octave) {
    L('addNote:', key, accid, octave);
    this.piece.chord.push({ key, accid, octave });
  }

  addSingleNote(key, accid, octave) {
    L('addSingleNote:', key, accid, octave);
    this.addNote(key, accid, octave);
  }

  addChord(notes) {
    L('startChord');
    if (typeof (notes[0]) !== 'object') {
      this.addSingleNote(notes[0]);
    } else {
      notes.forEach(n => {
        if (n) this.addNote(...n);
      });
    }
    L('endChord');
  }

  commitPiece() {
    L('commitPiece');
    const { factory } = this;

    if (!factory) return;

    const options = { ...this.options, ...this.piece.options };
    const { stem, clef } = options;
    const autoStem = stem.toLowerCase() === 'auto';
    const stemDirection = !autoStem && stem.toLowerCase() === 'up'
      ? _stavenote__WEBPACK_IMPORTED_MODULE_1__.StaveNote.STEM_UP
      : _stavenote__WEBPACK_IMPORTED_MODULE_1__.StaveNote.STEM_DOWN;

    // Build StaveNotes.
    const { chord, duration, dots, type } = this.piece;
    const keys = chord.map(note => note.key + '/' + note.octave);
    const note = factory.StaveNote({
      keys,
      duration,
      dots,
      type,
      clef,
      auto_stem: autoStem,
    });
    if (!autoStem) note.setStemDirection(stemDirection);

    // Attach accidentals.
    const accids = chord.map(note => note.accid || null);
    accids.forEach((accid, i) => {
      if (accid) note.addAccidental(i, factory.Accidental({ type: accid }));
    });

    // Attach dots.
    for (let i = 0; i < dots; i++) note.addDotToAll();

    this.commitHooks.forEach(fn => fn(options, note, this));

    this.elements.notes.push(note);
    this.elements.accidentals.concat(accids);
    this.resetPiece();
  }
}

function setId({ id }, note) {
  if (id === undefined) return;

  note.setAttribute('id', id);
}


function setClass(options, note) {
  if (!options.class) return;

  const commaSeparatedRegex = /\s*,\s*/;

  options.class
    .split(commaSeparatedRegex)
    .forEach(className => note.addClass(className));
}

class EasyScore {
  constructor(options = {}) {
    this.setOptions(options);
    this.defaults = {
      clef: 'treble',
      time: '4/4',
      stem: 'auto',
    };
  }

  set(defaults) {
    Object.assign(this.defaults, defaults);
    return this;
  }

  setOptions(options) {
    this.options = {
      factory: null,
      builder: null,
      commitHooks: [
        setId,
        setClass,
        _articulation__WEBPACK_IMPORTED_MODULE_3__.Articulation.easyScoreHook,
      ],
      throwOnError: false, ...options
    };

    this.factory = this.options.factory;
    this.builder = this.options.builder || new Builder(this.factory);
    this.grammar = new Grammar(this.builder);
    this.parser = new _parser__WEBPACK_IMPORTED_MODULE_2__.Parser(this.grammar);
    this.options.commitHooks.forEach(commitHook => this.addCommitHook(commitHook));
    return this;
  }

  setContext(context) {
    if (this.factory) this.factory.setContext(context);
    return this;
  }

  parse(line, options = {}) {
    this.builder.reset(options);
    const result = this.parser.parse(line);
    if (!result.success && this.options.throwOnError) {
      throw new X('Error parsing line: ' + line, result);
    }
    return result;
  }

  beam(notes, options = {}) {
    this.factory.Beam({ notes, options });
    return notes;
  }

  tuplet(notes, options = {}) {
    this.factory.Tuplet({ notes, options });
    return notes;
  }

  notes(line, options = {}) {
    options = { clef: this.defaults.clef, stem: this.defaults.stem, ...options };
    this.parse(line, options);
    return this.builder.getElements().notes;
  }

  voice(notes, voiceOptions) {
    voiceOptions = { time: this.defaults.time, ...voiceOptions };
    return this.factory.Voice(voiceOptions).addTickables(notes);
  }

  addCommitHook(commitHook) {
    return this.builder.addCommitHook(commitHook);
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/element.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/element.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Element: () => (/* binding */ Element)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./registry */ "./node_modules/vexflow/src/registry.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// @author Mohit Cheppudira
//
// ## Description
//
// This file implements a generic base class for VexFlow, with implementations
// of general functions and properties that can be inherited by all VexFlow elements.




class Element {
  static newID() { return 'auto' + (Element.ID++); }

  constructor({ type } = {}) {
    this.attrs = {
      id: Element.newID(),
      el: null,
      type: type || 'Base',
      classes: {},
    };

    this.boundingBox = null;
    this.context = null;
    this.rendered = false;

    // If a default registry exist, then register with it right away.
    if (_registry__WEBPACK_IMPORTED_MODULE_1__.Registry.getDefaultRegistry()) {
      _registry__WEBPACK_IMPORTED_MODULE_1__.Registry.getDefaultRegistry().register(this);
    }
  }

  // set the draw style of a stemmable note:
  setStyle(style) { this.style = style; return this; }
  getStyle() { return this.style; }

  // Apply current style to Canvas `context`
  applyStyle(context = this.context, style = this.getStyle()) {
    if (!style) return this;

    context.save();
    if (style.shadowColor) context.setShadowColor(style.shadowColor);
    if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);
    if (style.fillStyle) context.setFillStyle(style.fillStyle);
    if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);
    if (style.lineWidth) context.setLineWidth(style.lineWidth);
    return this;
  }

  restoreStyle(context = this.context, style = this.getStyle()) {
    if (!style) return this;
    context.restore();
    return this;
  }

  // draw with style of an element.
  drawWithStyle() {
    this.checkContext();
    this.applyStyle();
    this.draw();
    this.restoreStyle();
  }

  // An element can have multiple class labels.
  hasClass(className) { return (this.attrs.classes[className] === true); }
  addClass(className) {
    this.attrs.classes[className] = true;
    if (this.registry) {
      this.registry.onUpdate({
        id: this.getAttribute('id'),
        name: 'class',
        value: className,
        oldValue: null,
      });
    }
    return this;
  }

  removeClass(className) {
    delete this.attrs.classes[className];
    if (this.registry) {
      this.registry.onUpdate({
        id: this.getAttribute('id'),
        name: 'class',
        value: null,
        oldValue: className,
      });
    }
    return this;
  }

  // This is called by the registry after the element is registered.
  onRegister(registry) { this.registry = registry; return this; }
  isRendered() { return this.rendered; }
  setRendered(rendered = true) { this.rendered = rendered; return this; }

  getAttributes() { return this.attrs; }
  getAttribute(name) { return this.attrs[name]; }
  setAttribute(name, value) {
    const id = this.attrs.id;
    const oldValue = this.attrs[name];
    this.attrs[name] = value;
    if (this.registry) {
      // Register with old id to support id changes.
      this.registry.onUpdate({ id, name, value, oldValue });
    }
    return this;
  }

  getContext() { return this.context; }
  setContext(context) { this.context = context; return this; }
  getBoundingBox() { return this.boundingBox; }

  // Validators
  checkContext() {
    if (!this.context) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoContext', 'No rendering context attached to instance');
    }
    return this.context;
  }
}

Element.ID = 1000;


/***/ }),

/***/ "./node_modules/vexflow/src/factory.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/factory.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Factory: () => (/* binding */ Factory),
/* harmony export */   X: () => (/* binding */ X)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _accidental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accidental */ "./node_modules/vexflow/src/accidental.js");
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./articulation */ "./node_modules/vexflow/src/articulation.js");
/* harmony import */ var _annotation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./annotation */ "./node_modules/vexflow/src/annotation.js");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./formatter */ "./node_modules/vexflow/src/formatter.js");
/* harmony import */ var _frethandfinger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./frethandfinger */ "./node_modules/vexflow/src/frethandfinger.js");
/* harmony import */ var _stringnumber__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stringnumber */ "./node_modules/vexflow/src/stringnumber.js");
/* harmony import */ var _textdynamics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./textdynamics */ "./node_modules/vexflow/src/textdynamics.js");
/* harmony import */ var _modifiercontext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiercontext */ "./node_modules/vexflow/src/modifiercontext.js");
/* harmony import */ var _multimeasurerest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./multimeasurerest */ "./node_modules/vexflow/src/multimeasurerest.js");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./renderer */ "./node_modules/vexflow/src/renderer.js");
/* harmony import */ var _stave__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stave */ "./node_modules/vexflow/src/stave.js");
/* harmony import */ var _stavetie__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./stavetie */ "./node_modules/vexflow/src/stavetie.js");
/* harmony import */ var _staveline__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./staveline */ "./node_modules/vexflow/src/staveline.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _staveconnector__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./staveconnector */ "./node_modules/vexflow/src/staveconnector.js");
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./system */ "./node_modules/vexflow/src/system.js");
/* harmony import */ var _tickcontext__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tickcontext */ "./node_modules/vexflow/src/tickcontext.js");
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./tuplet */ "./node_modules/vexflow/src/tuplet.js");
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./voice */ "./node_modules/vexflow/src/voice.js");
/* harmony import */ var _beam__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./beam */ "./node_modules/vexflow/src/beam.js");
/* harmony import */ var _curve__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./curve */ "./node_modules/vexflow/src/curve.js");
/* harmony import */ var _gracenote__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./gracenote */ "./node_modules/vexflow/src/gracenote.js");
/* harmony import */ var _gracenotegroup__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./gracenotegroup */ "./node_modules/vexflow/src/gracenotegroup.js");
/* harmony import */ var _notesubgroup__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./notesubgroup */ "./node_modules/vexflow/src/notesubgroup.js");
/* harmony import */ var _easyscore__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./easyscore */ "./node_modules/vexflow/src/easyscore.js");
/* harmony import */ var _timesignote__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./timesignote */ "./node_modules/vexflow/src/timesignote.js");
/* harmony import */ var _keysignote__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./keysignote */ "./node_modules/vexflow/src/keysignote.js");
/* harmony import */ var _clefnote__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./clefnote */ "./node_modules/vexflow/src/clefnote.js");
/* harmony import */ var _pedalmarking__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./pedalmarking */ "./node_modules/vexflow/src/pedalmarking.js");
/* harmony import */ var _textbracket__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./textbracket */ "./node_modules/vexflow/src/textbracket.js");
/* harmony import */ var _vibratobracket__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./vibratobracket */ "./node_modules/vexflow/src/vibratobracket.js");
/* harmony import */ var _ghostnote__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./ghostnote */ "./node_modules/vexflow/src/ghostnote.js");
/* harmony import */ var _barnote__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./barnote */ "./node_modules/vexflow/src/barnote.js");
/* harmony import */ var _tabnote__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./tabnote */ "./node_modules/vexflow/src/tabnote.js");
/* harmony import */ var _tabstave__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./tabstave */ "./node_modules/vexflow/src/tabstave.js");
/* harmony import */ var _textnote__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./textnote */ "./node_modules/vexflow/src/textnote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// @author Mohit Cheppudira
//
// ## Description
//
// This file implements a high level API around VexFlow. It will eventually
// become the canonical way to use VexFlow.
//
// *This API is currently DRAFT*







































// To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`.
function L(...args) { if (Factory.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Factory', args); }

const X = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MakeException('FactoryError');

function setDefaults(params = {}, defaults) {
  const default_options = defaults.options;
  params = Object.assign(defaults, params);
  params.options = Object.assign(default_options, params.options);
  return params;
}

class Factory {
  constructor(options) {
    L('New factory: ', options);
    const defaults = {
      stave: {
        space: 10,
      },
      renderer: {
        context: null,
        elementId: '',
        backend: _renderer__WEBPACK_IMPORTED_MODULE_10__.Renderer.Backends.SVG,
        width: 500,
        height: 200,
        background: '#FFF',
      },
      font: {
        face: 'Arial',
        point: 10,
        style: '',
      },
    };

    this.options = defaults;
    this.setOptions(options);
  }

  static newFromElementId(elementId, width = 500, height = 200) {
    return new Factory({ renderer: { elementId, width, height } });
  }

  reset() {
    this.renderQ = [];
    this.systems = [];
    this.staves = [];
    this.voices = [];
    this.stave = null; // current stave
  }

  getOptions() { return this.options; }
  setOptions(options) {
    for (const key of ['stave', 'renderer', 'font']) {
      Object.assign(this.options[key], options[key]);
    }
    if (this.options.renderer.elementId !== null || this.options.renderer.context) {
      this.initRenderer();
    }

    this.reset();
  }

  initRenderer() {
    const { elementId, backend, width, height, background } = this.options.renderer;
    if (elementId === '') {
      throw new X('HTML DOM element not set in Factory');
    }

    this.context = _renderer__WEBPACK_IMPORTED_MODULE_10__.Renderer.buildContext(elementId, backend, width, height, background);
  }

  getContext() { return this.context; }
  setContext(context) { this.context = context; return this; }
  getStave() { return this.stave; }
  getVoices() { return this.voices; }

  // Returns pixels from current stave spacing.
  space(spacing) { return this.options.stave.space * spacing; }

  Stave(params) {
    params = setDefaults(params, {
      x: 0,
      y: 0,
      width: this.options.renderer.width - this.space(1),
      options: {
        spacing_between_lines_px: this.options.stave.space,
      },
    });

    const stave = new _stave__WEBPACK_IMPORTED_MODULE_11__.Stave(params.x, params.y, params.width, params.options);
    this.staves.push(stave);
    stave.setContext(this.context);
    this.stave = stave;
    return stave;
  }

  TabStave(params) {
    params = setDefaults(params, {
      x: 0,
      y: 0,
      width: this.options.renderer.width - this.space(1),
      options: {
        spacing_between_lines_px: this.options.stave.space * 1.3,
      },
    });

    const stave = new _tabstave__WEBPACK_IMPORTED_MODULE_35__.TabStave(params.x, params.y, params.width, params.options);
    this.staves.push(stave);
    stave.setContext(this.context);
    this.stave = stave;
    return stave;
  }

  StaveNote(noteStruct) {
    const note = new _stavenote__WEBPACK_IMPORTED_MODULE_14__.StaveNote(noteStruct);
    if (this.stave) note.setStave(this.stave);
    note.setContext(this.context);
    this.renderQ.push(note);
    return note;
  }

  GhostNote(noteStruct) {
    const ghostNote = new _ghostnote__WEBPACK_IMPORTED_MODULE_32__.GhostNote(noteStruct);
    if (this.stave) ghostNote.setStave(this.stave);
    ghostNote.setContext(this.context);
    this.renderQ.push(ghostNote);
    return ghostNote;
  }

  TextNote(textNoteStruct) {
    const textNote = new _textnote__WEBPACK_IMPORTED_MODULE_36__.TextNote(textNoteStruct);
    if (this.stave) textNote.setStave(this.stave);
    textNote.setContext(this.context);
    this.renderQ.push(textNote);
    return textNote;
  }

  BarNote(params) {
    params = setDefaults(params, {
      type: 'single',
      options: {},
    });

    const barNote = new _barnote__WEBPACK_IMPORTED_MODULE_33__.BarNote(params.type);
    if (this.stave) barNote.setStave(this.stave);
    barNote.setContext(this.context);
    this.renderQ.push(barNote);
    return barNote;
  }

  ClefNote(params) {
    params = setDefaults(params, {
      type: 'treble',
      options: {
        size: 'default',
      },
    });

    const clefNote = new _clefnote__WEBPACK_IMPORTED_MODULE_28__.ClefNote(params.type, params.options.size, params.options.annotation);
    if (this.stave) clefNote.setStave(this.stave);
    clefNote.setContext(this.context);
    this.renderQ.push(clefNote);
    return clefNote;
  }

  TimeSigNote(params) {
    params = setDefaults(params, {
      time: '4/4',
      options: {},
    });

    const timeSigNote = new _timesignote__WEBPACK_IMPORTED_MODULE_26__.TimeSigNote(params.time);
    if (this.stave) timeSigNote.setStave(this.stave);
    timeSigNote.setContext(this.context);
    this.renderQ.push(timeSigNote);
    return timeSigNote;
  }

  KeySigNote(params) {
    const keySigNote = new _keysignote__WEBPACK_IMPORTED_MODULE_27__.KeySigNote(params.key, params.cancelKey, params.alterKey);
    if (this.stave) keySigNote.setStave(this.stave);
    keySigNote.setContext(this.context);
    this.renderQ.push(keySigNote);
    return keySigNote;
  }

  TabNote(noteStruct) {
    const note = new _tabnote__WEBPACK_IMPORTED_MODULE_34__.TabNote(noteStruct);
    if (this.stave) note.setStave(this.stave);
    note.setContext(this.context);
    this.renderQ.push(note);
    return note;
  }

  GraceNote(noteStruct) {
    const note = new _gracenote__WEBPACK_IMPORTED_MODULE_22__.GraceNote(noteStruct);
    if (this.stave) note.setStave(this.stave);
    note.setContext(this.context);
    return note;
  }

  GraceNoteGroup(params) {
    const group = new _gracenotegroup__WEBPACK_IMPORTED_MODULE_23__.GraceNoteGroup(params.notes, params.slur);
    group.setContext(this.context);
    return group;
  }

  Accidental(params) {
    params = setDefaults(params, {
      type: null,
      options: {},
    });

    const accid = new _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental(params.type);
    accid.setContext(this.context);
    return accid;
  }

  Annotation(params) {
    params = setDefaults(params, {
      text: 'p',
      vJustify: 'below',
      hJustify: 'center',
      fontFamily: 'Times',
      fontSize: 14,
      fontWeight: 'bold italic',
      options: {},
    });

    const annotation = new _annotation__WEBPACK_IMPORTED_MODULE_3__.Annotation(params.text);
    annotation.setJustification(params.hJustify);
    annotation.setVerticalJustification(params.vJustify);
    annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);
    annotation.setContext(this.context);
    return annotation;
  }

  Articulation(params) {
    params = setDefaults(params, {
      type: 'a.',
      position: 'above',
      options: {},
    });

    const articulation = new _articulation__WEBPACK_IMPORTED_MODULE_2__.Articulation(params.type);
    articulation.setPosition(params.position);
    articulation.setContext(this.context);
    return articulation;
  }

  TextDynamics(params) {
    params = setDefaults(params, {
      text: 'p',
      duration: 'q',
      dots: 0,
      line: 0,
      options: {},
    });

    const text = new _textdynamics__WEBPACK_IMPORTED_MODULE_7__.TextDynamics({
      text: params.text,
      line: params.line,
      duration: params.duration,
      dots: params.dots,
    });

    if (this.stave) text.setStave(this.stave);
    text.setContext(this.context);
    this.renderQ.push(text);
    return text;
  }

  Fingering(params) {
    params = setDefaults(params, {
      number: '0',
      position: 'left',
      options: {},
    });

    const fingering = new _frethandfinger__WEBPACK_IMPORTED_MODULE_5__.FretHandFinger(params.number);
    fingering.setPosition(params.position);
    fingering.setContext(this.context);
    return fingering;
  }

  StringNumber(params) {
    params = setDefaults(params, {
      number: '0',
      position: 'left',
      options: {},
    });

    const stringNumber = new _stringnumber__WEBPACK_IMPORTED_MODULE_6__.StringNumber(params.number);
    stringNumber.setPosition(params.position);
    stringNumber.setContext(this.context);
    return stringNumber;
  }

  TickContext() {
    return new _tickcontext__WEBPACK_IMPORTED_MODULE_17__.TickContext().setContext(this.context);
  }

  ModifierContext() {
    return new _modifiercontext__WEBPACK_IMPORTED_MODULE_8__.ModifierContext();
  }

  MultiMeasureRest(params) {
    const multimeasurerest = new _multimeasurerest__WEBPACK_IMPORTED_MODULE_9__.MultiMeasureRest(params.number_of_measures, params);
    multimeasurerest.setContext(this.context);
    this.renderQ.push(multimeasurerest);
    return multimeasurerest;
  }

  Voice(params) {
    params = setDefaults(params, {
      time: '4/4',
      options: {},
    });
    const voice = new _voice__WEBPACK_IMPORTED_MODULE_19__.Voice(params.time);
    this.voices.push(voice);
    return voice;
  }

  StaveConnector(params) {
    params = setDefaults(params, {
      top_stave: null,
      bottom_stave: null,
      type: 'double',
      options: {},
    });
    const connector = new _staveconnector__WEBPACK_IMPORTED_MODULE_15__.StaveConnector(params.top_stave, params.bottom_stave);
    connector.setType(params.type).setContext(this.context);
    this.renderQ.push(connector);
    return connector;
  }

  Formatter() {
    return new _formatter__WEBPACK_IMPORTED_MODULE_4__.Formatter();
  }

  Tuplet(params) {
    params = setDefaults(params, {
      notes: [],
      options: {},
    });

    const tuplet = new _tuplet__WEBPACK_IMPORTED_MODULE_18__.Tuplet(params.notes, params.options).setContext(this.context);
    this.renderQ.push(tuplet);
    return tuplet;
  }

  Beam(params) {
    params = setDefaults(params, {
      notes: [],
      options: {
        autoStem: false,
        secondaryBeamBreaks: [],
      },
    });

    const beam = new _beam__WEBPACK_IMPORTED_MODULE_20__.Beam(params.notes, params.options.autoStem).setContext(this.context);
    beam.breakSecondaryAt(params.options.secondaryBeamBreaks);
    this.renderQ.push(beam);
    return beam;
  }

  Curve(params) {
    params = setDefaults(params, {
      from: null,
      to: null,
      options: {},
    });

    const curve = new _curve__WEBPACK_IMPORTED_MODULE_21__.Curve(params.from, params.to, params.options).setContext(this.context);
    this.renderQ.push(curve);
    return curve;
  }

  StaveTie(params) {
    params = setDefaults(params, {
      from: null,
      to: null,
      first_indices: [0],
      last_indices: [0],
      text: null,
      options: {
        direction: undefined,
      },
    });

    const tie = new _stavetie__WEBPACK_IMPORTED_MODULE_12__.StaveTie({
      first_note: params.from,
      last_note: params.to,
      first_indices: params.first_indices,
      last_indices: params.last_indices,
    }, params.text);

    if (params.options.direction) tie.setDirection(params.options.direction);
    tie.setContext(this.context);
    this.renderQ.push(tie);
    return tie;
  }

  StaveLine(params) {
    params = setDefaults(params, {
      from: null,
      to: null,
      first_indices: [0],
      last_indices: [0],
      options: {},
    });

    const line = new _staveline__WEBPACK_IMPORTED_MODULE_13__.StaveLine({
      first_note: params.from,
      last_note: params.to,
      first_indices: params.first_indices,
      last_indices: params.last_indices,
    });

    if (params.options.text) line.setText(params.options.text);
    if (params.options.font) line.setFont(params.options.font);

    line.setContext(this.context);
    this.renderQ.push(line);
    return line;
  }

  VibratoBracket(params) {
    params = setDefaults(params, {
      from: null,
      to: null,
      options: {
        harsh: false,
      },
    });

    const vibratoBracket = new _vibratobracket__WEBPACK_IMPORTED_MODULE_31__.VibratoBracket({
      start: params.from,
      stop: params.to,
    });

    if (params.options.line) vibratoBracket.setLine(params.options.line);
    if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);

    vibratoBracket.setContext(this.context);
    this.renderQ.push(vibratoBracket);

    return vibratoBracket;
  }

  TextBracket(params) {
    params = setDefaults(params, {
      from: null,
      to: null,
      text: '',
      options: {
        superscript: '',
        position: 1,
      },
    });

    const textBracket = new _textbracket__WEBPACK_IMPORTED_MODULE_30__.TextBracket({
      start: params.from,
      stop: params.to,
      text: params.text,
      superscript: params.options.superscript,
      position: params.options.position,
    });

    if (params.options.line) textBracket.setLine(params.options.line);
    if (params.options.font) textBracket.setFont(params.options.font);

    textBracket.setContext(this.context);
    this.renderQ.push(textBracket);
    return textBracket;
  }

  System(params = {}) {
    params.factory = this;
    const system = new _system__WEBPACK_IMPORTED_MODULE_16__.System(params).setContext(this.context);
    this.systems.push(system);
    return system;
  }

  EasyScore(params = {}) {
    params.factory = this;
    return new _easyscore__WEBPACK_IMPORTED_MODULE_25__.EasyScore(params);
  }

  PedalMarking(params = {}) {
    params = setDefaults(params, {
      notes: [],
      options: {
        style: 'mixed',
      },
    });

    const pedal = new _pedalmarking__WEBPACK_IMPORTED_MODULE_29__.PedalMarking(params.notes);
    pedal.setStyle(_pedalmarking__WEBPACK_IMPORTED_MODULE_29__.PedalMarking.StylesString[params.options.style]);
    pedal.setContext(this.context);
    this.renderQ.push(pedal);
    return pedal;
  }

  NoteSubGroup(params = {}) {
    params = setDefaults(params, {
      notes: [],
      options: {},
    });

    const group = new _notesubgroup__WEBPACK_IMPORTED_MODULE_24__.NoteSubGroup(params.notes);
    group.setContext(this.context);
    return group;
  }

  draw() {
    this.systems.forEach(i => i.setContext(this.context).format());
    this.staves.forEach(i => i.setContext(this.context).draw());
    this.voices.forEach(i => i.setContext(this.context).draw());
    this.renderQ.forEach(i => {
      if (!i.isRendered()) i.setContext(this.context).draw();
    });
    this.systems.forEach(i => i.setContext(this.context).draw());
    this.reset();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/fonts/vexflow_font.js":
/*!********************************************************!*\
  !*** ./node_modules/vexflow/src/fonts/vexflow_font.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Font: () => (/* binding */ Font)
/* harmony export */ });
const Font = {
"glyphs":{
"v0":{"x_min":0,"x_max":514.5,"ha":525,"o":"m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 "},
"v1":{"x_min":-1.359375,"x_max":344.359375,"ha":351,"o":"m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 "},
"v2":{"x_min":-1.359375,"x_max":458.6875,"ha":468,"o":"m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 "},
"v3":{"x_min":-1.359375,"x_max":409.6875,"ha":418,"o":"m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 "},
"v4":{"x_min":0,"x_max":468.21875,"ha":478,"o":"m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 "},
"v5":{"x_min":0,"x_max":409.6875,"ha":418,"o":"m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 "},
"v6":{"x_min":0,"x_max":475.03125,"ha":485,"o":"m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 "},
"v7":{"x_min":0,"x_max":442.359375,"ha":451,"o":"m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 "},
"v8":{"x_min":0,"x_max":488.640625,"ha":499,"o":"m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 "},
"v9":{"x_min":0,"x_max":475.03125,"ha":485,"o":"m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 "},
"va":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 "},
"vb":{"x_min":0,"x_max":428.75,"ha":438,"o":"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 "},
"vc":{"x_min":0,"x_max":447.8125,"ha":457,"o":"m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 "},
"vf":{"x_min":0,"x_max":370.21875,"ha":378,"o":"m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 "},
"v10":{"x_min":0,"x_max":559.421875,"ha":571,"o":"m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 "},
"v11":{"x_min":-155.171875,"x_max":153.8125,"ha":157,"o":"m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 "},
"v18":{"x_min":0,"x_max":323.9375,"ha":331,"o":"m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 "},
"v1b":{"x_min":0,"x_max":559.421875,"ha":571,"o":"m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 "},
"v1d":{"x_min":0,"x_max":619.3125,"ha":632,"o":"m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 "},
"v1e":{"x_min":-402.890625,"x_max":401.53125,"ha":410,"o":"m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 "},
"v1f":{"x_min":-340.28125,"x_max":338.921875,"ha":346,"o":"m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 "},
"v20":{"x_min":-571.671875,"x_max":570.3125,"ha":582,"o":"m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 "},
"v22":{"x_min":0,"x_max":432.828125,"ha":442,"o":"m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 "},
"v23":{"x_min":0,"x_max":133.390625,"ha":136,"o":"m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 "},
"v25":{"x_min":0,"x_max":318.5,"ha":325,"o":"m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 "},
"v26":{"x_min":-21.78125,"x_max":483.1875,"ha":493,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 "},
"v27":{"x_min":0,"x_max":432.828125,"ha":442,"o":"m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 "},
"v28":{"x_min":-73.5,"x_max":72.140625,"ha":74,"o":"m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 "},
"v29":{"x_min":-590.71875,"x_max":589.359375,"ha":601,"o":"m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 "},
"v2a":{"x_min":-21.78125,"x_max":366.140625,"ha":374,"o":"m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 "},
"v2c":{"x_min":-597.53125,"x_max":596.171875,"ha":608,"o":"m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 "},
"v2d":{"x_min":0,"x_max":438.28125,"ha":447,"o":"m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 "},
"v2f":{"x_min":-1.359375,"x_max":680.5625,"ha":694,"o":"m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 "},
"v30":{"x_min":-21.78125,"x_max":367.5,"ha":375,"o":"m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 "},
"v31":{"x_min":0,"x_max":386.5625,"ha":394,"o":"m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 "},
"v33":{"x_min":-423.3125,"x_max":421.9375,"ha":431,"o":"m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 "},
"v34":{"x_min":0,"x_max":622.03125,"ha":635,"o":"m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 "},
"v36":{"x_min":-1.359375,"x_max":1064.390625,"ha":1086,"o":"m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 "},
"v38":{"x_min":-1.359375,"x_max":651.96875,"ha":665,"o":"m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 "},
"v39":{"x_min":-171.5,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},
"v3b":{"x_min":0,"x_max":484.5625,"ha":494,"o":"m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 "},
"v3c":{"x_min":0,"x_max":450.53125,"ha":460,"o":"m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 "},
"v3e":{"x_min":0,"x_max":406.96875,"ha":415,"o":"m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 "},
"v3f":{"x_min":-24.5,"x_max":317.140625,"ha":324,"o":"m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 "},
"v40":{"x_min":-1.359375,"x_max":436.921875,"ha":446,"o":"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 "},
"v41":{"x_min":-1.359375,"x_max":556.6875,"ha":568,"o":"m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 "},
"v42":{"x_min":-348.4375,"x_max":24.5,"ha":25,"o":"m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 "},
"v43":{"x_min":-442.359375,"x_max":441,"ha":450,"o":"m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 "},
"v44":{"x_min":-21.78125,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},
"v45":{"x_min":-402.890625,"x_max":401.53125,"ha":410,"o":"m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 "},
"v46":{"x_min":0,"x_max":627.46875,"ha":640,"o":"m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 "},
"v47":{"x_min":-24.5,"x_max":315.78125,"ha":322,"o":"m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 "},
"v49":{"x_min":0,"x_max":630.203125,"ha":643,"o":"m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 "},
"v4a":{"x_min":70.78125,"x_max":378.390625,"ha":315,"o":"m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 "},
"v4b":{"x_min":0,"x_max":503.609375,"ha":514,"o":"m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 "},
"v4d":{"x_min":-311.6875,"x_max":310.328125,"ha":317,"o":"m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 "},
"v4e":{"x_min":0,"x_max":239.5625,"ha":244,"o":"m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 "},
"v51":{"x_min":-1.359375,"x_max":455.96875,"ha":465,"o":"m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 "},
"v52":{"x_min":-10.890625,"x_max":298.078125,"ha":294,"o":"m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 "},
"v53":{"x_min":0,"x_max":902.421875,"ha":921,"o":"m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 "},
"v54":{"x_min":-24.5,"x_max":317.140625,"ha":324,"o":"m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 "},
"v55":{"x_min":0,"x_max":551.25,"ha":563,"o":"m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 "},
"v58":{"x_min":-21.78125,"x_max":367.5,"ha":375,"o":"m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 "},
"v59":{"x_min":0,"x_max":464.140625,"ha":474,"o":"m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 "},
"v5a":{"x_min":-171.5,"x_max":170.140625,"ha":174,"o":"m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 "},
"v5b":{"x_min":-441,"x_max":439.640625,"ha":449,"o":"m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 "},
"v5c":{"x_min":0,"x_max":447.8125,"ha":457,"o":"m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 "},
"v5d":{"x_min":-1.359375,"x_max":592.078125,"ha":604,"o":"m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 "},
"v60":{"x_min":-590.71875,"x_max":589.359375,"ha":601,"o":"m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 "},
"v62":{"x_min":46.28125,"x_max":669.671875,"ha":563,"o":"m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 "},
"v68":{"x_min":-597.53125,"x_max":596.171875,"ha":608,"o":"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 "},
"v6c":{"x_min":-1.359375,"x_max":193.28125,"ha":197,"o":"m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 "},
"v6d":{"x_min":-590.71875,"x_max":589.359375,"ha":601,"o":"m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 "},
"v6f":{"x_min":-80.3125,"x_max":78.9375,"ha":81,"o":"m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 "},
"v70":{"x_min":0,"x_max":436.921875,"ha":446,"o":"m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 "},
"v72":{"x_min":-423.3125,"x_max":421.9375,"ha":431,"o":"m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 "},
"v74":{"x_min":-206.890625,"x_max":428.75,"ha":438,"o":"m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 "},
"v75":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 "},
"v78":{"x_min":0,"x_max":193.28125,"ha":197,"o":"m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 "},
"v79":{"x_min":-1.359375,"x_max":899.703125,"ha":918,"o":"m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 "},
"v7a":{"x_min":-1.359375,"x_max":386.5625,"ha":394,"o":"m 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 "},
"v7c":{"x_min":0,"x_max":300.8125,"ha":307,"o":"m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 "},
"v7d":{"x_min":-1.359375,"x_max":436.921875,"ha":446,"o":"m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 "},
"v7f":{"x_min":0,"x_max":367.5,"ha":375,"o":"m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 "},
"v80":{"x_min":29.9375,"x_max":420.578125,"ha":371,"o":"m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 "},
"v81":{"x_min":0,"x_max":428.75,"ha":438,"o":"m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 "},
"v83":{"x_min":-1.359375,"x_max":847.96875,"ha":865,"o":"m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 "},
"v84":{"x_min":25.859375,"x_max":164.6875,"ha":168,"o":"m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 "},
"v86":{"x_min":-571.671875,"x_max":570.3125,"ha":582,"o":"m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 "},
"v8a":{"x_min":-170.140625,"x_max":168.78125,"ha":172,"o":"m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 "},
"v8b":{"x_min":0,"x_max":319.859375,"ha":326,"o":"m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 "},
"v8c":{"x_min":-330.75,"x_max":329.390625,"ha":336,"o":"m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 "},
"v8d":{"x_min":-1.359375,"x_max":255.890625,"ha":261,"o":"m 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 "},
"v8f":{"x_min":-21.78125,"x_max":362.0625,"ha":369,"o":"m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 "},
"v90":{"x_min":-171.5,"x_max":483.1875,"ha":493,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 "},
"v92":{"x_min":0,"x_max":598.890625,"ha":611,"o":"m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 "},
"v93":{"x_min":0,"x_max":438.28125,"ha":447,"o":"m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 "},
"v94":{"x_min":-149.71875,"x_max":148.359375,"ha":151,"o":"m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 "},
"v95":{"x_min":0,"x_max":406.96875,"ha":415,"o":"m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 "},
"v97":{"x_min":-228.671875,"x_max":227.3125,"ha":232,"o":"m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 "},
"v9a":{"x_min":-21.78125,"x_max":367.5,"ha":375,"o":"m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 "},
"v9b":{"x_min":-24.5,"x_max":313.0625,"ha":319,"o":"m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 "},
"v9c":{"x_min":-166.0625,"x_max":-25.859375,"ha":0,"o":"m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 "},
"v9e":{"x_min":0,"x_max":607.0625,"ha":619,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 "},
"va3":{"x_min":58.53125,"x_max":228.671875,"ha":294,"o":"m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 "},
"va5":{"x_min":0,"x_max":349.8125,"ha":357,"o":"m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 "},
"va9":{"x_min":-24.5,"x_max":314.421875,"ha":321,"o":"m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 "},
"vaa":{"x_min":-1.359375,"x_max":752.703125,"ha":768,"o":"m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 "},
"vab":{"x_min":0,"x_max":272.21875,"ha":278,"o":"m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 "},
"vad":{"x_min":0,"x_max":873.828125,"ha":892,"o":"m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 "},
"vb1":{"x_min":78.9375,"x_max":485.921875,"ha":417,"o":"m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 "},
"vb3":{"x_min":0,"x_max":227.3125,"ha":232,"o":"m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 "},
"vb4":{"x_min":-597.53125,"x_max":596.171875,"ha":608,"o":"m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 "},
"vb6":{"x_min":0,"x_max":556.6875,"ha":568,"o":"m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 "},
"vb7":{"x_min":-176.9375,"x_max":251.8125,"ha":257,"o":"m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 "},
"vb9":{"x_min":-122.5,"x_max":121.140625,"ha":124,"o":"m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 "},
"vba":{"x_min":-118.421875,"x_max":597.53125,"ha":381,"o":"m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 "},
"vbf":{"x_min":-53.078125,"x_max":513.140625,"ha":485,"o":"m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 "},
"vc3":{"x_min":-10.890625,"x_max":299.4375,"ha":294,"o":"m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 "},
"vd0":{"x_min":-10.890625,"x_max":299.4375,"ha":294,"o":"m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 "},
"vd1":{"x_min":-20,"x_max":320,"ha":257,"o":"m -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 "},
"vd2":{"x_min":0,"x_max":430.75,"ha":386,"o":"m 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 "},
"vd3":{"x_min":0,"x_max":430.75,"ha":386,"o":"m 0 200 l 0 -200 l 430 -200 l 430 200 l 0 200 l 50 150 l 380 150 l 380 -150 l 50 -150 l 50 150 "},
"vd4":{"x_min":0,"x_max":430.75,"ha":360,"o":"m 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 "},
"vd5":{"x_min":0,"x_max":430.75,"ha":360,"o":"m 0 150 l 0 -150 l 430 -150 l 430 150 l 0 150 l 50 100 l 380 100 l 380 -100 l 50 -100 l 50 100"},
"vd6":{"x_min":0,"x_max":430.75,"ha":360,"o":"m -146 537 b -138 538 -143 538 -141 538 b -118 525 -129 538 -121 533 b -117 390 -117 522 -117 521 b -115 259 -117 268 -117 259 b -115 259 -115 259 -115 259 b -59 272 -104 263 -62 272 b -39 259 -50 272 -42 267 b -37 209 -38 257 -37 233 b -39 159 -37 185 -38 162 b -85 138 -43 149 -44 149 l -117 131 l -117 21 b -115 -88 -117 -80 -117 -88 b -115 -88 -115 -88 -115 -88 b -59 -75 -104 -84 -62 -75 b -44 -81 -52 -75 -48 -77 b -38 -124 -38 -87 -38 -85 b -38 -138 -38 -124 -38 -138 b -38 -152 -38 -138 -38 -152 b -44 -195 -38 -191 -38 -190 b -85 -209 -48 -200 -48 -200 l -117 -217 l -117 -349 b -118 -486 -117 -481 -117 -482 b -138 -499 -121 -494 -129 -499 b -153 -493 -143 -499 -149 -497 b -159 -415 -158 -487 -159 -496 b -159 -355 -159 -398 -159 -379 b -159 -227 -159 -284 -159 -227 b -205 -238 -159 -227 -180 -232 b -250 -249 -230 -244 -250 -249 b -251 -386 -251 -249 -251 -311 b -252 -525 -251 -521 -251 -522 b -272 -538 -255 -534 -264 -538 b -287 -532 -277 -538 -283 -536 b -293 -452 -292 -527 -293 -536 b -293 -391 -293 -436 -293 -415 b -294 -260 -293 -269 -293 -260 b -294 -260 -294 -260 -294 -260 b -348 -272 -306 -264 -345 -272 b -368 -259 -357 -272 -365 -267 b -369 -209 -369 -257 -369 -233 b -368 -159 -369 -185 -369 -162 b -323 -139 -364 -149 -362 -148 l -293 -131 l -293 -22 b -294 87 -293 80 -293 87 b -294 87 -294 87 -294 87 b -348 75 -306 84 -345 75 b -368 88 -357 75 -365 80 b -369 138 -369 91 -369 114 b -368 188 -369 162 -369 186 b -323 209 -364 198 -362 199 l -293 216 l -293 349 b -292 486 -293 481 -293 482 b -272 499 -288 494 -280 499 b -257 493 -266 499 -261 497 b -251 414 -251 487 -251 496 b -251 354 -251 398 -251 378 b -251 226 -251 284 -251 226 b -205 238 -250 226 -230 231 b -159 249 -180 244 -159 249 b -159 385 -159 249 -159 310 b -157 525 -159 521 -159 522 b -146 537 -156 530 -151 535 z m -159 11 b -159 120 -159 98 -159 120 l -159 120 b -175 116 -160 120 -167 119 b -221 105 -184 114 -204 109 l -251 98 l -251 -12 b -251 -121 -251 -72 -251 -121 b -205 -110 -250 -121 -230 -116 b -159 -99 -180 -104 -159 -99 b -159 11 -159 -99 -159 -49 z m 89 517 b 97 519 92 518 94 519 b 117 505 106 519 114 513 b 119 376 119 502 119 501 l 119 249 l 145 258 b 176 267 169 266 172 267 b 177 267 176 267 177 267 b 196 255 186 267 192 263 l 197 252 l 197 205 b 197 181 197 195 197 187 b 193 149 197 153 197 153 b 152 131 190 144 187 143 l 119 120 l 119 10 b 119 -100 119 -62 119 -100 b 145 -91 120 -100 131 -96 b 173 -82 159 -86 171 -82 b 176 -81 174 -81 175 -81 b 196 -94 185 -81 193 -87 b 198 -151 197 -97 198 -125 b 197 -194 198 -172 197 -192 b 153 -218 193 -203 192 -204 l 119 -230 l 119 -367 l 118 -504 l 117 -507 b 97 -519 113 -514 105 -519 b 82 -512 92 -519 87 -517 b 76 -434 77 -507 76 -516 b 76 -374 76 -418 76 -398 b 76 -245 76 -303 76 -245 b 52 -254 76 -245 65 -249 b 19 -263 34 -260 25 -263 b 6 -257 13 -263 10 -261 b 0 -214 0 -251 0 -253 b 0 -200 0 -210 0 -205 b 0 -188 0 -196 0 -192 b 6 -143 0 -147 0 -149 b 46 -126 10 -139 10 -139 l 76 -115 l 76 -5 b 76 106 76 56 76 106 b 51 98 76 106 64 102 b 18 89 34 92 25 89 b 6 95 13 89 10 91 b 0 139 0 101 0 99 b 0 153 0 143 0 148 b 0 179 0 163 0 172 b 44 225 0 215 3 211 l 76 236 l 76 369 b 78 505 76 501 76 502 b 89 517 80 510 85 515 z "},
"vd7":{"x_min":0,"x_max":430.75,"ha":360,"o":"m 283 633 b 291 634 286 634 289 634 b 311 621 300 634 308 629 b 313 505 313 618 313 617 b 313 393 313 443 313 393 b 378 425 313 393 343 407 l 443 458 l 448 458 b 449 458 449 458 449 458 b 471 437 462 458 471 448 b 469 429 471 434 470 432 b 387 382 466 421 469 423 l 313 344 l 313 247 l 313 150 l 315 152 b 433 201 353 184 394 201 b 479 193 448 201 464 198 b 549 86 524 177 549 135 b 526 1 549 59 541 29 b 395 -143 504 -39 475 -71 b 316 -214 351 -182 341 -191 b 292 -229 302 -228 300 -229 b 272 -216 283 -229 275 -224 b 271 55 271 -212 271 -212 b 270 323 271 203 270 323 b 205 291 270 323 241 308 l 140 258 l 135 258 b 134 258 135 258 134 258 b 112 279 121 258 112 267 b 114 287 112 281 113 284 b 196 334 117 295 114 293 l 271 371 l 271 495 b 272 621 271 617 271 618 b 283 633 274 626 279 631 z m 404 133 b 391 134 400 134 395 134 b 384 134 388 134 386 134 b 318 88 358 130 335 114 l 313 81 l 313 -37 l 313 -156 l 316 -152 b 439 83 391 -71 439 22 l 439 84 b 404 133 439 115 430 128 z m -8 633 l -8 633 b 0 634 -6 634 -3 634 b 20 621 8 634 17 629 b 21 384 21 618 21 617 l 21 150 l 24 152 b 141 201 62 184 102 201 b 187 193 157 201 172 198 b 257 86 232 177 257 135 b 234 1 257 59 250 29 b 103 -143 212 -39 183 -71 b 24 -214 60 -182 49 -191 b 0 -229 10 -228 8 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 203 l -21 618 l -20 621 b -8 633 -18 626 -13 631 z m 113 133 l 113 133 b 99 134 109 134 103 134 b 93 134 97 134 94 134 b 26 88 66 130 43 114 l 21 81 l 21 -37 l 21 -156 l 25 -152 b 148 83 99 -71 148 22 l 148 84 b 113 133 148 115 138 128 z "},
},
"cssFontWeight":"normal","ascender":1903,"underlinePosition":-125,"cssFontStyle":"normal","boundingBox":{"yMin":-2065.375,"xMin":-695.53125,"yMax":1901.578125,"xMax":1159.671875},
"resolution":1000,"descender":-2066,"familyName":"VexFlow-18","lineHeight":4093,"underlineThickness":50
};


/***/ }),

/***/ "./node_modules/vexflow/src/formatter.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/formatter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Formatter: () => (/* binding */ Formatter)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _beam__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./beam */ "./node_modules/vexflow/src/beam.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./voice */ "./node_modules/vexflow/src/voice.js");
/* harmony import */ var _staveconnector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./staveconnector */ "./node_modules/vexflow/src/staveconnector.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _modifiercontext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifiercontext */ "./node_modules/vexflow/src/modifiercontext.js");
/* harmony import */ var _tickcontext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tickcontext */ "./node_modules/vexflow/src/tickcontext.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements the formatting and layout algorithms that are used
// to position notes in a voice. The algorithm can align multiple voices both
// within a stave, and across multiple staves.
//
// To do this, the formatter breaks up voices into a grid of rational-valued
// `ticks`, to which each note is assigned. Then, minimum widths are assigned
// to each tick based on the widths of the notes and modifiers in that tick. This
// establishes the smallest amount of space required for each tick.
//
// Finally, the formatter distributes the left over space proportionally to
// all the ticks, setting the `x` values of the notes in each tick.
//
// See `tests/formatter_tests.js` for usage examples. The helper functions included
// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.












// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.
function L(...args) { if (Formatter.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Formatter', args); }

// Helper function to locate the next non-rest note(s).
function lookAhead(notes, restLine, i, compare) {
  // If no valid next note group, nextRestLine is same as current.
  let nextRestLine = restLine;

  // Get the rest line for next valid non-rest note group.
  for (i += 1; i < notes.length; i += 1) {
    const note = notes[i];
    if (!note.isRest() && !note.shouldIgnoreTicks()) {
      nextRestLine = note.getLineForRest();
      break;
    }
  }

  // Locate the mid point between two lines.
  if (compare && restLine !== nextRestLine) {
    const top = Math.max(restLine, nextRestLine);
    const bot = Math.min(restLine, nextRestLine);
    nextRestLine = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MidLine(top, bot);
  }
  return nextRestLine;
}

// Take an array of `voices` and place aligned tickables in the same context. Returns
// a mapping from `tick` to `ContextType`, a list of `tick`s, and the resolution
// multiplier.
//
// Params:
// * `voices`: Array of `Voice` instances.
// * `ContextType`: A context class (e.g., `ModifierContext`, `TickContext`)
// * `addToContext`: Function to add tickable to context.
function createContexts(voices, ContextType, addToContext) {
  if (!voices || !voices.length) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'No voices to format');
  }

  // Find out highest common multiple of resolution multipliers.
  // The purpose of this is to find out a common denominator
  // for all fractional tick values in all tickables of all voices,
  // so that the values can be expanded and the numerator used
  // as an integer tick value.
  const totalTicks = voices[0].getTotalTicks();
  const resolutionMultiplier = voices.reduce((resolutionMultiplier, voice) => {
    // VexFlowPatch: this error is unnecessary, and prevents the fix to the layouting in #1187.
    // if (!voice.getTotalTicks().equals(totalTicks)) {
    //   throw new Vex.RERR(
    //     'TickMismatch', 'Voices should have same total note duration in ticks.'
    //   );
    // }

    if (voice.getMode() === _voice__WEBPACK_IMPORTED_MODULE_4__.Voice.Mode.STRICT && !voice.isComplete()) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'IncompleteVoice', 'Voice does not have enough notes.'
      );
    }

    return Math.max(
      resolutionMultiplier,
      _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction.LCM(resolutionMultiplier, voice.getResolutionMultiplier())
    );
  }, 1);

  // Initialize tick maps.
  const tickToContextMap = {};
  const tickList = [];
  const contexts = [];

  // For each voice, extract notes and create a context for every
  // new tick that hasn't been seen before.
  voices.forEach(voice => {
    // Use resolution multiplier as denominator to expand ticks
    // to suitable integer values, so that no additional expansion
    // of fractional tick values is needed.
    const ticksUsed = new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(0, resolutionMultiplier);

    voice.getTickables().forEach(tickable => {
      const integerTicks = ticksUsed.numerator;

      // If we have no tick context for this tick, create one.
      if (!tickToContextMap[integerTicks]) {
        const newContext = new ContextType();
        contexts.push(newContext);
        tickToContextMap[integerTicks] = newContext;
      }

      // Add this tickable to the TickContext.
      addToContext(tickable, tickToContextMap[integerTicks]);

      // Maintain a sorted list of tick contexts.
      tickList.push(integerTicks);
      ticksUsed.add(tickable.getTicks());
    });
  });

  return {
    map: tickToContextMap,
    array: contexts,
    list: _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.SortAndUnique(tickList, (a, b) => a - b, (a, b) => a === b),
    resolutionMultiplier,
  };
}

class Formatter {
  // Helper function to layout "notes" one after the other without
  // regard for proportions. Useful for tests and debugging.
  static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {
    notes.reduce((x, note) => {
      note.addToModifierContext(new _modifiercontext__WEBPACK_IMPORTED_MODULE_8__.ModifierContext());
      const tick = new _tickcontext__WEBPACK_IMPORTED_MODULE_9__.TickContext().addTickable(note).preFormat();
      const extra = tick.getExtraPx();
      tick.setX(x + extra.left);

      return x + tick.getWidth() + extra.right + paddingBetween;
    }, x);
  }

  // Helper function to plot formatter debug info.
  static plotDebugging(ctx, formatter, xPos, y1, y2) {
    const x = xPos + _note__WEBPACK_IMPORTED_MODULE_7__.Note.STAVEPADDING;
    const contextGaps = formatter.contextGaps;
    function stroke(x1, x2, color) {
      ctx.beginPath();
      ctx.setStrokeStyle(color);
      ctx.setFillStyle(color);
      ctx.setLineWidth(1);
      ctx.fillRect(x1, y1, x2 - x1, y2 - y1);
    }

    ctx.save();
    ctx.setFont('Arial', 8, '');

    contextGaps.gaps.forEach(gap => {
      stroke(x + gap.x1, x + gap.x2, '#aaa');
      // Vex.drawDot(ctx, xPos + gap.x1, yPos, 'blue');
      ctx.fillText(Math.round(gap.x2 - gap.x1), x + gap.x1, y2 + 12);
    });

    ctx.fillText(Math.round(contextGaps.total) + 'px', x - 20, y2 + 12);
    ctx.setFillStyle('red');

    ctx.fillText('Loss: ' +
      formatter.lossHistory.map(loss => Math.round(loss)), x - 20, y2 + 22);
    ctx.restore();
  }

  // Helper function to format and draw a single voice. Returns a bounding
  // box for the notation.
  //
  // Parameters:
  // * `ctx` - The rendering context
  // * `stave` - The stave to which to draw (`Stave` or `TabStave`)
  // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)
  // * `params` - One of below:
  //    * Setting `autobeam` only `(context, stave, notes, true)` or
  //      `(ctx, stave, notes, {autobeam: true})`
  //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`
  //    * Setting both a struct is needed `(context, stave, notes, {
  //      autobeam: true, align_rests: true})`
  //
  // `autobeam` automatically generates beams for the notes.
  // `align_rests` aligns rests with nearby notes.
  static FormatAndDraw(ctx, stave, notes, params) {
    const options = {
      auto_beam: false,
      align_rests: false,
    };

    if (typeof params === 'object') {
      _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(options, params);
    } else if (typeof params === 'boolean') {
      options.auto_beam = params;
    }

    // Start by creating a voice and adding all the notes to it.
    const voice = new _voice__WEBPACK_IMPORTED_MODULE_4__.Voice(_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.TIME4_4)
      .setMode(_voice__WEBPACK_IMPORTED_MODULE_4__.Voice.Mode.SOFT)
      .addTickables(notes);

    // Then create beams, if requested.
    const beams = options.auto_beam ? _beam__WEBPACK_IMPORTED_MODULE_1__.Beam.applyAndGetBeams(voice) : [];

    // Instantiate a `Formatter` and format the notes.
    new Formatter()
      .joinVoices([voice], { align_rests: options.align_rests })
      .formatToStave([voice], stave, { align_rests: options.align_rests, stave });

    // Render the voice and beams to the stave.
    voice.setStave(stave).draw(ctx, stave);
    beams.forEach(beam => beam.setContext(ctx).draw());

    // Return the bounding box of the voice.
    return voice.getBoundingBox();
  }

  // Helper function to format and draw aligned tab and stave notes in two
  // separate staves.
  //
  // Parameters:
  // * `ctx` - The rendering context
  // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.
  // * `stave` - A `Stave` instance on which to render `Note`s.
  // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)
  // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)
  // * `autobeam` - Automatically generate beams.
  // * `params` - A configuration object:
  //    * `autobeam` automatically generates beams for the notes.
  //    * `align_rests` aligns rests with nearby notes.
  static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {
    const opts = {
      auto_beam: autobeam,
      align_rests: false,
    };

    if (typeof params === 'object') {
      _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(opts, params);
    } else if (typeof params === 'boolean') {
      opts.auto_beam = params;
    }

    // Create a `4/4` voice for `notes`.
    const notevoice = new _voice__WEBPACK_IMPORTED_MODULE_4__.Voice(_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.TIME4_4)
      .setMode(_voice__WEBPACK_IMPORTED_MODULE_4__.Voice.Mode.SOFT)
      .addTickables(notes);

    // Create a `4/4` voice for `tabnotes`.
    const tabvoice = new _voice__WEBPACK_IMPORTED_MODULE_4__.Voice(_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.TIME4_4)
      .setMode(_voice__WEBPACK_IMPORTED_MODULE_4__.Voice.Mode.SOFT)
      .addTickables(tabnotes);

    // Then create beams, if requested.
    const beams = opts.auto_beam ? _beam__WEBPACK_IMPORTED_MODULE_1__.Beam.applyAndGetBeams(notevoice) : [];

    // Instantiate a `Formatter` and align tab and stave notes.
    new Formatter()
      .joinVoices([notevoice], { align_rests: opts.align_rests })
      .joinVoices([tabvoice])
      .formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });

    // Render voices and beams to staves.
    notevoice.draw(ctx, stave);
    tabvoice.draw(ctx, tabstave);
    beams.forEach(beam => beam.setContext(ctx).draw());

    // Draw a connector between tab and note staves.
    new _staveconnector__WEBPACK_IMPORTED_MODULE_5__.StaveConnector(stave, tabstave).setContext(ctx).draw();
  }

  // Auto position rests based on previous/next note positions.
  //
  // Params:
  // * `notes`: An array of notes.
  // * `alignAllNotes`: If set to false, only aligns non-beamed notes.
  // * `alignTuplets`: If set to false, ignores tuplets.
  static AlignRestsToNotes(notes, alignAllNotes, alignTuplets) {
    notes.forEach((note, index) => {
      if (note instanceof _stavenote__WEBPACK_IMPORTED_MODULE_6__.StaveNote && note.isRest()) {
        if (note.tuplet && !alignTuplets) return;

        // If activated rests not on default can be rendered as specified.
        const position = note.getGlyph().position.toUpperCase();
        if (position !== 'R/4' && position !== 'B/4') return;

        if (alignAllNotes || note.beam != null) {
          // Align rests with previous/next notes.
          const props = note.getKeyProps()[0];
          if (index === 0) {
            props.line = lookAhead(notes, props.line, index, false);
            note.setKeyLine(0, props.line);
          } else if (index > 0 && index < notes.length) {
            // If previous note is a rest, use its line number.
            let restLine;
            if (notes[index - 1].isRest()) {
              restLine = notes[index - 1].getKeyProps()[0].line;
              props.line = restLine;
            } else {
              restLine = notes[index - 1].getLineForRest();
              // Get the rest line for next valid non-rest note group.
              props.line = lookAhead(notes, restLine, index, true);
            }
            note.setKeyLine(0, props.line);
          }
        }
      }
    });

    return this;
  }

  constructor() {
    // Minimum width required to render all the notes in the voices.
    this.minTotalWidth = 0;

    // This is set to `true` after `minTotalWidth` is calculated.
    this.hasMinTotalWidth = false;

    // Total number of ticks in the voice.
    this.totalTicks = new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(0, 1);

    // Arrays of tick and modifier contexts.
    this.tickContexts = null;
    this.modiferContexts = null;

    // Gaps between contexts, for free movement of notes post
    // formatting.
    this.contextGaps = {
      total: 0,
      gaps: [],
    };

    this.voices = [];
  }

  // Find all the rests in each of the `voices` and align them
  // to neighboring notes. If `alignAllNotes` is `false`, then only
  // align non-beamed notes.
  alignRests(voices, alignAllNotes) {
    if (!voices || !voices.length) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'No voices to format rests');
    }

    voices.forEach(voice =>
      Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));
  }

  // Calculate the minimum width required to align and format `voices`.
  preCalculateMinTotalWidth(voices) {
    // Cache results.
    if (this.hasMinTotalWidth) return this.minTotalWidth;

    // Create tick contexts if not already created.
    if (!this.tickContexts) {
      if (!voices) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
          'BadArgument', "'voices' required to run preCalculateMinTotalWidth"
        );
      }

      this.createTickContexts(voices);
    }

    const { list: contextList, map: contextMap } = this.tickContexts;

    // Go through each tick context and calculate total width.
    this.minTotalWidth = contextList
      .map(tick => {
        const context = contextMap[tick];
        context.preFormat();
        return context.getWidth();
      })
      .reduce((a, b) => a + b, 0);

    this.hasMinTotalWidth = true;

    return this.minTotalWidth;
  }

  // Get minimum width required to render all voices. Either `format` or
  // `preCalculateMinTotalWidth` must be called before this method.
  getMinTotalWidth() {
    if (!this.hasMinTotalWidth) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'NoMinTotalWidth',
        "Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'"
      );
    }

    return this.minTotalWidth;
  }

  // Create `ModifierContext`s for each tick in `voices`.
  createModifierContexts(voices) {
    const contexts = createContexts(
      voices,
      _modifiercontext__WEBPACK_IMPORTED_MODULE_8__.ModifierContext,
      (tickable, context) => tickable.addToModifierContext(context)
    );

    this.modiferContexts = contexts;
    return contexts;
  }

  // Create `TickContext`s for each tick in `voices`. Also calculate the
  // total number of ticks in voices.
  createTickContexts(voices) {
    const contexts = createContexts(
      voices,
      _tickcontext__WEBPACK_IMPORTED_MODULE_9__.TickContext,
      (tickable, context) => context.addTickable(tickable)
    );

    contexts.array.forEach(context => {
      context.tContexts = contexts.array;
    });

    this.totalTicks = voices[0].getTicksUsed().clone();
    this.tickContexts = contexts;
    return contexts;
  }

  // This is the core formatter logic. Format voices and justify them
  // to `justifyWidth` pixels. `renderingContext` is required to justify elements
  // that can't retreive widths without a canvas. This method sets the `x` positions
  // of all the tickables/notes in the formatter.
  preFormat(justifyWidth = 0, renderingContext, voices, stave) {
    // Initialize context maps.
    const contexts = this.tickContexts;
    const { list: contextList, map: contextMap, resolutionMultiplier } = contexts;

    // If voices and a stave were provided, set the Stave for each voice
    // and preFormat to apply Y values to the notes;
    if (voices && stave) {
      voices.forEach(voice => voice.setStave(stave).preFormat());
    }

    // Now distribute the ticks to each tick context, and assign them their
    // own X positions.
    let x = 0;
    let shift = 0;
    const centerX = justifyWidth / 2;
    this.minTotalWidth = 0;

    // Pass 1: Give each note maximum width requested by context.
    contextList.forEach((tick) => {
      const context = contextMap[tick];
      if (renderingContext) context.setContext(renderingContext);

      // Make sure that all tickables in this context have calculated their
      // space requirements.
      context.preFormat();

      const width = context.getWidth();
      this.minTotalWidth += width;

      const metrics = context.getMetrics();
      x = x + shift + metrics.extraLeftPx;
      context.setX(x);

      // Calculate shift for the next tick.
      shift = width - metrics.extraLeftPx;
    });

    this.minTotalWidth = x + shift;
    this.hasMinTotalWidth = true;

    // No justification needed. End formatting.
    if (justifyWidth <= 0) return;

    // Pass 2: Take leftover width, and distribute it to proportionately to
    // all notes.
    const remainingX = justifyWidth - this.minTotalWidth;
    let totalTicks = this.totalTicks.value();
    if (totalTicks === 0) {
      totalTicks = 1;
      // VexFlowPatch: this is not supposed to happen, but does for faulty tab scores, needs fixing,
      //   so that leftoverPxPerTick doesn't become Infinity, and then x is set to NaN (via setX())
    }
    const leftoverPxPerTick = remainingX / (totalTicks * resolutionMultiplier);
    let spaceAccum = 0;

    contextList.forEach((tick, index) => {
      const prevTick = contextList[index - 1] || 0;
      const context = contextMap[tick];
      const tickSpace = (tick - prevTick) * leftoverPxPerTick;

      spaceAccum += tickSpace;
      context.setX(context.getX() + spaceAccum);

      // Move center aligned tickables to middle
      context
        .getCenterAlignedTickables()
        .forEach(tickable => { // eslint-disable-line
          tickable.center_x_shift = centerX - context.getX();
        });
    });

    // Just one context. Done formatting.
    if (contextList.length === 1) return;

    this.justifyWidth = justifyWidth;
    this.lossHistory = [];
    this.evaluate();
  }

  // Calculate the total cost of this formatting decision.
  evaluate() {
    const justifyWidth = this.justifyWidth;
    // Calculate available slack per tick context. This works out how much freedom
    // to move a context has in either direction, without affecting other notes.
    this.contextGaps = { total: 0, gaps: [] };
    this.tickContexts.list.forEach((tick, index) => {
      if (index === 0) return;
      const prevTick = this.tickContexts.list[index - 1];
      const prevContext = this.tickContexts.map[prevTick];
      const context = this.tickContexts.map[tick];
      const prevMetrics = prevContext.getMetrics();

      const insideRightEdge = prevContext.getX() + prevMetrics.width;
      const insideLeftEdge = context.getX();
      const gap = insideLeftEdge - insideRightEdge;
      this.contextGaps.total += gap;
      this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });

      // Tell the tick contexts how much they can reposition themselves.
      context.getFormatterMetrics().freedom.left = gap;
      prevContext.getFormatterMetrics().freedom.right = gap;
    });

    // Calculate mean distance in each voice for each duration type, then calculate
    // how far each note is from the mean.
    const durationStats = this.durationStats = {};

    function updateStats(duration, space) {
      const stats = durationStats[duration];
      if (stats === undefined) {
        durationStats[duration] = { mean: space, count: 1 };
      } else {
        stats.count += 1;
        stats.mean = (stats.mean + space) / 2;
      }
    }

    this.voices.forEach(voice => {
      voice.getTickables().forEach((note, i, notes) => {
        const duration = note.getTicks().clone().simplify().toString();
        const metrics = note.getMetrics();
        const formatterMetrics = note.getFormatterMetrics();
        const leftNoteEdge = note.getX() + metrics.noteWidth +
          metrics.modRightPx + metrics.extraRightPx;
        let space = 0;

        if (i < (notes.length - 1)) {
          const rightNote = notes[i + 1];
          const rightMetrics = rightNote.getMetrics();
          const rightNoteEdge = rightNote.getX() -
            rightMetrics.modLeftPx - rightMetrics.extraLeftPx;

          space = rightNoteEdge - leftNoteEdge;
          formatterMetrics.space.used = rightNote.getX() - note.getX();
          rightNote.getFormatterMetrics().freedom.left = space;
        } else {
          space = justifyWidth - leftNoteEdge;
          formatterMetrics.space.used = justifyWidth - note.getX();
        }

        formatterMetrics.freedom.right = space;
        updateStats(duration, formatterMetrics.space.used);
      });
    });

    // Calculate how much each note deviates from the mean. Loss function is square
    // root of the sum of squared deviations.
    let totalDeviation = 0;
    this.voices.forEach(voice => {
      voice.getTickables().forEach((note) => {
        const duration = note.getTicks().clone().simplify().toString();
        const metrics = note.getFormatterMetrics();
        metrics.iterations += 1;
        metrics.space.deviation = metrics.space.used - durationStats[duration].mean;
        metrics.duration = duration;
        metrics.space.mean = durationStats[duration].mean;

        totalDeviation += Math.pow(durationStats[duration].mean, 2);
      });
    });

    this.totalCost = Math.sqrt(totalDeviation);
    this.lossHistory.push(this.totalCost);
    return this;
  }

  // Run a single iteration of rejustification. At a high level, this method calculates
  // the overall "loss" (or cost) of this layout, and repositions tickcontexts in an
  // attempt to reduce the cost. You can call this method multiple times until it finds
  // and oscillates around a global minimum.
  tune() {
    const sum = (means) => means.reduce((a, b) => a + b);

    // Move `current` tickcontext by `shift` pixels, and adjust the freedom
    // on adjacent tickcontexts.
    function move(current, prev, next, shift) {
      current.setX(current.getX() + shift);
      current.getFormatterMetrics().freedom.left += shift;
      current.getFormatterMetrics().freedom.right -= shift;

      if (prev) prev.getFormatterMetrics().freedom.right += shift;
      if (next) next.getFormatterMetrics().freedom.left -= shift;
    }

    let shift = 0;
    this.tickContexts.list.forEach((tick, index, list) => {
      const context = this.tickContexts.map[tick];
      const prevContext = (index > 0) ? this.tickContexts.map[list[index - 1]] : null;
      const nextContext = (index < list.length - 1) ? this.tickContexts.map[list[index + 1]] : null;

      move(context, prevContext, nextContext, shift);

      const cost = -sum(
        context.getTickables().map(t => t.getFormatterMetrics().space.deviation));

      if (cost > 0) {
        shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));
      } else if (cost < 0) {
        if (nextContext) {
          shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));
        } else {
          shift = 0;
        }
      }

      const minShift = Math.min(5, Math.abs(shift));
      shift = shift > 0 ? minShift : -minShift;
    });

    return this.evaluate();
  }

  // This is the top-level call for all formatting logic completed
  // after `x` *and* `y` values have been computed for the notes
  // in the voices.
  postFormat() {
    const postFormatContexts = (contexts) =>
      contexts.list.forEach(tick => contexts.map[tick].postFormat());

    postFormatContexts(this.modiferContexts);
    postFormatContexts(this.tickContexts);

    return this;
  }

  // Take all `voices` and create `ModifierContext`s out of them. This tells
  // the formatters that the voices belong on a single stave.
  joinVoices(voices) {
    this.createModifierContexts(voices);
    this.hasMinTotalWidth = false;
    return this;
  }

  // Align rests in voices, justify the contexts, and position the notes
  // so voices are aligned and ready to render onto the stave. This method
  // mutates the `x` positions of all tickables in `voices`.
  //
  // Voices are full justified to fit in `justifyWidth` pixels.
  //
  // Set `options.context` to the rendering context. Set `options.align_rests`
  // to true to enable rest alignment.
  format(voices, justifyWidth, options) {
    const opts = {
      align_rests: false,
      context: null,
      stave: null,
    };

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(opts, options);
    this.voices = voices;
    this.alignRests(voices, opts.align_rests);
    this.createTickContexts(voices);
    this.preFormat(justifyWidth, opts.context, voices, opts.stave);

    // Only postFormat if a stave was supplied for y value formatting
    if (opts.stave) this.postFormat();

    return this;
  }

  // This method is just like `format` except that the `justifyWidth` is inferred
  // from the `stave`.
  formatToStave(voices, stave, options) {
    const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;
    L('Formatting voices to width: ', justifyWidth);
    const opts = { context: stave.getContext() };
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(opts, options);
    return this.format(voices, justifyWidth, opts);
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/fraction.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/fraction.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Fraction: () => (/* binding */ Fraction)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// Fraction class that represents a rational number
//
// @author zz85
// @author incompleteopus (modifications)

/* eslint-disable no-underscore-dangle */


class Fraction {
  /**
   * GCD: Find greatest common divisor using Euclidean algorithm
   */
  static GCD(a, b) {
    if (typeof a !== 'number' || typeof b !== 'number') {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', `Invalid numbers: ${a}, ${b}`);
    }

    let t;

    while (b !== 0) {
      t = b;
      b = a % b;
      a = t;
    }

    return a;
  }

  /**
   * LCM: Lowest common multiple
   */
  static LCM(a, b) {
    return ((a * b) / Fraction.GCD(a, b));
  }

  /**
   * LCMM: Lowest common multiple for more than two numbers
   */
  static LCMM(args) {
    if (args.length === 0) {
      return 0;
    } else if (args.length === 1) {
      return args[0];
    } else if (args.length === 2) {
      return Fraction.LCM(args[0], args[1]);
    } else {
      const arg0 = args[0];
      args.shift();
      return Fraction.LCM(arg0, Fraction.LCMM(args));
    }
  }

  constructor(numerator, denominator) {
    this.set(numerator, denominator);
  }
  set(numerator, denominator) {
    this.numerator = numerator === undefined ? 1 : numerator;
    this.denominator = denominator === undefined ? 1 : denominator;
    return this;
  }
  value() {
    return this.numerator / this.denominator;
  }
  simplify() {
    let u = this.numerator;
    let d = this.denominator;

    const gcd = Fraction.GCD(u, d);
    u /= gcd;
    d /= gcd;

    if (d < 0) {
      d = -d;
      u = -u;
    }
    return this.set(u, d);
  }
  add(param1, param2) {
    let otherNumerator;
    let otherDenominator;

    if (param1 instanceof Fraction) {
      otherNumerator = param1.numerator;
      otherDenominator = param1.denominator;
    } else {
      if (param1 !== undefined) {
        otherNumerator = param1;
      } else {
        otherNumerator = 0;
      }

      if (param2 !== undefined) {
        otherDenominator = param2;
      } else {
        otherDenominator = 1;
      }
    }

    const lcm = Fraction.LCM(this.denominator, otherDenominator);
    const a = lcm / this.denominator;
    const b = lcm / otherDenominator;

    const u = this.numerator * a + otherNumerator * b;
    return this.set(u, lcm);
  }
  subtract(param1, param2) {
    let otherNumerator;
    let otherDenominator;

    if (param1 instanceof Fraction) {
      otherNumerator = param1.numerator;
      otherDenominator = param1.denominator;
    } else {
      if (param1 !== undefined) {
        otherNumerator = param1;
      } else {
        otherNumerator = 0;
      }

      if (param2 !== undefined) {
        otherDenominator = param2;
      } else {
        otherDenominator = 1;
      }
    }

    const lcm = Fraction.LCM(this.denominator, otherDenominator);
    const a = lcm / this.denominator;
    const b = lcm / otherDenominator;

    const u = this.numerator * a - otherNumerator * b;
    return this.set(u, lcm);
  }
  multiply(param1, param2) {
    let otherNumerator;
    let otherDenominator;

    if (param1 instanceof Fraction) {
      otherNumerator = param1.numerator;
      otherDenominator = param1.denominator;
    } else {
      if (param1 !== undefined) {
        otherNumerator = param1;
      } else {
        otherNumerator = 1;
      }

      if (param2 !== undefined) {
        otherDenominator = param2;
      } else {
        otherDenominator = 1;
      }
    }

    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);
  }
  divide(param1, param2) {
    let otherNumerator;
    let otherDenominator;

    if (param1 instanceof Fraction) {
      otherNumerator = param1.numerator;
      otherDenominator = param1.denominator;
    } else {
      if (param1 !== undefined) {
        otherNumerator = param1;
      } else {
        otherNumerator = 1;
      }

      if (param2 !== undefined) {
        otherDenominator = param2;
      } else {
        otherDenominator = 1;
      }
    }

    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);
  }

  // Simplifies both sides and checks if they are equal.
  equals(compare) {
    const a = Fraction.__compareA.copy(compare).simplify();
    const b = Fraction.__compareB.copy(this).simplify();

    return (a.numerator === b.numerator) && (a.denominator === b.denominator);
  }

  // Greater than operator.
  greaterThan(compare) {
    const a = Fraction.__compareB.copy(this);
    a.subtract(compare);
    return (a.numerator > 0);
  }

  // Greater than or equals operator.
  greaterThanEquals(compare) {
    const a = Fraction.__compareB.copy(this);
    a.subtract(compare);
    return (a.numerator >= 0);
  }

  // Less than operator.
  lessThan(compare) {
    return !(this.greaterThanEquals(compare));
  }

  // Less than or equals operator.
  lessThanEquals(compare) {
    return !(this.greaterThan(compare));
  }

  // Creates a new copy with this current values.
  clone() {
    return new Fraction(this.numerator, this.denominator);
  }

  // Copies value of another Fraction into itself.
  copy(copy) {
    if (typeof copy === 'number') {
      return this.set(copy || 0, 1);
    }
    return this.set(copy.numerator, copy.denominator);
  }

  // Returns the integer component eg. (4/2) == 2
  quotient() {
    return Math.floor(this.numerator / this.denominator);
  }

  // Returns the fraction component when reduced to a mixed number
  fraction() {
    return this.numerator % this.denominator;
  }

  // Returns the absolute value
  abs() {
    this.denominator = Math.abs(this.denominator);
    this.numerator = Math.abs(this.numerator);
    return this;
  }

  // Returns a raw string representation
  toString() {
    return this.numerator + '/' + this.denominator;
  }

  // Returns a simplified string respresentation
  toSimplifiedString() {
    return Fraction.__tmp.copy(this).simplify().toString();
  }

  // Returns string representation in mixed form
  toMixedString() {
    let s = '';
    const q = this.quotient();
    const f = Fraction.__tmp.copy(this);

    if (q < 0) {
      f.abs().fraction();
    } else {
      f.fraction();
    }

    if (q !== 0) {
      s += q;

      if (f.numerator !== 0) {
        s += ' ' + f.toSimplifiedString();
      }
    } else {
      if (f.numerator === 0) {
        s = '0';
      } else {
        s = f.toSimplifiedString();
      }
    }

    return s;
  }

  // Parses a fraction string
  parse(str) {
    const i = str.split('/');
    const n = parseInt(i[0], 10);
    const d = (i[1]) ? parseInt(i[1], 10) : 1;

    return this.set(n, d);
  }
}

// Temporary cached objects
Fraction.__compareA = new Fraction();
Fraction.__compareB = new Fraction();
Fraction.__tmp = new Fraction();


/***/ }),

/***/ "./node_modules/vexflow/src/frethandfinger.js":
/*!****************************************************!*\
  !*** ./node_modules/vexflow/src/frethandfinger.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FretHandFinger: () => (/* binding */ FretHandFinger)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
// VexFlow - Music Engraving for HTML5
// Copyright Mohit Muthanna 2010
// Author Larry Kuhns 2013
// Class to draws string numbers into the notation.




/**
 * @constructor
 */
class FretHandFinger extends _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier {
  static get CATEGORY() { return 'frethandfinger'; }

  // Arrange fingerings inside a ModifierContext.
  static format(nums, state) {
    const { left_shift, right_shift } = state;
    const num_spacing = 1;

    if (!nums || nums.length === 0) return false;

    const nums_list = [];
    let prev_note = null;
    let shiftLeft = 0;
    let shiftRight = 0;

    for (let i = 0; i < nums.length; ++i) {
      const num = nums[i];
      const note = num.getNote();
      const pos = num.getPosition();
      const props = note.getKeyProps()[num.getIndex()];
      if (note !== prev_note) {
        for (let n = 0; n < note.keys.length; ++n) {
          const props_tmp = note.getKeyProps()[n];
          if (left_shift === 0) {
            shiftLeft = props_tmp.displaced ? note.getExtraLeftPx() : shiftLeft;
          }
          if (right_shift === 0) {
            shiftRight = props_tmp.displaced ? note.getExtraRightPx() : shiftRight;
          }
        }
        prev_note = note;
      }

      nums_list.push({
        note,
        num,
        pos,
        line: props.line,
        shiftL: shiftLeft,
        shiftR: shiftRight,
      });
    }

    // Sort fingernumbers by line number.
    nums_list.sort((a, b) => b.line - a.line);

    let numShiftL = 0;
    let numShiftR = 0;
    let xWidthL = 0;
    let xWidthR = 0;
    let lastLine = null;
    let lastNote = null;

    for (let i = 0; i < nums_list.length; ++i) {
      let num_shift = 0;
      const { note, pos, num, line, shiftL, shiftR } = nums_list[i];

      // Reset the position of the string number every line.
      if (line !== lastLine || note !== lastNote) {
        numShiftL = left_shift + shiftL;
        numShiftR = right_shift + shiftR;
      }

      const numWidth = num.getWidth() + num_spacing;
      if (pos === _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT) {
        num.setXShift(left_shift + numShiftL);
        num_shift = left_shift + numWidth; // spacing
        xWidthL = num_shift > xWidthL ? num_shift : xWidthL;
      } else if (pos === _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT) {
        num.setXShift(numShiftR);
        num_shift = shiftRight + numWidth; // spacing
        xWidthR = num_shift > xWidthR ? num_shift : xWidthR;
      }
      lastLine = line;
      lastNote = note;
    }

    state.left_shift += xWidthL;
    state.right_shift += xWidthR;

    return true;
  }

  constructor(number) {
    super();
    this.setAttribute('type', 'FretHandFinger');

    this.note = null;
    this.index = null;
    this.finger = number;
    this.width = 7;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT;  // Default position above stem or note head
    this.x_shift = 0;
    this.y_shift = 0;
    this.x_offset = 0;       // Horizontal offset from default
    this.y_offset = 0;       // Vertical offset from default
    this.font = {
      family: 'sans-serif',
      size: 9,
      weight: 'bold',
    };
  }
  getCategory() { return FretHandFinger.CATEGORY; }
  setFretHandFinger(number) { this.finger = number; return this; }
  setOffsetX(x) { this.x_offset = x; return this; }
  setOffsetY(y) { this.y_offset = y; return this; }

  draw() {
    this.checkContext();

    if (!this.note || this.index == null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw string number without a note and index.");
    }

    this.setRendered();
    const ctx = this.context;
    const start = this.note.getModifierStartXY(this.position, this.index);
    let dot_x = start.x + this.x_shift + this.x_offset;
    let dot_y = start.y + this.y_shift + this.y_offset + 5;

    switch (this.position) {
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE:
        dot_x -= 4;
        dot_y -= 12;
        break;
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.BELOW:
        dot_x -= 2;
        dot_y += 10;
        break;
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT:
        dot_x -= this.width;
        break;
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT:
        dot_x += 1;
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidPostion', `The position ${this.position} does not exist`);
    }

    ctx.save();
    ctx.setFont(this.font.family, this.font.size, this.font.weight);
    ctx.fillText('' + this.finger, dot_x, dot_y);
    ctx.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/ghostnote.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/ghostnote.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GhostNote: () => (/* binding */ GhostNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _stemmablenote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stemmablenote */ "./node_modules/vexflow/src/stemmablenote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description




class GhostNote extends _stemmablenote__WEBPACK_IMPORTED_MODULE_1__.StemmableNote {
  /** @constructor */
  constructor(parameter) {
    // Sanity check
    if (!parameter) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments',
        'Ghost note must have valid initialization data to identify ' +
        'duration.');
    }

    let note_struct;

    // Preserve backwards-compatibility
    if (typeof (parameter) === 'string') {
      note_struct = { duration: parameter };
    } else if (typeof (parameter) === 'object') {
      note_struct = parameter;
    } else {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments',
        'Ghost note must have valid initialization data to identify ' +
        'duration.');
    }

    super(note_struct);
    this.setAttribute('type', 'GhostNote');

    // Note properties
    this.setWidth(0);
  }

  isRest() { return true; }

  setStave(stave) {
    super.setStave(stave);
  }

  addToModifierContext() { /* intentionally overridden */ return this; }

  preFormat() {
    this.setPreFormatted(true);
    return this;
  }

  draw() {
    if (!this.stave) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't draw without a stave.");

    // Draw the modifiers
    this.setRendered();
    for (let i = 0; i < this.modifiers.length; ++i) {
      const modifier = this.modifiers[i];
      modifier.setContext(this.context);
      modifier.drawWithStyle();
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/glyph.js":
/*!*******************************************!*\
  !*** ./node_modules/vexflow/src/glyph.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Glyph: () => (/* binding */ Glyph)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _boundingboxcomputation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./boundingboxcomputation */ "./node_modules/vexflow/src/boundingboxcomputation.js");
/* harmony import */ var _boundingbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./boundingbox */ "./node_modules/vexflow/src/boundingbox.js");
/* harmony import */ var _fonts_vexflow_font__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fonts/vexflow_font */ "./node_modules/vexflow/src/fonts/vexflow_font.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.







function processOutline(outline, originX, originY, scaleX, scaleY, outlineFns) {
  let command;
  let x;
  let y;
  let i = 0;

  function nextX() { return originX + outline[i++] * scaleX; }
  function nextY() { return originY + outline[i++] * scaleY; }

  while (i < outline.length) {
    command = outline[i++];
    switch (command) {
      case 'm':
      case 'l':
        outlineFns[command](nextX(), nextY());
        break;
      case 'q':
        x = nextX();
        y = nextY();
        outlineFns.q(nextX(), nextY(), x, y);
        break;
      case 'b':
        x = nextX();
        y = nextY();
        outlineFns.b(nextX(), nextY(), nextX(), nextY(), x, y);
        break;
      default:
        break;
    }
  }
}

class Glyph extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  /* Static methods used to implement loading / unloading of glyphs */
  static loadMetrics(font, code, cache) {
    const glyph = font.glyphs[code];
    if (!glyph) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadGlyph', `Glyph ${code} does not exist in font.`);
    }

    const x_min = glyph.x_min;
    const x_max = glyph.x_max;
    const ha = glyph.ha;

    let outline;

    if (glyph.o) {
      if (cache) {
        if (glyph.cached_outline) {
          outline = glyph.cached_outline;
        } else {
          outline = glyph.o.split(' ');
          glyph.cached_outline = outline;
        }
      } else {
        if (glyph.cached_outline) delete glyph.cached_outline;
        outline = glyph.o.split(' ');
      }

      return {
        x_min,
        x_max,
        ha,
        outline,
      };
    } else {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadGlyph', `Glyph ${code} has no outline defined.`);
    }
  }

  /**
   * A quick and dirty static glyph renderer. Renders glyphs from the default
   * font defined in Vex.Flow.Font.
   *
   * @param {!Object} ctx The canvas context.
   * @param {number} x_pos X coordinate.
   * @param {number} y_pos Y coordinate.
   * @param {number} point The point size to use.
   * @param {string} val The glyph code in Vex.Flow.Font.
   * @param {boolean} nocache If set, disables caching of font outline.
   */
  static renderGlyph(ctx, x_pos, y_pos, point, val, nocache) {
    const scale = point * 72.0 / (_fonts_vexflow_font__WEBPACK_IMPORTED_MODULE_4__.Font.resolution * 100.0);
    const metrics = Glyph.loadMetrics(_fonts_vexflow_font__WEBPACK_IMPORTED_MODULE_4__.Font, val, !nocache);
    Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);
  }

  static renderOutline(ctx, outline, scale, x_pos, y_pos) {
    ctx.beginPath();
    ctx.moveTo(x_pos, y_pos);
    processOutline(outline, x_pos, y_pos, scale, -scale, {
      m: ctx.moveTo.bind(ctx),
      l: ctx.lineTo.bind(ctx),
      q: ctx.quadraticCurveTo.bind(ctx),
      b: ctx.bezierCurveTo.bind(ctx),
    });
    ctx.fill();
  }

  static getOutlineBoundingBox(outline, scale, x_pos, y_pos) {
    const bboxComp = new _boundingboxcomputation__WEBPACK_IMPORTED_MODULE_2__.BoundingBoxComputation();

    processOutline(outline, x_pos, y_pos, scale, -scale, {
      m: bboxComp.addPoint.bind(bboxComp),
      l: bboxComp.addPoint.bind(bboxComp),
      q: bboxComp.addQuadraticCurve.bind(bboxComp),
      b: bboxComp.addBezierCurve.bind(bboxComp),
    });

    return new _boundingbox__WEBPACK_IMPORTED_MODULE_3__.BoundingBox(
      bboxComp.x1,
      bboxComp.y1,
      bboxComp.width(),
      bboxComp.height()
    );
  }

  /**
   * @constructor
   */
  constructor(code, point, options) {
    super();
    this.setAttribute('type', 'Glyph');

    this.code = code;
    this.point = point;
    this.options = {
      cache: true,
      font: _fonts_vexflow_font__WEBPACK_IMPORTED_MODULE_4__.Font,
    };

    this.metrics = null;
    this.x_shift = 0;
    this.y_shift = 0;

    this.originShift = {
      x: 0,
      y: 0,
    };

    if (options) {
      this.setOptions(options);
    } else {
      this.reset();
    }
  }

  setOptions(options) {
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.options, options);
    this.reset();
  }

  setPoint(point) { this.point = point; return this; }
  setStave(stave) { this.stave = stave; return this; }
  setXShift(x_shift) { this.x_shift = x_shift; return this; }
  setYShift(y_shift) { this.y_shift = y_shift; return this; }

  reset() {
    this.scale = this.point * 72 / (this.options.font.resolution * 100);
    this.metrics = Glyph.loadMetrics(
      this.options.font,
      this.code,
      this.options.cache
    );
    this.bbox = Glyph.getOutlineBoundingBox(
      this.metrics.outline,
      this.scale,
      0,
      0
    );
  }

  getMetrics() {
    if (!this.metrics) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);
    }

    return {
      x_min: this.metrics.x_min * this.scale,
      x_max: this.metrics.x_max * this.scale,
      width: this.bbox.getW(),
      height: this.bbox.getH(),
    };
  }

  setOriginX(x) {
    const { bbox } = this;
    const originX = Math.abs(bbox.getX() / bbox.getW());
    const xShift = (x - originX) * bbox.getW();
    this.originShift.x = -xShift;
  }

  setOriginY(y) {
    const { bbox } = this;
    const originY = Math.abs(bbox.getY() / bbox.getH());
    const yShift = (y - originY) * bbox.getH();
    this.originShift.y = -yShift;
  }

  setOrigin(x, y) {
    this.setOriginX(x);
    this.setOriginY(y);
  }

  render(ctx, x, y) {
    if (!this.metrics) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);
    }

    const outline = this.metrics.outline;
    const scale = this.scale;

    this.setRendered();
    this.applyStyle(ctx);
    Glyph.renderOutline(ctx, outline, scale, x + this.originShift.x, y + this.originShift.y);
    this.restoreStyle(ctx);
  }

  renderToStave(x) {
    this.checkContext();

    if (!this.metrics) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadGlyph', `Glyph ${this.code} is not initialized.`);
    }

    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('GlyphError', 'No valid stave');
    }

    const outline = this.metrics.outline;
    const scale = this.scale;

    this.setRendered();
    this.applyStyle();
    Glyph.renderOutline(this.context, outline, scale,
      x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);
    this.restoreStyle();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/gracenote.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/gracenote.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraceNote: () => (/* binding */ GraceNote)
/* harmony export */ });
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.





class GraceNote extends _stavenote__WEBPACK_IMPORTED_MODULE_0__.StaveNote {
  static get CATEGORY() { return 'gracenotes'; }
  static get LEDGER_LINE_OFFSET() { return 2; }
  static get SCALE() { return 0.66; }

  constructor(note_struct) {
    super(Object.assign(note_struct, {
      glyph_font_scale: _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,
      stroke_px: GraceNote.LEDGER_LINE_OFFSET,
    }));
    this.setAttribute('type', 'GraceNote');

    this.slash = note_struct.slash;
    this.slur = true;

    this.buildNoteHeads();

    this.width = 3;
  }

  getStemExtension() {
    if (this.stem_extension_override != null) {
      return this.stem_extension_override;
    }

    const glyph = this.getGlyph();
    if (glyph) {
      let ret = super.getStemExtension();
      if (glyph.stem) {
        const staveNoteScale = this.getStaveNoteScale();
        ret = ((_stem__WEBPACK_IMPORTED_MODULE_1__.Stem.HEIGHT + ret) * staveNoteScale) - _stem__WEBPACK_IMPORTED_MODULE_1__.Stem.HEIGHT;
      }
      return ret;
    }

    return 0;
  }

  getCategory() { return GraceNote.CATEGORY; }

  // FIXME: move this to more basic class.
  getStaveNoteScale() {
    return this.render_options.glyph_font_scale / _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.DEFAULT_NOTATION_FONT_SCALE;
  }

  draw() {
    super.draw();
    this.setRendered();
    const stem = this.stem;
    if (this.slash && stem) {
      const staveNoteScale = this.getStaveNoteScale();

      // some magic numbers are based on the staveNoteScale 0.66.
      const offsetScale = staveNoteScale / 0.66;
      let slashBBox = undefined;
      const beam = this.beam;
      if (beam) {
        // FIXME: should render slash after beam?
        if (!beam.postFormatted) {
          beam.postFormat();
        }

        slashBBox = this.calcBeamedNotesSlashBBox(8 * offsetScale,
          8 * offsetScale,
          {
            stem: 6 * offsetScale,
            beam: 5 * offsetScale,
          });
      } else {
        const stem_direction = this.getStemDirection();
        const noteHeadBounds = this.getNoteHeadBounds();
        const noteStemHeight = stem.getHeight();
        let x = this.getAbsoluteX();
        let y = stem_direction === _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.Stem.DOWN ?
          noteHeadBounds.y_top - noteStemHeight :
          noteHeadBounds.y_bottom - noteStemHeight;

        const defaultStemExtention = stem_direction === _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.Stem.DOWN ?
          this.glyph.stem_down_extension :
          this.glyph.stem_up_extension;

        let defaultOffsetY = _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STEM_HEIGHT;
        defaultOffsetY -= (defaultOffsetY / 2.8);
        defaultOffsetY += defaultStemExtention;
        y += ((defaultOffsetY * staveNoteScale) * stem_direction);

        const offsets = stem_direction === _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.Stem.UP ? {
          x1: 1,
          y1: 0,
          x2: 13,
          y2: -9,
        } : {
          x1: -4,
          y1: 1,
          x2: 13,
          y2: 9,
        };

        x += (offsets.x1 * offsetScale);
        y += (offsets.y1 * offsetScale);
        slashBBox = {
          x1: x,
          y1: y,
          x2: x + (offsets.x2 * offsetScale),
          y2: y + (offsets.y2 * offsetScale),
        };
      }

      // FIXME: avoide staff lines, leadger lines or others.

      const ctx = this.context;
      ctx.save();
      ctx.setLineWidth(1 * offsetScale); // FIXME: use more appropriate value.
      ctx.beginPath();
      ctx.moveTo(slashBBox.x1, slashBBox.y1);
      ctx.lineTo(slashBBox.x2, slashBBox.y2);
      ctx.closePath();
      ctx.stroke();
      ctx.restore();
    }
  }

  calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {
    const beam = this.beam;
    const beam_slope = beam.slope;
    const isBeamEndNote = (beam.notes[beam.notes.length - 1] === this);
    const scaleX = isBeamEndNote ? -1 : 1;
    const beam_angle = Math.atan(beam_slope * scaleX);

    // slash line intersecting point on beam.
    const iPointOnBeam = {
      dx: Math.cos(beam_angle) * slashBeamOffset,
      dy: Math.sin(beam_angle) * slashBeamOffset,
    };

    slashStemOffset *= this.getStemDirection();
    const slash_angle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);
    const protrusion_stem_dx = Math.cos(slash_angle) * protrusions.stem * scaleX;
    const protrusion_stem_dy = Math.sin(slash_angle) * protrusions.stem;
    const protrusion_beam_dx = Math.cos(slash_angle) * protrusions.beam * scaleX;
    const protrusion_beam_dy = Math.sin(slash_angle) * protrusions.beam;

    const stemX = this.getStemX();
    const stem0X = beam.notes[0].getStemX();
    const stemY = this.beam.getBeamYToDraw() + ((stemX - stem0X) * beam_slope);

    const ret = {
      x1: stemX - protrusion_stem_dx,
      y1: (stemY + slashStemOffset - protrusion_stem_dy),
      x2: stemX + (iPointOnBeam.dx * scaleX) + protrusion_beam_dx,
      y2: stemY + iPointOnBeam.dy + protrusion_beam_dy,
    };
    return ret;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/gracenotegroup.js":
/*!****************************************************!*\
  !*** ./node_modules/vexflow/src/gracenotegroup.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraceNoteGroup: () => (/* binding */ GraceNoteGroup)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatter */ "./node_modules/vexflow/src/formatter.js");
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./voice */ "./node_modules/vexflow/src/voice.js");
/* harmony import */ var _beam__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./beam */ "./node_modules/vexflow/src/beam.js");
/* harmony import */ var _stavetie__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stavetie */ "./node_modules/vexflow/src/stavetie.js");
/* harmony import */ var _tabtie__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tabtie */ "./node_modules/vexflow/src/tabtie.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements `GraceNoteGroup` which is used to format and
// render grace notes.











// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.
function L(...args) { if (GraceNoteGroup.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.GraceNoteGroup', args); }

class GraceNoteGroup extends _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier {
  static get CATEGORY() { return 'gracenotegroups'; }

  // Arrange groups inside a `ModifierContext`
  static format(gracenote_groups, state) {
    const group_spacing_stave = 0; // overwritten later in `spacing` (vexflowpatch)
    const group_spacing_tab = 0;
    // vexflow calls these spacing, though they seem more like margins to be precise. -> EngravingRules.GraceNoteGroupXMargin

    if (!gracenote_groups || gracenote_groups.length === 0) return false;

    const group_list = [];
    let prev_note = null;
    let shiftL = 0;

    for (let i = 0; i < gracenote_groups.length; ++i) {
      const gracenote_group = gracenote_groups[i];
      const note = gracenote_group.getNote();
      const is_stavenote = (note.getCategory() === _stavenote__WEBPACK_IMPORTED_MODULE_8__.StaveNote.CATEGORY);
      let spacing = (is_stavenote ? group_spacing_stave : group_spacing_tab);
      // vexflowpatch: allow spacing to be set externally (e.g. to 0)
      if (is_stavenote && gracenote_group.spacing !== null && gracenote_group.spacing !== undefined) {
        spacing = gracenote_group.spacing;
      }

      if (is_stavenote && note !== prev_note) {
        // Iterate through all notes to get the displaced pixels
        for (let n = 0; n < note.keys.length; ++n) {
          const props_tmp = note.getKeyProps()[n];
          shiftL = (props_tmp.displaced ? note.getExtraLeftPx() : shiftL);
        }
        prev_note = note;
      }

      group_list.push({ shift: shiftL, gracenote_group, spacing });
    }

    // If first note left shift in case it is displaced
    let group_shift = group_list[0].shift;
    let formatWidth;
    for (let i = 0; i < group_list.length; ++i) {
      const gracenote_group = group_list[i].gracenote_group;
      gracenote_group.preFormat();
      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;
      group_shift = Math.max(formatWidth, group_shift);
    }

    for (let i = 0; i < group_list.length; ++i) {
      const gracenote_group = group_list[i].gracenote_group;
      formatWidth = gracenote_group.getWidth() + group_list[i].spacing;
      gracenote_group.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));
    }

    state.left_shift += group_shift;
    return true;
  }

  // ## Prototype Methods
  //
  // `GraceNoteGroup` inherits from `Modifier` and is placed inside a
  // `ModifierContext`.
  constructor(grace_notes, show_slur) {
    super();
    this.setAttribute('type', 'GraceNoteGroup');

    this.note = null;
    this.index = null;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT;
    this.grace_notes = grace_notes;
    this.width = 0;

    this.preFormatted = false;

    this.show_slur = show_slur;
    this.slur = null;

    this.formatter = new _formatter__WEBPACK_IMPORTED_MODULE_3__.Formatter();
    this.voice = new _voice__WEBPACK_IMPORTED_MODULE_4__.Voice({
      num_beats: 4,
      beat_value: 4,
      resolution: _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.RESOLUTION,
    }).setStrict(false);

    this.render_options = {
      slur_y_shift: 0,
    };

    this.beams = [];

    this.voice.addTickables(this.grace_notes);

    return this;
  }

  getCategory() { return GraceNoteGroup.CATEGORY; }

  preFormat() {
    if (this.preFormatted) return;

    this.formatter.joinVoices([this.voice]).format([this.voice], 0);
    this.setWidth(this.formatter.getMinTotalWidth());
    this.preFormatted = true;
  }

  beamNotes(grace_notes) {
    grace_notes = grace_notes || this.grace_notes;
    if (grace_notes.length > 1) {
      const beam = new _beam__WEBPACK_IMPORTED_MODULE_5__.Beam(grace_notes);

      beam.render_options.beam_width = 3;
      beam.render_options.partial_beam_length = 4;

      this.beams.push(beam);
    }

    return this;
  }

  setNote(note) {
    this.note = note;
  }
  setWidth(width) {
    this.width = width;
  }
  getWidth() {
    return this.width;
  }
  getGraceNotes() {
    return this.grace_notes;
  }
  draw() {
    this.checkContext();

    const note = this.getNote();

    L('Drawing grace note group for:', note);

    if (!(note && (this.index !== null))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('NoAttachedNote',
        "Can't draw grace note without a parent note and parent note index.");
    }

    this.setRendered();
    this.alignSubNotesWithNote(this.getGraceNotes(), note); // Modifier function

    // Draw notes
    this.grace_notes.forEach(graceNote => {
      graceNote.setContext(this.context).draw();
    });

    // Draw beam
    this.beams.forEach(beam => {
      beam.setContext(this.context).draw();
    });

    if (this.show_slur) {
      // Create and draw slur
      const is_stavenote = (this.getNote().getCategory() === _stavenote__WEBPACK_IMPORTED_MODULE_8__.StaveNote.CATEGORY);
      const TieClass = (is_stavenote ? _stavetie__WEBPACK_IMPORTED_MODULE_6__.StaveTie : _tabtie__WEBPACK_IMPORTED_MODULE_7__.TabTie);

      this.slur = new TieClass({
        last_note: this.grace_notes[0],
        first_note: note,
        first_indices: [0],
        last_indices: [0],
      });

      this.slur.render_options.cp2 = 12;
      this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;
      this.slur.setContext(this.context).draw();
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/gracetabnote.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/gracetabnote.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GraceTabNote: () => (/* binding */ GraceTabNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tabnote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabnote */ "./node_modules/vexflow/src/tabnote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// @author Balazs Forian-Szabo
//
// ## Description
//
// A basic implementation of grace notes
// to be rendered on a tab stave.
//
// See `tests/gracetabnote_tests.js` for usage examples.




class GraceTabNote extends _tabnote__WEBPACK_IMPORTED_MODULE_1__.TabNote {
  static get CATEGORY() { return 'gracetabnotes'; }

  constructor(note_struct) {
    super(note_struct, false);
    this.setAttribute('type', 'GraceTabNote');

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, {
      // vertical shift from stave line
      y_shift: 0.3,
      // grace glyph scale
      scale: 0.6,
      // grace tablature font
      font: '7.5pt Arial',
    });

    this.updateWidth();
  }

  getCategory() { return GraceTabNote.CATEGORY; }

  draw() {
    super.draw();
    this.setRendered();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/vexflow/src/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./renderer */ "./node_modules/vexflow/src/renderer.js");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./formatter */ "./node_modules/vexflow/src/formatter.js");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./music */ "./node_modules/vexflow/src/music.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _stave__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stave */ "./node_modules/vexflow/src/stave.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _stavetempo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stavetempo */ "./node_modules/vexflow/src/stavetempo.js");
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./voice */ "./node_modules/vexflow/src/voice.js");
/* harmony import */ var _accidental__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./accidental */ "./node_modules/vexflow/src/accidental.js");
/* harmony import */ var _beam__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./beam */ "./node_modules/vexflow/src/beam.js");
/* harmony import */ var _stavetie__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./stavetie */ "./node_modules/vexflow/src/stavetie.js");
/* harmony import */ var _tabstave__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tabstave */ "./node_modules/vexflow/src/tabstave.js");
/* harmony import */ var _tabnote__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tabnote */ "./node_modules/vexflow/src/tabnote.js");
/* harmony import */ var _bend__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./bend */ "./node_modules/vexflow/src/bend.js");
/* harmony import */ var _vibrato__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./vibrato */ "./node_modules/vexflow/src/vibrato.js");
/* harmony import */ var _vibratobracket__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./vibratobracket */ "./node_modules/vexflow/src/vibratobracket.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _modifiercontext__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./modifiercontext */ "./node_modules/vexflow/src/modifiercontext.js");
/* harmony import */ var _multimeasurerest__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./multimeasurerest */ "./node_modules/vexflow/src/multimeasurerest.js");
/* harmony import */ var _tickcontext__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./tickcontext */ "./node_modules/vexflow/src/tickcontext.js");
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./articulation */ "./node_modules/vexflow/src/articulation.js");
/* harmony import */ var _annotation__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./annotation */ "./node_modules/vexflow/src/annotation.js");
/* harmony import */ var _stavebarline__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./stavebarline */ "./node_modules/vexflow/src/stavebarline.js");
/* harmony import */ var _notehead__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./notehead */ "./node_modules/vexflow/src/notehead.js");
/* harmony import */ var _staveconnector__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./staveconnector */ "./node_modules/vexflow/src/staveconnector.js");
/* harmony import */ var _clefnote__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./clefnote */ "./node_modules/vexflow/src/clefnote.js");
/* harmony import */ var _keysignature__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./keysignature */ "./node_modules/vexflow/src/keysignature.js");
/* harmony import */ var _keysignote__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./keysignote */ "./node_modules/vexflow/src/keysignote.js");
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./timesignature */ "./node_modules/vexflow/src/timesignature.js");
/* harmony import */ var _timesignote__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./timesignote */ "./node_modules/vexflow/src/timesignote.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _tabtie__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./tabtie */ "./node_modules/vexflow/src/tabtie.js");
/* harmony import */ var _clef__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./clef */ "./node_modules/vexflow/src/clef.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./dot */ "./node_modules/vexflow/src/dot.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _tabslide__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./tabslide */ "./node_modules/vexflow/src/tabslide.js");
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./tuplet */ "./node_modules/vexflow/src/tuplet.js");
/* harmony import */ var _gracenote__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./gracenote */ "./node_modules/vexflow/src/gracenote.js");
/* harmony import */ var _gracetabnote__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./gracetabnote */ "./node_modules/vexflow/src/gracetabnote.js");
/* harmony import */ var _tuning__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./tuning */ "./node_modules/vexflow/src/tuning.js");
/* harmony import */ var _keymanager__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./keymanager */ "./node_modules/vexflow/src/keymanager.js");
/* harmony import */ var _stavehairpin__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./stavehairpin */ "./node_modules/vexflow/src/stavehairpin.js");
/* harmony import */ var _boundingbox__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./boundingbox */ "./node_modules/vexflow/src/boundingbox.js");
/* harmony import */ var _strokes__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./strokes */ "./node_modules/vexflow/src/strokes.js");
/* harmony import */ var _textnote__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./textnote */ "./node_modules/vexflow/src/textnote.js");
/* harmony import */ var _curve__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./curve */ "./node_modules/vexflow/src/curve.js");
/* harmony import */ var _textdynamics__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./textdynamics */ "./node_modules/vexflow/src/textdynamics.js");
/* harmony import */ var _staveline__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./staveline */ "./node_modules/vexflow/src/staveline.js");
/* harmony import */ var _ornament__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./ornament */ "./node_modules/vexflow/src/ornament.js");
/* harmony import */ var _pedalmarking__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./pedalmarking */ "./node_modules/vexflow/src/pedalmarking.js");
/* harmony import */ var _textbracket__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./textbracket */ "./node_modules/vexflow/src/textbracket.js");
/* harmony import */ var _frethandfinger__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./frethandfinger */ "./node_modules/vexflow/src/frethandfinger.js");
/* harmony import */ var _staverepetition__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./staverepetition */ "./node_modules/vexflow/src/staverepetition.js");
/* harmony import */ var _barnote__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./barnote */ "./node_modules/vexflow/src/barnote.js");
/* harmony import */ var _ghostnote__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./ghostnote */ "./node_modules/vexflow/src/ghostnote.js");
/* harmony import */ var _notesubgroup__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./notesubgroup */ "./node_modules/vexflow/src/notesubgroup.js");
/* harmony import */ var _gracenotegroup__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./gracenotegroup */ "./node_modules/vexflow/src/gracenotegroup.js");
/* harmony import */ var _tremolo__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./tremolo */ "./node_modules/vexflow/src/tremolo.js");
/* harmony import */ var _stringnumber__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./stringnumber */ "./node_modules/vexflow/src/stringnumber.js");
/* harmony import */ var _crescendo__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./crescendo */ "./node_modules/vexflow/src/crescendo.js");
/* harmony import */ var _stavevolta__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./stavevolta */ "./node_modules/vexflow/src/stavevolta.js");
/* harmony import */ var _fonts_vexflow_font__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./fonts/vexflow_font */ "./node_modules/vexflow/src/fonts/vexflow_font.js");
/* harmony import */ var _system__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./system */ "./node_modules/vexflow/src/system.js");
/* harmony import */ var _factory__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./factory */ "./node_modules/vexflow/src/factory.js");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./parser */ "./node_modules/vexflow/src/parser.js");
/* harmony import */ var _easyscore__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./easyscore */ "./node_modules/vexflow/src/easyscore.js");
/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./registry */ "./node_modules/vexflow/src/registry.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.










































































_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Element = _element__WEBPACK_IMPORTED_MODULE_2__.Element;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Fraction = _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Renderer = _renderer__WEBPACK_IMPORTED_MODULE_4__.Renderer;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Formatter = _formatter__WEBPACK_IMPORTED_MODULE_5__.Formatter;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Music = _music__WEBPACK_IMPORTED_MODULE_6__.Music;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Glyph = _glyph__WEBPACK_IMPORTED_MODULE_7__.Glyph;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Stave = _stave__WEBPACK_IMPORTED_MODULE_8__.Stave;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveNote = _stavenote__WEBPACK_IMPORTED_MODULE_9__.StaveNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveModifier = _stavemodifier__WEBPACK_IMPORTED_MODULE_10__.StaveModifier;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveTempo = _stavetempo__WEBPACK_IMPORTED_MODULE_11__.StaveTempo;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Voice = _voice__WEBPACK_IMPORTED_MODULE_12__.Voice;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Accidental = _accidental__WEBPACK_IMPORTED_MODULE_13__.Accidental;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Beam = _beam__WEBPACK_IMPORTED_MODULE_14__.Beam;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveTie = _stavetie__WEBPACK_IMPORTED_MODULE_15__.StaveTie;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TabStave = _tabstave__WEBPACK_IMPORTED_MODULE_16__.TabStave;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TabNote = _tabnote__WEBPACK_IMPORTED_MODULE_17__.TabNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Bend = _bend__WEBPACK_IMPORTED_MODULE_18__.Bend;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Vibrato = _vibrato__WEBPACK_IMPORTED_MODULE_19__.Vibrato;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.VibratoBracket = _vibratobracket__WEBPACK_IMPORTED_MODULE_20__.VibratoBracket;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Note = _note__WEBPACK_IMPORTED_MODULE_21__.Note;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.ModifierContext = _modifiercontext__WEBPACK_IMPORTED_MODULE_22__.ModifierContext;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.MultiMeasureRest = _multimeasurerest__WEBPACK_IMPORTED_MODULE_23__.MultiMeasureRest;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TickContext = _tickcontext__WEBPACK_IMPORTED_MODULE_24__.TickContext;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Articulation = _articulation__WEBPACK_IMPORTED_MODULE_25__.Articulation;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Annotation = _annotation__WEBPACK_IMPORTED_MODULE_26__.Annotation;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Barline = _stavebarline__WEBPACK_IMPORTED_MODULE_27__.Barline;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.NoteHead = _notehead__WEBPACK_IMPORTED_MODULE_28__.NoteHead;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveConnector = _staveconnector__WEBPACK_IMPORTED_MODULE_29__.StaveConnector;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.ClefNote = _clefnote__WEBPACK_IMPORTED_MODULE_30__.ClefNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.KeySignature = _keysignature__WEBPACK_IMPORTED_MODULE_31__.KeySignature;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.KeySigNote = _keysignote__WEBPACK_IMPORTED_MODULE_32__.KeySigNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TimeSignature = _timesignature__WEBPACK_IMPORTED_MODULE_33__.TimeSignature;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TimeSigNote = _timesignote__WEBPACK_IMPORTED_MODULE_34__.TimeSigNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Stem = _stem__WEBPACK_IMPORTED_MODULE_35__.Stem;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TabTie = _tabtie__WEBPACK_IMPORTED_MODULE_36__.TabTie;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Clef = _clef__WEBPACK_IMPORTED_MODULE_37__.Clef;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Dot = _dot__WEBPACK_IMPORTED_MODULE_38__.Dot;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Modifier = _modifier__WEBPACK_IMPORTED_MODULE_39__.Modifier;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TabSlide = _tabslide__WEBPACK_IMPORTED_MODULE_40__.TabSlide;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Tuplet = _tuplet__WEBPACK_IMPORTED_MODULE_41__.Tuplet;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.GraceNote = _gracenote__WEBPACK_IMPORTED_MODULE_42__.GraceNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.GraceTabNote = _gracetabnote__WEBPACK_IMPORTED_MODULE_43__.GraceTabNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Tuning = _tuning__WEBPACK_IMPORTED_MODULE_44__.Tuning;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.KeyManager = _keymanager__WEBPACK_IMPORTED_MODULE_45__.KeyManager;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveHairpin = _stavehairpin__WEBPACK_IMPORTED_MODULE_46__.StaveHairpin;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.BoundingBox = _boundingbox__WEBPACK_IMPORTED_MODULE_47__.BoundingBox;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Stroke = _strokes__WEBPACK_IMPORTED_MODULE_48__.Stroke;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TextNote = _textnote__WEBPACK_IMPORTED_MODULE_49__.TextNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Curve = _curve__WEBPACK_IMPORTED_MODULE_50__.Curve;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TextDynamics = _textdynamics__WEBPACK_IMPORTED_MODULE_51__.TextDynamics;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StaveLine = _staveline__WEBPACK_IMPORTED_MODULE_52__.StaveLine;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Ornament = _ornament__WEBPACK_IMPORTED_MODULE_53__.Ornament;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.PedalMarking = _pedalmarking__WEBPACK_IMPORTED_MODULE_54__.PedalMarking;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.TextBracket = _textbracket__WEBPACK_IMPORTED_MODULE_55__.TextBracket;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.FretHandFinger = _frethandfinger__WEBPACK_IMPORTED_MODULE_56__.FretHandFinger;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Repetition = _staverepetition__WEBPACK_IMPORTED_MODULE_57__.Repetition;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.BarNote = _barnote__WEBPACK_IMPORTED_MODULE_58__.BarNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.GhostNote = _ghostnote__WEBPACK_IMPORTED_MODULE_59__.GhostNote;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.NoteSubGroup = _notesubgroup__WEBPACK_IMPORTED_MODULE_60__.NoteSubGroup;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.GraceNoteGroup = _gracenotegroup__WEBPACK_IMPORTED_MODULE_61__.GraceNoteGroup;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Tremolo = _tremolo__WEBPACK_IMPORTED_MODULE_62__.Tremolo;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.StringNumber = _stringnumber__WEBPACK_IMPORTED_MODULE_63__.StringNumber;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Crescendo = _crescendo__WEBPACK_IMPORTED_MODULE_64__.Crescendo;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Volta = _stavevolta__WEBPACK_IMPORTED_MODULE_65__.Volta;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Font = _fonts_vexflow_font__WEBPACK_IMPORTED_MODULE_66__.Font;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.System = _system__WEBPACK_IMPORTED_MODULE_67__.System;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Factory = _factory__WEBPACK_IMPORTED_MODULE_68__.Factory;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Parser = _parser__WEBPACK_IMPORTED_MODULE_69__.Parser;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.EasyScore = _easyscore__WEBPACK_IMPORTED_MODULE_70__.EasyScore;
_vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Flow.Registry = _registry__WEBPACK_IMPORTED_MODULE_71__.Registry;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_vex__WEBPACK_IMPORTED_MODULE_0__.Vex);


/***/ }),

/***/ "./node_modules/vexflow/src/keymanager.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/keymanager.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyManager: () => (/* binding */ KeyManager)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _music__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./music */ "./node_modules/vexflow/src/music.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This class implements diatonic key management.




class KeyManager {
  constructor(key) {
    this.music = new _music__WEBPACK_IMPORTED_MODULE_1__.Music();
    this.setKey(key);
  }

  setKey(key) {
    this.key = key;
    this.reset();
    return this;
  }

  getKey() { return this.key; }

  reset() {
    this.keyParts = this.music.getKeyParts(this.key);

    this.keyString = this.keyParts.root;
    if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;

    const is_supported_type = _music__WEBPACK_IMPORTED_MODULE_1__.Music.scaleTypes[this.keyParts.type];
    if (!is_supported_type) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Unsupported key type: ${this.key}`);
    }

    this.scale = this.music.getScaleTones(
      this.music.getNoteValue(this.keyString),
      _music__WEBPACK_IMPORTED_MODULE_1__.Music.scaleTypes[this.keyParts.type]
    );

    this.scaleMap = {};
    this.scaleMapByValue = {};
    this.originalScaleMapByValue = {};

    const noteLocation = _music__WEBPACK_IMPORTED_MODULE_1__.Music.root_indices[this.keyParts.root];

    for (let i = 0; i < _music__WEBPACK_IMPORTED_MODULE_1__.Music.roots.length; ++i) {
      const index = (noteLocation + i) % _music__WEBPACK_IMPORTED_MODULE_1__.Music.roots.length;
      const rootName = _music__WEBPACK_IMPORTED_MODULE_1__.Music.roots[index];

      const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);
      this.scaleMap[rootName] = noteName;
      this.scaleMapByValue[this.scale[i]] = noteName;
      this.originalScaleMapByValue[this.scale[i]] = noteName;
    }

    return this;
  }

  getAccidental(key) {
    const root = this.music.getKeyParts(key).root;
    const parts = this.music.getNoteParts(this.scaleMap[root]);

    return {
      note: this.scaleMap[root],
      accidental: parts.accidental,
    };
  }

  selectNote(note) {
    note = note.toLowerCase();
    const parts = this.music.getNoteParts(note);

    // First look for matching note in our altered scale
    const scaleNote = this.scaleMap[parts.root];
    const modparts = this.music.getNoteParts(scaleNote);

    if (scaleNote === note) {
      return {
        'note': scaleNote,
        'accidental': parts.accidental,
        'change': false,
      };
    }

    // Then search for a note of equivalent value in our altered scale
    const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];
    if (valueNote != null) {
      return {
        'note': valueNote,
        'accidental': this.music.getNoteParts(valueNote).accidental,
        'change': false,
      };
    }

    // Then search for a note of equivalent value in the original scale
    const originalValueNote = this.originalScaleMapByValue[
      this.music.getNoteValue(note)];
    if (originalValueNote != null) {
      this.scaleMap[modparts.root] = originalValueNote;
      delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];
      this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;
      return {
        'note': originalValueNote,
        'accidental': this.music.getNoteParts(originalValueNote).accidental,
        'change': true,
      };
    }

    // Then try to unmodify a currently modified note.
    if (modparts.root === note) {
      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
      this.scaleMapByValue[this.music.getNoteValue(modparts.root)] =  modparts.root;
      this.scaleMap[modparts.root] = modparts.root;
      return {
        'note': modparts.root,
        'accidental': null,
        'change': true,
      };
    }

    // Last resort -- shitshoot
    delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
    this.scaleMapByValue[this.music.getNoteValue(note)] = note;

    delete this.scaleMap[modparts.root];
    this.scaleMap[modparts.root] = note;

    return {
      note,
      'accidental': parts.accidental,
      'change': true,
    };
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/keysignature.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/keysignature.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeySignature: () => (/* binding */ KeySignature)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Cyril Silverman
//
// ## Description
//
// This file implements key signatures. A key signature sits on a stave
// and indicates the notes with implicit accidentals.






class KeySignature extends _stavemodifier__WEBPACK_IMPORTED_MODULE_2__.StaveModifier {
  static get CATEGORY() { return 'keysignatures'; }

  // Space between natural and following accidental depending
  // on vertical position
  static get accidentalSpacing() {
    return {
      '#': {
        above: 6,
        below: 4,
      },
      'b': {
        above: 4,
        below: 7,
      },
      'n': {
        above: 4,
        below: 1,
      },
      '##': {
        above: 6,
        below: 4,
      },
      'bb': {
        above: 4,
        below: 7,
      },
      'db': {
        above: 4,
        below: 7,
      },
      'd': {
        above: 4,
        below: 7,
      },
      'bbs': {
        above: 4,
        below: 7,
      },
      '++': {
        above: 6,
        below: 4,
      },
      '+': {
        above: 6,
        below: 4,
      },
      '+-': {
        above: 6,
        below: 4,
      },
      '++-': {
        above: 6,
        below: 4,
      },
      'bs': {
        above: 4,
        below: 10,
      },
      'bss': {
        above: 4,
        below: 10,
      },
    };
  }

  // Create a new Key Signature based on a `key_spec`
  constructor(keySpec, cancelKeySpec, alterKeySpec) {
    super();
    this.setAttribute('type', 'KeySignature');

    this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);
    this.setPosition(_stavemodifier__WEBPACK_IMPORTED_MODULE_2__.StaveModifier.Position.BEGIN);
    this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?
    this.glyphs = [];
    this.xPositions = []; // relative to this.x
    this.paddingForced = false;
  }

  getCategory() { return KeySignature.CATEGORY; }

  // Add an accidental glyph to the `KeySignature` instance which represents
  // the provided `acc`. If `nextAcc` is also provided, the appropriate
  // spacing will be included in the glyph's position
  convertToGlyph(acc, nextAcc) {
    const accGlyphData = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.accidentalCodes(acc.type);
    const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph(accGlyphData.code, this.glyphFontScale);

    // Determine spacing between current accidental and the next accidental
    let extraWidth = 1;
    if (acc.type === 'n' && nextAcc) {
      const spacing = KeySignature.accidentalSpacing[nextAcc.type];
      if (spacing) {
        const isAbove = nextAcc.line >= acc.line;
        extraWidth = isAbove ? spacing.above : spacing.below;
      }
    }

    // Place the glyph on the stave
    this.placeGlyphOnLine(glyph, this.stave, acc.line);
    this.glyphs.push(glyph);

    const xPosition = this.xPositions[this.xPositions.length - 1];
    const glyphWidth = glyph.getMetrics().width + extraWidth;
    // Store the next accidental's x position
    this.xPositions.push(xPosition + glyphWidth);
    // Expand size of key signature
    this.width += glyphWidth;
  }

  // Cancel out a key signature provided in the `spec` parameter. This will
  // place appropriate natural accidentals before the key signature.
  cancelKey(spec) {
    this.formatted = false;
    this.cancelKeySpec = spec;

    return this;
  }

  convertToCancelAccList(spec) {
    // Get the accidental list for the cancelled key signature
    const cancel_accList = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.keySignature(spec);

    // If the cancelled key has a different accidental type, ie: # vs b
    const different_types = this.accList.length > 0
      && cancel_accList.length > 0
      && cancel_accList[0].type !== this.accList[0].type;

    // Determine how many naturals needed to add
    const naturals = different_types
      ? cancel_accList.length
      : cancel_accList.length - this.accList.length;

    // Return if no naturals needed
    if (naturals < 1) return undefined;

    // Get the line position for each natural
    const cancelled = [];
    for (let i = 0; i < naturals; i++) {
      let index = i;
      if (!different_types) {
        index = cancel_accList.length - naturals + i;
      }

      const acc = cancel_accList[index];
      cancelled.push({ type: 'n', line: acc.line });
    }

    // Combine naturals with main accidental list for the key signature
    this.accList = cancelled.concat(this.accList);

    return {
      accList: cancelled,
      type: cancel_accList[0].type
    };
  }

  // Deprecated
  addToStave(stave) {
    this.paddingForced = true;
    stave.addModifier(this);

    return this;
  }

  // Apply the accidental staff line placement based on the `clef` and
  // the  accidental `type` for the key signature ('# or 'b').
  convertAccLines(clef, type, accList = this.accList) {
    let offset = 0.0; // if clef === "treble"
    let customLines; // when clef doesn't follow treble key sig shape

    switch (clef) {
      // Treble & Subbass both have offsets of 0, so are not included.
      case 'soprano':
        if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];
        else offset = -1;
        break;
      case 'mezzo-soprano':
        if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];
        else offset = 1.5;
        break;
      case 'alto':
        offset = 0.5;
        break;
      case 'tenor':
        if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];
        else offset = -0.5;
        break;
      case 'baritone-f':
      case 'baritone-c':
        if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];
        else offset = 2;
        break;
      case 'bass':
      case 'french':
        offset = 1;
        break;
      default:
        break;
    }

    // If there's a special case, assign those lines/spaces:
    let i;
    if (typeof customLines !== 'undefined') {
      for (i = 0; i < accList.length; ++i) {
        accList[i].line = customLines[i];
      }
    } else if (offset !== 0) {
      for (i = 0; i < accList.length; ++i) {
        accList[i].line += offset;
      }
    }
  }

  getPadding(index) {
    if (!this.formatted) this.format();

    return (
      this.glyphs.length === 0 || (!this.paddingForced && index < 2) ?
        0 : this.padding
    );
  }

  getWidth() {
    if (!this.formatted) this.format();

    return this.width;
  }

  setKeySig(keySpec, cancelKeySpec, alterKeySpec) {
    this.formatted = false;
    this.keySpec = keySpec;
    this.cancelKeySpec = cancelKeySpec;
    this.alterKeySpec = alterKeySpec;

    return this;
  }

  // Alter the accidentals of a key spec one by one.
  // Each alteration is a new accidental that replaces the
  // original accidental (or the canceled one).
  alterKey(alterKeySpec) {
    this.formatted = false;
    this.alterKeySpec = alterKeySpec;

    return this;
  }

  convertToAlterAccList(alterKeySpec) {
    const max = Math.min(alterKeySpec.length, this.accList.length);
    for (let i = 0; i < max; ++i) {
      if (alterKeySpec[i]) {
        this.accList[i].type = alterKeySpec[i];
      }
    }
  }

  format() {
    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('KeySignatureError', "Can't draw key signature without stave.");
    }

    this.width = 0;
    this.glyphs = [];
    this.xPositions = [0]; // initialize with initial x position
    this.accList = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.keySignature(this.keySpec);
    const accList = this.accList;
    const firstAccidentalType = accList.length > 0 ? accList[0].type : null;
    let cancelAccList;
    if (this.cancelKeySpec) {
      cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);
    }
    if (this.alterKeySpec) {
      this.convertToAlterAccList(this.alterKeySpec);
    }

    if (this.accList.length > 0) {
      const clef = ((this.position === _stavemodifier__WEBPACK_IMPORTED_MODULE_2__.StaveModifier.Position.END) ?
        this.stave.endClef : this.stave.clef) || this.stave.clef;
      if (cancelAccList) {
        this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);
      }
      this.convertAccLines(clef, firstAccidentalType, accList);
      for (let i = 0; i < this.accList.length; ++i) {
        this.convertToGlyph(this.accList[i], this.accList[i + 1]);
      }
    }

    this.formatted = true;
  }

  draw() {
    if (!this.x) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('KeySignatureError', "Can't draw key signature without x.");
    }

    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('KeySignatureError', "Can't draw key signature without stave.");
    }

    if (!this.formatted) this.format();
    this.setRendered();

    if (this.glyphs.length > 0) {
        this.stave.context.openGroup("keysignature");
        for (let i = 0; i < this.glyphs.length; i++) {
          const glyph = this.glyphs[i];
          const x = this.x + this.xPositions[i];
          glyph.setStave(this.stave);
          glyph.setContext(this.stave.context);
          glyph.renderToStave(x);
        }
        this.stave.context.closeGroup();
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/keysignote.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/keysignote.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeySigNote: () => (/* binding */ KeySigNote)
/* harmony export */ });
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _keysignature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keysignature */ "./node_modules/vexflow/src/keysignature.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Mark Meeus 2019




class KeySigNote extends _note__WEBPACK_IMPORTED_MODULE_0__.Note {
  constructor(keySpec, cancelKeySpec, alterKeySpec) {
    super({ duration: 'b' });
    this.setAttribute('type', 'KeySigNote');

    this.keySignature = new _keysignature__WEBPACK_IMPORTED_MODULE_1__.KeySignature(keySpec, cancelKeySpec, alterKeySpec);

    // Note properties
    this.ignore_ticks = true;
  }

  getBoundingBox() {
    return super.getBoundingBox();
  }

  addToModifierContext() {
    /* overridden to ignore */
    return this;
  }

  preFormat() {
    this.setPreFormatted(true);
    this.keySignature.setStave(this.stave);
    this.keySignature.format();
    this.setWidth(this.keySignature.width);
    return this;
  }

  draw() {
    this.stave.checkContext();
    this.setRendered();
    this.keySignature.x = this.getAbsoluteX();
    this.keySignature.setContext(this.context);
    this.keySignature.draw();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/modifier.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/modifier.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Modifier: () => (/* binding */ Modifier)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// `Modifier` is an abstract interface for notational elements that modify
// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.
//
// For a `Modifier` instance to be positioned correctly, it must be part of
// a `ModifierContext`. All modifiers in the same context are rendered relative to
// one another.
//
// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,
// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same
// `ModifierContext`. This ensures that multiple voices don't trample all over each other.




// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.
// function L(...args) { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', args); }

class Modifier extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  static get CATEGORY() { return 'none'; }

  // Modifiers can be positioned almost anywhere, relative to a note.
  static get Position() {
    return {
      LEFT: 1,
      RIGHT: 2,
      ABOVE: 3,
      BELOW: 4,
    };
  }

  static get PositionString() {
    return {
      above: Modifier.Position.ABOVE,
      below: Modifier.Position.BELOW,
      left: Modifier.Position.LEFT,
      right: Modifier.Position.RIGHT,
    };
  }

  constructor() {
    super();
    this.setAttribute('type', 'Modifier');

    this.width = 0;

    // Modifiers are attached to a note and an index. An index is a
    // specific head in a chord.
    this.note = null;
    this.index = null;

    // The `text_line` is reserved space above or below a stave.
    this.text_line = 0;
    this.position = Modifier.Position.LEFT;
    this.modifier_context = null;
    this.x_shift = 0;
    this.y_shift = 0;
    this.spacingFromNextModifier = 0;
  }

  // Every modifier has a category. The `ModifierContext` uses this to determine
  // the type and order of the modifiers.
  getCategory() { return Modifier.CATEGORY; }

  // Get and set modifier widths.
  getWidth() { return this.width; }
  setWidth(width) { this.width = width; return this; }

  // Get and set attached note (`StaveNote`, `TabNote`, etc.)
  getNote() { return this.note; }
  setNote(note) { this.note = note; return this; }

  // Get and set note index, which is a specific note in a chord.
  getIndex() { return this.index; }
  setIndex(index) { this.index = index; return this; }

  // Every modifier must be part of a `ModifierContext`.
  getModifierContext() { return this.modifier_context; }
  setModifierContext(c) { this.modifier_context = c; return this; }

  // Get and set articulation position.
  getPosition() { return this.position; }
  setPosition(position) {
    this.position = typeof(position) === 'string'
      ? Modifier.PositionString[position]
      : position;
    return this;
  }

  // Set the `text_line` for the modifier.
  setTextLine(line) { this.text_line = line; return this; }

  // Shift modifier down `y` pixels. Negative values shift up.
  setYShift(y) { this.y_shift = y; return this; }

  setSpacingFromNextModifier(x) {
    this.spacingFromNextModifier = x;
  }

  getSpacingFromNextModifier() { return this.spacingFromNextModifier; }

  // Shift modifier `x` pixels in the direction of the modifier. Negative values
  // shift reverse.
  setXShift(x) {
    this.x_shift = 0;
    if (this.position === Modifier.Position.LEFT) {
      this.x_shift -= x;
    } else {
      this.x_shift += x;
    }
  }
  getXShift() { return this.x_shift; }

  // Render the modifier onto the canvas.
  draw() {
    this.checkContext();
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('MethodNotImplemented', 'draw() not implemented for this modifier.');
  }

  // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset
  alignSubNotesWithNote(subNotes, note) {
    // Shift over the tick contexts of each note
    const tickContext = note.getTickContext();
    const extraPx = tickContext.getExtraPx();
    const subNoteXOffset = tickContext.getX() - extraPx.left - extraPx.extraLeft
      + this.getSpacingFromNextModifier();

    subNotes.forEach((subNote) => {
      const subTickContext = subNote.getTickContext();
      subNote.setStave(note.stave);
      subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render
    });
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/modifiercontext.js":
/*!*****************************************************!*\
  !*** ./node_modules/vexflow/src/modifiercontext.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ModifierContext: () => (/* binding */ ModifierContext)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dot */ "./node_modules/vexflow/src/dot.js");
/* harmony import */ var _frethandfinger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./frethandfinger */ "./node_modules/vexflow/src/frethandfinger.js");
/* harmony import */ var _accidental__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./accidental */ "./node_modules/vexflow/src/accidental.js");
/* harmony import */ var _notesubgroup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notesubgroup */ "./node_modules/vexflow/src/notesubgroup.js");
/* harmony import */ var _gracenotegroup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./gracenotegroup */ "./node_modules/vexflow/src/gracenotegroup.js");
/* harmony import */ var _strokes__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./strokes */ "./node_modules/vexflow/src/strokes.js");
/* harmony import */ var _stringnumber__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stringnumber */ "./node_modules/vexflow/src/stringnumber.js");
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./articulation */ "./node_modules/vexflow/src/articulation.js");
/* harmony import */ var _ornament__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ornament */ "./node_modules/vexflow/src/ornament.js");
/* harmony import */ var _annotation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./annotation */ "./node_modules/vexflow/src/annotation.js");
/* harmony import */ var _bend__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./bend */ "./node_modules/vexflow/src/bend.js");
/* harmony import */ var _vibrato__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./vibrato */ "./node_modules/vexflow/src/vibrato.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This class implements various types of modifiers to notes (e.g. bends,
// fingering positions etc.)
















// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.
function L(...args) { if (ModifierContext.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.ModifierContext', args); }

class ModifierContext {
  constructor() {
    // Current modifiers
    this.modifiers = {};

    // Formatting data.
    this.preFormatted = false;
    this.postFormatted = false;
    this.width = 0;
    this.spacing = 0;
    this.state = {
      left_shift: 0,
      right_shift: 0,
      text_line: 0,
      top_text_line: 0,
    };

    // Add new modifiers to this array. The ordering is significant -- lower
    // modifiers are formatted and rendered before higher ones.
    this.PREFORMAT = [
      _stavenote__WEBPACK_IMPORTED_MODULE_1__.StaveNote,
      _dot__WEBPACK_IMPORTED_MODULE_2__.Dot,
      _frethandfinger__WEBPACK_IMPORTED_MODULE_3__.FretHandFinger,
      _accidental__WEBPACK_IMPORTED_MODULE_4__.Accidental,
      _strokes__WEBPACK_IMPORTED_MODULE_7__.Stroke,
      _gracenotegroup__WEBPACK_IMPORTED_MODULE_6__.GraceNoteGroup,
      _notesubgroup__WEBPACK_IMPORTED_MODULE_5__.NoteSubGroup,
      _stringnumber__WEBPACK_IMPORTED_MODULE_8__.StringNumber,
      _articulation__WEBPACK_IMPORTED_MODULE_9__.Articulation,
      _ornament__WEBPACK_IMPORTED_MODULE_10__.Ornament,
      _annotation__WEBPACK_IMPORTED_MODULE_11__.Annotation,
      _bend__WEBPACK_IMPORTED_MODULE_12__.Bend,
      _vibrato__WEBPACK_IMPORTED_MODULE_13__.Vibrato,
    ];

    // If post-formatting is required for an element, add it to this array.
    this.POSTFORMAT = [_stavenote__WEBPACK_IMPORTED_MODULE_1__.StaveNote];
  }

  addModifier(modifier) {
    const type = modifier.getCategory();
    if (!this.modifiers[type]) this.modifiers[type] = [];
    this.modifiers[type].push(modifier);
    modifier.setModifierContext(this);
    this.preFormatted = false;
    return this;
  }

  getModifiers(type) { return this.modifiers[type]; }
  getWidth() { return this.width; }
  getExtraLeftPx() { return this.state.left_shift; }
  getExtraRightPx() { return this.state.right_shift; }
  getState() { return this.state; }

  getMetrics() {
    if (!this.formatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');
    }

    return {
      width: this.state.left_shift + this.state.right_shift + this.spacing,
      spacing: this.spacing,
      extra_left_px: this.state.left_shift,
      extra_right_px: this.state.right_shift,
    };
  }

  preFormat() {
    if (this.preFormatted) return;
    this.PREFORMAT.forEach((modifier) => {
      L('Preformatting ModifierContext: ', modifier.CATEGORY);
      modifier.format(this.getModifiers(modifier.CATEGORY), this.state, this);
    });

    // Update width of this modifier context
    this.width = this.state.left_shift + this.state.right_shift;
    this.preFormatted = true;
  }

  postFormat() {
    if (this.postFormatted) return;
    this.POSTFORMAT.forEach((modifier) => {
      L('Postformatting ModifierContext: ', modifier.CATEGORY);
      modifier.postFormat(this.getModifiers(modifier.CATEGORY), this);
    });
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/multimeasurerest.js":
/*!******************************************************!*\
  !*** ./node_modules/vexflow/src/multimeasurerest.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiMeasureRest: () => (/* binding */ MultiMeasureRest)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _notehead__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notehead */ "./node_modules/vexflow/src/notehead.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./timesignature */ "./node_modules/vexflow/src/timesignature.js");
// VexFlow - Music Engraving for HTML5
// Copyright Mohit Muthanna 2010
//
// This class implements multiple measure rests









let semibrave_rest;
function get_semibrave_rest() {
  if (!semibrave_rest) {
    const notehead = new _notehead__WEBPACK_IMPORTED_MODULE_4__.NoteHead({ duration: 'w', note_type: 'r' });
    semibrave_rest = {
      glyph_font_scale: notehead.render_options.glyph_font_scale,
      glyph_code: notehead.glyph_code,
      width: notehead.getWidth(),
    };
  }
  return semibrave_rest;
}

class MultiMeasureRest extends _element__WEBPACK_IMPORTED_MODULE_2__.Element {
  // Parameters:
  // * `number_of_measures` - Number of measures.
  // * `options` - The options object.
  //   * `show_number` - Show number of measures string or not.
  //   * `number_line` -  Staff line to render the number of measures string.
  //   * `number_glyph_point` - Size of the number of measures string glyphs.
  //   * `padding_left` - Left padding from stave x.
  //   * `padding_right` - Right padding from stave end x.
  //   * `line` - Staff line to render rest line or rest symbols.
  //   * `spacing_between_lines_px` - Spacing between staff lines to
  // resolve serif height or {2-bar and 4-bar}rest symbol height.
  //   * `line_thickness` - Rest line thickness.
  //   * `serif_thickness` - Rest serif line thickness.
  //   * `use_symbols` - Use rest symbols or not.
  //   * `symbol_spacing` - Spacing between each rest symbol glyphs.
  //   * `semibrave_rest_glyph_scale` - Size of the semibrave(1-bar) rest symbol.
  constructor(number_of_measures, options) {
    super();
    this.setAttribute('type', 'MultiMeasureRest');

    this.render_options = {
      show_number: true,
      number_line: -0.5,
      number_glyph_point: 40, // same as TimeSignature.

      padding_left: undefined,
      padding_right: undefined,

      line: 2,

      spacing_between_lines_px: 10, // same as Stave.

      line_thickness: undefined,
      serif_thickness: 2,

      use_symbols: false,
      symbol_spacing: undefined,

      /* same as NoteHead. */
      semibrave_rest_glyph_scale: _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.DEFAULT_NOTATION_FONT_SCALE,
    };
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, options);

    this.number_of_measures = number_of_measures;
    this.xs = {
      left: NaN,
      right: NaN,
    };
  }

  getXs() {
    return this.xs;
  }

  setStave(stave) {
    this.stave = stave;
    return this;
  }

  getStave() {
    return this.stave;
  }

  drawLine(ctx, left, right, sbl) {
    const y = this.stave.getYForLine(this.render_options.line);
    const padding = (right - left) * 0.1;

    left += padding;
    right -= padding;

    const serif = {
      thickness: this.render_options.serif_thickness,
      height: sbl,
    };
    let lineThicknessHalf = sbl * 0.25;
    if (!isNaN(this.render_options.line_thickness)) {
      lineThicknessHalf = this.render_options.line_thickness * 0.5;
    }

    ctx.save();
    ctx.beginPath();
    ctx.moveTo(left, y - sbl);
    ctx.lineTo(left + serif.thickness, y - sbl);
    ctx.lineTo(left + serif.thickness, y - lineThicknessHalf);
    ctx.lineTo(right - serif.thickness, y - lineThicknessHalf);
    ctx.lineTo(right - serif.thickness, y - sbl);
    ctx.lineTo(right, y - sbl);
    ctx.lineTo(right, y + sbl);
    ctx.lineTo(right - serif.thickness, y + sbl);
    ctx.lineTo(right - serif.thickness, y + lineThicknessHalf);
    ctx.lineTo(left + serif.thickness, y + lineThicknessHalf);
    ctx.lineTo(left + serif.thickness, y + sbl);
    ctx.lineTo(left, y + sbl);
    ctx.closePath();
    ctx.fill();
  }

  drawSymbols(ctx, left, right, sbl) {
    const n4 = Math.floor(this.number_of_measures / 4);
    const n = this.number_of_measures % 4;
    const n2 = Math.floor(n / 2);
    const n1 = n % 2;

    const semibrave_rest = get_semibrave_rest();
    const semibrave_rest_width = semibrave_rest.width *
      (this.render_options.semibrave_rest_glyph_scale / semibrave_rest.glyph_font_scale);
    const glyphs = {
      2: {
        width: semibrave_rest_width * 0.5,
        height: sbl,
      },
      1: {
        width: semibrave_rest_width,
      },
    };

    let spacing = semibrave_rest_width * 1.35;
    if (!isNaN(this.render_options.symbol_spacing)) {
      spacing = this.render_options.symbol_spacing;
    }

    const width = (n4 * glyphs[2].width) + (n2 * glyphs[2].width)
      + (n1 * glyphs[1].width) + ((n4 + n2 + n1 - 1) * spacing);
    let x = left + ((right - left) * 0.5) - (width * 0.5);
    const yTop = this.stave.getYForLine(this.render_options.line - 1);
    const yMiddle = this.stave.getYForLine(this.render_options.line);
    const yBottom = this.stave.getYForLine(this.render_options.line + 1);

    ctx.save();
    ctx.setStrokeStyle('none');
    ctx.setLineWidth(0);

    for (let i = 0; i < n4; ++i) {
      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);
      ctx.fillRect(x, yBottom - glyphs[2].height, glyphs[2].width, glyphs[2].height);
      x += glyphs[2].width + spacing;
    }
    for (let i = 0; i < n2; ++i) {
      ctx.fillRect(x, yMiddle - glyphs[2].height, glyphs[2].width, glyphs[2].height);
      x += glyphs[2].width + spacing;
    }
    for (let i = 0; i < n1; ++i) {
      _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(ctx, x, yTop, this.render_options.semibrave_rest_glyph_scale,
        semibrave_rest.glyph_code);
      x += glyphs[1].width + spacing;
    }

    ctx.restore();
  }

  draw() {
    this.checkContext();
    this.setRendered();

    const ctx = this.context;
    const stave = this.stave;
    const sbl = this.render_options.spacing_between_lines_px;

    let left = stave.getNoteStartX();
    let right = stave.getNoteEndX();

    // FIXME: getNoteStartX() returns x+5(barline width) and
    // getNoteEndX() returns x + width(no barline width) by default. how to fix?
    const begModifiers = stave.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_5__.StaveModifier.Position.BEGIN);
    if (begModifiers.length === 1 && begModifiers[0].getCategory() === 'barlines') {
      left -= begModifiers[0].getWidth();
    }

    if (!isNaN(this.render_options.padding_left)) {
      left = stave.getX() + this.render_options.padding_left;
    }

    if (!isNaN(this.render_options.padding_right)) {
      right = stave.getX() + stave.getWidth() - this.render_options.padding_right;
    }

    this.xs.left = left;
    this.xs.right = right;

    if (this.render_options.use_symbols) {
      this.drawSymbols(ctx, left, right, sbl);
    } else {
      this.drawLine(ctx, left, right, sbl);
    }

    if (this.render_options.show_number) {
      const timeSpec = '/' + this.number_of_measures;
      const timeSig = new _timesignature__WEBPACK_IMPORTED_MODULE_6__.TimeSignature(null, undefined, false);
      timeSig.point = this.render_options.number_glyph_point;
      timeSig.setTimeSig(timeSpec);
      timeSig.setStave(stave);
      timeSig.x = left + ((right - left) * 0.5) - (timeSig.timeSig.glyph.getMetrics().width * 0.5);
      timeSig.bottomLine = this.render_options.number_line;
      timeSig.setContext(ctx).draw();
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/music.js":
/*!*******************************************!*\
  !*** ./node_modules/vexflow/src/music.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Music: () => (/* binding */ Music)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class implements some standard music theory routines.



class Music {
  static get NUM_TONES() {
    return 12;
  }

  static get roots() {
    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];
  }

  static get root_values() {
    return [0, 2, 4, 5, 7, 9, 11];
  }

  static get root_indices() {
    return {
      'c': 0,
      'd': 1,
      'e': 2,
      'f': 3,
      'g': 4,
      'a': 5,
      'b': 6,
    };
  }

  static get canonical_notes() {
    return [
      'c', 'c#', 'd', 'd#',
      'e', 'f', 'f#', 'g',
      'g#', 'a', 'a#', 'b',
    ];
  }

  static get diatonic_intervals() {
    return [
      'unison', 'm2', 'M2', 'm3', 'M3',
      'p4', 'dim5', 'p5', 'm6', 'M6',
      'b7', 'M7', 'octave',
    ];
  }

  static get diatonic_accidentals() {
    return {
      'unison': { note: 0, accidental: 0 },
      'm2': { note: 1, accidental: -1 },
      'M2': { note: 1, accidental: 0 },
      'm3': { note: 2, accidental: -1 },
      'M3': { note: 2, accidental: 0 },
      'p4': { note: 3, accidental: 0 },
      'dim5': { note: 4, accidental: -1 },
      'p5': { note: 4, accidental: 0 },
      'm6': { note: 5, accidental: -1 },
      'M6': { note: 5, accidental: 0 },
      'b7': { note: 6, accidental: -1 },
      'M7': { note: 6, accidental: 0 },
      'octave': { note: 7, accidental: 0 },
    };
  }

  static get intervals() {
    return {
      'u': 0, 'unison': 0,
      'm2': 1, 'b2': 1, 'min2': 1, 'S': 1, 'H': 1,
      '2': 2, 'M2': 2, 'maj2': 2, 'T': 2, 'W': 2,
      'm3': 3, 'b3': 3, 'min3': 3,
      'M3': 4, '3': 4, 'maj3': 4,
      '4': 5, 'p4': 5,
      '#4': 6, 'b5': 6, 'aug4': 6, 'dim5': 6,
      '5': 7, 'p5': 7,
      '#5': 8, 'b6': 8, 'aug5': 8,
      '6': 9, 'M6': 9, 'maj6': 9,
      'b7': 10, 'm7': 10, 'min7': 10, 'dom7': 10,
      'M7': 11, 'maj7': 11,
      '8': 12, 'octave': 12,
    };
  }

  static get scales() {
    return {
      major: [2, 2, 1, 2, 2, 2, 1],
      dorian: [2, 1, 2, 2, 2, 1, 2],
      mixolydian: [2, 2, 1, 2, 2, 1, 2],
      minor: [2, 1, 2, 2, 1, 2, 2],
    };
  }

  static get scaleTypes() {
    return {
      'M': Music.scales.major,
      'm': Music.scales.minor,
    };
  }

  static get accidentals() {
    return ['bb', 'b', 'n', '#', '##'];
  }

  static get noteValues() {
    return {
      'c': { root_index: 0, int_val: 0 },
      'cn': { root_index: 0, int_val: 0 },
      'c#': { root_index: 0, int_val: 1 },
      'c##': { root_index: 0, int_val: 2 },
      'cb': { root_index: 0, int_val: 11 },
      'cbb': { root_index: 0, int_val: 10 },
      'd': { root_index: 1, int_val: 2 },
      'dn': { root_index: 1, int_val: 2 },
      'd#': { root_index: 1, int_val: 3 },
      'd##': { root_index: 1, int_val: 4 },
      'db': { root_index: 1, int_val: 1 },
      'dbb': { root_index: 1, int_val: 0 },
      'e': { root_index: 2, int_val: 4 },
      'en': { root_index: 2, int_val: 4 },
      'e#': { root_index: 2, int_val: 5 },
      'e##': { root_index: 2, int_val: 6 },
      'eb': { root_index: 2, int_val: 3 },
      'ebb': { root_index: 2, int_val: 2 },
      'f': { root_index: 3, int_val: 5 },
      'fn': { root_index: 3, int_val: 5 },
      'f#': { root_index: 3, int_val: 6 },
      'f##': { root_index: 3, int_val: 7 },
      'fb': { root_index: 3, int_val: 4 },
      'fbb': { root_index: 3, int_val: 3 },
      'g': { root_index: 4, int_val: 7 },
      'gn': { root_index: 4, int_val: 7 },
      'g#': { root_index: 4, int_val: 8 },
      'g##': { root_index: 4, int_val: 9 },
      'gb': { root_index: 4, int_val: 6 },
      'gbb': { root_index: 4, int_val: 5 },
      'a': { root_index: 5, int_val: 9 },
      'an': { root_index: 5, int_val: 9 },
      'a#': { root_index: 5, int_val: 10 },
      'a##': { root_index: 5, int_val: 11 },
      'ab': { root_index: 5, int_val: 8 },
      'abb': { root_index: 5, int_val: 7 },
      'b': { root_index: 6, int_val: 11 },
      'bn': { root_index: 6, int_val: 11 },
      'b#': { root_index: 6, int_val: 0 },
      'b##': { root_index: 6, int_val: 1 },
      'bb': { root_index: 6, int_val: 10 },
      'bbb': { root_index: 6, int_val: 9 },
    };
  }

  isValidNoteValue(note) {
    if (note == null || note < 0 || note >= Music.NUM_TONES) {
      return false;
    }
    return true;
  }

  isValidIntervalValue(interval) {
    return this.isValidNoteValue(interval);
  }

  getNoteParts(noteString) {
    if (!noteString || noteString.length < 1) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
    }

    if (noteString.length > 3) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
    }

    const note = noteString.toLowerCase();

    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;
    const match = regex.exec(note);

    if (match != null) {
      const root = match[1];
      const accidental = match[2];

      return {
        root,
        accidental,
      };
    } else {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
    }
  }

  getKeyParts(keyString) {
    if (!keyString || keyString.length < 1) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);
    }

    const key = keyString.toLowerCase();

    // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.
    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;
    const match = regex.exec(key);

    if (match != null) {
      const root = match[1];
      const accidental = match[2];
      let type = match[3];

      // Unspecified type implies major
      if (!type) type = 'M';

      return {
        root,
        accidental,
        type,
      };
    } else {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid key: ${keyString}`);
    }
  }

  getNoteValue(noteString) {
    const value = Music.noteValues[noteString];
    if (value == null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid note name: ${noteString}`);
    }

    return value.int_val;
  }

  getIntervalValue(intervalString) {
    const value = Music.intervals[intervalString];
    if (value == null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid interval name: ${intervalString}`);
    }

    return value;
  }

  getCanonicalNoteName(noteValue) {
    if (!this.isValidNoteValue(noteValue)) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid note value: ${noteValue}`);
    }

    return Music.canonical_notes[noteValue];
  }

  getCanonicalIntervalName(intervalValue) {
    if (!this.isValidIntervalValue(intervalValue)) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid interval value: ${intervalValue}`);
    }

    return Music.diatonic_intervals[intervalValue];
  }

  /* Given a note, interval, and interval direction, product the
   * relative note.
   */
  getRelativeNoteValue(noteValue, intervalValue, direction) {
    if (direction == null) direction = 1;

    if (direction !== 1 && direction !== -1) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid direction: ${direction}`);
    }

    let sum = (noteValue + (direction * intervalValue)) % Music.NUM_TONES;
    if (sum < 0) sum += Music.NUM_TONES;

    return sum;
  }

  getRelativeNoteName(root, noteValue) {
    const parts = this.getNoteParts(root);
    const rootValue = this.getNoteValue(parts.root);
    let interval = noteValue - rootValue;

    if (Math.abs(interval) > Music.NUM_TONES - 3) {
      let multiplier = 1;
      if (interval > 0) multiplier = -1;

      // Possibly wrap around. (Add +1 for modulo operator)
      const reverse_interval = (((noteValue + 1) + (rootValue + 1)) %
        Music.NUM_TONES) * multiplier;

      if (Math.abs(reverse_interval) > 2) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Notes not related: ${root}, ${noteValue})`);
      } else {
        interval = reverse_interval;
      }
    }

    if (Math.abs(interval) > 2) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Notes not related: ${root}, ${noteValue})`);
    }

    let relativeNoteName = parts.root;
    if (interval > 0) {
      for (let i = 1; i <= interval; ++i) {
        relativeNoteName += '#';
      }
    } else if (interval < 0) {
      for (let i = -1; i >= interval; --i) {
        relativeNoteName += 'b';
      }
    }

    return relativeNoteName;
  }

  /* Return scale tones, given intervals. Each successive interval is
   * relative to the previous one, e.g., Major Scale:
   *
   *   TTSTTTS = [2,2,1,2,2,2,1]
   *
   * When used with key = 0, returns C scale (which is isomorphic to
   * interval list).
   */
  getScaleTones(key, intervals) {
    const tones = [key];

    let nextNote = key;
    for (let i = 0; i < intervals.length; i += 1) {
      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);
      if (nextNote !== key) tones.push(nextNote);
    }

    return tones;
  }

  /* Returns the interval of a note, given a diatonic scale.
   *
   * E.g., Given the scale C, and the note E, returns M3
   */
  getIntervalBetween(note1, note2, direction) {
    if (direction == null) direction = 1;

    if (direction !== 1 && direction !== -1) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid direction: ${direction}`);
    }

    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Invalid notes: ${note1}, ${note2}`);
    }

    let difference = direction === 1
      ? note2 - note1
      : note1 - note2;

    if (difference < 0) difference += Music.NUM_TONES;

    return difference;
  }

  // Create a scale map that represents the pitch state for a
  // `keySignature`. For example, passing a `G` to `keySignature` would
  // return a scale map with every note naturalized except for `F` which
  // has an `F#` state.
  createScaleMap(keySignature) {
    const keySigParts = this.getKeyParts(keySignature);
    const scaleName = Music.scaleTypes[keySigParts.type];

    let keySigString = keySigParts.root;
    if (keySigParts.accidental) keySigString += keySigParts.accidental;

    if (!scaleName) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);

    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);
    const noteLocation = Music.root_indices[keySigParts.root];

    const scaleMap = {};
    for (let i = 0; i < Music.roots.length; ++i) {
      const index = (noteLocation + i) % Music.roots.length;
      const rootName = Music.roots[index];
      let noteName = this.getRelativeNoteName(rootName, scale[i]);

      if (noteName.length === 1) {
        noteName += 'n';
      }

      scaleMap[rootName] = noteName;
    }

    return scaleMap;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/note.js":
/*!******************************************!*\
  !*** ./node_modules/vexflow/src/note.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Note: () => (/* binding */ Note)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _tickable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tickable */ "./node_modules/vexflow/src/tickable.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements an abstract interface for notes and chords that
// are rendered on a stave. Notes have some common properties: All of them
// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)
//
// Some notes have stems, heads, dots, etc. Most notational elements that
// surround a note are called *modifiers*, and every note has an associated
// array of them. All notes also have a rendering context and belong to a stave.





class Note extends _tickable__WEBPACK_IMPORTED_MODULE_2__.Tickable {
  static get CATEGORY() { return 'note'; }
  static get STAVEPADDING() { return 12; }

  // Debug helper. Displays various note metrics for the given
  // note.
  static plotMetrics(ctx, note, yPos) {
    const metrics = note.getMetrics();
    const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;
    const xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;
    const xAbs = note.getAbsoluteX();
    const xPost1 = note.getAbsoluteX() + metrics.noteWidth;
    const xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;
    const xEnd = note.getAbsoluteX()
      + metrics.noteWidth
      + metrics.extraRightPx
      + metrics.modRightPx;
    const xFreedomRight = xEnd + note.getFormatterMetrics().freedom.right;

    const xWidth = xEnd - xStart;
    ctx.save();
    ctx.setFont('Arial', 8, '');
    ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);

    const y = (yPos + 7);
    function stroke(x1, x2, color, yy = y) {
      ctx.beginPath();
      ctx.setStrokeStyle(color);
      ctx.setFillStyle(color);
      ctx.setLineWidth(3);
      ctx.moveTo(x1 + note.getXShift(), yy);
      ctx.lineTo(x2 + note.getXShift(), yy);
      ctx.stroke();
    }

    stroke(xStart, xPre1, 'red');
    stroke(xPre1, xAbs, '#999');
    stroke(xAbs, xPost1, 'green');
    stroke(xPost1, xPost2, '#999');
    stroke(xPost2, xEnd, 'red');
    stroke(xEnd, xFreedomRight, '#DD0');
    stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');

    const formatterMetrics = note.getFormatterMetrics();
    if (formatterMetrics.iterations > 0) {
      const spaceDeviation = formatterMetrics.space.deviation;
      const prefix = spaceDeviation >= 0 ? '+' : '';
      ctx.setFillStyle('red');
      ctx.fillText(prefix + Math.round(spaceDeviation),
        xAbs + note.getXShift(), yPos - 10);
    }
    ctx.restore();
  }

  // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for
  // positioning and layout.
  // To create a new note you need to provide a `noteStruct`, which consists
  // of the following fields:
  //
  // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)
  // `dots`: The number of dots, which affects the duration.
  // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)
  //
  // The range of values for these parameters are available in `src/tables.js`.
  constructor(noteStruct) {
    super();
    this.setAttribute('type', 'Note');

    if (!noteStruct) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments', 'Note must have valid initialization data to identify duration and type.'
      );
    }

    // Parse `noteStruct` and get note properties.
    const initStruct = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.parseNoteStruct(noteStruct);
    if (!initStruct) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`
      );
    }

    // Set note properties from parameters.
    this.duration = initStruct.duration;
    this.dots = initStruct.dots;
    this.noteType = initStruct.type;
    this.customTypes = initStruct.customTypes;

    if (noteStruct.duration_override) {
      // Custom duration
      this.setDuration(noteStruct.duration_override);
    } else {
      // Default duration
      this.setIntrinsicTicks(initStruct.ticks);
    }

    this.modifiers = [];

    // Get the glyph code for this note from the font.
    this.glyph = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.getGlyphProps(this.duration, this.noteType);
    this.customGlyphs = this.customTypes.map(t => _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.getGlyphProps(this.duration, t));

    if (this.positions && (typeof (this.positions) !== 'object' || !this.positions.length)) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments', 'Note keys must be array type.');
    }

    // Note to play for audio players.
    this.playNote = null;

    // Positioning contexts used by the Formatter.
    this.tickContext = null;    // The current tick context.
    this.modifierContext = null;
    this.ignore_ticks = false;

    // Positioning variables
    this.width = 0;             // Width in pixels calculated after preFormat
    this.extraLeftPx = 0;       // Extra room on left for offset note head
    this.extraRightPx = 0;      // Extra room on right for offset note head
    this.x_shift = 0;           // X shift from tick context X
    this.left_modPx = 0;        // Max width of left modifiers
    this.right_modPx = 0;       // Max width of right modifiers
    this.voice = null;          // The voice that this note is in
    this.preFormatted = false;  // Is this note preFormatted?
    this.ys = [];               // list of y coordinates for each note
    // we need to hold on to these for ties and beams.

    if (noteStruct.align_center) {
      this.setCenterAlignment(noteStruct.align_center);
    }

    // The render surface.
    this.stave = null;
    this.render_options = {
      annotation_spacing: 5,
      stave_padding: Note.STAVEPADDING,
    };
  }

  // Get and set the play note, which is arbitrary data that can be used by an
  // audio player.
  getPlayNote() { return this.playNote; }
  setPlayNote(note) { this.playNote = note; return this; }

  // Don't play notes by default, call them rests. This is also used by things like
  // beams and dots for positioning.
  isRest() { return false; }

  // TODO(0xfe): Why is this method here?
  addStroke(index, stroke) {
    stroke.setNote(this);
    stroke.setIndex(index);
    this.modifiers.push(stroke);
    this.setPreFormatted(false);
    return this;
  }

  // Get and set the target stave.
  getStave() { return this.stave; }
  setStave(stave) {
    this.stave = stave;
    this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.
    this.context = this.stave.context;
    return this;
  }

  // `Note` is not really a modifier, but is used in
  // a `ModifierContext`.
  getCategory() { return Note.CATEGORY; }

  // Set the rendering context for the note.
  setContext(context) { this.context = context; return this; }

  // Get and set spacing to the left and right of the notes.
  getExtraLeftPx() { return this.extraLeftPx; }
  getExtraRightPx() { return this.extraRightPx; }
  setExtraLeftPx(x) { this.extraLeftPx = x; return this; }
  setExtraRightPx(x) { this.extraRightPx = x; return this; }

  // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)
  shouldIgnoreTicks() { return this.ignore_ticks; }

  // Get the stave line number for the note.
  getLineNumber() { return 0; }

  // Get the stave line number for rest.
  getLineForRest() { return 0; }

  // Get the glyph associated with this note.
  getGlyph() { return this.glyph; }

  getGlyphWidth() {
    return this.glyph.getWidth(this.render_options.glyph_font_scale);
  }

  // Set and get Y positions for this note. Each Y value is associated with
  // an individual pitch/key within the note/chord.
  setYs(ys) { this.ys = ys; return this; }
  getYs() {
    if (this.ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoYValues', 'No Y-values calculated for this note.');
    }

    return this.ys;
  }

  // Get the Y position of the space above the stave onto which text can
  // be rendered.
  getYForTopText(text_line) {
    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', 'No stave attached to this note.');
    }

    return this.stave.getYForTopText(text_line);
  }

  // Get a `BoundingBox` for this note.
  getBoundingBox() { return null; }

  // Returns the voice that this note belongs in.
  getVoice() {
    if (!this.voice) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoVoice', 'Note has no voice.');
    return this.voice;
  }

  // Attach this note to `voice`.
  setVoice(voice) {
    this.voice = voice;
    this.preFormatted = false;
    return this;
  }

  // Get and set the `TickContext` for this note.
  getTickContext() { return this.tickContext; }
  setTickContext(tc) {
    this.tickContext = tc;
    this.preFormatted = false;
    return this;
  }

  // Accessors for the note type.
  getDuration() { return this.duration; }
  isDotted() { return (this.dots > 0); }
  hasStem() { return false; }
  getDots() { return this.dots; }
  getNoteType() { return this.noteType; }
  setBeam() { return this; } // ignore parameters

  // Attach this note to a modifier context.
  setModifierContext(mc) { this.modifierContext = mc; return this; }

  // Attach a modifier to this note.
  addModifier(modifier, index = 0) {
    modifier.setNote(this);
    modifier.setIndex(index);
    this.modifiers.push(modifier);
    this.setPreFormatted(false);
    return this;
  }

  // Get the coordinates for where modifiers begin.
  getModifierStartXY() {
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
    }

    return {
      x: this.getAbsoluteX(),
      y: this.ys[0],
    };
  }

  // Get bounds and metrics for this note.
  //
  // Returns a struct with fields:
  // `width`: The total width of the note (including modifiers.)
  // `noteWidth`: The width of the note head only.
  // `left_shift`: The horizontal displacement of the note.
  // `modLeftPx`: Start `X` for left modifiers.
  // `modRightPx`: Start `X` for right modifiers.
  // `extraLeftPx`: Extra space on left of note.
  // `extraRightPx`: Extra space on right of note.
  getMetrics() {
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call getMetrics on an unformatted note.");
    }

    let modLeftPx = 0;
    let modRightPx = 0;
    if (this.modifierContext != null) {
      modLeftPx = this.modifierContext.state.left_shift;
      modRightPx = this.modifierContext.state.right_shift;
    }

    const width = this.getWidth();
    return {
      width,
      noteWidth: width - modLeftPx - modRightPx - this.extraLeftPx - this.extraRightPx,
      left_shift: this.x_shift, // TODO(0xfe): Make style consistent

      // Modifiers, accidentals etc.
      modLeftPx,
      modRightPx,

      // Displaced note head on left or right.
      extraLeftPx: this.extraLeftPx,
      extraRightPx: this.extraRightPx,
    };
  }

  // Get and set width of note. Used by the formatter for positioning.
  setWidth(width) { this.width = width; }
  getWidth() {
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call GetWidth on an unformatted note.");
    }

    return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);
  }

  // Displace note by `x` pixels. Used by the formatter.
  setXShift(x) { this.x_shift = x; return this; }
  getXShift() { return this.x_shift; }

  // Get `X` position of this tick context.
  getX() {
    if (!this.tickContext) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');
    }

    return this.tickContext.getX() + this.x_shift;
  }

  // Get the absolute `X` position of this note's tick context. This
  // excludes x_shift, so you'll need to factor it in if you're
  // looking for the post-formatted x-position.
  getAbsoluteX() {
    if (!this.tickContext) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');
    }

    // Position note to left edge of tick context.
    let x = this.tickContext.getX();
    if (this.stave) {
      x += this.stave.getNoteStartX() + this.render_options.stave_padding;
    }

    if (this.isCenterAligned()) {
      x += this.getCenterXShift();
    }

    return x;
  }
  setPreFormatted(value) {
    this.preFormatted = value;

    // Maintain the width of left and right modifiers in pixels.
    if (this.preFormatted) {
      const extra = this.tickContext.getExtraPx();
      this.left_modPx = Math.max(this.left_modPx, extra.left);
      this.right_modPx = Math.max(this.right_modPx, extra.right);
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/notehead.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/notehead.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoteHead: () => (/* binding */ NoteHead)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated
// directly, but used internally in `StaveNote`.
//
// See `tests/notehead_tests.js` for usage examples.








// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.
function L(...args) { if (NoteHead.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.NoteHead', args); }

// Draw slashnote head manually. No glyph exists for this.
//
// Parameters:
// * `ctx`: the Canvas context
// * `duration`: the duration of the note. ex: "4"
// * `x`: the x coordinate to draw at
// * `y`: the y coordinate to draw at
// * `stem_direction`: the direction of the stem
function drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {
  const width = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.SLASH_NOTEHEAD_WIDTH;
  ctx.save();
  ctx.setLineWidth(_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.STEM_WIDTH);

  let fill = false;

  if (_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToNumber(duration) > 2) {
    fill = true;
  }

  if (!fill) x -= (_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.STEM_WIDTH / 2) * stem_direction;

  ctx.beginPath();
  ctx.moveTo(x, y + staveSpace);
  ctx.lineTo(x, y + 1);
  ctx.lineTo(x + width, y - staveSpace);
  ctx.lineTo(x + width, y);
  ctx.lineTo(x, y + staveSpace);
  ctx.closePath();

  if (fill) {
    ctx.fill();
  } else {
    ctx.stroke();
  }

  if (_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToFraction(duration).equals(0.5)) {
    const breve_lines = [-3, -1, width + 1, width + 3];
    for (let i = 0; i < breve_lines.length; i++) {
      ctx.beginPath();
      ctx.moveTo(x + breve_lines[i], y - 10);
      ctx.lineTo(x + breve_lines[i], y + 11);
      ctx.stroke();
    }
  }

  ctx.restore();
}

class NoteHead extends _note__WEBPACK_IMPORTED_MODULE_2__.Note {
  static get CATEGORY() { return 'notehead'; }

  constructor(head_options) {
    super(head_options);
    this.setAttribute('type', 'NoteHead');

    this.index = head_options.index;
    this.x_shift = head_options.x_shift || 0;
    this.x = (head_options.x || 0) + this.x_shift;
    this.y = head_options.y || 0;
    this.note_type = head_options.note_type;
    this.duration = head_options.duration;
    this.displaced = head_options.displaced || false;
    this.stem_direction = head_options.stem_direction || _stavenote__WEBPACK_IMPORTED_MODULE_4__.StaveNote.STEM_UP;
    this.line = head_options.line;

    // Get glyph code based on duration and note type. This could be
    // regular notes, rests, or other custom codes.
    this.glyph = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.getGlyphProps(this.duration, this.note_type);
    if (!this.glyph) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments',
        `No glyph found for duration '${this.duration}' and type '${this.note_type}'`);
    }

    this.glyph_code = this.glyph.code_head;
    this.x_shift = head_options.x_shift || 0;
    if (head_options.custom_glyph_code) {
      this.custom_glyph = true;
      this.glyph_code = head_options.custom_glyph_code;
      this.stem_up_x_offset = head_options.stem_up_x_offset || 0;
      this.stem_down_x_offset = head_options.stem_down_x_offset || 0;
      // VexFlowPatch: add stem_up_y_shift and stem_down_y_shift to shift notehead (instead of stem in variables above)
      this.stem_up_y_shift = head_options.stem_up_y_shift || 0;
      this.stem_down_y_shift = head_options.stem_down_y_shift || 0;
    }

    this.style = head_options.style;
    this.slashed = head_options.slashed;

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, {
      // font size for note heads
      glyph_font_scale: head_options.glyph_font_scale || _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.DEFAULT_NOTATION_FONT_SCALE,
      // number of stroke px to the left and right of head
      stroke_px: 3,
    });

    this.setWidth(this.glyph.getWidth(this.render_options.glyph_font_scale));
  }

  getCategory() { return NoteHead.CATEGORY; }

  // Get the width of the notehead
  getWidth() { return this.width; }

  // Determine if the notehead is displaced
  isDisplaced() { return this.displaced === true; }

  // Get the glyph data
  getGlyph() { return this.glyph; }

  // Set the X coordinate
  setX(x) { this.x = x; return this; }

  // get/set the Y coordinate
  getY() { return this.y; }
  setY(y) { this.y = y;  return this; }

  // Get/set the stave line the notehead is placed on
  getLine() { return this.line; }
  setLine(line) { this.line = line; return this; }

  // Get the canvas `x` coordinate position of the notehead.
  getAbsoluteX() {
    // If the note has not been preformatted, then get the static x value
    // Otherwise, it's been formatted and we should use it's x value relative
    // to its tick context
    const x = !this.preFormatted ? this.x : super.getAbsoluteX();

    // For a more natural displaced notehead, we adjust the displacement amount
    // by half the stem width in order to maintain a slight overlap with the stem
    const displacementStemAdjustment = (_stem__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH / 2);

    return x + (this.displaced
      ? (this.width - displacementStemAdjustment) * this.stem_direction
      : 0
    );
  }

  // Get the `BoundingBox` for the `NoteHead`
  getBoundingBox() {
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
    }

    const spacing = this.stave.getSpacingBetweenLines();
    const half_spacing = spacing / 2;
    const min_y = this.y - half_spacing;

    return new _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);
  }

  // Set notehead to a provided `stave`
  setStave(stave) {
    const line = this.getLine();

    this.stave = stave;
    this.setY(stave.getYForNote(line));
    this.context = this.stave.context;
    return this;
  }

  // Pre-render formatting
  preFormat() {
    if (this.preFormatted) return this;

    const width = this.getWidth() + this.extraLeftPx + this.extraRightPx;

    this.setWidth(width);
    this.setPreFormatted(true);
    return this;
  }

  // Draw the notehead
  draw() {
    this.checkContext();
    this.setRendered();

    const ctx = this.context;
    let head_x = this.getAbsoluteX();
    let y = this.y;
    if (this.custom_glyph) {
      // head_x += this.x_shift;
      if (this.stem_direction === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
        head_x += this.stem_up_x_offset;
        // VexFlowPatch: also allow notehead shift independent of stem length
        y += (this.stem_up_y_shift || 0);
      } else {
        head_x += this.stem_down_x_offset
        y += (this.stem_down_y_shift || 0)
      }
    }

    L("Drawing note head '", this.note_type, this.duration, "' at", head_x, y);

    // Begin and end positions for head.
    const stem_direction = this.stem_direction;
    const glyph_font_scale = this.render_options.glyph_font_scale;

    if (this.style) {
      this.applyStyle(ctx);
    }

    if (this.note_type === 's') {
      const staveSpace = this.stave.getSpacingBetweenLines();
      drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);
    } else {
      _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);
    }

    if (this.style) {
      this.restoreStyle(ctx);
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/notesubgroup.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/notesubgroup.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoteSubGroup: () => (/* binding */ NoteSubGroup)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatter */ "./node_modules/vexflow/src/formatter.js");
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./voice */ "./node_modules/vexflow/src/voice.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Taehoon Moon 2016
//
// ## Description
//
// This file implements `NoteSubGroup` which is used to format and
// render notes as a `Modifier`
// ex) ClefNote, TimeSigNote and BarNote.







class NoteSubGroup extends _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier {
  static get CATEGORY() { return 'notesubgroup'; }

  // Arrange groups inside a `ModifierContext`
  static format(groups, state) {
    if (!groups || groups.length === 0) return false;

    let width = 0;
    for (let i = 0; i < groups.length; ++i) {
      const group = groups[i];
      group.preFormat();
      width += group.getWidth();
    }

    state.left_shift += width;
    return true;
  }

  constructor(subNotes) {
    super();
    this.setAttribute('type', 'NoteSubGroup');

    this.note = null;
    this.index = null;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT;
    this.subNotes = subNotes;
    this.subNotes.forEach(subNote => { subNote.ignore_ticks = false; });
    this.width = 0;
    this.preFormatted = false;

    this.formatter = new _formatter__WEBPACK_IMPORTED_MODULE_3__.Formatter();
    this.voice = new _voice__WEBPACK_IMPORTED_MODULE_4__.Voice({
      num_beats: 4,
      beat_value: 4,
      resolution: _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.RESOLUTION,
    }).setStrict(false);

    this.voice.addTickables(this.subNotes);

    return this;
  }

  getCategory() { return NoteSubGroup.CATEGORY; }

  preFormat() {
    if (this.preFormatted) return;

    this.formatter.joinVoices([this.voice]).format([this.voice], 0);
    this.setWidth(this.formatter.getMinTotalWidth());
    this.preFormatted = true;
  }

  setNote(note) {
    this.note = note;
  }
  setWidth(width) {
    this.width = width;
  }
  getWidth() {
    return this.width;
  }

  draw() {
    this.checkContext();

    const note = this.getNote();

    if (!(note && (this.index !== null))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('NoAttachedNote',
        "Can't draw notes without a parent note and parent note index.");
    }

    this.setRendered();
    this.alignSubNotesWithNote(this.subNotes, note); // Modifier function

    // Draw notes
    this.subNotes.forEach(subNote => subNote.setContext(this.context).drawWithStyle());
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/ornament.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/ornament.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ornament: () => (/* binding */ Ornament)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _tickcontext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tickcontext */ "./node_modules/vexflow/src/tickcontext.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Cyril Silverman
//
// ## Description
//
// This file implements ornaments as modifiers that can be
// attached to notes. The complete list of ornaments is available in
// `tables.js` under `Vex.Flow.ornamentCodes`.
//
// See `tests/ornament_tests.js` for usage examples.








// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.
function L(...args) { if (Ornament.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Ornament', args); }

class Ornament extends _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier {
  static get CATEGORY() { return 'ornaments'; }

  // ## Static Methods
  // Arrange ornaments inside `ModifierContext`
  static format(ornaments, state) {
    if (!ornaments || ornaments.length === 0) return false;

    let width = 0;
    for (let i = 0; i < ornaments.length; ++i) {
      const ornament = ornaments[i];
      const increment = 2;

      width = Math.max(ornament.getWidth(), width);

      if (ornament.getPosition() === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE) {
        ornament.setTextLine(state.top_text_line);
        state.top_text_line += increment;
      } else {
        ornament.setTextLine(state.text_line);
        state.text_line += increment;
      }
    }

    state.left_shift += width / 2;
    state.right_shift += width / 2;
    return true;
  }

  // Create a new ornament of type `type`, which is an entry in
  // `Vex.Flow.ornamentCodes` in `tables.js`.
  constructor(type) {
    super();
    this.setAttribute('type', 'Ornament');

    this.note = null;
    this.index = null;
    this.type = type;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE;
    this.delayed = false;

    this.accidentalUpper = null;
    this.accidentalLower = null;

    this.render_options = {
      font_scale: 38,
      accidentalLowerPadding: 3,
      accidentalUpperPadding: 3,
    };

    this.ornament = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.ornamentCodes(this.type);
    if (!this.ornament) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ArgumentError', `Ornament not found: '${this.type}'`);
    }

    this.glyph = new _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph(this.ornament.code, this.render_options.font_scale);
    this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift
  }

  getCategory() { return Ornament.CATEGORY; }

  // Set whether the ornament is to be delayed
  setDelayed(delayed) { this.delayed = delayed; return this; }

  // Set the upper accidental for the ornament
  setUpperAccidental(accid) {
    const scale = this.render_options.font_scale / 1.3;
    this.accidentalUpper = new _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph(_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.accidentalCodes(accid).code, scale);
    this.accidentalUpper.setOrigin(0.5, 1.0);
    return this;
  }

  // Set the lower accidental for the ornament
  setLowerAccidental(accid) {
    const scale = this.render_options.font_scale / 1.3;
    this.accidentalLower = new _glyph__WEBPACK_IMPORTED_MODULE_5__.Glyph(_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.accidentalCodes(accid).code, scale);
    this.accidentalLower.setOrigin(0.5, 1.0);
    return this;
  }

  // Render ornament in position next to note.
  draw() {
    this.checkContext();

    if (!this.note || this.index == null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw Ornament without a note and index.");
    }

    this.setRendered();

    const ctx = this.context;
    const stemDir = this.note.getStemDirection();
    const stave = this.note.getStave();

    // Get stem extents
    const stemExtents = this.note.getStem().getExtents();
    let y = stemDir === _stavenote__WEBPACK_IMPORTED_MODULE_4__.StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;

    // TabNotes don't have stems attached to them. Tab stems are rendered
    // outside the stave.
    if (this.note.getCategory() === 'tabnotes') {
      if (this.note.hasStem()) {
        if (stemDir === _stavenote__WEBPACK_IMPORTED_MODULE_4__.StaveNote.STEM_DOWN) {
          y = stave.getYForTopText(this.text_line);
        }
      } else { // Without a stem
        y = stave.getYForTopText(this.text_line);
      }
    }

    const isPlacedOnNoteheadSide = stemDir === _stavenote__WEBPACK_IMPORTED_MODULE_4__.StaveNote.STEM_DOWN;
    const spacing = stave.getSpacingBetweenLines();
    let lineSpacing = 1;

    // Beamed stems are longer than quarter note stems, adjust accordingly
    if (!isPlacedOnNoteheadSide && this.note.beam) {
      lineSpacing += 0.5;
    }

    const totalSpacing = spacing * (this.text_line + lineSpacing);
    const glyphYBetweenLines = y - totalSpacing;

    // Get initial coordinates for the modifier position
    const start = this.note.getModifierStartXY(this.position, this.index);
    let glyphX = start.x;
    let glyphY = Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);
    glyphY += this.y_shift;

    // Ajdust x position if ornament is delayed
    if (this.delayed) {
      let delayXShift = 0;
      if (this.delayXShift !== undefined) {
        delayXShift = this.delayXShift;
      } else {
        delayXShift += this.glyph.getMetrics().width / 2;
        const nextContext = _tickcontext__WEBPACK_IMPORTED_MODULE_3__.TickContext.getNextContext(this.note.getTickContext());
        if (nextContext) {
          delayXShift += (nextContext.getX() - glyphX) * 0.5;
        } else {
          delayXShift += (stave.x + stave.width - glyphX) * 0.5;
        }
        this.delayXShift = delayXShift;
      }
      glyphX += delayXShift;
    }

    L('Rendering ornament: ', this.ornament, glyphX, glyphY);

    if (this.accidentalLower) {
      this.accidentalLower.render(ctx, glyphX, glyphY);
      glyphY -= this.accidentalLower.getMetrics().height;
      glyphY -= this.render_options.accidentalLowerPadding;
    }

    this.glyph.render(ctx, glyphX, glyphY);
    glyphY -= this.glyph.getMetrics().height;

    if (this.accidentalUpper) {
      glyphY -= this.render_options.accidentalUpperPadding;
      this.accidentalUpper.render(ctx, glyphX, glyphY);
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/parser.js":
/*!********************************************!*\
  !*** ./node_modules/vexflow/src/parser.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Parser: () => (/* binding */ Parser),
/* harmony export */   X: () => (/* binding */ X)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// A generic text parsing class for VexFlow.



// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.
function L(...args) { if (Parser.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Parser', args); }

const X = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MakeException('ParserError');

// Converts parser results into an easy to reference list that can be
// used in triggers.
function flattenMatches(results) {
  if (results.matchedString !== undefined) return results.matchedString;
  if (results.results) return flattenMatches(results.results);
  if (results.length === 1) return flattenMatches(results[0]);
  if (results.length === 0) return null;
  return results.map(flattenMatches);
}

// This is the base parser class. Given an arbitrary context-free grammar, it
// can parse any line and execute code when specific rules are met (e.g.,
// when a string is terminated.)
class Parser {
  // For an example of a simple grammar, take a look at tests/parser_tests.js or
  // the EasyScore grammar in easyscore.js.
  constructor(grammar) {
    this.grammar = grammar;
  }

  // Parse `line` using current grammar. Returns {success: true} if the
  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`
  // where `errorPos` is the location of the error in the string.
  parse(line) {
    this.line = line;
    this.pos = 0;
    this.errorPos = -1;
    const results = this.expect(this.grammar.begin());
    results.errorPos = this.errorPos;
    return results;
  }

  matchFail(returnPos) {
    if (this.errorPos === -1) this.errorPos = this.pos;
    this.pos = returnPos;
  }

  matchSuccess() {
    this.errorPos = -1;
  }

  // Look for `token` in this.line[this.pos], and return success
  // if one is found. `token` is specified as a regular expression.
  matchToken(token, noSpace = false) {
    const regexp = noSpace
      ? new RegExp('^((' + token + '))')
      : new RegExp('^((' + token + ')\\s*)');
    const workingLine = this.line.slice(this.pos);
    const result = workingLine.match(regexp);
    if (result !== null) {
      return {
        success: true,
        matchedString: result[2],
        incrementPos: result[1].length,
        pos: this.pos,
      };
    } else {
      return {
        success: false,
        pos: this.pos,
      };
    }
  }

  // Execute rule to match a sequence of tokens (or rules). If `maybe` is
  // set, then return success even if the token is not found, but reset
  // the position before exiting.
  expectOne(rule, maybe = false) {
    const results = [];
    const pos = this.pos;

    let allMatches = true;
    let oneMatch = false;
    maybe = (maybe === true) || (rule.maybe === true);

    // Execute all sub rules in sequence.
    for (let i = 0; i < rule.expect.length; i++) {
      const next = rule.expect[i];
      const localPos = this.pos;
      const result = this.expect(next);

      // If `rule.or` is set, then return success if any one
      // of the subrules match, else all subrules must match.
      if (result.success) {
        results.push(result);
        oneMatch = true;
        if (rule.or) break;
      } else {
        allMatches = false;
        if (!rule.or) {
          this.pos = localPos;
          break;
        }
      }
    }

    const gotOne = (rule.or && oneMatch) || allMatches;
    const success = gotOne || (maybe === true);
    if (maybe && !gotOne) this.pos = pos;
    if (success) this.matchSuccess(); else this.matchFail(pos);
    return { success, results, numMatches: gotOne ? 1 : 0 };
  }

  // Try to match multiple (one or more) instances of the rule. If `maybe` is set,
  // then a failed match is also a success (but the position is reset).
  expectOneOrMore(rule, maybe = false) {
    const results = [];
    const pos = this.pos;
    let numMatches = 0;
    let more = true;

    do {
      const result = this.expectOne(rule);
      if (result.success) {
        numMatches++;
        results.push(result.results);
      } else {
        more = false;
      }
    } while (more);

    const success = (numMatches > 0) || (maybe === true);
    if (maybe && !(numMatches > 0)) this.pos = pos;
    if (success) this.matchSuccess(); else this.matchFail(pos);
    return { success, results, numMatches };
  }

  // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.
  expectZeroOrMore(rule) {
    return this.expectOneOrMore(rule, true);
  }

  // Execute the rule produced by the provided the `rules` function. This
  // ofloads to one of the above matchers and consolidates the results. It is also
  // responsible for executing any code triggered by the rule (in `rule.run`.)
  expect(rules) {
    L('Evaluating rules:', rules);
    let result;
    if (!rules) {
      throw new X('Invalid Rule: ' + rules, rules);
    }

    // Get rule from Grammar class.
    const rule = rules.bind(this.grammar)();

    if (rule.token) {
      // Base case: parse the regex and throw an error if the
      // line doesn't match.
      result = this.matchToken(rule.token, (rule.noSpace === true));
      if (result.success) {
        // Token match! Update position and throw away parsed portion
        // of string.
        this.pos += result.incrementPos;
      }
    } else if (rule.expect) {
      if (rule.oneOrMore) {
        result = this.expectOneOrMore(rule);
      } else if (rule.zeroOrMore) {
        result = this.expectZeroOrMore(rule);
      } else {
        result = this.expectOne(rule);
      }
    } else {
      throw new X('Bad grammar! No `token` or `expect` property', rule);
    }

    // If there's a trigger attached to this rule, then pull it.
    result.matches = [];
    if (result.results) result.results.forEach(r => result.matches.push(flattenMatches(r)));
    if (rule.run && result.success) rule.run(result);
    return result;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/pedalmarking.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/pedalmarking.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PedalMarking: () => (/* binding */ PedalMarking)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements different types of pedal markings. These notation
// elements indicate to the performer when to depress and release the a pedal.
//
// In order to create "Sostenuto", and "una corda" markings, you must set
// custom text for the release/depress pedal markings.






// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.
function L(...args) { if (PedalMarking.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.PedalMarking', args); }

// Draws a pedal glyph with the provided `name` on a rendering `context`
// at the coordinates `x` and `y. Takes into account the glyph data
// coordinate shifts.
function drawPedalGlyph(name, context, x, y, point) {
  const glyph_data = PedalMarking.GLYPHS[name];
  const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(glyph_data.code, point);
  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);
}

class PedalMarking extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  // Glyph data
  static get GLYPHS() {
    return {
      'pedal_depress': {
        code: 'v36',
        x_shift: -10,
        y_shift: 0,
      },
      'pedal_release': {
        code: 'v5d',
        x_shift: -2,
        y_shift: 3,
      },
    };
  }

  static get Styles() {
    return {
      TEXT: 1,
      BRACKET: 2,
      MIXED: 3,
      MIXED_OPEN_END: 4, // VexFlowPatch: additions from here on
      BRACKET_OPEN_BEGIN: 5,
      BRACKET_OPEN_END: 6,
      BRACKET_OPEN_BOTH: 7
    };
  }

  static get StylesString() {
    return {
      text: PedalMarking.Styles.TEXT,
      bracket: PedalMarking.Styles.BRACKET,
      mixed: PedalMarking.Styles.MIXED,
      mixed_open_end: PedalMarking.Styles.MIXED_OPEN_END,
      bracket_open_begin: PedalMarking.Styles.BRACKET_OPEN_BEGIN,
      bracket_open_end: PedalMarking.Styles.BRACKET_OPEN_END,
      bracket_open_both: PedalMarking.Styles.BRACKET_OPEN_BOTH
    };
  }

  // Create a sustain pedal marking. Returns the defaults PedalMarking.
  // Which uses the traditional "Ped" and "*"" markings.
  static createSustain(notes) {
    const pedal = new PedalMarking(notes);
    return pedal;
  }

  // Create a sostenuto pedal marking
  static createSostenuto(notes) {
    const pedal = new PedalMarking(notes);
    pedal.setStyle(PedalMarking.Styles.MIXED);
    pedal.setCustomText('Sost. Ped.');
    return pedal;
  }

  // Create an una corda pedal marking
  static createUnaCorda(notes) {
    const pedal = new PedalMarking(notes);
    pedal.setStyle(PedalMarking.Styles.TEXT);
    pedal.setCustomText('una corda', 'tre corda');
    return pedal;
  }

  // ## Prototype Methods
  constructor(notes) {
    super();
    this.setAttribute('type', 'PedalMarking');
    this.EndsStave = false; // VexFlowPatch
    this.ChangeBegin = false;
    this.ChangeEnd = false;
    this.notes = notes;
    this.style = PedalMarking.TEXT;
    this.line = 0;

    // Custom text for the release/depress markings
    this.custom_depress_text = '';
    this.custom_release_text = '';

    this.font = {
      family: 'Times New Roman',
      size: 12,
      weight: 'italic bold',
    };

    this.render_options = {
      bracket_height: 10,
      text_margin_right: 6,
      bracket_line_width: 1,
      glyph_point_size: 40,
      color: 'black',
    };
  }

  setEndStave(stave) { // VexFlowPatch addition
    this.endStave = stave;
    this.endStaveAddedWidth = 0;
    this.startMargin = 0;
    this.endMargin = 0;
    if(Array.isArray(this.endStave.modifiers)){
      for(let i = 0; i < this.endStave.modifiers.length; i++){
        let nextMod = this.endStave.modifiers[i];
        if(nextMod && nextMod.position === _stavemodifier__WEBPACK_IMPORTED_MODULE_3__.StaveModifier.Position.END && nextMod.width){
          this.endStaveAddedWidth += nextMod.width;
        }
      }
    }
  }

  // Set custom text for the `depress`/`release` pedal markings. No text is
  // set if the parameter is falsy.
  setCustomText(depress, release) {
    this.custom_depress_text = depress || '';
    this.custom_release_text = release || '';
    return this;
  }

  // Set the pedal marking style
  setStyle(style) {
    if (style < 1 && style > 3)  {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');
    }

    this.style = style;
    return this;
  }

  // Set the staff line to render the markings on
  setLine(line) { this.line = line; return this; }

  // Draw the bracket based pedal markings
  drawBracketed() {
    const ctx = this.context;
    let is_pedal_depressed = false;
    let prev_x;
    let prev_y;
    const pedal = this;
    // Iterate through each note
    this.notes.forEach((note, index, notes) => {
      // Each note triggers the opposite pedal action
      is_pedal_depressed = !is_pedal_depressed;
      // Get the initial coordinates for the note
      let x = 0; // VexFlowPatch (further smaller diffs below)
      if (note) {
        //default to note head begin
        x = note.getNoteHeadBeginX();
        if (this.BeginsStave) {
          x = note.getStave().getNoteStartX();
        }
      } else {
        x = this.endStave.end_x + this.endStaveAddedWidth;
      }

      //If this pedal doesn't end a stave...
      if(!this.EndsStave){
        if(note){
          //pedal across a single note or just the end note
          if(!is_pedal_depressed){
            switch(pedal.style) {
              case PedalMarking.Styles.BRACKET_OPEN_END:
              case PedalMarking.Styles.BRACKET_OPEN_BOTH:
              case PedalMarking.Styles.MIXED_OPEN_END:
                x = note.getNoteHeadEndX();
              break;
              default:
                if(this.ChangeEnd){
                  //Start in the middle of the note
                  x = note.getAbsoluteX();
                } else {
                  x = note.getNoteHeadBeginX() - pedal.render_options.text_margin_right;
                  this.startMargin = -pedal.render_options.text_margin_right;
                }
              break;
            }
          } else if(this.ChangeBegin){
            x = note.getAbsoluteX();
          }
        }
      } else {
        //Ends stave and we are at the end...
        if(!is_pedal_depressed){
          //IF we are the end, set the end to the stave end
          if(note){
            if(this.ChangeEnd){
              //Start in the middle of the note
              x = note.getAbsoluteX();
            }  else {
              x = note.getStave().end_x + this.endStaveAddedWidth - pedal.render_options.text_margin_right;
            }
          } else {
            x = this.endStave.end_x + this.endStaveAddedWidth - pedal.render_options.text_margin_right;
          }
          
          this.endMargin = -pedal.render_options.text_margin_right;
        } else if (this.ChangeBegin){
          x = note.getAbsoluteX();
        }
      }

      let stave = this.endStave; // if !note
      if (note) {
        stave = note.getStave();
      }
      let y = stave.getYForBottomText(pedal.line + 3);
      if (prev_y) { // compiler complains if we shorten this
        if (prev_y > y) { // don't slope pedal marking upwards (nonstandard)
          y = prev_y;
        }
      }

      // Throw if current note is positioned before the previous note
      if (x < prev_x) {
        // TODO this unnecessarily throws for missing endNote fix
        // throw new Vex.RERR(
        //   'InvalidConfiguration', 'The notes provided must be in order of ascending x positions'
        // );
      }

      // Determine if the previous or next note are the same
      // as the current note. We need to keep track of this for
      // when adjustments are made for the release+depress action
      const next_is_same = notes[index + 1] === note;
      const prev_is_same = notes[index - 1] === note;

      let x_shift = 0;
      if (is_pedal_depressed) {
        // Adjustment for release+depress
        x_shift =  prev_is_same ? 5 : 0;

        if ((pedal.style === PedalMarking.Styles.MIXED || pedal.style === PedalMarking.Styles.MIXED_OPEN_END) && !prev_is_same) {
          // For MIXED style, start with text instead of bracket
          if (pedal.custom_depress_text) {
            // If we have custom text, use instead of the default "Ped" glyph
            const text_width = ctx.measureText(pedal.custom_depress_text).width;
            ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);
            x_shift = (text_width / 2) + pedal.render_options.text_margin_right;
          } else {
            // Render the Ped glyph in position
            drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);
            x_shift = 20 + pedal.render_options.text_margin_right;
          }
        } else {
          // Draw start bracket
          ctx.beginPath();
          if (pedal.style === PedalMarking.Styles.BRACKET_OPEN_BEGIN || pedal.style === PedalMarking.Styles.BRACKET_OPEN_BOTH) {
            ctx.moveTo(x + x_shift, y);
          } else {
            if(this.ChangeBegin){
              x += 5;
            }
            ctx.moveTo(x, y - pedal.render_options.bracket_height);
            if(this.ChangeBegin){
              x += 5;
            }
            ctx.lineTo(x + x_shift, y);
          }
          ctx.stroke();
          ctx.closePath();
        }
      } else {
        // Adjustment for release+depress
        x_shift = next_is_same && !this.EndsStave ? -5 : 0;

        // Draw end bracket
        ctx.beginPath();
        ctx.moveTo(prev_x, prev_y);
        ctx.lineTo(x + x_shift, y);
        if (pedal.style !== PedalMarking.Styles.BRACKET_OPEN_END && pedal.style !== PedalMarking.Styles.MIXED_OPEN_END &&
            pedal.style !== PedalMarking.Styles.BRACKET_OPEN_BOTH) {
            if(this.ChangeEnd){
              x += 5;
            }
            ctx.lineTo(x, y - pedal.render_options.bracket_height);
        }
        ctx.stroke();
        ctx.closePath();
      }

      // Store previous coordinates
      prev_x = x + x_shift;
      prev_y = y;
    });
  }

  // Draw the text based pedal markings. This defaults to the traditional
  // "Ped" and "*"" symbols if no custom text has been provided.
  drawText() {
    const ctx = this.context;
    let is_pedal_depressed = false;
    const pedal = this;

    // The glyph point size
    const point = pedal.render_options.glyph_point_size;

    // Iterate through each note, placing glyphs or custom text accordingly
    this.notes.forEach(note => {
      is_pedal_depressed = !is_pedal_depressed;
      const stave = note.getStave();
      const x = note.getAbsoluteX();
      const y = stave.getYForBottomText(pedal.line + 3);

      let text_width = 0;
      if (is_pedal_depressed) {
        if (pedal.custom_depress_text) {
          text_width = ctx.measureText(pedal.custom_depress_text).width;
          ctx.fillText(pedal.custom_depress_text, x - (text_width / 2), y);
        } else {
          drawPedalGlyph('pedal_depress', ctx, x, y, point);
        }
      } else {
        if (pedal.custom_release_text) {
          text_width = ctx.measureText(pedal.custom_release_text).width;
          ctx.fillText(pedal.custom_release_text, x - (text_width / 2), y);
        } else {
          drawPedalGlyph('pedal_release', ctx, x, y, point);
        }
      }
    });
  }

  // Render the pedal marking in position on the rendering context
  draw() {
    const ctx = this.checkContext();
    this.setRendered();

    ctx.save();
    ctx.setStrokeStyle(this.render_options.color);
    ctx.setFillStyle(this.render_options.color);
    ctx.setFont(this.font.family, this.font.size, this.font.weight);

    L('Rendering Pedal Marking');

    if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED || this.style === PedalMarking.Styles.MIXED_OPEN_END ||
        this.style === PedalMarking.Styles.BRACKET_OPEN_BEGIN || this.style === PedalMarking.Styles.BRACKET_OPEN_END || this.style === PedalMarking.Styles.BRACKET_OPEN_BOTH) {
      ctx.setLineWidth(this.render_options.bracket_line_width);
      this.drawBracketed();
    } else if (this.style === PedalMarking.Styles.TEXT) {
      this.drawText();
    }

    ctx.restore();
  }
}

/***/ }),

/***/ "./node_modules/vexflow/src/raphaelcontext.js":
/*!****************************************************!*\
  !*** ./node_modules/vexflow/src/raphaelcontext.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RaphaelContext: () => (/* binding */ RaphaelContext)
/* harmony export */ });
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// A rendering context for the Raphael backend.
//
// ## Warning: Deprecated for SVGContext
// Except in instances where SVG support for IE < 9.0 is
// needed, SVGContext is recommended.

class RaphaelContext {
  constructor(element) {
    this.element = element;
    this.paper = Raphael(element); // eslint-disable-line
    this.path = '';
    this.pen = { x: 0, y: 0 };
    this.lineWidth = 1.0;
    this.state = {
      scale: { x: 1, y: 1 },
      font_family: 'Arial',
      font_size: 8,
      font_weight: 800,
    };

    this.attributes = {
      'stroke-width': 0.3,
      'fill': 'black',
      'stroke': 'black',
      'font': '10pt Arial',
    };

    this.background_attributes = {
      'stroke-width': 0,
      'fill': 'white',
      'stroke': 'white',
      'font': '10pt Arial',
    };

    this.shadow_attributes = {
      width: 0,
      color: 'black',
    };

    this.state_stack = [];
  }

  // Containers not implemented
  openGroup() {}
  closeGroup() {}
  add() {}

  setFont(family, size, weight) {
    this.state.font_family = family;
    this.state.font_size = size;
    this.state.font_weight = weight;
    this.attributes.font = (this.state.font_weight || '') + ' ' +
      (this.state.font_size * this.state.scale.x) + 'pt ' +
      this.state.font_family;
    return this;
  }

  setRawFont(font) {
    this.attributes.font = font;
    return this;
  }

  setFillStyle(style) {
    this.attributes.fill = style;
    return this;
  }

  setBackgroundFillStyle(style) {
    this.background_attributes.fill = style;
    this.background_attributes.stroke = style;
    return this;
  }

  setStrokeStyle(style) {
    this.attributes.stroke = style;
    return this;
  }

  setShadowColor(style) {
    this.shadow_attributes.color = style;
    return this;
  }

  setShadowBlur(blur) {
    this.shadow_attributes.width = blur;
    return this;
  }

  setLineWidth(width) {
    this.attributes['stroke-width'] = width;
    this.lineWidth = width;
  }

  // Empty because there is no equivalent in SVG
  setLineDash() { return this; }
  setLineCap() { return this; }

  scale(x, y) {
    this.state.scale = { x, y };
    // The scale() method is deprecated as of Raphael.JS 2.0, and
    // can no longer be used as an option in an Element.attr() call.
    // It is preserved here for users running earlier versions of
    // Raphael.JS, though it has no effect on the SVG output in
    // Raphael 2 and higher.
    this.attributes.transform = 'S' + x + ',' + y + ',0,0';
    this.attributes.scale = x + ',' + y + ',0,0';
    this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' +
      this.state.font_family;
    this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';
    this.background_attributes.font = this.state.font_size *
      this.state.scale.x + 'pt ' +
      this.state.font_family;
    return this;
  }

  clear() { this.paper.clear(); }

  resize(width, height) {
    this.element.style.width = width;
    this.paper.setSize(width, height);
    return this;
  }

  // Sets the SVG `viewBox` property, which results in auto scaling images when its container
  // is resized.
  //
  // Usage: `ctx.setViewBox("0 0 600 400")`
  setViewBox(viewBox) {
    this.paper.canvas.setAttribute('viewBox', viewBox);
  }

  rect(x, y, width, height) {
    if (height < 0) {
      y += height;
      height = -height;
    }

    this.paper.rect(x, y, width - 0.5, height - 0.5)
      .attr(this.attributes)
      .attr('fill', 'none')
      .attr('stroke-width', this.lineWidth);
    return this;
  }

  fillRect(x, y, width, height) {
    if (height < 0) {
      y += height;
      height = -height;
    }

    this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);
    return this;
  }

  clearRect(x, y, width, height) {
    if (height < 0) {
      y += height;
      height = -height;
    }

    this.paper.rect(x, y, width - 0.5, height - 0.5)
      .attr(this.background_attributes);
    return this;
  }

  beginPath() {
    this.path = '';
    this.pen.x = 0;
    this.pen.y = 0;
    return this;
  }

  moveTo(x, y) {
    this.path += 'M' + x + ',' + y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  lineTo(x, y) {
    this.path += 'L' + x + ',' + y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  bezierCurveTo(x1, y1, x2, y2, x, y) {
    this.path += 'C' +
      x1 + ',' +
      y1 + ',' +
      x2 + ',' +
      y2 + ',' +
      x + ',' +
      y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  quadraticCurveTo(x1, y1, x, y) {
    this.path += 'Q' +
      x1 + ',' +
      y1 + ',' +
      x + ',' +
      y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  // This is an attempt (hack) to simulate the HTML5 canvas
  // arc method.
  arc(x, y, radius, startAngle, endAngle, antiClockwise) {
    function normalizeAngle(angle) {
      while (angle < 0) {
        angle += Math.PI * 2;
      }

      while (angle > Math.PI * 2) {
        angle -= Math.PI * 2;
      }
      return angle;
    }

    startAngle = normalizeAngle(startAngle);
    endAngle = normalizeAngle(endAngle);

    if (startAngle > endAngle) {
      const tmp = startAngle;
      startAngle = endAngle;
      endAngle = tmp;
      antiClockwise = !antiClockwise;
    }

    const delta = endAngle - startAngle;

    if (delta > Math.PI) {
      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);
      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);
    } else {
      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);
    }
    return this;
  }

  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {
    const x1 = x + radius * Math.cos(startAngle);
    const y1 = y + radius * Math.sin(startAngle);

    const x2 = x + radius * Math.cos(endAngle);
    const y2 = y + radius * Math.sin(endAngle);

    let largeArcFlag = 0;
    let sweepFlag = 0;
    if (antiClockwise) {
      sweepFlag = 1;
      if (endAngle - startAngle < Math.PI) {
        largeArcFlag = 1;
      }
    } else if (endAngle - startAngle > Math.PI) {
      largeArcFlag = 1;
    }

    this.path += 'M' + x1 + ',' + y1 + ',A' +
      radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' +
      x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;
  }

  // Adapted from the source for Raphael's Element.glow
  glow() {
    const out = this.paper.set();
    if (this.shadow_attributes.width > 0) {
      const sa = this.shadow_attributes;
      const num_paths = sa.width / 2;
      for (let i = 1; i <= num_paths; i++) {
        out.push(this.paper.path(this.path).attr({
          stroke: sa.color,
          'stroke-linejoin': 'round',
          'stroke-linecap': 'round',
          'stroke-width': +(sa.width / num_paths * i).toFixed(3),
          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),
          // See note in this.scale(): In Raphael the scale() method
          // is deprecated and removed as of Raphael 2.0 and replaced
          // by the transform() method.  It is preserved here for
          // users with earlier versions of Raphael, but has no effect
          // on the output SVG in Raphael 2.0+.
          transform: this.attributes.transform,
          scale: this.attributes.scale,
        }));
      }
    }
    return out;
  }

  fill() {
    const elem = this.paper.path(this.path)
      .attr(this.attributes)
      .attr('stroke-width', 0);
    this.glow(elem);
    return this;
  }

  stroke() {
    // The first line of code below is, unfortunately, a bit of a hack:
    // Raphael's transform() scaling does not scale the stroke-width, so
    // in order to scale a stroke, we have to manually scale the
    // stroke-width.
    //
    // This works well so long as the X & Y states for this.scale() are
    // relatively similar.  However, if they are very different, we
    // would expect horizontal and vertical lines to have different
    // stroke-widths.
    //
    // In the future, if we want to support very divergent values for
    // horizontal and vertical scaling, we may want to consider
    // implementing SVG scaling with properties of the SVG viewBox &
    // viewPort and removing it entirely from the Element.attr() calls.
    // This would more closely parallel the approach taken in
    // canvascontext.js as well.

    const strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;
    const elem = this.paper.path(this.path)
      .attr(this.attributes)
      .attr('fill', 'none')
      .attr('stroke-width', strokeWidth);
    this.glow(elem);
    return this;
  }

  closePath() {
    this.path += 'Z';
    return this;
  }

  measureText(text) {
    const txt = this.paper.text(0, 0, text)
      .attr(this.attributes)
      .attr('fill', 'none')
      .attr('stroke', 'none');
    const bounds = txt.getBBox();
    txt.remove();

    return {
      width: bounds.width,
      height: bounds.height,
    };
  }

  fillText(text, x, y) {
    this.paper
      .text(
        x + (this.measureText(text).width / 2),
        y - (this.state.font_size / (2.25 * this.state.scale.y)),
        text
      )
      .attr(this.attributes);

    return this;
  }

  save() {
    // TODO(mmuthanna): State needs to be deep-copied.
    this.state_stack.push({
      state: {
        font_family: this.state.font_family,
      },
      attributes: {
        font: this.attributes.font,
        fill: this.attributes.fill,
        stroke: this.attributes.stroke,
        'stroke-width': this.attributes['stroke-width'],
      },
      shadow_attributes: {
        width: this.shadow_attributes.width,
        color: this.shadow_attributes.color,
      },
    });
    return this;
  }

  restore() {
    // TODO(0xfe): State needs to be deep-restored.
    const state = this.state_stack.pop();
    this.state.font_family = state.state.font_family;
    this.attributes.font = state.attributes.font;
    this.attributes.fill = state.attributes.fill;
    this.attributes.stroke = state.attributes.stroke;
    this.attributes['stroke-width'] = state.attributes['stroke-width'];
    this.shadow_attributes.width = state.shadow_attributes.width;
    this.shadow_attributes.color = state.shadow_attributes.color;
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/registry.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/registry.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Registry: () => (/* binding */ Registry),
/* harmony export */   X: () => (/* binding */ X)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// @author Mohit Cheppudira
//
// ## Description
//
// This file implements a registry for VexFlow elements. It allows users
// to track, query, and manage some subset of generated elements, and
// dynamically get and set attributes.
//
// There are two ways to regiser with a registry:
//
// 1) Explicitly call `element.register(registry)`, or,
// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future
//    elements will automatically register with it.
//
// Once an element is registered, selected attributes are tracked and indexed by
// the registry. This allows fast look up of elements by attributes like id, type,
// and class.



const X = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MakeException('RegistryError');

function setIndexValue(index, name, value, id, elem) {
  if (!index[name][value]) index[name][value] = {};
  index[name][value][id] = elem;
}

class Registry {
  static get INDEXES() { return ['type']; }

  constructor() {
    this.clear();
  }

  // If you call `enableDefaultRegistry`, any new elements will auto-register with
  // the provided registry as soon as they're constructed.
  static enableDefaultRegistry(registry) {
    Registry.defaultRegistry = registry;
  }

  static getDefaultRegistry() {
    return Registry.defaultRegistry;
  }

  static disableDefaultRegistry() {
    Registry.defaultRegistry = null;
  }

  clear() {
    // Indexes are represented as maps of maps (of maps). This allows
    // for both multi-labeling (e.g., an element can have multiple classes)
    // and efficient lookup.
    this.index = {
      id: {},
      type: {},
      class: {},
    };
    return this;
  }

  // Updates the indexes for element 'id'. If an element's attribute changes
  // from A -> B, make sure to remove the element from A.
  updateIndex({ id, name, value, oldValue }) {
    const elem = this.getElementById(id);
    if (oldValue !== null && this.index[name][oldValue]) {
      delete this.index[name][oldValue][id];
    }
    if (value !== null) {
      setIndexValue(this.index, name, value, elem.getAttribute('id'), elem);
    }
  }

  // Register element `elem` with this registry. This adds the element to its index and watches
  // it for attribute changes.
  register(elem, id) {
    id = id || elem.getAttribute('id');

    if (!id) {
      throw new X('Can\'t add element without `id` attribute to registry', elem);
    }

    // Manually add id to index, then update other indexes.
    elem.setAttribute('id', id);
    setIndexValue(this.index, 'id', id, id, elem);
    Registry.INDEXES.forEach(name => {
      this.updateIndex({ id, name, value: elem.getAttribute(name), oldValue: null });
    });
    elem.onRegister(this);
    return this;
  }

  getElementById(id) {
    return this.index.id[id] ? this.index.id[id][id] : null;
  }

  getElementsByAttribute(attrName, value) {
    const index = this.index[attrName];
    if (index && index[value]) {
      return Object.keys(index[value]).map(i => index[value][i]);
    } else {
      return [];
    }
  }

  getElementsByType(type) { return this.getElementsByAttribute('type', type); }
  getElementsByClass(className) { return this.getElementsByAttribute('class', className); }

  // This is called by the element when an attribute value changes. If an indexed
  // attribute changes, then update the local index.
  onUpdate({ id, name, value, oldValue }) {
    function includes(array, value) {
      return array.filter(x => x === value).length > 0;
    }

    if (!includes(Registry.INDEXES.concat(['id', 'class']), name)) return this;
    this.updateIndex({ id, name, value, oldValue });
    return this;
  }
}

Registry.defaultRegistry = null;


/***/ }),

/***/ "./node_modules/vexflow/src/renderer.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/renderer.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Renderer: () => (/* binding */ Renderer)
/* harmony export */ });
/* harmony import */ var _canvascontext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./canvascontext */ "./node_modules/vexflow/src/canvascontext.js");
/* harmony import */ var _raphaelcontext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raphaelcontext */ "./node_modules/vexflow/src/raphaelcontext.js");
/* harmony import */ var _svgcontext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./svgcontext */ "./node_modules/vexflow/src/svgcontext.js");
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// Support for different rendering contexts: Canvas, Raphael






let lastContext = null;

class Renderer {
  static get Backends() {
    return {
      CANVAS: 1,
      RAPHAEL: 2,
      SVG: 3,
      VML: 4,
    };
  }

  // End of line types
  static get LineEndType() {
    return {
      NONE: 1, // No leg
      UP: 2,   // Upward leg
      DOWN: 3, // Downward leg
    };
  }

  // Set this to true if you're using VexFlow inside a runtime
  // that does not allow modifiying canvas objects. There is a small
  // performance degradation due to the extra indirection.
  static get USE_CANVAS_PROXY() {
    return false;
  }

  static get lastContext() {
    return lastContext;
  }
  static set lastContext(ctx) {
    lastContext = ctx;
  }

  static buildContext(elementId, backend, width, height, background) {
    const renderer = new Renderer(elementId, backend);
    if (width && height) {
      renderer.resize(width, height);
    }

    if (!background) background = '#FFF';
    const ctx = renderer.getContext();
    ctx.setBackgroundFillStyle(background);
    Renderer.lastContext = ctx;
    return ctx;
  }

  static getCanvasContext(elementId, width, height, background) {
    return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);
  }

  static getRaphaelContext(elementId, width, height, background) {
    return Renderer.buildContext(elementId, Renderer.Backends.RAPHAEL, width, height, background);
  }

  static getSVGContext(elementId, width, height, background) {
    return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);
  }

  static bolsterCanvasContext(ctx) {
    if (Renderer.USE_CANVAS_PROXY) {
      return new _canvascontext__WEBPACK_IMPORTED_MODULE_0__.CanvasContext(ctx);
    }

    const methodNames = [
      'clear', 'setFont', 'setRawFont', 'setFillStyle', 'setBackgroundFillStyle',
      'setStrokeStyle', 'setShadowColor', 'setShadowBlur', 'setLineWidth',
      'setLineCap', 'setLineDash', 'openGroup', 'closeGroup', 'getGroup',
    ];

    ctx.vexFlowCanvasContext = ctx;

    methodNames.forEach(methodName => {
      ctx[methodName] = ctx[methodName] || _canvascontext__WEBPACK_IMPORTED_MODULE_0__.CanvasContext.prototype[methodName];
    });

    return ctx;
  }

  // Draw a dashed line (horizontal, vertical or diagonal
  // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.
  // setting the second number to 0 draws a solid line.
  static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {
    context.beginPath();

    const dx = toX - fromX;
    const dy = toY - fromY;
    const angle = Math.atan2(dy, dx);
    let x = fromX;
    let y = fromY;
    context.moveTo(fromX, fromY);
    let idx = 0;
    let draw = true;
    while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {
      const dashLength = dashPattern[idx++ % dashPattern.length];
      const nx = x + (Math.cos(angle) * dashLength);
      x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);
      const ny = y + (Math.sin(angle) * dashLength);
      y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);
      if (draw) {
        context.lineTo(x, y);
      } else {
        context.moveTo(x, y);
      }
      draw = !draw;
    }

    context.closePath();
    context.stroke();
  }

  constructor(elementId, backend) {
    this.elementId = elementId;
    if (!this.elementId) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_3__.Vex.RERR('BadArgument', 'Invalid id for renderer.');
    }

    this.element = document.getElementById(elementId);
    if (!this.element) this.element = elementId;

    // Verify backend and create context
    this.ctx = null;
    this.paper = null;
    this.backend = backend;
    if (this.backend === Renderer.Backends.CANVAS) {
      // Create context.
      if (!this.element.getContext) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_3__.Vex.RERR('BadElement', `Can't get canvas context from element: ${elementId}`);
      }
      // VexFlowPatch: add willReadFrequently attribute for getImageData() performance
      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d', {willReadFrequently: true}));
    } else if (this.backend === Renderer.Backends.RAPHAEL) {
      this.ctx = new _raphaelcontext__WEBPACK_IMPORTED_MODULE_1__.RaphaelContext(this.element);
    } else if (this.backend === Renderer.Backends.SVG) {
      this.ctx = new _svgcontext__WEBPACK_IMPORTED_MODULE_2__.SVGContext(this.element);
    } else {
      throw new _vex__WEBPACK_IMPORTED_MODULE_3__.Vex.RERR('InvalidBackend', `No support for backend: ${this.backend}`);
    }
  }

  resize(width, height) {
    if (this.backend === Renderer.Backends.CANVAS) {
      if (!this.element.getContext) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_3__.Vex.RERR(
          'BadElement', `Can't get canvas context from element: ${this.elementId}`
        );
      }
      [width, height] = _canvascontext__WEBPACK_IMPORTED_MODULE_0__.CanvasContext.SanitizeCanvasDims(width, height);

      const devicePixelRatio = window.devicePixelRatio || 1;

      this.element.width = width * devicePixelRatio;
      this.element.height = height * devicePixelRatio;
      this.element.style.width = width + 'px';
      this.element.style.height = height + 'px';

      // VexFlowPatch: add willReadFrequently attribute for getImageData() performance
      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d', {willReadFrequently: true}));
      this.ctx.scale(devicePixelRatio, devicePixelRatio);
    } else {
      this.ctx.resize(width, height);
    }

    return this;
  }

  getContext() { return this.ctx; }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stave.js":
/*!*******************************************!*\
  !*** ./node_modules/vexflow/src/stave.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stave: () => (/* binding */ Stave)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _stavebarline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stavebarline */ "./node_modules/vexflow/src/stavebarline.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _staverepetition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./staverepetition */ "./node_modules/vexflow/src/staverepetition.js");
/* harmony import */ var _stavesection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./stavesection */ "./node_modules/vexflow/src/stavesection.js");
/* harmony import */ var _stavetempo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stavetempo */ "./node_modules/vexflow/src/stavetempo.js");
/* harmony import */ var _stavetext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stavetext */ "./node_modules/vexflow/src/stavetext.js");
/* harmony import */ var _boundingbox__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./boundingbox */ "./node_modules/vexflow/src/boundingbox.js");
/* harmony import */ var _clef__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./clef */ "./node_modules/vexflow/src/clef.js");
/* harmony import */ var _keysignature__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./keysignature */ "./node_modules/vexflow/src/keysignature.js");
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./timesignature */ "./node_modules/vexflow/src/timesignature.js");
/* harmony import */ var _stavevolta__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./stavevolta */ "./node_modules/vexflow/src/stavevolta.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
















class Stave extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  constructor(x, y, width, options) {
    super();
    this.setAttribute('type', 'Stave');

    this.x = x;
    this.y = y;
    this.width = width;
    this.formatted = false;
    this.setStartX(x + 5);
    // this.start_x = x + 5;
    this.end_x = x + width;
    this.modifiers = [];  // stave modifiers (clef, key, time, barlines, coda, segno, etc.)
    this.measure = 0;
    this.clef = 'treble';
    this.endClef = undefined;
    this.font = {
      family: 'sans-serif',
      size: 8,
      weight: '',
    };
    this.options = {
      vertical_bar_width: 10,       // Width around vertical bar end-marker
      glyph_spacing_px: 10,
      num_lines: 5,
      fill_style: '#999999',
      left_bar: true,               // draw vertical bar on left
      right_bar: true,               // draw vertical bar on right
      spacing_between_lines_px: 10, // in pixels
      space_above_staff_ln: 4,      // in staff lines
      space_below_staff_ln: 4,      // in staff lines
      top_text_position: 1,          // in staff lines
    };
    this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.options, options);

    this.resetLines();

    const BARTYPE = _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type;
    // beg bar
    this.addModifier(new _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline(this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));
    // end bar
    this.addEndModifier(new _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline(this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));
  }

  space(spacing) { return this.options.spacing_between_lines_px * spacing; }

  resetLines() {
    this.options.line_config = [];
    for (let i = 0; i < this.options.num_lines; i++) {
      this.options.line_config.push({ visible: true });
    }
    this.height = (this.options.num_lines + this.options.space_above_staff_ln) *
      this.options.spacing_between_lines_px;
    this.options.bottom_text_position = this.options.num_lines;
  }

  /** align modifiers like time signature for vertical staves with different key signatures / time signature xs
   * This method should be static, but that makes using it with `any` usage more difficult.
   */
  formatBegModifiers(staves) {
    let maxX = 0;
    // align note start
    staves.forEach((stave) => {
      if (stave.getNoteStartX() > maxX) maxX = stave.getNoteStartX();
    });
    staves.forEach((stave) => {
      stave.setNoteStartX(maxX);
    });

    maxX = 0;
    // align REPEAT_BEGIN
    staves.forEach((stave) => {
      const modifiers = stave.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN, _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.CATEGORY);
      modifiers.forEach((modifier) => {
        if (modifier.getType() == _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.REPEAT_BEGIN)
          if (modifier.getX() > maxX) maxX = modifier.getX();
      });
    });
    staves.forEach((stave) => {
      const modifiers = stave.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN, _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.CATEGORY);
      modifiers.forEach((modifier) => {
        if (modifier.getType() == _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.REPEAT_BEGIN) modifier.setX(maxX);
      });
    });

    maxX = 0;
    // Align time signatures
    staves.forEach((stave) => {
      const modifiers = stave.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN, _timesignature__WEBPACK_IMPORTED_MODULE_12__.TimeSignature.CATEGORY);
      modifiers.forEach((modifier) => {
        if (modifier.getX() > maxX) maxX = modifier.getX();
      });
    });
    staves.forEach((stave) => {
      const modifiers = stave.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN, _timesignature__WEBPACK_IMPORTED_MODULE_12__.TimeSignature.CATEGORY);
      modifiers.forEach((modifier) => {
        modifier.setX(maxX);
      });
    });
    // Align key signatures
    // staves.forEach((stave) => {
    //   const modifiers = stave.getModifiers(StaveModifier.Position.BEGIN, KeySignature.CATEGORY);
    //   modifiers.forEach((modifier) => {
    //     if (modifier.getX() > maxX) maxX = modifier.getX();
    //   });
    // });
    // staves.forEach((stave) => {
    //   const modifiers = stave.getModifiers(StaveModifier.Position.BEGIN, KeySignature.CATEGORY);
    //   modifiers.forEach((modifier) => {
    //     modifier.setX(maxX);
    //   });
    // });
  }

  getOptions() { return this.options; }

  setNoteStartX(x) {
    if (!this.formatted) this.format();

    this.setStartX(x);
    // const begBarline = this.modifiers[0];
    // begBarline.setX(this.start_x - begBarline.getWidth());
    return this;
  }
  setStartX(x) {
    this.start_x = x;
  }
  getNoteStartX() {
    if (!this.formatted) this.format();

    return this.start_x;
  }

  getNoteEndX() {
    if (!this.formatted) this.format();

    return this.end_x;
  }
  getTieStartX() { return this.start_x; }
  getTieEndX() { return this.x + this.width; }
  getX() { return this.x; }
  getNumLines() { return this.options.num_lines; }
  setNumLines(lines) {
    this.options.num_lines = parseInt(lines, 10);
    this.resetLines();
    return this;
  }
  setY(y) { this.y = y; return this; }

  getTopLineTopY() {
    return this.getYForLine(0) - (_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STAVE_LINE_THICKNESS / 2);
  }
  getBottomLineBottomY() {
    return this.getYForLine(this.getNumLines() - 1) + (_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STAVE_LINE_THICKNESS / 2);
  }

  setX(x) {
    const shift = x - this.x;
    this.formatted = false;
    this.x = x;
    this.start_x += shift;
    this.end_x += shift;
    for (let i = 0; i < this.modifiers.length; i++) {
      const mod = this.modifiers[i];
      if (mod.x !== undefined) {
        mod.x += shift;
      }
    }
    return this;
  }

  setWidth(width) {
    this.formatted = false;
    this.width = width;
    this.end_x = this.x + width;

    // reset the x position of the end barline (TODO(0xfe): This makes no sense)
    // this.modifiers[1].setX(this.end_x);
    return this;
  }

  getWidth() {
    return this.width;
  }

  getStyle() {
    return {
      fillStyle: this.options.fill_style,
      strokeStyle: this.options.fill_style, // yes, this is correct for legacy compatibility
      lineWidth: _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STAVE_LINE_THICKNESS, ...this.style || {}
    };
  }

  setMeasure(measure) { this.measure = measure; return this; }

  /**
   * Gets the pixels to shift from the beginning of the stave
   * following the modifier at the provided index
   * @param  {Number} index The index from which to determine the shift
   * @return {Number}       The amount of pixels shifted
   */
  getModifierXShift(index = 0) {
    if (typeof index !== 'number') {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidIndex', 'Must be of number type');
    }

    if (!this.formatted) this.format();

    if (this.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN).length === 1) {
      return 0;
    }

    let start_x = this.start_x - this.x;
    const begBarline = this.modifiers[0];
    if (begBarline.getType() === _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {
      start_x -= begBarline.getWidth();
    }

    return start_x;
  }

  // Coda & Segno Symbol functions
  setRepetitionTypeLeft(type, y) {
    this.modifiers.push(new _staverepetition__WEBPACK_IMPORTED_MODULE_5__.Repetition(type, this.x, y));
    return this;
  }

  setRepetitionTypeRight(type, y) {
    this.modifiers.push(new _staverepetition__WEBPACK_IMPORTED_MODULE_5__.Repetition(type, this.x, y));
    return this;
  }

  // Volta functions
  setVoltaType(type, number_t, y) {
    this.modifiers.push(new _stavevolta__WEBPACK_IMPORTED_MODULE_13__.Volta(type, number_t, this.x, y));
    return this;
  }

  // Section functions
  setSection(section, y, xOffset = 0, fontSize = 12) {
    const staveSection = new _stavesection__WEBPACK_IMPORTED_MODULE_6__.StaveSection(section, this.x + xOffset, y);
    // staveSection.shift_x = xOffset; // has no effect
    staveSection.font.size = fontSize;
    this.modifiers.push(staveSection);
    return this;
  }

  // Tempo functions
  setTempo(tempo, y) {
    this.modifiers.push(new _stavetempo__WEBPACK_IMPORTED_MODULE_7__.StaveTempo(tempo, this.x, y));
    return this;
  }

  // Text functions
  setText(text, position, options) {
    this.modifiers.push(new _stavetext__WEBPACK_IMPORTED_MODULE_8__.StaveText(text, position, options));
    return this;
  }

  getHeight() {
    return this.height;
  }

  getSpacingBetweenLines() {
    return this.options.spacing_between_lines_px;
  }

  getBoundingBox() {
    return new _boundingbox__WEBPACK_IMPORTED_MODULE_9__.BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);
  }

  getBottomY() {
    const options = this.options;
    const spacing = options.spacing_between_lines_px;
    const score_bottom = this.getYForLine(options.num_lines) +
      (options.space_below_staff_ln * spacing);

    return score_bottom;
  }

  getBottomLineY() {
    return this.getYForLine(this.options.num_lines);
  }

  // This returns the y for the *center* of a staff line
  getYForLine(line) {
    const options = this.options;
    const spacing = options.spacing_between_lines_px;
    const headroom = options.space_above_staff_ln;

    const y = this.y + (line * spacing) + (headroom * spacing);

    return y;
  }

  getLineForY(y) {
    // Does the reverse of getYForLine - somewhat dumb and just calls
    // getYForLine until the right value is reaches

    const options = this.options;
    const spacing = options.spacing_between_lines_px;
    const headroom = options.space_above_staff_ln;
    return ((y - this.y) / spacing) - headroom;
  }

  getYForTopText(line) {
    const l = line || 0;
    return this.getYForLine(-l - this.options.top_text_position);
  }

  getYForBottomText(line) {
    const l = line || 0;
    return this.getYForLine(this.options.bottom_text_position + l);
  }

  getYForNote(line) {
    const options = this.options;
    const spacing = options.spacing_between_lines_px;
    const headroom = options.space_above_staff_ln;
    const y = this.y + (headroom * spacing) + (5 * spacing) - (line * spacing);

    return y;
  }

  getYForGlyphs() {
    return this.getYForLine(3);
  }

  // This method adds a stave modifier to the stave. Note that the first two
  // modifiers (BarLines) are automatically added upon construction.
  addModifier(modifier, position) {
    if (position !== undefined) {
      modifier.setPosition(position);
    }

    modifier.setStave(this);
    this.formatted = false;
    this.modifiers.push(modifier);
    return this;
  }

  addEndModifier(modifier) {
    this.addModifier(modifier, _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);
    return this;
  }

  // Bar Line functions
  setBegBarType(type) {
    // Only valid bar types at beginning of stave is none, single or begin repeat
    const { SINGLE, REPEAT_BEGIN, NONE } = _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type;
    if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {
      this.modifiers[0].setType(type);
      this.formatted = false;
    }
    return this;
  }

  setEndBarType(type) {
    // Repeat end not valid at end of stave
    if (type !== _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.REPEAT_BEGIN) {
      this.modifiers[1].setType(type);
      this.formatted = false;
    }
    return this;
  }

  setClef(clefSpec, size, annotation, position) {
    if (position === undefined) {
      position = _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN;
    }

    if (position === _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END) {
      this.endClef = clefSpec;
    } else {
      this.clef = clefSpec;
    }

    const clefs = this.getModifiers(position, _clef__WEBPACK_IMPORTED_MODULE_10__.Clef.CATEGORY);
    if (clefs.length === 0) {
      this.addClef(clefSpec, size, annotation, position);
    } else {
      clefs[0].setType(clefSpec, size, annotation);
    }

    return this;
  }

  setEndClef(clefSpec, size, annotation) {
    this.setClef(clefSpec, size, annotation, _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);
    return this;
  }

  setKeySignature(keySpec, cancelKeySpec, position) {
    if (position === undefined) {
      position = _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN;
    }

    const keySignatures = this.getModifiers(position, _keysignature__WEBPACK_IMPORTED_MODULE_11__.KeySignature.CATEGORY);
    if (keySignatures.length === 0) {
      this.addKeySignature(keySpec, cancelKeySpec, position);
    } else {
      keySignatures[0].setKeySig(keySpec, cancelKeySpec);
    }

    return this;
  }

  setEndKeySignature(keySpec, cancelKeySpec) {
    this.setKeySignature(keySpec, cancelKeySpec, _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);
    return this;
  }

  setTimeSignature(timeSpec, customPadding, position) {
    if (position === undefined) {
      position = _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN;
    }

    const timeSignatures = this.getModifiers(position, _timesignature__WEBPACK_IMPORTED_MODULE_12__.TimeSignature.CATEGORY);
    if (timeSignatures.length === 0) {
      this.addTimeSignature(timeSpec, customPadding, position);
    } else {
      timeSignatures[0].setTimeSig(timeSpec);
    }

    return this;
  }

  setEndTimeSignature(timeSpec, customPadding) {
    this.setTimeSignature(timeSpec, customPadding, _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);
    return this;
  }

  addKeySignature(keySpec, cancelKeySpec, position) {
    if (position === undefined) {
      position = _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN;
    }
    this.addModifier(new _keysignature__WEBPACK_IMPORTED_MODULE_11__.KeySignature(keySpec, cancelKeySpec)
      .setPosition(position), position);
    return this;
  }

  addClef(clef, size, annotation, position) {
    if (position === undefined || position === _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN) {
      this.clef = clef;
    } else if (position === _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END) {
      this.endClef = clef;
    }

    this.addModifier(new _clef__WEBPACK_IMPORTED_MODULE_10__.Clef(clef, size, annotation), position);
    return this;
  }

  addEndClef(clef, size, annotation) {
    this.addClef(clef, size, annotation, _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);
    return this;
  }

  addTimeSignature(timeSpec, customPadding, position) {
    this.addModifier(new _timesignature__WEBPACK_IMPORTED_MODULE_12__.TimeSignature(timeSpec, customPadding), position);
    return this;
  }

  addEndTimeSignature(timeSpec, customPadding) {
    this.addTimeSignature(timeSpec, customPadding, _stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);
    return this;
  }

  // Deprecated
  addTrebleGlyph() {
    this.addClef('treble');
    return this;
  }

  getModifiers(position, category) {
    if (position === undefined && category === undefined) return this.modifiers;

    return this.modifiers.filter(modifier =>
      (position === undefined || position === modifier.getPosition()) &&
      (category === undefined || category === modifier.getCategory())
    );
  }

  sortByCategory(items, order) {
    for (let i = items.length - 1; i >= 0; i--) {
      for (let j = 0; j < i; j++) {
        if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {
          const temp = items[j];
          items[j] = items[j + 1];
          items[j + 1] = temp;
        }
      }
    }
  }

  format() {
    const begBarline = this.modifiers[0];
    const endBarline = this.modifiers[1];

    const begModifiers = this.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.BEGIN);
    const endModifiers = this.getModifiers(_stavemodifier__WEBPACK_IMPORTED_MODULE_4__.StaveModifier.Position.END);

    this.sortByCategory(begModifiers, {
      barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3,
    });

    this.sortByCategory(endModifiers, {
      timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3,
    });

    if (begModifiers.length > 1 &&
      begBarline.getType() === _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.REPEAT_BEGIN) {
      begModifiers.push(begModifiers.splice(0, 1)[0]);
      begModifiers.splice(0, 0, new _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline(_stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.SINGLE));
    }

    if (endModifiers.indexOf(endBarline) > 0) {
      endModifiers.splice(0, 0, new _stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline(_stavebarline__WEBPACK_IMPORTED_MODULE_3__.Barline.type.NONE));
    }

    let width;
    let padding;
    let modifier;
    let offset = 0;
    let x = this.x;
    for (let i = 0; i < begModifiers.length; i++) {
      modifier = begModifiers[i];
      padding = modifier.getPadding(i + offset);
      width = modifier.getWidth();
      // VexFlowPatch: prevent modifier width being NaN and throwing Vexflow error
      if (isNaN(width)) {
        modifier.setWidth(10);
        width = 10;
      }

      x += padding;
      const modifierX = modifier.getX();
      if (modifierX > x) { // e.g. when beginning modifiers already x-aligned, different key signatures
        x = modifierX;
        // VexFlowPatch: don't overwrite modifier.x when it was already shifted further, e.g. to align time signatures.
        //   see formatBegModifiers().
      } else {
        modifier.setX(x);
      }
      x += width;

      if (padding + width === 0) offset--;
    }

    if (x > this.start_x) {
      this.setStartX(x);
      // VexFlowPatch: don't overwrite start_x if it's already bigger (alignment, see formatBegModifiers())
    }
    x = this.x + this.width;

    const widths = {
      left: 0,
      right: 0,
      paddingRight: 0,
      paddingLeft: 0,
    };

    let lastBarlineIdx = 0;

    for (let i = 0; i < endModifiers.length; i++) {
      modifier = endModifiers[i];
      lastBarlineIdx = (modifier.getCategory() === 'barlines') ? i : lastBarlineIdx;

      widths.right = 0;
      widths.left = 0;
      widths.paddingRight = 0;
      widths.paddingLeft = 0;
      const layoutMetrics = modifier.getLayoutMetrics();

      if (layoutMetrics) {
        if (i !== 0) {
          widths.right = layoutMetrics.xMax || 0;
          widths.paddingRight = layoutMetrics.paddingRight || 0;
        }
        widths.left = (-layoutMetrics.xMin) || 0;
        widths.paddingLeft = layoutMetrics.paddingLeft || 0;

        if (i === endModifiers.length - 1) {
          widths.paddingLeft = 0;
        }
      } else {
        widths.paddingRight = modifier.getPadding(i - lastBarlineIdx) || 0; // can be null too
        if (i !== 0) {
          widths.right = modifier.getWidth() || 0;
        }
        if (i === 0) {
          widths.left = modifier.getWidth() || 0;
        }
      }
      x -= widths.paddingRight;
      x -= widths.right;

      modifier.setX(x);

      x -= widths.left;
      x -= widths.paddingLeft;
    }

    this.end_x = endModifiers.length === 1 ? this.x + this.width : x;
    this.formatted = true;
  }

  /**
   * All drawing functions below need the context to be set.
   */
  draw() {
    this.checkContext();
    this.setRendered();

    if (!this.formatted) this.format();

    const num_lines = this.options.num_lines;
    const width = this.width;
    const x = this.x;
    let y;

    // Render lines
    for (let line = 0; line < num_lines; line++) {
      y = this.getYForLine(line);

      this.applyStyle();
      if (this.options.line_config[line].visible) {
        this.context.beginPath();
        this.context.moveTo(x, y);
        this.context.lineTo(x + width, y);
        this.context.stroke();
      }
      this.restoreStyle();
    }

    // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)
    for (let i = 0; i < this.modifiers.length; i++) {
      // Only draw modifier if it has a draw function
      if (typeof this.modifiers[i].draw === 'function') {
        this.modifiers[i].applyStyle(this.context);
        this.modifiers[i].draw(this, this.getModifierXShift(i));
        this.modifiers[i].restoreStyle(this.context);
      }
    }

    // Render measure numbers
    if (this.measure > 0) {
      this.context.save();
      this.context.setFont(this.font.family, this.font.size, this.font.weight);
      const text_width = this.context.measureText('' + this.measure).width;
      y = this.getYForTopText(0) + 3;
      this.context.fillText('' + this.measure, this.x - text_width / 2, y);
      this.context.restore();
    }

    return this;
  }

  // Draw Simple barlines for backward compatability
  // Do not delete - draws the beginning bar of the stave
  drawVertical(x, isDouble) {
    this.drawVerticalFixed(this.x + x, isDouble);
  }

  drawVerticalFixed(x, isDouble) {
    this.checkContext();

    const top_line = this.getYForLine(0);
    const bottom_line = this.getYForLine(this.options.num_lines - 1);
    if (isDouble) {
      this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);
    }
    this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);
  }

  drawVerticalBar(x) {
    this.drawVerticalBarFixed(this.x + x, false);
  }

  drawVerticalBarFixed(x) {
    this.checkContext();

    const top_line = this.getYForLine(0);
    const bottom_line = this.getYForLine(this.options.num_lines - 1);
    this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);
  }

  /**
   * Get the current configuration for the Stave.
   * @return {Array} An array of configuration objects.
   */
  getConfigForLines() {
    return this.options.line_config;
  }

  /**
   * Configure properties of the lines in the Stave
   * @param line_number The index of the line to configure.
   * @param line_config An configuration object for the specified line.
   * @throws Vex.RERR "StaveConfigError" When the specified line number is out of
   *   range of the number of lines specified in the constructor.
   */
  setConfigForLine(line_number, line_config) {
    if (line_number >= this.options.num_lines || line_number < 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'StaveConfigError',
        'The line number must be within the range of the number of lines in the Stave.'
      );
    }

    if (line_config.visible === undefined) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'StaveConfigError',
        "The line configuration object is missing the 'visible' property."
      );
    }

    if (typeof (line_config.visible) !== 'boolean') {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'StaveConfigError',
        "The line configuration objects 'visible' property must be true or false."
      );
    }

    this.options.line_config[line_number] = line_config;

    return this;
  }

  /**
   * Set the staff line configuration array for all of the lines at once.
   * @param lines_configuration An array of line configuration objects.  These objects
   *   are of the same format as the single one passed in to setLineConfiguration().
   *   The caller can set null for any line config entry if it is desired that the default be used
   * @throws Vex.RERR "StaveConfigError" When the lines_configuration array does not have
   *   exactly the same number of elements as the num_lines configuration object set in
   *   the constructor.
   */
  setConfigForLines(lines_configuration) {
    if (lines_configuration.length !== this.options.num_lines) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'StaveConfigError',
        'The length of the lines configuration array must match the number of lines in the Stave'
      );
    }

    // Make sure the defaults are present in case an incomplete set of
    //  configuration options were supplied.
    // eslint-disable-next-line
    for (const line_config in lines_configuration) {
      // Allow 'null' to be used if the caller just wants the default for a particular node.
      if (!lines_configuration[line_config]) {
        lines_configuration[line_config] = this.options.line_config[line_config];
      }
      _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);
    }

    this.options.line_config = lines_configuration;

    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavebarline.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/stavebarline.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Barline: () => (/* binding */ Barline)
/* harmony export */ });
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// Author Larry Kuhns 2011




class Barline extends _stavemodifier__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
  static get CATEGORY() { return 'barlines'; }
  static get type() {
    return {
      SINGLE: 1,
      DOUBLE: 2,
      END: 3,
      REPEAT_BEGIN: 4,
      REPEAT_END: 5,
      REPEAT_BOTH: 6,
      NONE: 7,
    };
  }

  static get typeString() {
    return {
      single: Barline.type.SINGLE,
      double: Barline.type.DOUBLE,
      end: Barline.type.END,
      repeatBegin: Barline.type.REPEAT_BEGIN,
      repeatEnd: Barline.type.REPEAT_END,
      repeatBoth: Barline.type.REPEAT_BOTH,
      none: Barline.type.NONE,
    };
  }

  /**
   * @constructor
   */
  constructor(type) {
    super();
    this.setAttribute('type', 'Barline');
    this.thickness = _tables__WEBPACK_IMPORTED_MODULE_0__.Flow.STAVE_LINE_THICKNESS;

    const TYPE = Barline.type;
    this.widths = {};
    this.widths[TYPE.SINGLE] = 5;
    this.widths[TYPE.DOUBLE] = 5;
    this.widths[TYPE.END] = 5;
    this.widths[TYPE.REPEAT_BEGIN] = 5;
    this.widths[TYPE.REPEAT_END] = 5;
    this.widths[TYPE.REPEAT_BOTH] = 5;
    this.widths[TYPE.NONE] = 5;

    this.paddings = {};
    this.paddings[TYPE.SINGLE] = 0;
    this.paddings[TYPE.DOUBLE] = 0;
    this.paddings[TYPE.END] = 0;
    this.paddings[TYPE.REPEAT_BEGIN] = 15;
    this.paddings[TYPE.REPEAT_END] = 15;
    this.paddings[TYPE.REPEAT_BOTH] = 15;
    this.paddings[TYPE.NONE] = 0;

    this.layoutMetricsMap = {};
    this.layoutMetricsMap[TYPE.SINGLE] = {
      xMin: 0,
      xMax: 1,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.layoutMetricsMap[TYPE.DOUBLE] = {
      xMin: -3,
      xMax: 1,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.layoutMetricsMap[TYPE.END] = {
      xMin: -5,
      xMax: 1,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.layoutMetricsMap[TYPE.REPEAT_END] = {
      xMin: -10,
      xMax: 1,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {
      xMin: -2,
      xMax: 10,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {
      xMin: -10,
      xMax: 10,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.layoutMetricsMap[TYPE.NONE] = {
      xMin: 0,
      xMax: 0,
      paddingLeft: 5,
      paddingRight: 5,
    };
    this.setPosition(_stavemodifier__WEBPACK_IMPORTED_MODULE_1__.StaveModifier.Position.BEGIN);
    this.setType(type);
  }
  getCategory() { return Barline.CATEGORY; }
  getType() { return this.type; }
  setType(type) {
    this.type = typeof(type) === 'string'
      ? Barline.typeString[type]
      : type;

    this.setWidth(this.widths[this.type]);
    this.setPadding(this.paddings[this.type]);
    this.setLayoutMetrics(this.layoutMetricsMap[this.type]);
    return this;
  }

  // Draw barlines
  draw(stave) {
    stave.checkContext();
    this.setRendered();

    switch (this.type) {
      case Barline.type.SINGLE:
        this.drawVerticalBar(stave, this.x, false);
        break;
      case Barline.type.DOUBLE:
        this.drawVerticalBar(stave, this.x, true);
        break;
      case Barline.type.END:
        this.drawVerticalEndBar(stave, this.x);
        break;
      case Barline.type.REPEAT_BEGIN:
        // If the barline is shifted over (in front of clef/time/key)
        // Draw vertical bar at the beginning.
        this.drawRepeatBar(stave, this.x, true);
        if (stave.getX() !== this.x) {
          this.drawVerticalBar(stave, stave.getX());
        }

        break;
      case Barline.type.REPEAT_END:
        this.drawRepeatBar(stave, this.x, false);
        break;
      case Barline.type.REPEAT_BOTH:
        this.drawRepeatBar(stave, this.x, false);
        this.drawRepeatBar(stave, this.x, true);
        break;
      default:
        // Default is NONE, so nothing to draw
        break;
    }
  }

  drawVerticalBar(stave, x, double_bar) {
    stave.checkContext();
    const topY = stave.getTopLineTopY();
    const botY = stave.getBottomLineBottomY();
    if (double_bar) {
      stave.context.fillRect(x - 3, topY, 1, botY - topY);
    }
    stave.context.fillRect(x, topY, 1, botY - topY);
  }

  drawVerticalEndBar(stave, x) {
    stave.checkContext();
    const topY = stave.getTopLineTopY();
    const botY = stave.getBottomLineBottomY();
    stave.context.fillRect(x - 5, topY, 1, botY - topY);
    stave.context.fillRect(x - 2, topY, 3, botY - topY);
  }

  drawRepeatBar(stave, x, begin) {
    stave.checkContext();

    const topY = stave.getTopLineTopY();
    const botY = stave.getBottomLineBottomY();
    let x_shift = 3;

    if (!begin) {
      x_shift = -5;
    }

    stave.context.fillRect(x + x_shift, topY, 1, botY - topY);
    stave.context.fillRect(x - 2, topY, 3, botY - topY);

    const dot_radius = 2;

    // Shift dots left or right
    if (begin) {
      x_shift += 4;
    } else {
      x_shift -= 4;
    }

    const dot_x = (x + x_shift) + (dot_radius / 2);

    // calculate the y offset based on number of stave lines
    let y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();
    y_offset = (y_offset / 2) - (stave.getSpacingBetweenLines() / 2);
    let dot_y = topY + y_offset + (dot_radius / 2);

    // draw the top repeat dot
    stave.context.beginPath();
    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
    stave.context.fill();

    // draw the bottom repeat dot
    dot_y += stave.getSpacingBetweenLines();
    stave.context.beginPath();
    stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
    stave.context.fill();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/staveconnector.js":
/*!****************************************************!*\
  !*** ./node_modules/vexflow/src/staveconnector.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveConnector: () => (/* binding */ StaveConnector)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.






function drawBoldDoubleLine(ctx, type, topX, topY, botY) {
  if (
    type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&
    type !== StaveConnector.type.BOLD_DOUBLE_RIGHT
  ) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
      'InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.'
    );
  }

  let x_shift = 3;
  let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues
  const thickLineOffset = 2; // For aesthetics

  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {
    x_shift = -5; // Flips the side of the thin line
    variableWidth = 3;
  }

  // Thin line
  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);
  // Thick line
  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);
}

class StaveConnector extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  // SINGLE_LEFT and SINGLE are the same value for compatibility
  // with older versions of vexflow which didn't have right sided
  // stave connectors
  static get type() {
    return {
      SINGLE_RIGHT: 0,
      SINGLE_LEFT: 1,
      SINGLE: 1,
      DOUBLE: 2,
      BRACE: 3,
      BRACKET: 4,
      BOLD_DOUBLE_LEFT: 5,
      BOLD_DOUBLE_RIGHT: 6,
      THIN_DOUBLE: 7,
      NONE: 8,
    };
  }

  static get typeString() {
    return {
      singleRight: StaveConnector.type.SINGLE_RIGHT,
      singleLeft: StaveConnector.type.SINGLE_LEFT,
      single: StaveConnector.type.SINGLE,
      double: StaveConnector.type.DOUBLE,
      brace: StaveConnector.type.BRACE,
      bracket: StaveConnector.type.BRACKET,
      boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,
      boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,
      thinDouble: StaveConnector.type.THIN_DOUBLE,
      none: StaveConnector.type.NONE,
    };
  }

  constructor(top_stave, bottom_stave) {
    super();
    this.setAttribute('type', 'StaveConnector');

    this.thickness = _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STAVE_LINE_THICKNESS;
    this.width = 3;
    this.top_stave = top_stave;
    this.bottom_stave = bottom_stave;
    this.type = StaveConnector.type.DOUBLE;
    this.font = {
      family: 'times',
      size: 16,
      weight: 'normal',
    };
    // 1. Offset Bold Double Left to align with offset Repeat Begin bars
    // 2. Offset BRACE type not to overlap with another StaveConnector
    this.x_shift = 0;
    this.texts = [];
  }

  setType(type) {
    type = typeof(type) === 'string'
      ? StaveConnector.typeString[type]
      : type;

    if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {
      this.type = type;
    }
    return this;
  }

  setText(text, options) {
    this.texts.push({
      content: text,
      options: _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge({ shift_x: 0, shift_y: 0 }, options),
    });
    return this;
  }

  setFont(font) {
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.font, font);
  }

  setXShift(x_shift) {
    if (typeof x_shift !== 'number') {
      throw _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidType', 'x_shift must be a Number');
    }

    this.x_shift = x_shift;
    return this;
  }

  draw() {
    const ctx = this.checkContext();
    this.setRendered();

    let topY = this.top_stave.getYForLine(0);
    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) +
      this.thickness;
    let width = this.width;
    let topX = this.top_stave.getX();

    const isRightSidedConnector = (
      this.type === StaveConnector.type.SINGLE_RIGHT ||
      this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||
      this.type === StaveConnector.type.THIN_DOUBLE
    );

    if (isRightSidedConnector) {
      topX = this.top_stave.getX() + this.top_stave.width;
    }

    let attachment_height = botY - topY;
    switch (this.type) {
      case StaveConnector.type.SINGLE:
        width = 1;
        break;
      case StaveConnector.type.SINGLE_LEFT:
        width = 1;
        break;
      case StaveConnector.type.SINGLE_RIGHT:
        width = 1;
        break;
      case StaveConnector.type.DOUBLE:
        topX -= (this.width + 2);
        break;
      case StaveConnector.type.BRACE: {
        width = 12;
        // May need additional code to draw brace
        const x1 = this.top_stave.getX() - 2 + this.x_shift;
        const y1 = topY;
        const x3 = x1;
        const y3 = botY;
        const x2 = x1 - width;
        const y2 = y1 + attachment_height / 2.0;
        const cpx1 = x2 - (0.90 * width);
        const cpy1 = y1 + (0.2 * attachment_height);
        const cpx2 = x1 + (1.10 * width);
        const cpy2 = y2 - (0.135 * attachment_height);
        const cpx3 = cpx2;
        const cpy3 = y2 + (0.135 * attachment_height);
        const cpx4 = cpx1;
        const cpy4 = y3 - (0.2 * attachment_height);
        const cpx5 = x2 - width;
        const cpy5 = cpy4;
        const cpx6 = x1 + (0.40 * width);
        const cpy6 = y2 + (0.135 * attachment_height);
        const cpx7 = cpx6;
        const cpy7 = y2 - (0.135 * attachment_height);
        const cpx8 = cpx5;
        const cpy8 = cpy1;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
        ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);
        ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);
        ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);
        ctx.fill();
        ctx.stroke();
        break;
      } case StaveConnector.type.BRACKET:
        topY -= 4;
        botY += 4;
        attachment_height = botY - topY;
        _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(ctx, topX - 5, topY - 3, 40, 'v1b', true);
        _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(ctx, topX - 5, botY + 3, 40, 'v10', true);
        topX -= (this.width + 2);
        break;
      case StaveConnector.type.BOLD_DOUBLE_LEFT:
        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY);
        break;
      case StaveConnector.type.BOLD_DOUBLE_RIGHT:
        drawBoldDoubleLine(ctx, this.type, topX, topY, botY);
        break;
      case StaveConnector.type.THIN_DOUBLE:
        width = 1;
        break;
      case StaveConnector.type.NONE:
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
          'InvalidType', `The provided StaveConnector.type (${this.type}) is invalid`
        );
    }

    if (
      this.type !== StaveConnector.type.BRACE &&
      this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&
      this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&
      this.type !== StaveConnector.type.NONE
    ) {
      ctx.fillRect(topX, topY, width, attachment_height);
    }

    // If the connector is a thin double barline, draw the paralell line
    if (this.type === StaveConnector.type.THIN_DOUBLE) {
      ctx.fillRect(topX - 3, topY, width, attachment_height);
    }

    ctx.save();
    ctx.lineWidth = 2;
    ctx.setFont(this.font.family, this.font.size, this.font.weight);
    // Add stave connector text
    for (let i = 0; i < this.texts.length; i++) {
      const text = this.texts[i];
      const text_width = ctx.measureText('' + text.content).width;
      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;
      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 +
        text.options.shift_y;

      ctx.fillText('' + text.content, x, y + 4);
    }
    ctx.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavehairpin.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/stavehairpin.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveHairpin: () => (/* binding */ StaveHairpin)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/
//
// This class implements hairpins between notes.
// Hairpins can be either Crescendo or Descrescendo.





class StaveHairpin extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  static get type() {
    return {
      CRESC: 1,
      DECRESC: 2,
    };
  }

  /* Helper function to convert ticks into pixels.
   * Requires a Formatter with voices joined and formatted (to
   * get pixels per tick)
   *
   * options is struct that has:
   *
   *  {
   *   height: px,
   *   y_shift: px, //vertical offset
   *   left_shift_ticks: 0, //left horizontal offset expressed in ticks
   *   right_shift_ticks: 0 // right horizontal offset expressed in ticks
   *  }
   *
   **/
  static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {
    const ppt = formatter.pixelsPerTick;

    if (ppt == null) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments',
        'A valid Formatter must be provide to draw offsets by ticks.'
      );
    }

    const l_shift_px = ppt * options.left_shift_ticks;
    const r_shift_px = ppt * options.right_shift_ticks;

    const hairpin_options = {
      height: options.height,
      y_shift: options.y_shift,
      left_shift_px: l_shift_px,
      right_shift_px: r_shift_px };

    new StaveHairpin({
      first_note: notes.first_note,
      last_note: notes.last_note,
    }, type)
      .setContext(ctx)
      .setRenderOptions(hairpin_options)
      .setPosition(position)
      .draw();
  }

  /**
   * Create a new hairpin from the specified notes.
   *
   * @constructor
   * @param {!Object} notes The notes to tie up.
   * @param {!Object} type The type of hairpin
   */
  constructor(notes, type) {
    /**
     * Notes is a struct that has:
     *
     *  {
     *    first_note: Note,
     *    last_note: Note,
     *  }
     *
     **/
    super();
    this.setAttribute('type', 'StaveHairpin');
    this.notes = notes;
    this.hairpin = type;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.BELOW;

    this.render_options = {
      height: 10,
      y_shift: 0, // vertical offset
      left_shift_px: 0, // left horizontal offset
      right_shift_px: 0, // right horizontal offset
    };

    this.setNotes(notes);
  }

  setPosition(position) {
    if (position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE || position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.BELOW) {
      this.position = position;
    }
    return this;
  }

  setRenderOptions(options) {
    if (
      options.height != null &&
      options.y_shift != null &&
      options.left_shift_px != null &&
      options.right_shift_px != null
    ) {
      this.render_options = options;
    }
    return this;
  }

  /**
   * Set the notes to attach this hairpin to.
   *
   * @param {!Object} notes The start and end notes.
   */
  setNotes(notes) {
    if (!notes.first_note && !notes.last_note) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments',
        'Hairpin needs to have either first_note or last_note set.'
      );
    }

    // Success. Lets grab 'em notes.
    this.first_note = notes.first_note;
    this.last_note = notes.last_note;
    return this;
  }

  renderHairpin(params) {
    const ctx = this.checkContext();
    let dis = this.render_options.y_shift + 20;
    let y_shift = params.first_y;

    if (this.position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE) {
      dis = -dis + 30;
      y_shift = params.first_y - params.staff_height;
    }

    const l_shift = this.render_options.left_shift_px;
    const r_shift = this.render_options.right_shift_px;

    ctx.beginPath();

    switch (this.hairpin) {
      case StaveHairpin.type.CRESC:
        ctx.moveTo(params.last_x + r_shift, y_shift + dis);
        ctx.lineTo(params.first_x + l_shift, y_shift + (this.render_options.height / 2) + dis);
        ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);
        break;
      case StaveHairpin.type.DECRESC:
        ctx.moveTo(params.first_x + l_shift, y_shift + dis);
        ctx.lineTo(params.last_x + r_shift, y_shift + (this.render_options.height / 2) + dis);
        ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);
        break;
      default:
        // Default is NONE, so nothing to draw
        break;
    }

    ctx.stroke();
    ctx.closePath();
  }

  draw() {
    this.checkContext();
    this.setRendered();

    const firstNote = this.first_note;
    const lastNote = this.last_note;

    const start = firstNote.getModifierStartXY(this.position, 0);
    const end = lastNote.getModifierStartXY(this.position, 0);

    this.renderHairpin({
      first_x: start.x,
      last_x: end.x,
      first_y: firstNote.getStave().y + firstNote.getStave().height,
      last_y: lastNote.getStave().y + lastNote.getStave().height,
      staff_height: firstNote.getStave().height,
    });
    return true;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/staveline.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/staveline.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveLine: () => (/* binding */ StaveLine)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements `StaveLine` which are simply lines that connect
// two notes. This object is highly configurable, see the `render_options`.
// A simple line is often used for notating glissando articulations, but you
// can format a `StaveLine` with arrows or colors for more pedagogical
// purposes, such as diagrams.




// Attribution: Arrow rendering implementations based off of
// Patrick Horgan's article, "Drawing lines and arcs with
// arrow heads on  HTML5 Canvas"
//
// Draw an arrow head that connects between 3 coordinates
function drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {
  // all cases do this.
  ctx.beginPath();
  ctx.moveTo(x0, y0);
  ctx.lineTo(x1, y1);
  ctx.lineTo(x2, y2);
  ctx.lineTo(x0, y0);
  ctx.closePath();

  ctx.fill();
}

// Helper function to draw a line with arrow heads
function drawArrowLine(ctx, point1, point2, config) {
  const both_arrows = config.draw_start_arrow && config.draw_end_arrow;

  const x1 = point1.x;
  const y1 = point1.y;
  const x2 = point2.x;
  const y2 = point2.y;

  // For ends with arrow we actually want to stop before we get to the arrow
  // so that wide lines won't put a flat end on the arrow.
  const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  const ratio = (distance - config.arrowhead_length / 3) / distance;
  let end_x;
  let end_y;
  let start_x;
  let start_y;
  if (config.draw_end_arrow || both_arrows) {
    end_x = Math.round(x1 + (x2 - x1) * ratio);
    end_y = Math.round(y1 + (y2 - y1) * ratio);
  } else {
    end_x = x2;
    end_y = y2;
  }

  if (config.draw_start_arrow || both_arrows) {
    start_x = x1 + (x2 - x1) * (1 - ratio);
    start_y = y1 + (y2 - y1) * (1 - ratio);
  } else {
    start_x = x1;
    start_y = y1;
  }

  if (config.color) {
    ctx.setStrokeStyle(config.color);
    ctx.setFillStyle(config.color);
  }

  // Draw the shaft of the arrow
  ctx.beginPath();
  ctx.moveTo(start_x, start_y);
  ctx.lineTo(end_x, end_y);
  ctx.stroke();
  ctx.closePath();

  // calculate the angle of the line
  const line_angle = Math.atan2(y2 - y1, x2 - x1);
  // h is the line length of a side of the arrow head
  const h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));

  let angle1;
  let angle2;
  let top_x;
  let top_y;
  let bottom_x;
  let bottom_y;

  if (config.draw_end_arrow || both_arrows) {
    angle1 = line_angle + Math.PI + config.arrowhead_angle;
    top_x = x2 + Math.cos(angle1) * h;
    top_y = y2 + Math.sin(angle1) * h;

    angle2 = line_angle + Math.PI - config.arrowhead_angle;
    bottom_x = x2 + Math.cos(angle2) * h;
    bottom_y = y2 + Math.sin(angle2) * h;

    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);
  }

  if (config.draw_start_arrow || both_arrows) {
    angle1 = line_angle + config.arrowhead_angle;
    top_x = x1 + Math.cos(angle1) * h;
    top_y = y1 + Math.sin(angle1) * h;

    angle2 = line_angle - config.arrowhead_angle;
    bottom_x = x1 + Math.cos(angle2) * h;
    bottom_y = y1 + Math.sin(angle2) * h;

    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);
  }
}

class StaveLine extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  // Text Positioning
  static get TextVerticalPosition() {
    return {
      TOP: 1,
      BOTTOM: 2,
    };
  }

  static get TextJustification() {
    return {
      LEFT: 1,
      CENTER: 2,
      RIGHT: 3,
    };
  }

  // Initialize the StaveLine with the given `notes`.
  //
  // `notes` is a struct that has:
  //
  //  ```
  //  {
  //    first_note: Note,
  //    last_note: Note,
  //    first_indices: [n1, n2, n3],
  //    last_indices: [n1, n2, n3]
  //  }
  //  ```
  constructor(notes) {
    super();
    this.setAttribute('type', 'StaveLine');

    this.notes = notes;

    this.text = '';

    this.font = {
      family: 'Arial',
      size: 10,
      weight: '',
    };

    this.render_options = {
      // Space to add to the left or the right
      padding_left: 4,
      padding_right: 3,

      // The width of the line in pixels
      line_width: 1,
      // An array of line/space lengths. Unsupported with Raphael (SVG)
      line_dash: null,
      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)
      rounded_end: true,
      // The color of the line and arrowheads
      color: null,

      // Flags to draw arrows on each end of the line
      draw_start_arrow: false,
      draw_end_arrow: false,

      // The length of the arrowhead sides
      arrowhead_length: 10,
      // The angle of the arrowhead
      arrowhead_angle: Math.PI / 8,

      // The position of the text
      text_position_vertical: StaveLine.TextVerticalPosition.TOP,
      text_justification: StaveLine.TextJustification.CENTER,
    };

    this.setNotes(notes);
  }

  // Set the font for the `StaveLine` text
  setFont(font) { this.font = font; return this; }
  // The the annotation for the `StaveLine`
  setText(text) { this.text = text; return this; }

  // Set the notes for the `StaveLine`
  setNotes(notes) {
    if (!notes.first_note && !notes.last_note) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments', 'Notes needs to have either first_note or last_note set.'
      );
    }

    if (!notes.first_indices) notes.first_indices = [0];
    if (!notes.last_indices) notes.last_indices = [0];

    if (notes.first_indices.length !== notes.last_indices.length) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments', 'Connected notes must have similar index sizes'
      );
    }

    // Success. Lets grab 'em notes.
    this.first_note = notes.first_note;
    this.first_indices = notes.first_indices;
    this.last_note = notes.last_note;
    this.last_indices = notes.last_indices;
    return this;
  }

  // Apply the style of the `StaveLine` to the context
  applyLineStyle() {
    const ctx = this.checkContext();
    const render_options = this.render_options;

    if (render_options.line_dash) {
      ctx.setLineDash(render_options.line_dash);
    }

    if (render_options.line_width) {
      ctx.setLineWidth(render_options.line_width);
    }

    if (render_options.rounded_end) {
      ctx.setLineCap('round');
    } else {
      ctx.setLineCap('square');
    }
  }

  // Apply the text styling to the context
  applyFontStyle() {
    const ctx = this.checkContext();

    if (this.font) {
      ctx.setFont(this.font.family, this.font.size, this.font.weight);
    }

    if (this.render_options.color) {
      ctx.setStrokeStyle(this.render_options.color);
      ctx.setFillStyle(this.render_options.color);
    }
  }

  // Renders the `StaveLine` on the context
  draw() {
    const ctx = this.checkContext();
    this.setRendered();

    const first_note = this.first_note;
    const last_note = this.last_note;
    const render_options = this.render_options;

    ctx.save();
    this.applyLineStyle();

    // Cycle through each set of indices and draw lines
    let start_position;
    let end_position;
    this.first_indices.forEach((first_index, i) => {
      const last_index = this.last_indices[i];

      // Get initial coordinates for the start/end of the line
      start_position = first_note.getModifierStartXY(2, first_index);
      end_position = last_note.getModifierStartXY(1, last_index);
      const upwards_slope = start_position.y > end_position.y;

      // Adjust `x` coordinates for modifiers
      start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;
      end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;


      // Adjust first `x` coordinates for displacements
      const notehead_width = first_note.getGlyph().getWidth();
      const first_displaced = first_note.getKeyProps()[first_index].displaced;
      if (first_displaced && first_note.getStemDirection() === 1) {
        start_position.x += notehead_width + render_options.padding_left;
      }

      // Adjust last `x` coordinates for displacements
      const last_displaced = last_note.getKeyProps()[last_index].displaced;
      if (last_displaced && last_note.getStemDirection() === -1) {
        end_position.x -= notehead_width + render_options.padding_right;
      }

      // Adjust y position better if it's not coming from the center of the note
      start_position.y += upwards_slope ? -3 : 1;
      end_position.y += upwards_slope ? 2 : 0;

      drawArrowLine(ctx, start_position, end_position, this.render_options);
    });

    ctx.restore();

    // Determine the x coordinate where to start the text
    const text_width = ctx.measureText(this.text).width;
    const justification = render_options.text_justification;
    let x = 0;
    if (justification === StaveLine.TextJustification.LEFT) {
      x = start_position.x;
    } else if (justification === StaveLine.TextJustification.CENTER) {
      const delta_x = (end_position.x - start_position.x);
      const center_x = (delta_x / 2) + start_position.x;
      x = center_x - (text_width / 2);
    } else if (justification === StaveLine.TextJustification.RIGHT) {
      x = end_position.x  -  text_width;
    }

    // Determine the y value to start the text
    let y;
    const vertical_position = render_options.text_position_vertical;
    if (vertical_position === StaveLine.TextVerticalPosition.TOP) {
      y = first_note.getStave().getYForTopText();
    } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {
      y = first_note.getStave().getYForBottomText(_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.TEXT_HEIGHT_OFFSET_HACK);
    }

    // Draw the text
    ctx.save();
    this.applyFontStyle();
    ctx.fillText(this.text, x, y);
    ctx.restore();

    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavemodifier.js":
/*!***************************************************!*\
  !*** ./node_modules/vexflow/src/stavemodifier.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveModifier: () => (/* binding */ StaveModifier)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// A base class for stave modifiers (e.g. clefs, key signatures)



class StaveModifier extends _element__WEBPACK_IMPORTED_MODULE_0__.Element {
  static get Position() {
    return {
      LEFT: 1,
      RIGHT: 2,
      ABOVE: 3,
      BELOW: 4,
      BEGIN: 5,
      END: 6,
    };
  }

  constructor() {
    super();
    this.setAttribute('type', 'StaveModifier');

    this.padding = 10;
    this.position = StaveModifier.Position.ABOVE;
    this.layoutMetrics = null;
  }

  getPosition() { return this.position; }
  setPosition(position) { this.position = position; return this; }
  getStave() { return this.stave; }
  setStave(stave) { this.stave = stave; return this; }
  getWidth() { return this.width; }
  setWidth(width) { this.width = width; return this; }
  getX() { return this.x; }
  setX(x) { this.x = x; return this; }
  getCategory() { return ''; }
  makeSpacer(padding) {
    // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`
    // instead of this hack.

    return {
      getContext() { return true; },
      setStave() {},
      renderToStave() {},
      getMetrics() {
        return { width: padding };
      },
    };
  }
  placeGlyphOnLine(glyph, stave, line) {
    glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());
  }
  getPadding(index) {
    return (index !== undefined && index < 2 ? 0 : this.padding);
  }
  setPadding(padding) { this.padding = padding; return this; }
  setLayoutMetrics(layoutMetrics) {
    this.layoutMetrics = layoutMetrics;
    return this;
  }
  getLayoutMetrics() {
    return this.layoutMetrics;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavenote.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/stavenote.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveNote: () => (/* binding */ StaveNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _boundingbox__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./boundingbox */ "./node_modules/vexflow/src/boundingbox.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _notehead__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notehead */ "./node_modules/vexflow/src/notehead.js");
/* harmony import */ var _stemmablenote__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stemmablenote */ "./node_modules/vexflow/src/stemmablenote.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dot */ "./node_modules/vexflow/src/dot.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This file implements notes for standard notation. This consists of one or
// more `NoteHeads`, an optional stem, and an optional flag.
//
// *Throughout these comments, a "note" refers to the entire `StaveNote`,
// and a "key" refers to a specific pitch/notehead within a note.*
//
// See `tests/stavenote_tests.js` for usage examples.










// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.
function L(...args) { if (StaveNote.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.StaveNote', args); }

const getStemAdjustment = (note) => _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH / (2 * -note.getStemDirection());

const isInnerNoteIndex = (note, index) =>
  index === (note.getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP ? note.keyProps.length - 1 : 0);

// Helper methods for rest positioning in ModifierContext.
function shiftRestVertical(rest, note, dir) {
  const delta = (note.isrest ? 0.0 : 1.0) * dir;

  rest.line += delta;
  rest.maxLine += delta;
  rest.minLine += delta;
  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + (delta));
}

// Called from formatNotes :: center a rest between two notes
function centerRest(rest, noteU, noteL) {
  const delta = rest.line - _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MidLine(noteU.minLine, noteL.maxLine);
  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);
  rest.line -= delta;
  rest.maxLine -= delta;
  rest.minLine -= delta;
}

class StaveNote extends _stemmablenote__WEBPACK_IMPORTED_MODULE_5__.StemmableNote {
  static get CATEGORY() { return 'stavenotes'; }
  static get STEM_UP() { return _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP; }
  static get STEM_DOWN() { return _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN; }
  static get DEFAULT_LEDGER_LINE_OFFSET() { return 3; }

  // ## Static Methods
  //
  // Format notes inside a ModifierContext.
  static format(notes, state) {
    if (!notes || notes.length < 2) return false;

    // FIXME: VexFlow will soon require that a stave be set before formatting.
    // Which, according to the below condition, means that following branch will
    // always be taken and the rest of this function is dead code.
    //
    // Problematically, `Formatter#formatByY` was not designed to work for more
    // than 2 voices (although, doesn't throw on this condition, just tries
    // to power through).
    //
    // Based on the above:
    //   * 2 voices can be formatted *with or without* a stave being set but
    //     the output will be different
    //   * 3 voices can only be formatted *without* a stave

    // if this is enabled, notes are sometimes not staggered correctly, see setXShift lines below 
    // if (notes[0].getStave()) {
    //   return StaveNote.formatByY(notes, state); // 
    // }

    const notesList = [];
    const stagger_same_whole_notes = notes[0].stagger_same_whole_notes;
    // whether to stagger whole notes on the same line but different voice (show 2 instead of 1).
    //   controlled by EngravingRules.StaggerSameWholeNotes

    for (let i = 0; i < notes.length; i++) {
      const props = notes[i].getKeyProps();
      const line = props[0].line;
      let minL = props[props.length - 1].line;
      const stemDirection = notes[i].getStemDirection();
      const stemMax = notes[i].getStemLength() / 10;
      const stemMin = notes[i].getStemMinumumLength() / 10;

      let maxL;
      if (notes[i].isRest()) {
        maxL = line + notes[i].glyph.line_above;
        minL = line - notes[i].glyph.line_below;
      } else {
        maxL = stemDirection === 1
          ? props[props.length - 1].line + stemMax
          : props[props.length - 1].line;

        minL = stemDirection === 1
          ? props[0].line
          : props[0].line - stemMax;
      }

      notesList.push({
        line: props[0].line, // note/rest base line
        maxLine: maxL, // note/rest upper bounds line
        minLine: minL, // note/rest lower bounds line
        isrest: notes[i].isRest(),
        stemDirection,
        stemMax, // Maximum (default) note stem length;
        stemMin, // minimum note stem length
        voice_shift: notes[i].getVoiceShiftWidth(),
        is_displaced: notes[i].isDisplaced(), // note manually displaced
        note: notes[i],
      });
    }

    const voices = notesList.length;

    let noteU = notesList[0];
    const noteM = voices > 2 ? notesList[1] : null;
    let noteL = voices > 2 ? notesList[2] : notesList[1];

    // for two voice backward compatibility, ensure upper voice is stems up
    // for three voices, the voices must be in order (upper, middle, lower)
    if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {
      noteU = notesList[1];
      noteL = notesList[0];
    }

    const voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);
    let xShift = 0;
    let stemDelta;
    // Test for two voice note intersection
    if (voices === 2) {
      const lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;
      // if top voice is a middle voice, check stem intersection with lower voice
      if (noteU.stemDirection === noteL.stemDirection &&
        noteU.minLine <= noteL.maxLine) {
        if (!noteU.isrest) {
          stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));
          stemDelta = Math.max(stemDelta, noteU.stemMin);
          noteU.minLine = noteU.line - stemDelta;
          noteU.note.setStemLength(stemDelta * 10);
        }
      }
      if (noteU.minLine <= noteL.maxLine + lineSpacing) {
        if (noteU.isrest) {
          // shift rest up
          shiftRestVertical(noteU, noteL, 1);
        } else if (noteL.isrest) {
          // shift rest down
          shiftRestVertical(noteL, noteU, -1);
        } else {
          xShift = voiceXShift;
          //Vexflowpatch: Instead of shifting notes, remove the appropriate flag.
          //If we are sharing a line, switch one notes stem direction.
          //If we are sharing a line and in the same voice, only then offset one note
          const lineDiff = Math.abs(noteU.line - noteL.line);
          //if (noteU.note.glyph.stem && noteL.note.glyph.stem) { // skip this condition: whole notes also relevant
          //If we have different dot values, must offset
          //Or If we have a non-filled in mixed with a filled in notehead, must offset
          let halfNoteCount = 0;
          let wholeNoteCount = 0;
          if (noteU.note.duration === "h") {
            halfNoteCount++;
          } else if (noteU.note.duration === "w") {
            wholeNoteCount++;
          }
          if (noteL.note.duration === "h") {
            halfNoteCount++;
          } else if (noteL.note.duration === "w") {
            wholeNoteCount++;
          }
          // only stagger/x-shift if one of the notes is whole or half note and the other isn't. (or dots different)
          let staggerConditions = halfNoteCount === 1 || wholeNoteCount === 1 || noteU.note.dots !== noteL.note.dots;
          if (stagger_same_whole_notes) { // controlled by EngravingRules.StaggerSameWholeNotes. see declaration above
            staggerConditions = staggerConditions || wholeNoteCount === 2;
            // should be ||=, but appveyor says syntax error, doesn't know the operator.
          }
          if (lineDiff === 0 && staggerConditions) {
            noteL.note.setXShift(xShift);
            if (noteU.note.dots > 0) {
              let foundDots = 0;
              for (const modifier of noteU.note.modifiers) {
                if (modifier instanceof _dot__WEBPACK_IMPORTED_MODULE_7__.Dot) {
                  foundDots++;
                  //offset dot(s) above the shifted note
                  //lines + 1 to negative pixels
                  modifier.setYShift(-10 * (noteL.maxLine - noteU.line + 1));
                  if (foundDots === noteU.note.dots) {
                    break;
                  }
                }
              }
            }
          } else if (lineDiff < 1 && lineDiff > 0) {//if the notes are quite close but not on the same line, shift
            noteL.note.setXShift(xShift);
          } else if (noteU.note.voice !== noteL.note.voice) {//If we are not in the same voice
            if (noteU.stemDirection === noteL.stemDirection) {
              if (noteU.line > noteL.line) {
                //noteU is above noteL
                if (noteU.stemDirection === 1) {
                  noteL.note.renderFlag = false;
                } else {
                  noteU.note.renderFlag = false;
                }
              } else if (noteL.line > noteU.line) {
                //note L is above noteU
                if (noteL.stemDirection === 1) {
                  noteU.note.renderFlag = false;
                } else {
                  noteL.note.renderFlag = false;
                }
              } else {
                //same line, swap stem direction for one note
                if (noteL.stemDirection === 1) {
                  noteL.stemDirection = -1;
                  noteL.note.setStemDirection(-1);
                }
              }
            }
          }
          //Very close whole notes
          // } else if ((!noteU.note.glyph.stem && !noteL.note.glyph.stem && lineDiff < 1.5)) {
          //   noteL.note.setXShift(xShift);
          // }
        }
      }

      // format complete
      return true;
    }

    // Check middle voice stem intersection with lower voice
    if (noteM !== null && noteM.minLine < noteL.maxLine + 0.5) {
      if (!noteM.isrest) {
        stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));
        stemDelta = Math.max(stemDelta, noteM.stemMin);
        noteM.minLine = noteM.line - stemDelta;
        noteM.note.setStemLength(stemDelta * 10);
      }
    }

    // For three voices, test if rests can be repositioned
    //
    // Special case 1 :: middle voice rest between two notes
    //
    if (noteM.isrest && !noteU.isrest && !noteL.isrest) {
      if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {
        const restHeight = noteM.maxLine - noteM.minLine;
        const space = noteU.minLine - noteL.maxLine;
        if (restHeight < space) {
          // center middle voice rest between the upper and lower voices
          centerRest(noteM, noteU, noteL);
        } else {
          xShift = voiceXShift + 3;    // shift middle rest right
          noteM.note.setXShift(xShift);
        }
        // format complete
        return true;
      }
    }

    // Special case 2 :: all voices are rests
    if (noteU.isrest && noteM.isrest && noteL.isrest) {
      // Shift upper voice rest up
      shiftRestVertical(noteU, noteM, 1);
      // Shift lower voice rest down
      shiftRestVertical(noteL, noteM, -1);
      // format complete
      return true;
    }

    // Test if any other rests can be repositioned
    if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {
      // Shift middle voice rest up
      shiftRestVertical(noteM, noteL, 1);
    }
    if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {
      // Shift middle voice rest down
      shiftRestVertical(noteM, noteU, -1);
    }
    if (noteU.isrest && noteU.minLine <= noteM.maxLine) {
      // shift upper voice rest up;
      shiftRestVertical(noteU, noteM, 1);
    }
    if (noteL.isrest && noteM.minLine <= noteL.maxLine) {
      // shift lower voice rest down
      shiftRestVertical(noteL, noteM, -1);
    }

    // If middle voice intersects upper or lower voice
    if ((!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5) ||
      (!noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine)) {
      xShift = voiceXShift + 3;      // shift middle note right
      noteM.note.setXShift(xShift);
    }

    return true;
  }

  static formatByY(notes, state) {
    // NOTE: this function does not support more than two voices per stave
    // use with care.
    let hasStave = true;

    for (let i = 0; i < notes.length; i++) {
      hasStave = hasStave && notes[i].getStave() != null;
    }

    if (!hasStave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'Stave Missing',
        'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!'
      );
    }

    let xShift = 0;

    for (let i = 0; i < notes.length - 1; i++) {
      let topNote = notes[i];
      let bottomNote = notes[i + 1];

      //Vexflowpatch: The stem direction doesn't really determine which note is on top.
      //Pick the actual note that is on top via the line number
      if (topNote.maxLine < bottomNote.maxLine) {
        topNote = notes[i + 1];
        bottomNote = notes[i];
      }

      const topKeys = topNote.getKeyProps();
      const bottomKeys = bottomNote.getKeyProps();

      const HALF_NOTEHEAD_HEIGHT = 0.5;

      // `keyProps` and `stave.getYForLine` have different notions of a `line`
      // so we have to convert the keyProps value by subtracting 5.
      // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas
      //
      // We also extend the y for each note by a half notehead because the
      // notehead's origin is centered
      const topNoteBottomY = topNote
        .getStave()
        .getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);

      const bottomNoteTopY = bottomNote
        .getStave()
        .getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);

      const areNotesColliding = bottomNoteTopY - topNoteBottomY < 0;
      if (areNotesColliding) {
        //Vexflowpatch: Only shift if we are in the same voice. This is mostly taken care of format() above.
        if (topNote.voice === bottomNote.voice) {
          xShift = topNote.getVoiceShiftWidth() + 2;
          bottomNote.setXShift(xShift);
        }
      }
    }

    state.right_shift += xShift;
  }

  static postFormat(notes) {
    if (!notes) return false;

    notes.forEach(note => note.postFormat());

    return true;
  }

  constructor(noteStruct) {
    super(noteStruct);
    this.setAttribute('type', 'StaveNote');

    this.keys = noteStruct.keys;
    this.clef = noteStruct.clef;
    this.octave_shift = noteStruct.octave_shift;
    this.beam = null;

    // Pull note rendering properties
    this.glyph = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.getGlyphProps(this.duration, this.noteType);

    if (!this.glyph) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments',
        `Invalid note initialization data (No glyph found): ${JSON.stringify(noteStruct)}`
      );
    }

    // if true, displace note to right
    this.displaced = false;
    this.dot_shiftY = 0;
    //VexflowPatch: We seem to init with a dot count, and also call addDot, so this is to count the added dots vs. the inited dots.
    this.addDotsCount = 0;
    // per-pitch properties
    this.keyProps = [];
    // for displaced ledger lines
    this.use_default_head_x = false;

    // VexFlowPatch: add optional padding to the right (e.g. for large lyrics)
    this.paddingRight = 0;

    // Drawing
    this.note_heads = [];
    this.modifiers = [];

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, {
      // font size for note heads and rests
      glyph_font_scale: noteStruct.glyph_font_scale || _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.DEFAULT_NOTATION_FONT_SCALE,
      // number of stroke px to the left and right of head
      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET,
    });

    this.calculateKeyProps();
    this.buildStem();

    // Set the stem direction
    if (noteStruct.auto_stem) {
      this.autoStem();
    } else {
      this.setStemDirection(noteStruct.stem_direction);
    }
    this.reset();
    this.buildFlag();
  }

  reset() {
    super.reset();

    // Save prior noteHead styles & reapply them after making new noteheads.
    const noteHeadStyles = this.note_heads.map(noteHead => noteHead.getStyle());
    // VexFlowPatch: save and restore noteheads (e.g. slash noteheads)
    const note_types = [];
    this.note_heads.forEach(head => note_types.push(head.note_type));
    this.buildNoteHeads();
    this.note_heads.forEach((noteHead, index) => {
      noteHead.setStyle(noteHeadStyles[index]);
      if (note_types[index]) {
        noteHead.note_type = note_types[index];
      }
    });

    if (this.stave) {
      this.note_heads.forEach(head => head.setStave(this.stave));
    }
    this.calcExtraPx();
  }

  setBeam(beam) {
    this.beam = beam;
    this.calcExtraPx();
    return this;
  }

  getCategory() { return StaveNote.CATEGORY; }

  // Builds a `Stem` for the note
  buildStem() {
    this.setStem(new _stem__WEBPACK_IMPORTED_MODULE_3__.Stem({ hide: !!this.isRest(), }));
    this.stem.id = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Prefix(`${this.getAttribute("id")}-stem`);
  }

  // Builds a `NoteHead` for each key in the note
  buildNoteHeads() {
    this.note_heads = [];
    const stemDirection = this.getStemDirection();
    const keys = this.getKeys();

    let lastLine = null;
    let lineDiff = null;
    let displaced = false;

    // Draw notes from bottom to top.

    // For down-stem notes, we draw from top to bottom.
    let start;
    let end;
    let step;
    if (stemDirection === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
      start = 0;
      end = keys.length;
      step = 1;
    } else if (stemDirection === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN) {
      start = keys.length - 1;
      end = -1;
      step = -1;
    }

    for (let i = start; i !== end; i += step) {
      const noteProps = this.keyProps[i];
      const line = noteProps.line;

      // Keep track of last line with a note head, so that consecutive heads
      // are correctly displaced.
      if (lastLine === null) {
        lastLine = line;
      } else {
        lineDiff = Math.abs(lastLine - line);
        if (lineDiff === 0 || lineDiff === 0.5) {
          displaced = !displaced;
        } else {
          displaced = false;
          this.use_default_head_x = true;
        }
      }
      lastLine = line;

      const notehead = new _notehead__WEBPACK_IMPORTED_MODULE_4__.NoteHead({
        duration: this.duration,
        note_type: this.noteType,
        displaced,
        stem_direction: stemDirection,
        custom_glyph_code: noteProps.code,
        glyph_font_scale: this.render_options.glyph_font_scale,
        x_shift: noteProps.shift_right,
        stem_up_x_offset: noteProps.stem_up_x_offset,
        stem_down_x_offset: noteProps.stem_down_x_offset,
        // VexFlowPatch: add option to shift notehead up or down (instead of stem in the variables above)
        stem_up_y_shift: noteProps.stem_up_y_shift,
        stem_down_y_shift: noteProps.stem_down_y_shift,
        line: noteProps.line,
      });

      this.note_heads[i] = notehead;
    }
  }

  // Automatically sets the stem direction based on the keys in the note
  autoStem() {
    // Figure out optimal stem direction based on given notes
    this.minLine = this.keyProps[0].line;
    this.maxLine = this.keyProps[this.keyProps.length - 1].line;

    const MIDDLE_LINE = 3;
    const decider = (this.minLine + this.maxLine) / 2;
    const stemDirection = decider < MIDDLE_LINE ? _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP : _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN;

    this.setStemDirection(stemDirection);
  }

  // Calculates and stores the properties for each key in the note
  calculateKeyProps() {
    let lastLine = null;
    for (let i = 0; i < this.keys.length; ++i) {
      const key = this.keys[i];

      // All rests use the same position on the line.
      // if (this.glyph.rest) key = this.glyph.position;
      if (this.glyph.rest) this.glyph.position = key;

      const options = { octave_shift: this.octave_shift || 0 };
      const props = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.keyProperties(key, this.clef, options);

      if (!props) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);
      }

      // Override line placement for default rests
      if (props.key === 'R') {
        if (this.duration === '1' || this.duration === 'w') {
          props.line = 4;
        } else {
          props.line = 3;
        }
      }

      // Calculate displacement of this note
      const line = props.line;
      if (lastLine === null) {
        lastLine = line;
      } else {
        if (Math.abs(lastLine - line) === 0.5) {
          this.displaced = true;
          props.displaced = true;

          // Have to mark the previous note as
          // displaced as well, for modifier placement
          if (this.keyProps.length > 0) {
            this.keyProps[i - 1].displaced = true;
          }
        }
      }

      lastLine = line;
      this.keyProps.push(props);
    }

    // Sort the notes from lowest line to highest line
    lastLine = -Infinity;
    this.keyProps.forEach(key => {
      if (key.line < lastLine) {
        _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.W(
          'Unsorted keys in note will be sorted. ' +
          'See https://github.com/0xfe/vexflow/issues/104 for details.'
        );
      }
      lastLine = key.line;
    });
    this.keyProps.sort((a, b) => a.line - b.line);
  }

  // Get the `BoundingBox` for the entire note
  getBoundingBox() {
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
    }

    const { width: w, modLeftPx, extraLeftPx } = this.getMetrics();
    // VexFlowPatch: also subtract paddingRight (newly added in VexFlowPatch) to not shift note bbox
    const x = this.getAbsoluteX() - modLeftPx - extraLeftPx - this.paddingRight;

    let minY = 0;
    let maxY = 0;
    const halfLineSpacing = this.getStave().getSpacingBetweenLines() / 2;
    const lineSpacing = halfLineSpacing * 2;
    if (this.isRest()) {
      const y = this.ys[0];
      const frac = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToFraction(this.duration);
      if (frac.equals(1) || frac.equals(2)) {
        minY = y - halfLineSpacing;
        maxY = y + halfLineSpacing;
      } else {
        minY = y - (this.glyph.line_above * lineSpacing);
        maxY = y + (this.glyph.line_below * lineSpacing);
      }
    } else if (this.glyph.stem) {
      const ys = this.getStemExtents();
      ys.baseY += halfLineSpacing * this.stem_direction;
      minY = Math.min(ys.topY, ys.baseY);
      maxY = Math.max(ys.topY, ys.baseY);
    } else {
      minY = null;
      maxY = null;

      for (let i = 0; i < this.ys.length; ++i) {
        const yy = this.ys[i];
        if (i === 0) {
          minY = yy;
          maxY = yy;
        } else {
          minY = Math.min(yy, minY);
          maxY = Math.max(yy, maxY);
        }
      }
      minY -= halfLineSpacing;
      maxY += halfLineSpacing;
    }

    return new _boundingbox__WEBPACK_IMPORTED_MODULE_2__.BoundingBox(x, minY, w, maxY - minY);
  }

  // Gets the line number of the top or bottom note in the chord.
  // If `isTopNote` is `true` then get the top note
  getLineNumber(isTopNote) {
    if (!this.keyProps.length) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'NoKeyProps', "Can't get bottom note line, because note is not initialized properly."
      );
    }

    let resultLine = this.keyProps[0].line;

    // No precondition assumed for sortedness of keyProps array
    for (let i = 0; i < this.keyProps.length; i++) {
      const thisLine = this.keyProps[i].line;
      if (isTopNote) {
        if (thisLine > resultLine) resultLine = thisLine;
      } else {
        if (thisLine < resultLine) resultLine = thisLine;
      }
    }

    return resultLine;
  }

  // Determine if current note is a rest
  isRest() { return this.glyph.rest; }

  // Determine if the current note is a chord
  isChord() { return !this.isRest() && this.keys.length > 1; }

  // Determine if the `StaveNote` has a stem
  hasStem() { return this.glyph.stem; }

  hasFlag() {
    return super.hasFlag() && !this.isRest() && this.renderFlag;
  }

  getStemX() {
    if (this.noteType === 'r') {
      return this.getCenterGlyphX();
    } else {
      // We adjust the origin of the stem because we want the stem left-aligned
      // with the notehead if stemmed-down, and right-aligned if stemmed-up
      return super.getStemX() + getStemAdjustment(this);
    }
  }

  // Get the `y` coordinate for text placed on the top/bottom of a
  // note at a desired `text_line`
  getYForTopText(textLine) {
    const extents = this.getStemExtents();
    return Math.min(
      this.stave.getYForTopText(textLine),
      extents.topY - (this.render_options.annotation_spacing * (textLine + 1))
    );
  }
  getYForBottomText(textLine) {
    const extents = this.getStemExtents();
    return Math.max(
      this.stave.getYForTopText(textLine),
      extents.baseY + (this.render_options.annotation_spacing * (textLine))
    );
  }

  // Sets the current note to the provided `stave`. This applies
  // `y` values to the `NoteHeads`.
  setStave(stave) {
    super.setStave(stave);

    const ys = this.note_heads.map(notehead => {
      notehead.setStave(stave);
      return notehead.getY();
    });

    this.setYs(ys);

    if (this.stem) {
      const { y_top, y_bottom } = this.getNoteHeadBounds();
      this.stem.setYBounds(y_top, y_bottom);
    }

    return this;
  }

  // Get the pitches in the note
  getKeys() { return this.keys; }

  // Get the properties for all the keys in the note
  getKeyProps() {
    return this.keyProps;
  }

  // Check if note is shifted to the right
  isDisplaced() {
    return this.displaced;
  }

  // Sets whether shift note to the right. `displaced` is a `boolean`
  setNoteDisplaced(displaced) {
    this.displaced = displaced;
    return this;
  }

  // Get the starting `x` coordinate for a `StaveTie`
  getTieRightX() {
    let tieStartX = this.getAbsoluteX();
    tieStartX += this.getGlyphWidth() + this.x_shift + this.extraRightPx;
    if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();
    return tieStartX;
  }

  // Get the ending `x` coordinate for a `StaveTie`
  getTieLeftX() {
    let tieEndX = this.getAbsoluteX();
    tieEndX += this.x_shift - this.extraLeftPx;
    return tieEndX;
  }

  // Get the stave line on which to place a rest
  getLineForRest() {
    let restLine = this.keyProps[0].line;
    if (this.keyProps.length > 1) {
      const lastLine = this.keyProps[this.keyProps.length - 1].line;
      const top = Math.max(restLine, lastLine);
      const bot = Math.min(restLine, lastLine);
      restLine = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.MidLine(top, bot);
    }

    return restLine;
  }

  // Get the default `x` and `y` coordinates for the provided `position`
  // and key `index`
  getModifierStartXY(position, index, options) {
    options = options || {};
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
    }

    if (this.ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');
    }

    const { ABOVE, BELOW, LEFT, RIGHT } = _modifier__WEBPACK_IMPORTED_MODULE_6__.Modifier.Position;
    let x = 0;
    if (position === LEFT) {
      // extra_left_px
      // FIXME: What are these magic numbers?
      x = -1 * 2;
    } else if (position === RIGHT) {
      // extra_right_px
      // FIXME: What is this magical +2?
      x = this.getGlyphWidth() + this.x_shift + 2;

      if (this.stem_direction === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP && this.hasFlag() &&
        (options.forceFlagRight || isInnerNoteIndex(this, index))) {
        x += this.flag.getMetrics().width;
      }
    } else if (position === BELOW || position === ABOVE) {
      x = this.getGlyphWidth() / 2;
    }

    return {
      x: this.getAbsoluteX() + x,
      y: this.ys[index],
    };
  }

  // Sets the style of the complete StaveNote, including all keys
  // and the stem.
  setStyle(style) {
    super.setStyle(style);
    this.note_heads.forEach(notehead => notehead.setStyle(style));
    if (this.stem){
      this.stem.setStyle(style);
    } 
  }

  setStemStyle(style) {
    if (this.stem){
      const stem = this.getStem();
      stem.setStyle(style);
    }
  }
  getStemStyle() { return this.stem.getStyle(); }

  setLedgerLineStyle(style) { this.ledgerLineStyle = style; }
  getLedgerLineStyle() { return this.ledgerLineStyle; }

  setFlagStyle(style) { this.flagStyle = style; }
  getFlagStyle() { return this.flagStyle; }

  // Sets the notehead at `index` to the provided coloring `style`.
  //
  // `style` is an `object` with the following properties: `shadowColor`,
  // `shadowBlur`, `fillStyle`, `strokeStyle`
  setKeyStyle(index, style) {
    this.note_heads[index].setStyle(style);
    return this;
  }

  setKeyLine(index, line) {
    this.keyProps[index].line = line;
    this.reset();
    return this;
  }

  getKeyLine(index) {
    return this.keyProps[index].line;
  }

  // Add self to modifier context. `mContext` is the `ModifierContext`
  // to be added to.
  addToModifierContext(mContext) {
    this.setModifierContext(mContext);
    for (let i = 0; i < this.modifiers.length; ++i) {
      this.modifierContext.addModifier(this.modifiers[i]);
    }
    this.modifierContext.addModifier(this);
    this.setPreFormatted(false);
    return this;
  }

  // Generic function to add modifiers to a note
  //
  // Parameters:
  // * `index`: The index of the key that we're modifying
  // * `modifier`: The modifier to add
  addModifier(index, modifier) {
    modifier.setNote(this);
    modifier.setIndex(index);
    this.modifiers.push(modifier);
    this.setPreFormatted(false);
    return this;
  }

  // Helper function to add an accidental to a key
  addAccidental(index, accidental) {
    return this.addModifier(index, accidental);
  }

  // Helper function to add an articulation to a key
  addArticulation(index, articulation) {
    return this.addModifier(index, articulation);
  }

  // Helper function to add an annotation to a key
  addAnnotation(index, annotation) {
    return this.addModifier(index, annotation);
  }

  // Helper function to add a dot on a specific key
  addDot(index) {
    const dot = new _dot__WEBPACK_IMPORTED_MODULE_7__.Dot();
    dot.setDotShiftY(this.glyph.dot_shiftY);
    this.addDotsCount++;
    return this.addModifier(index, dot);
  }

  // Convenience method to add dot to all keys in note
  addDotToAll() {
    for (let i = 0; i < this.keys.length; ++i) {
      this.addDot(i);
    }
    return this;
  }

  // Get all accidentals in the `ModifierContext`
  getAccidentals() {
    return this.modifierContext.getModifiers('accidentals');
  }

  // Get all dots in the `ModifierContext`
  getDots() {
    return this.modifierContext.getModifiers('dots');
  }

  // Get the width of the note if it is displaced. Used for `Voice`
  // formatting
  getVoiceShiftWidth() {
    // TODO: may need to accomodate for dot here.
    return this.getGlyphWidth() * (this.displaced ? 2 : 1);
  }

  // Calculates and sets the extra pixels to the left or right
  // if the note is displaced.
  calcExtraPx() {
    this.setExtraLeftPx(
      this.displaced && this.stem_direction === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN
        ? this.getGlyphWidth()
        : 0
    );

    // For upstems with flags, the extra space is unnecessary, since it's taken
    // up by the flag.
    this.setExtraRightPx(
      !this.hasFlag() && this.displaced && this.stem_direction === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP
        ? this.getGlyphWidth()
        : 0
    );
  }

  // Pre-render formatting
  preFormat() {
    if (this.preFormatted) return;
    if (this.modifierContext) this.modifierContext.preFormat();

    // VexFlowPatch: add optional padding to the right (e.g. for large lyrics), default 0.
    let width = this.getGlyphWidth() + this.extraLeftPx + this.extraRightPx + this.paddingRight;

    // For upward flagged notes, the width of the flag needs to be added
    if (this.renderFlag && this.glyph.flag && this.beam === null && this.stem_direction === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP) {
      width += this.getGlyphWidth();
    }

    this.setWidth(width);
    this.setPreFormatted(true);
  }

  /**
   * @typedef {Object} noteHeadBounds
   * @property {number} y_top the highest notehead bound
   * @property {number} y_bottom the lowest notehead bound
   * @property {number|Null} displaced_x the starting x for displaced noteheads
   * @property {number|Null} non_displaced_x the starting x for non-displaced noteheads
   * @property {number} highest_line the highest notehead line in traditional music line
   *  numbering (bottom line = 1, top line = 5)
   * @property {number} lowest_line the lowest notehead line
   * @property {number|false} highest_displaced_line the highest staff line number
   *   for a displaced notehead
   * @property {number|false} lowest_displaced_line
   * @property {number} highest_non_displaced_line
   * @property {number} lowest_non_displaced_line
   */

  /**
   * Get the staff line and y value for the highest & lowest noteheads
   * @returns {noteHeadBounds}
   */
  getNoteHeadBounds() {
    // Top and bottom Y values for stem.
    let yTop = null;
    let yBottom = null;
    let nonDisplacedX = null;
    let displacedX = null;

    let highestLine = this.stave.getNumLines();
    let lowestLine = 1;
    let highestDisplacedLine = false;
    let lowestDisplacedLine = false;
    let highestNonDisplacedLine = highestLine;
    let lowestNonDisplacedLine = lowestLine;

    this.note_heads.forEach(notehead => {
      const line = notehead.getLine();
      const y = notehead.getY();

      if (yTop === null || y < yTop) {
        yTop = y;
      }

      if (yBottom === null || y > yBottom) {
        yBottom = y;
      }

      if (displacedX === null && notehead.isDisplaced()) {
        displacedX = notehead.getAbsoluteX();
      }

      if (nonDisplacedX === null && !notehead.isDisplaced()) {
        nonDisplacedX = notehead.getAbsoluteX();
      }

      highestLine = line > highestLine ? line : highestLine;
      lowestLine = line < lowestLine ? line : lowestLine;

      if (notehead.isDisplaced()) {
        highestDisplacedLine = (highestDisplacedLine === false) ?
          line : Math.max(line, highestDisplacedLine);
        lowestDisplacedLine = (lowestDisplacedLine === false) ?
          line : Math.min(line, lowestDisplacedLine);
      } else {
        highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);
        lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);
      }
    }, this);

    return {
      y_top: yTop,
      y_bottom: yBottom,
      displaced_x: displacedX,
      non_displaced_x: nonDisplacedX,
      highest_line: highestLine,
      lowest_line: lowestLine,
      highest_displaced_line: highestDisplacedLine,
      lowest_displaced_line: lowestDisplacedLine,
      highest_non_displaced_line: highestNonDisplacedLine,
      lowest_non_displaced_line: lowestNonDisplacedLine,
    };
  }

  // Get the starting `x` coordinate for the noteheads
  getNoteHeadBeginX() {
    return this.getAbsoluteX() + this.x_shift;
  }

  // Get the ending `x` coordinate for the noteheads
  getNoteHeadEndX() {
    const xBegin = this.getNoteHeadBeginX();
    return xBegin + this.getGlyphWidth();
  }

  // Draw the ledger lines between the stave and the highest/lowest keys
  drawLedgerLines() {
    const {
      stave, glyph,
      render_options: { stroke_px },
      context: ctx,
    } = this;

    const width = glyph.getWidth() + (stroke_px * 2);
    const doubleWidth = 2 * (glyph.getWidth() + stroke_px) - (_stem__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH / 2);

    if (this.isRest()) return;
    if (!ctx) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
    }

    const {
      highest_line,
      lowest_line,
      highest_displaced_line,
      highest_non_displaced_line,
      lowest_displaced_line,
      lowest_non_displaced_line,
      displaced_x,
      non_displaced_x,
    } = this.getNoteHeadBounds();

    const min_x = Math.min(displaced_x, non_displaced_x);

    const drawLedgerLine = (y, normal, displaced) => {
      let x;
      if (displaced && normal) x = min_x - stroke_px;
      else if (normal) x = non_displaced_x - stroke_px;
      else x = displaced_x - stroke_px;
      const ledgerWidth = (normal && displaced) ? doubleWidth : width;

      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x + ledgerWidth, y);
      ctx.stroke();
    };

    const style = { ...stave.getStyle() || {}, ...this.getLedgerLineStyle() || {} };
    this.applyStyle(ctx, style);

    // Draw ledger lines below the staff:
    for (let line = 6; line <= highest_line; ++line) {
      const normal = (non_displaced_x !== null) && (line <= highest_non_displaced_line);
      const displaced = (displaced_x !== null) && (line <= highest_displaced_line);
      drawLedgerLine(stave.getYForNote(line), normal, displaced);
    }

    // Draw ledger lines above the staff:
    for (let line = 0; line >= lowest_line; --line) {
      const normal = (non_displaced_x !== null) && (line >= lowest_non_displaced_line);
      const displaced = (displaced_x !== null) && (line >= lowest_displaced_line);
      drawLedgerLine(stave.getYForNote(line), normal, displaced);
    }

    this.restoreStyle(ctx, style);
  }

  // Draw all key modifiers
  drawModifiers() {
    if (!this.context) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
    }

    const ctx = this.context;
    ctx.openGroup('modifiers');
    for (let i = 0; i < this.modifiers.length; i++) {
      const modifier = this.modifiers[i];
      const notehead = this.note_heads[modifier.getIndex()];
      const noteheadStyle = notehead.getStyle();
      notehead.applyStyle(ctx, noteheadStyle);
      modifier.setContext(ctx);
      modifier.drawWithStyle();
      notehead.restoreStyle(ctx, noteheadStyle);
    }
    ctx.closeGroup();
  }

  // Draw the flag for the note
  drawFlag() {
    const { stem, beam, context: ctx } = this;

    if (!ctx) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
    }

    const shouldRenderFlag = beam === null && this.renderFlag;
    const glyph = this.getGlyph();

    if (glyph.flag && shouldRenderFlag) {
      const { y_top, y_bottom } = this.getNoteHeadBounds();
      const noteStemHeight = stem.getHeight();
      const flagX = this.getStemX();
      // FIXME: What's with the magic +/- 2
      const flagY = this.getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN
        // Down stems have flags on the left
        ? y_top - noteStemHeight + 2
        // Up stems have flags on the eft.
        : y_bottom - noteStemHeight - 2;

      // Draw the Flag
      ctx.openGroup('flag', null, { pointerBBox: true });
      this.applyStyle(ctx, this.getFlagStyle() || false);
      this.flag.render(ctx, flagX, flagY);
      this.restoreStyle(ctx, this.getFlagStyle() || false);
      ctx.closeGroup();
    }
  }

  // Draw the NoteHeads
  drawNoteHeads() {
    this.note_heads.forEach(notehead => {
      this.context.openGroup('notehead', null, { pointerBBox: true });
      notehead.setContext(this.context).draw();
      this.context.closeGroup();
    });
  }

  drawStem(stemStruct) {
    // GCR TODO: I can't find any context in which this is called with the stemStruct
    // argument in the codebase or tests. Nor can I find a case where super.drawStem
    // is called at all. Perhaps these should be removed?
    if (!this.context) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
    }

    if (stemStruct) {
      this.setStem(new _stem__WEBPACK_IMPORTED_MODULE_3__.Stem(stemStruct));
    }
    // seems to not get called here, see this.stem.id above
    this.stem.id = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Prefix(`${this.getAttribute("id")}-stem`);

    if (this.stem) {
      this.context.openGroup('stem', null, { pointerBBox: true });
      this.stem.setContext(this.context).draw();
      this.context.closeGroup();
    }
  }

  // Draws all the `StaveNote` parts. This is the main drawing method.
  draw() {
    if (!this.context) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
    }
    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't draw without a stave.");
    }
    if (this.ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoYValues', "Can't draw note without Y values.");
    }

    const xBegin = this.getNoteHeadBeginX();
    const shouldRenderStem = this.hasStem() && !this.beam;

    // Format note head x positions
    this.note_heads.forEach(notehead => notehead.setX(xBegin));

    if(this.stem) {
      // Format stem x positions
      const stemX = this.getStemX();
      this.stem.setNoteHeadXBounds(stemX, stemX);
    }

    L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);

    // Draw each part of the note
    this.drawLedgerLines();

    // Apply the overall style -- may be contradicted by local settings:
    this.applyStyle();
    this.setAttribute('el', this.context.openGroup('stavenote', this.getAttribute('id')));
    this.context.openGroup('note', null, { pointerBBox: true });
    if (shouldRenderStem) this.drawStem();
    this.drawNoteHeads();
    this.drawFlag();
    this.context.closeGroup();
    this.drawModifiers();
    this.context.closeGroup();
    this.restoreStyle();
    this.setRendered();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/staverepetition.js":
/*!*****************************************************!*\
  !*** ./node_modules/vexflow/src/staverepetition.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Repetition: () => (/* binding */ Repetition)
/* harmony export */ });
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Larry Kuhns 2011




class Repetition extends _stavemodifier__WEBPACK_IMPORTED_MODULE_0__.StaveModifier {
  static get CATEGORY() { return 'repetitions'; }
  static get type() {
    return {
      NONE: 1,         // no coda or segno
      CODA_LEFT: 2,    // coda at beginning of stave
      CODA_RIGHT: 3,   // coda at end of stave
      SEGNO_LEFT: 4,   // segno at beginning of stave
      SEGNO_RIGHT: 5,  // segno at end of stave
      DC: 6,           // D.C. at end of stave
      DC_AL_CODA: 7,   // D.C. al coda at end of stave
      DC_AL_FINE: 8,   // D.C. al Fine end of stave
      DS: 9,           // D.S. at end of stave
      DS_AL_CODA: 10,  // D.S. al coda at end of stave
      DS_AL_FINE: 11,  // D.S. al Fine at end of stave
      FINE: 12,        // Fine at end of stave
      TO_CODA: 13,     // To Coda at end of stave
    };
  }

  constructor(type, x, y_shift) {
    super();
    this.setAttribute('type', 'Repetition');

    this.symbol_type = type;
    this.x = x;
    this.x_shift = 0;
    this.y_shift = y_shift;
    this.font = {
      family: 'times',
      size: 12,
      weight: 'bold italic',
    };
  }

  getCategory() { return Repetition.CATEGORY; }
  setShiftX(x) { this.x_shift = x; return this; }
  setShiftY(y) { this.y_shift = y; return this; }

  setX(x) { 
    this.x = x; return this;
  }

  draw(stave, x) {
    this.setRendered();

    switch (this.symbol_type) {
      case Repetition.type.CODA_RIGHT:
        this.drawCodaFixed(stave, x + stave.width);
        break;
      case Repetition.type.CODA_LEFT:
        this.drawSymbolText(stave, x, 'Coda', true);
        break;
      case Repetition.type.SEGNO_LEFT:
        this.drawSignoFixed(stave, x);
        break;
      case Repetition.type.SEGNO_RIGHT:
        this.drawSignoFixed(stave, x + stave.width);
        break;
      case Repetition.type.DC:
        this.drawSymbolText(stave, x, 'D.C.', false);
        break;
      case Repetition.type.DC_AL_CODA:
        this.drawSymbolText(stave, x, 'D.C. al', true);
        break;
      case Repetition.type.DC_AL_FINE:
        this.drawSymbolText(stave, x, 'D.C. al Fine', false);
        break;
      case Repetition.type.DS:
        this.drawSymbolText(stave, x, 'D.S.', false);
        break;
      case Repetition.type.DS_AL_CODA:
        this.drawSymbolText(stave, x, 'D.S. al', true);
        break;
      case Repetition.type.DS_AL_FINE:
        this.drawSymbolText(stave, x, 'D.S. al Fine', false);
        break;
      case Repetition.type.FINE:
        this.drawSymbolText(stave, x, 'Fine', false);
        break;
      // VexFlowPatch: added TO_CODA type, handling
      case Repetition.type.TO_CODA:
        this.drawSymbolText(stave, x, 'To', true);
        break;
      default:
        break;
    }

    return this;
  }

  drawCodaFixed(stave, x) {
    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
    _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'v4d', true);
    return this;
  }

  drawSignoFixed(stave, x) {
    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
    _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'v8c', true);
    return this;
  }

  drawSymbolText(stave, x, text, draw_coda) {
    const ctx = stave.checkContext();

    ctx.save();
    ctx.setFont(this.font.family, this.font.size, this.font.weight);
    // Default to right symbol
    let text_x = 0 + this.x_shift;
    let symbol_x = x + this.x_shift;
    if (this.symbol_type === Repetition.type.CODA_LEFT) {
      // Offset Coda text to right of stave beginning
      // text_x = this.x + stave.options.vertical_bar_width;
      text_x = this.x + this.x_shift;
      symbol_x = text_x + ctx.measureText(text).width + 12;
    } else {
      // VexFlowPatch: fix placement, like for DS_AL_CODA
      this.x_shift = -(text_x + ctx.measureText(text).width + 12 + stave.options.vertical_bar_width + 12);
      // TO_CODA and DS_AL_CODA draw in the next measure without this x_shift, not sure why not for other symbols.
      text_x = this.x + this.x_shift + stave.options.vertical_bar_width;
      symbol_x = text_x + ctx.measureText(text).width + 12;
    }
    if (this.xShiftAsPercentOfStaveWidth) {
      const extraShiftX = stave.width * this.xShiftAsPercentOfStaveWidth;
      if (
        this.symbol_type === Repetition.type.DC_AL_FINE ||
        this.symbol_type === Repetition.type.FINE ||
        this.symbol_type === Repetition.type.DC ||
        this.symbol_type === Repetition.type.DS_AL_FINE ||
        this.symbol_type === Repetition.type.DS ||
        this.symbol_type === Repetition.type.FINE
      ) {
        text_x += extraShiftX;
      }
      // else if (
      //   this.symbol_type === Repetition.type.DS_AL_CODA ||
      //   this.symbol_type === Repetition.type.DC_AL_CODA ||
      //   this.symbol_type === Repetition.type.TO_CODA
      // ) {
      //   // somehow DS_AL_CODA is already further right by default
      //   //   TODO can cause collisions
      //   text_x += extraShiftX * 0.4;
      //   symbol_x += extraShiftX * 0.4;
      // }
    }
    // earlier, we applied this to most elements individually, not necessary:
    // } else if (this.symbol_type === Repetition.type.TO_CODA) {
    //   // text_x = x + this.x + this.x_shift + stave.options.vertical_bar_width;
    //   // symbol_x = text_x + ctx.measureText(text).width + 12;

    //   // VexFlowPatch: fix placement, like for DS_AL_CODA
    //   this.x_shift = -(text_x + ctx.measureText(text).width + 12 + stave.options.vertical_bar_width + 12);
    //   // TO_CODA and DS_AL_CODA draw in the next measure without this x_shift, not sure why not for other symbols.
    //   text_x = this.x + this.x_shift + stave.options.vertical_bar_width;
    //   symbol_x = text_x + ctx.measureText(text).width + 12;
    // } else if (this.symbol_type === Repetition.type.DS_AL_CODA) {
    //   this.x_shift = -(text_x + ctx.measureText(text).width + 12 + stave.options.vertical_bar_width + 12);
    //   // TO_CODA and DS_AL_CODA draw in the next measure without this x_shift, not sure why not for other symbols.
    //   text_x = this.x + this.x_shift + stave.options.vertical_bar_width;
    //   symbol_x = text_x + ctx.measureText(text).width + 12;
    // } else {
    //   // Offset Signo text to left stave end
    //   symbol_x = this.x + x + stave.width - 5 + this.x_shift;
    //   text_x = symbol_x - + ctx.measureText(text).width - 12;
    // }

    const y = stave.getYForTopText(stave.options.num_lines) + this.y_shift + 25;
    if (draw_coda) {
      _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderGlyph(ctx, symbol_x, y, 40, 'v4d', true);
    }

    ctx.fillText(text, text_x, y + 5);
    ctx.restore();

    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavesection.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/stavesection.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveSection: () => (/* binding */ StaveSection)
/* harmony export */ });
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Larry Kuhns 2011



class StaveSection extends _stavemodifier__WEBPACK_IMPORTED_MODULE_0__.StaveModifier {
  static get CATEGORY() { return 'stavesection'; }

  constructor(section, x, shift_y) {
    super();
    this.setAttribute('type', 'StaveSection');

    this.setWidth(16);
    this.section = section;
    this.x = x;
    this.shift_x = 0;
    this.shift_y = shift_y;
    this.font = {
      family: 'sans-serif',
      size: 12,
      weight: 'bold',
    };
  }

  getCategory() { return StaveSection.CATEGORY; }
  setStaveSection(section) { this.section = section; return this; }
  setShiftX(x) { this.shift_x = x; return this; }
  setShiftY(y) { this.shift_y = y; return this; }
  draw(stave, shift_x) {
    const ctx = stave.checkContext();
    this.setRendered();

    ctx.save();
    ctx.lineWidth = 2;
    ctx.setFont(this.font.family, this.font.size, this.font.weight);
    const text_measurements = ctx.measureText('' + this.section);
    const text_width = text_measurements.width;
    let text_height = text_measurements.height;
    if (!text_height && text_measurements.emHeightAscent >= 0) { // VexFlowPatch
      text_height = text_measurements.emHeightAscent + 2; // node canvas / generateImages fix
    }
    if (!text_height) { // canvas: sometimes no height available (VexFlowPatch)
      text_height = text_measurements.fontBoundingBoxAscent + 3; // estimation
    }
    let width = text_width + 6;  // add left & right padding
    if (width < 18) width = 18;
    const height = text_height + this.font.size / 10; // font.size / 10: padding
    //  Seems to be a good default y
    const y = stave.getYForTopText(3) + 19 - (height * 1.15) + this.shift_y;
    let x = this.x + shift_x;
    ctx.beginPath();
    ctx.lineWidth = 2;
    ctx.rect(x, y + text_height/4, width, height);
    ctx.stroke();
    x += (width - text_width) / 2;
    ctx.fillText('' + this.section, x, y + height );
    ctx.restore();
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavetempo.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/stavetempo.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveTempo: () => (/* binding */ StaveTempo)
/* harmony export */ });
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Radosaw Eichler 2012






class StaveTempo extends _stavemodifier__WEBPACK_IMPORTED_MODULE_2__.StaveModifier {
  static get CATEGORY() { return 'stavetempo'; }

  constructor(tempo, x, shift_y) {
    super();
    this.setAttribute('type', 'StaveTempo');

    this.tempo = tempo;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE;
    this.x = x;
    this.shift_x = 10;
    this.shift_y = shift_y;
    this.font = {
      family: 'times',
      size: 14,
      weight: 'bold',
    };
    this.render_options = {
      glyph_font_scale: 30,  // font size for note
    };
  }
  getCategory() { return StaveTempo.CATEGORY; }
  setTempo(tempo) { this.tempo = tempo; return this; }
  setShiftX(x) { this.shift_x = x; return this; }
  setShiftY(y) { this.shift_y = y; return this; }

  draw(stave, shift_x) {
    const ctx = stave.checkContext();
    this.setRendered();

    const options = this.render_options;
    // FIXME: What does the '38' mean? Why 38? Is that supposed to
    // be the default font size for standard notation?
    const scale = options.glyph_font_scale / 38;
    const name = this.tempo.name;
    const duration = this.tempo.duration;
    const dots = this.tempo.dots;
    const bpm = this.tempo.bpm;
    const font = this.font;
    let x = this.x + this.shift_x + shift_x;
    const y = stave.getYForTopText(1) + this.shift_y;

    ctx.save();

    if (name) {
      ctx.setFont(font.family, font.size, font.weight);
      ctx.fillText(name, x, y);
      x += ctx.measureText(name).width;
    }

    if (duration && bpm) {
      ctx.setFont(font.family, font.size, 'normal');

      if (name) {
        x += ctx.measureText(' ').width;
        ctx.fillText('(', x, y);
        x += ctx.measureText('(').width;
      }

      const code = _tables__WEBPACK_IMPORTED_MODULE_0__.Flow.getGlyphProps(duration);

      x += 3 * scale;
      _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);
      x += code.getWidth() * scale;

      // Draw stem and flags
      if (code.stem) {
        let stem_height = 30;

        if (code.beam_count) stem_height += 3 * (code.beam_count - 1);

        stem_height *= scale;

        const y_top = y - stem_height;
        ctx.fillRect(x - scale, y_top, scale, stem_height);

        if (code.flag) {
          _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem);

          if (!dots) x += 6 * scale;
        }
      }

      // Draw dot
      for (let i = 0; i < dots; i++) {
        x += 6 * scale;
        ctx.beginPath();
        ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);
        ctx.fill();
      }

      ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);
    }

    ctx.restore();
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavetext.js":
/*!***********************************************!*\
  !*** ./node_modules/vexflow/src/stavetext.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveText: () => (/* binding */ StaveText)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
/* harmony import */ var _textnote__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./textnote */ "./node_modules/vexflow/src/textnote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Taehoon Moon 2014





class StaveText extends _stavemodifier__WEBPACK_IMPORTED_MODULE_1__.StaveModifier {
  static get CATEGORY() { return 'stavetext'; }

  constructor(text, position, options) {
    super();
    this.setAttribute('type', 'StaveText');

    this.setWidth(16);
    this.text = text;
    this.position = position;
    this.options = {
      shift_x: 0,
      shift_y: 0,
      justification: _textnote__WEBPACK_IMPORTED_MODULE_2__.TextNote.Justification.CENTER,
    };
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.options, options);

    this.font = {
      family: 'times',
      size: 16,
      weight: 'normal',
    };
  }

  getCategory() { return StaveText.CATEGORY; }
  setStaveText(text) { this.text = text; return this; }
  setShiftX(x) { this.shift_x = x; return this; }
  setShiftY(y) { this.shift_y = y; return this; }

  setFont(font) {
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.font, font);
  }

  setText(text) {
    this.text = text;
  }

  draw(stave) {
    const ctx = stave.checkContext();
    this.setRendered();

    ctx.save();
    ctx.lineWidth = 2;
    ctx.setFont(this.font.family, this.font.size, this.font.weight);
    const text_width = ctx.measureText('' + this.text).width;

    let x;
    let y;
    const Position = _stavemodifier__WEBPACK_IMPORTED_MODULE_1__.StaveModifier.Position;
    const Justification = _textnote__WEBPACK_IMPORTED_MODULE_2__.TextNote.Justification;
    switch (this.position) {
      case Position.LEFT:
      case Position.RIGHT:
        y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;
        if (this.position === Position.LEFT) {
          x = stave.getX() - text_width - 24 + this.options.shift_x;
        } else {
          x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;
        }
        break;
      case Position.ABOVE:
      case Position.BELOW:
        x = stave.getX() + this.options.shift_x;
        if (this.options.justification === Justification.CENTER) {
          x += stave.getWidth() / 2 - text_width / 2;
        } else if (this.options.justification === Justification.RIGHT) {
          x += stave.getWidth() - text_width;
        }

        if (this.position === Position.ABOVE) {
          y = stave.getYForTopText(2) + this.options.shift_y;
        } else {
          y = stave.getYForBottomText(2) + this.options.shift_y;
        }
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidPosition', 'Value Must be in Modifier.Position.');
    }

    ctx.fillText('' + this.text, x, y + 4);
    ctx.restore();
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavetie.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/stavetie.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StaveTie: () => (/* binding */ StaveTie)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class implements varies types of ties between contiguous notes. The
// ties include: regular ties, hammer ons, pull offs, and slides.




class StaveTie extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  constructor(notes, text) {
    /**
     * Notes is a struct that has:
     *
     *  {
     *    first_note: Note,
     *    last_note: Note,
     *    first_indices: [n1, n2, n3],
     *    last_indices: [n1, n2, n3]
     *  }
     *
     **/
    super();
    this.setAttribute('type', 'StaveTie');
    this.notes = notes;
    this.context = null;
    this.text = text;
    this.direction = null;

    this.render_options = {
      cp1: 8,      // Curve control point 1
      cp2: 12,      // Curve control point 2
      text_shift_x: 0,
      first_x_shift: 0,
      last_x_shift: 0,
      y_shift: 7,
      tie_spacing: 0,
      font: { family: 'Arial', size: 10, style: '' },
    };

    this.font = this.render_options.font;
    this.setNotes(notes);
  }

  setFont(font) { this.font = font; return this; }
  setDirection(direction) { this.direction = direction; return this; }

  /**
   * Set the notes to attach this tie to.
   *
   * @param {!Object} notes The notes to tie up.
   */
  setNotes(notes) {
    if (!notes.first_note && !notes.last_note) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments', 'Tie needs to have either first_note or last_note set.'
      );
    }

    if (!notes.first_indices) notes.first_indices = [0];
    if (!notes.last_indices) notes.last_indices = [0];

    if (notes.first_indices.length !== notes.last_indices.length) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments', 'Tied notes must have similar index sizes');
    }

    // Success. Lets grab 'em notes.
    this.first_note = notes.first_note;
    this.first_indices = notes.first_indices;
    this.last_note = notes.last_note;
    this.last_indices = notes.last_indices;
    return this;
  }

  /**
   * @return {boolean} Returns true if this is a partial bar.
   */
  isPartial() {
    return (!this.first_note || !this.last_note);
  }

  renderTie(params) {
    if (params.first_ys.length === 0 || params.last_ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'No Y-values to render');
    }

    const ctx = this.context;
    let cp1 = this.render_options.cp1;
    let cp2 = this.render_options.cp2;

    if (Math.abs(params.last_x_px - params.first_x_px) < 10) {
      cp1 = 2; cp2 = 8;
    }

    const first_x_shift = this.render_options.first_x_shift;
    const last_x_shift = this.render_options.last_x_shift;
    const y_shift = this.render_options.y_shift * params.direction;

    for (let i = 0; i < this.first_indices.length; ++i) {
      const cp_x = ((params.last_x_px + last_x_shift) +
          (params.first_x_px + first_x_shift)) / 2;
      const first_y_px = params.first_ys[this.first_indices[i]] + y_shift;
      const last_y_px = params.last_ys[this.last_indices[i]] + y_shift;

      if (isNaN(first_y_px) || isNaN(last_y_px)) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Bad indices for tie rendering.');
      }

      const top_cp_y = ((first_y_px + last_y_px) / 2) + (cp1 * params.direction);
      const bottom_cp_y = ((first_y_px + last_y_px) / 2) + (cp2 * params.direction);

      let id;
      if (this.first_note) { // ?. would be shorter, but fails appveyor build
        id = this.first_note.getAttribute('id') + "-tie";
      }
      this.setAttribute('el', ctx.openGroup('stavetie', id));
      ctx.beginPath();
      ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);
      ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);
      ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);
      ctx.closePath();
      ctx.fill();
      ctx.closeGroup();
    }
  }

  renderText(first_x_px, last_x_px) {
    if (!this.text) return;
    let center_x = (first_x_px + last_x_px) / 2;
    center_x -= this.context.measureText(this.text).width / 2;

    this.context.save();
    this.context.setFont(this.font.family, this.font.size, this.font.style);
    this.context.fillText(
      this.text,
      center_x + this.render_options.text_shift_x,
      (this.first_note || this.last_note).getStave().getYForTopText() - 1
    );
    this.context.restore();
  }

  draw() {
    this.checkContext();
    this.setRendered();

    const first_note = this.first_note;
    const last_note = this.last_note;

    let first_x_px;
    let last_x_px;
    let first_ys;
    let last_ys;
    let stem_direction;
    if (first_note) {
      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
      stem_direction = first_note.getStemDirection();
      first_ys = first_note.getYs();
    } else {
      first_x_px = last_note.getStave().getTieStartX();
      first_ys = last_note.getYs();
      this.first_indices = this.last_indices;
    }

    if (last_note) {
      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
      stem_direction = last_note.getStemDirection();
      last_ys = last_note.getYs();
    } else {
      last_x_px = first_note.getStave().getTieEndX();
      last_ys = first_note.getYs();
      this.last_indices = this.first_indices;
    }

    if (this.direction) {
      stem_direction = this.direction;
    }

    this.renderTie({
      first_x_px,
      last_x_px,
      first_ys,
      last_ys,
      direction: stem_direction,
    });

    this.renderText(first_x_px, last_x_px);
    return true;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stavevolta.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/stavevolta.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Volta: () => (/* binding */ Volta)
/* harmony export */ });
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Larry Kuhns 2011



class Volta extends _stavemodifier__WEBPACK_IMPORTED_MODULE_0__.StaveModifier {
  static get CATEGORY() { return 'voltas'; }
  static get type() {
    return {
      NONE: 1,
      BEGIN: 2,
      MID: 3,
      END: 4,
      BEGIN_END: 5,
    };
  }

  constructor(type, number, x, y_shift) {
    super();
    this.setAttribute('type', 'Volta');
    this.volta = type;
    this.x = x;
    this.y_shift = y_shift;
    this.number = number;
    this.font = {
      family: 'sans-serif',
      size: 9,
      weight: 'bold',
    };
  }

  getCategory() { return Volta.CATEGORY; }
  setShiftY(y) { this.y_shift = y; return this; }

  draw(stave, x) {
    const ctx = stave.checkContext();
    this.setRendered();

    // VexFlowPatch: don't add x. already merged in Vexflow 3.x
    let width = stave.width - x; // don't add x offset to width
    const top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
    const vert_height = 1.5 * stave.options.spacing_between_lines_px;
    switch (this.volta) {
      case Volta.type.BEGIN:
        ctx.fillRect(this.x + x, top_y, 1, vert_height);
        break;
      case Volta.type.END:
        width -= 5;
        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
        break;
      case Volta.type.BEGIN_END:
        width -= 3;
        ctx.fillRect(this.x + x, top_y, 1, vert_height);
        ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
        break;
      default:
        break;
    }
    // If the beginning of a volta, draw measure number
    if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {
      ctx.save();
      ctx.setFont(this.font.family, this.font.size, this.font.weight);
      ctx.fillText(this.number, this.x + x + 5, top_y + 15);
      ctx.restore();
    }

    ctx.fillRect(this.x + x, top_y, width, 1);
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stem.js":
/*!******************************************!*\
  !*** ./node_modules/vexflow/src/stem.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stem: () => (/* binding */ Stem)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This file implements the `Stem` object. Generally this object is handled
// by its parent `StemmableNote`.





// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.
function L(...args) { if (Stem.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.Stem', args); }

class Stem extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  static get CATEGORY() { return 'stem'; }

  // Stem directions
  static get UP() {
    return 1;
  }
  static get DOWN() {
    return -1;
  }

  // Theme
  static get WIDTH() {
    return _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STEM_WIDTH;
  }
  static get HEIGHT() {
    return _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.STEM_HEIGHT;
  }

  constructor(options = {}) {
    super();
    this.setAttribute('type', 'Stem');

    // Default notehead x bounds
    this.x_begin = options.x_begin || 0;
    this.x_end = options.x_end || 0;

    // Y bounds for top/bottom most notehead
    this.y_top = options.y_top || 0;
    this.y_bottom = options.y_bottom || 0;

    // Stem top extension
    this.stem_extension = options.stem_extension || 0;

    // Direction of the stem
    this.stem_direction = options.stem_direction || 0;

    // Flag to override all draw calls
    this.hide = options.hide || false;

    this.isStemlet = options.isStemlet || false;
    this.stemletHeight = options.stemletHeight || 0;

    // Use to adjust the rendered height without affecting
    // the results of `.getExtents()`
    this.renderHeightAdjustment = 0;
    this.setOptions(options);
  }

  setOptions(options) {
    // Changing where the stem meets the head
    this.stem_up_y_offset = options.stem_up_y_offset || 0;
    this.stem_down_y_offset = options.stem_down_y_offset || 0;
  }

  // Set the x bounds for the default notehead
  setNoteHeadXBounds(x_begin, x_end) {
    this.x_begin = x_begin;
    this.x_end = x_end;
    return this;
  }

  // Set the direction of the stem in relation to the noteheads
  setDirection(direction) { this.stem_direction = direction; }

  // Set the extension for the stem, generally for flags or beams
  setExtension(ext) { this.stem_extension = ext; }
  getExtension() { return this.stem_extension; }

  // The the y bounds for the top and bottom noteheads
  setYBounds(y_top, y_bottom) {
    this.y_top = y_top;
    this.y_bottom = y_bottom;
  }

  // The category of the object
  getCategory() { return Stem.CATEGORY; }

  // Gets the entire height for the stem
  getHeight() {
    const y_offset = (this.stem_direction === Stem.UP) ? this.stem_up_y_offset : this.stem_down_y_offset; // eslint-disable-line max-len
    return ((this.y_bottom - this.y_top) * this.stem_direction) +
           ((Stem.HEIGHT - y_offset + this.stem_extension) * this.stem_direction);
  }
  getBoundingBox() {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');
  }

  // Get the y coordinates for the very base of the stem to the top of
  // the extension
  getExtents() {
    const isStemUp = this.stem_direction === Stem.UP;
    const ys = [this.y_top, this.y_bottom];
    const stemHeight = Stem.HEIGHT + this.stem_extension;

    const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);
    const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);
    const stemTipY = innerMostNoteheadY + (stemHeight * -this.stem_direction);

    return { topY: stemTipY, baseY: outerMostNoteheadY };
  }

  setVisibility(isVisible) {
    this.hide = !isVisible;
    return this;
  }

  setStemlet(isStemlet, stemletHeight) {
    this.isStemlet = isStemlet;
    this.stemletHeight = stemletHeight;
    return this;
  }

  // Render the stem onto the canvas
  draw() {
    this.setRendered();
    if (this.hide) return;
    const ctx = this.checkContext();

    let stem_x;
    let stem_y;
    const stem_direction = this.stem_direction;

    if (stem_direction === Stem.DOWN) {
      // Down stems are rendered to the left of the head.
      stem_x = this.x_begin;
      stem_y = this.y_top + this.stem_down_y_offset;
    } else {
      // Up stems are rendered to the right of the head.
      stem_x = this.x_end;
      stem_y = this.y_bottom - this.stem_up_y_offset;
    }

    const stemHeight = this.getHeight();

    L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);

    // The offset from the stem's base which is required fo satisfy the stemlet height
    const stemletYOffset = this.isStemlet
      ? stemHeight - this.stemletHeight * this.stem_direction
      : 0;

    // Draw the stem
    ctx.save();
    this.applyStyle(ctx);
    ctx.beginPath();
    ctx.setLineWidth(Stem.WIDTH);
    ctx.moveTo(stem_x, stem_y - stemletYOffset);
    ctx.lineTo(stem_x, stem_y - stemHeight - (this.renderHeightAdjustment * stem_direction));
    if (ctx.svg) {
        const strokeAttributes = {class: _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Prefix("stem")};
        if (this.id) {
            strokeAttributes.id = this.id;
        }
        ctx.stroke(strokeAttributes);
    } else {
        ctx.stroke();
    }
    this.restoreStyle(ctx);
    ctx.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stemmablenote.js":
/*!***************************************************!*\
  !*** ./node_modules/vexflow/src/stemmablenote.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StemmableNote: () => (/* binding */ StemmableNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// `StemmableNote` is an abstract interface for notes with optional stems.
// Examples of stemmable notes are `StaveNote` and `TabNote`







class StemmableNote extends _note__WEBPACK_IMPORTED_MODULE_4__.Note {
  constructor(note_struct) {
    super(note_struct);
    this.setAttribute('type', 'StemmableNote');
    this.stem = null;
    this.stemExtensionOverride = null;
    this.beam = null;
    this.renderFlag = true;
  }

  // Get and set the note's `Stem`
  getStem() { return this.stem; }
  setStem(stem) { this.stem = stem; return this; }

  // Builds and sets a new stem
  buildStem() {
    const stem = new _stem__WEBPACK_IMPORTED_MODULE_2__.Stem();
    this.setStem(stem);
    return this;
  }

  buildFlag() {
    const { glyph, beam } = this;
    const shouldRenderFlag = beam === null && this.renderFlag;

    if (glyph && glyph.flag && shouldRenderFlag) {
      const flagCode = this.getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN
        ? glyph.code_flag_downstem
        : glyph.code_flag_upstem;

      this.flag = new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph(flagCode, this.render_options.glyph_font_scale);
    }
  }

  // Get the glyph associated with the top key of this note
  getTopGlyph() {
    if (this.getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
      return this.customGlyphs[this.customGlyphs.length - 1];
    } else {
      return this.customGlyphs[0];
    }
  }

  // Get the full length of stem
  getStemLength() {
    return _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.HEIGHT + this.getStemExtension();
  }

  // Get the number of beams for this duration
  getBeamCount() {
    const glyph = this.getGlyph();

    if (glyph) {
      return glyph.beam_count;
    } else {
      return 0;
    }
  }

  // Get the minimum length of stem
  getStemMinumumLength() {
    const frac = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.durationToFraction(this.duration);
    let length = frac.value() <= 1 ? 0 : 20;
    // if note is flagged, cannot shorten beam
    switch (this.duration) {
      case '8':
        if (this.beam == null) length = 35;
        break;
      case '16':
        length = this.beam == null ? 35 : 25;
        break;
      case '32':
        length = this.beam == null ? 45 : 35;
        break;
      case '64':
        length = this.beam == null ? 50 : 40;
        break;
      case '128':
        length = this.beam == null ? 55 : 45;
        break;
      default:
        break;
    }
    return length;
  }

  // Get/set the direction of the stem
  getStemDirection() { return this.stem_direction; }
  setStemDirection(direction) {
    if (!direction) direction = _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.UP;
    if (direction !== _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.UP && direction !== _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', `Invalid stem direction: ${direction}`);
    }

    this.stem_direction = direction;
    if (this.stem) {
      this.stem.setDirection(direction);
      this.stem.setExtension(this.getStemExtension());
      const glyph = this.getTopGlyph() || this.getGlyph();
      this.stem.setOptions({
        stem_up_y_offset: glyph.stem_up_y_offset,
        stem_down_y_offset: glyph.stem_down_y_offset
      });
    }

    this.reset();
    if (this.flag && this.renderFlag) {
      this.buildFlag();
    }

    this.beam = null;
    if (this.preFormatted) {
      this.preFormat();
    }

    return this;
  }

  // Get the `x` coordinate of the stem
  getStemX() {
    const x_begin = this.getAbsoluteX() + this.x_shift;
    const x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();
    const stem_x = this.stem_direction === _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.DOWN ? x_begin : x_end;
    return stem_x;
  }

  // Get the `x` coordinate for the center of the glyph.
  // Used for `TabNote` stems and stemlets over rests
  getCenterGlyphX() {
    return this.getAbsoluteX() + this.x_shift + (this.getGlyphWidth() / 2);
  }

  // Get the stem extension for the current duration
  getStemExtension() {
    const glyph = this.getGlyph();

    if (this.stemExtensionOverride != null) {
      return this.stemExtensionOverride;
    }

    if (glyph) {
      return this.getStemDirection() === 1
        ? glyph.stem_up_extension
        : glyph.stem_down_extension;
    }

    return 0;
  }

  // Set the stem length to a specific. Will override the default length.
  setStemLength(height) {
    this.stemExtensionOverride = (height - _stem__WEBPACK_IMPORTED_MODULE_2__.Stem.HEIGHT);
    return this;
  }

  // Get the top and bottom `y` values of the stem.
  getStemExtents() {
    return this.stem.getExtents();
  }

  // Sets the current note's beam
  setBeam(beam) { this.beam = beam; return this; }

  // Get the `y` value for the top/bottom modifiers at a specific `textLine`
  getYForTopText(textLine) {
    const extents = this.getStemExtents();
    if (this.hasStem()) {
      return Math.min(
        this.stave.getYForTopText(textLine),
        extents.topY - (this.render_options.annotation_spacing * (textLine + 1))
      );
    } else {
      return this.stave.getYForTopText(textLine);
    }
  }

  getYForBottomText(textLine) {
    const extents = this.getStemExtents();
    if (this.hasStem()) {
      return Math.max(
        this.stave.getYForTopText(textLine),
        extents.baseY + (this.render_options.annotation_spacing * (textLine))
      );
    } else {
      return this.stave.getYForBottomText(textLine);
    }
  }

  hasFlag() {
    return this.renderFlag && _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.getGlyphProps(this.duration).flag && !this.beam;
  }

  // Post format the note
  postFormat() {
    if (this.beam) this.beam.postFormat();

    this.postFormatted = true;

    return this;
  }

  // Render the stem onto the canvas
  drawStem(stem_struct) {
    this.checkContext();
    this.setRendered();

    this.setStem(new _stem__WEBPACK_IMPORTED_MODULE_2__.Stem(stem_struct));
    this.stem.setContext(this.context).draw();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/stringnumber.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/stringnumber.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StringNumber: () => (/* binding */ StringNumber)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./renderer */ "./node_modules/vexflow/src/renderer.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Larry Kuhns
//
// ## Description
// This file implements the `StringNumber` class which renders string
// number annotations beside notes.






class StringNumber extends _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier {
  static get CATEGORY() { return 'stringnumber'; }

  // ## Static Methods
  // Arrange string numbers inside a `ModifierContext`
  static format(nums, state) {
    const left_shift = state.left_shift;
    const right_shift = state.right_shift;
    const num_spacing = 1;

    if (!nums || nums.length === 0) return this;

    const nums_list = [];
    let prev_note = null;
    let shift_left = 0;
    let shift_right = 0;

    let i;
    let num;
    let note;
    let pos;
    let props_tmp;
    for (i = 0; i < nums.length; ++i) {
      num = nums[i];
      note = num.getNote();

      for (i = 0; i < nums.length; ++i) {
        num = nums[i];
        note = num.getNote();
        pos = num.getPosition();
        const props = note.getKeyProps()[num.getIndex()];

        if (note !== prev_note) {
          for (let n = 0; n < note.keys.length; ++n) {
            props_tmp = note.getKeyProps()[n];
            if (left_shift === 0) {
              shift_left = props_tmp.displaced ? note.getExtraLeftPx() : shift_left;
            }
            if (right_shift === 0) {
              shift_right = props_tmp.displaced ? note.getExtraRightPx() : shift_right;
            }
          }
          prev_note = note;
        }

        nums_list.push({
          pos,
          note,
          num,
          line: props.line,
          shiftL: shift_left,
          shiftR: shift_right,
        });
      }
    }

    // Sort string numbers by line number.
    nums_list.sort((a, b) => b.line - a.line);

    // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?
    let num_shiftL = 0; // eslint-disable-line
    let num_shiftR = 0;
    let x_widthL = 0;
    let x_widthR = 0;
    let last_line = null;
    let last_note = null;
    for (i = 0; i < nums_list.length; ++i) {
      let num_shift = 0;
      note = nums_list[i].note;
      pos = nums_list[i].pos;
      num = nums_list[i].num;
      const line = nums_list[i].line;
      const shiftL = nums_list[i].shiftL;
      const shiftR = nums_list[i].shiftR;

      // Reset the position of the string number every line.
      if (line !== last_line || note !== last_note) {
        num_shiftL = left_shift + shiftL;
        num_shiftR = right_shift + shiftR;
      }

      const num_width = num.getWidth() + num_spacing;
      if (pos === _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT) {
        num.setXShift(left_shift);
        num_shift = shift_left + num_width; // spacing
        x_widthL = (num_shift > x_widthL) ? num_shift : x_widthL;
      } else if (pos === _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT) {
        num.setXShift(num_shiftR);
        num_shift += num_width; // spacing
        x_widthR = (num_shift > x_widthR) ? num_shift : x_widthR;
      }
      last_line = line;
      last_note = note;
    }

    state.left_shift += x_widthL;
    state.right_shift += x_widthR;
    return true;
  }

  constructor(number) {
    super();
    this.setAttribute('type', 'StringNumber');

    this.note = null;
    this.last_note = null;
    this.index = null;
    this.string_number = number;
    this.setWidth(20); // ???
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE; // Default position above stem or note head
    this.x_shift = 0;
    this.y_shift = 0;
    this.x_offset = 0; // Horizontal offset from default
    this.y_offset = 0; // Vertical offset from default
    this.dashed = true; // true - draw dashed extension  false - no extension
    this.leg = _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.NONE;   // draw upward/downward leg at the of extension line
    this.radius = 8;
    this.font = {
      family: 'sans-serif',
      size: 10,
      weight: 'bold',
    };
  }
  getCategory() { return StringNumber.CATEGORY; }
  getNote() { return this.note; }
  setNote(note) { this.note = note; return this; }
  getIndex() { return this.index; }
  setIndex(index) { this.index = index; return this; }

  setLineEndType(leg) {
    if (leg >= _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.NONE && leg <= _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.DOWN) {
      this.leg = leg;
    }
    return this;
  }

  setStringNumber(number) { this.string_number = number; return this; }
  setOffsetX(x) { this.x_offset = x; return this; }
  setOffsetY(y) { this.y_offset = y; return this; }
  setLastNote(note) { this.last_note = note; return this; }
  setDashed(dashed) { this.dashed = dashed; return this; }

  draw() {
    const ctx = this.checkContext();
    if (!(this.note && (this.index != null))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw string number without a note and index.");
    }
    this.setRendered();

    const line_space = this.note.stave.options.spacing_between_lines_px;

    const start = this.note.getModifierStartXY(this.position, this.index);
    let dot_x = (start.x + this.x_shift + this.x_offset);
    let dot_y = start.y + this.y_shift + this.y_offset;

    switch (this.position) {
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE:
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.BELOW: {
        const stem_ext = this.note.getStemExtents();
        let top = stem_ext.topY;
        let bottom = stem_ext.baseY + 2;

        if (this.note.stem_direction === _stavenote__WEBPACK_IMPORTED_MODULE_3__.StaveNote.STEM_DOWN) {
          top = stem_ext.baseY;
          bottom = stem_ext.topY - 2;
        }

        if (this.position === _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.ABOVE) {
          dot_y = this.note.hasStem()
            ? top - (line_space * 1.75)
            : start.y - (line_space * 1.75);
        } else {
          dot_y = this.note.hasStem()
            ? bottom + (line_space * 1.5)
            : start.y + (line_space * 1.75);
        }

        dot_y += this.y_shift + this.y_offset;

        break;
      } case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT:
        dot_x -= (this.radius / 2) + 5;
        break;
      case _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT:
        dot_x += (this.radius / 2) + 6;
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
          'InvalidPosition', `The position ${this.position} is invalid`
        );
    }

    ctx.save();
    ctx.beginPath();
    ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);
    ctx.lineWidth = 1.5;
    ctx.stroke();
    ctx.setFont(this.font.family, this.font.size, this.font.weight);
    const x = dot_x - ctx.measureText(this.string_number).width / 2;
    ctx.fillText('' + this.string_number, x, dot_y + 4.5);

    if (this.last_note != null) {
      const end = this.last_note.getStemX() - this.note.getX() + 5;
      ctx.strokeStyle = '#000000';
      ctx.lineCap = 'round';
      ctx.lineWidth = 0.6;
      if (this.dashed) {
        _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);
      } else {
        _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);
      }

      let len;
      let pattern;
      switch (this.leg) {
        case _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.UP:
          len = -10;
          pattern = this.dashed ? [3, 3] : [3, 0];
          _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
          break;
        case _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.LineEndType.DOWN:
          len = 10;
          pattern = this.dashed ? [3, 3] : [3, 0];
          _renderer__WEBPACK_IMPORTED_MODULE_2__.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
          break;
        default:
          break;
      }
    }

    ctx.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/strokes.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/strokes.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Stroke: () => (/* binding */ Stroke)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _stavenote__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavenote */ "./node_modules/vexflow/src/stavenote.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Larry Kuhns
//
// ## Description
// This file implements the `Stroke` class which renders chord strokes
// that can be arpeggiated, brushed, rasquedo, etc.






class Stroke extends _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier {
  static get CATEGORY() { return 'strokes'; }
  static get Type() {
    return {
      BRUSH_DOWN: 1,
      BRUSH_UP: 2,
      ROLL_DOWN: 3, // Arpeggiated chord
      ROLL_UP: 4,   // Arpeggiated chord
      RASQUEDO_DOWN: 5,
      RASQUEDO_UP: 6,
      ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow
    };
  }

  // Arrange strokes inside `ModifierContext`
  static format(strokes, state) {
    const left_shift = state.left_shift;
    const stroke_spacing = 0;

    if (!strokes || strokes.length === 0) return this;

    const strokeList = strokes.map((stroke) => {
      const note = stroke.getNote();
      if (note instanceof _stavenote__WEBPACK_IMPORTED_MODULE_2__.StaveNote) {
        const { line, displaced } = note.getKeyProps()[stroke.getIndex()];
        const shift = displaced ? note.getExtraLeftPx() : 0;
        return { line, shift, stroke };
      } else {
        const { str: string } = note.getPositions()[stroke.getIndex()];
        return { line: string, shift: 0, stroke };
      }
    });

    const strokeShift = left_shift;

    // There can only be one stroke .. if more than one, they overlay each other
    const xShift = strokeList.reduce((xShift, { stroke, shift }) => {
      stroke.setXShift(strokeShift + shift);
      return Math.max(stroke.getWidth() + stroke_spacing, xShift);
    }, 0);

    state.left_shift += xShift;
    return true;
  }

  constructor(type, options) {
    super();
    this.setAttribute('type', 'Stroke');

    this.note = null;
    this.options = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge({}, options);

    // multi voice - span stroke across all voices if true
    this.all_voices = 'all_voices' in this.options ? this.options.all_voices : true;

    // multi voice - end note of stroke, set in draw()
    this.note_end = null;
    this.index = null;
    this.type = type;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.LEFT;

    this.render_options = {
      font_scale: 38,
      stroke_px: 3,
      stroke_spacing: 10,
    };

    this.font = {
      family: 'serif',
      size: 10,
      weight: 'bold italic',
    };

    this.setXShift(0);
    this.setWidth(10);
  }

  getCategory() { return Stroke.CATEGORY; }
  getPosition() { return this.position; }
  addEndNote(note) { this.note_end = note; return this; }

  draw() {
    this.checkContext();
    this.setRendered();

    if (!(this.note && (this.index != null))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw stroke without a note and index.");
    }

    const start = this.note.getModifierStartXY(this.position, this.index);
    let ys = this.note.getYs();
    let topY = start.y;
    let botY = start.y;
    const x = start.x - 5;
    const line_space = this.note.stave.options.spacing_between_lines_px;

    const notes = this.getModifierContext().getModifiers(this.note.getCategory());
    for (let i = 0; i < notes.length; i++) {
      ys = notes[i].getYs();
      for (let n = 0; n < ys.length; n++) {
        if (this.note === notes[i] || this.all_voices) {
          topY = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Min(topY, ys[n]);
          botY = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Max(botY, ys[n]);
        }
      }
    }

    let arrow;
    let arrow_shift_x;
    let arrow_y;
    let text_shift_x;
    let text_y;
    switch (this.type) {
      case Stroke.Type.BRUSH_DOWN:
        arrow = 'vc3';
        arrow_shift_x = -3;
        arrow_y = topY - (line_space / 2) + 10;
        botY += (line_space / 2);
        break;
      case Stroke.Type.BRUSH_UP:
        arrow = 'v11';
        arrow_shift_x = 0.5;
        arrow_y = botY + (line_space / 2);
        topY -= (line_space / 2);
        break;
      case Stroke.Type.ROLL_DOWN:
      case Stroke.Type.RASQUEDO_DOWN:
        arrow = 'vc3';
        arrow_shift_x = -3;
        text_shift_x = this.x_shift + arrow_shift_x - 2;
        if (this.note instanceof _stavenote__WEBPACK_IMPORTED_MODULE_2__.StaveNote) {
          topY += 1.5 * line_space;
          if ((botY - topY) % 2 !== 0) {
            botY += 0.5 * line_space;
          } else {
            botY += line_space;
          }
          arrow_y = topY - line_space;
          text_y = botY + line_space + 2;
        } else {
          topY += 1.5 * line_space;
          botY += line_space;
          arrow_y = topY - 0.75 * line_space;
          text_y = botY + 0.25 * line_space;
        }
        break;
      case Stroke.Type.ROLL_UP:
      case Stroke.Type.RASQUEDO_UP:
        arrow = 'v52';
        arrow_shift_x = -4;
        text_shift_x = this.x_shift + arrow_shift_x - 1;
        if (this.note instanceof _stavenote__WEBPACK_IMPORTED_MODULE_2__.StaveNote) {
          arrow_y = line_space / 2;
          topY += 0.5 * line_space;
          if ((botY - topY) % 2 === 0) {
            botY += line_space / 2;
          }
          arrow_y = botY + 0.5 * line_space;
          text_y = topY - 1.25 * line_space;
        } else {
          topY += 0.25 * line_space;
          botY += 0.5 * line_space;
          arrow_y = botY + 0.25 * line_space;
          text_y = topY - line_space;
        }
        break;
      case Stroke.Type.ARPEGGIO_DIRECTIONLESS:
        topY += 0.5 * line_space;
        botY += line_space; // * 0.5 can lead to slight underlap instead of overlap sometimes
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidType', `The stroke type ${this.type} does not exist`);
    }

    // Draw the stroke
    if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {
      this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);
    } else {
      if (this.note instanceof _stavenote__WEBPACK_IMPORTED_MODULE_2__.StaveNote) {
        for (let i = topY; i <= botY; i += line_space) {
          _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(
            this.context,
            x + this.x_shift - 4,
            i,
            this.render_options.font_scale,
            'va3'
          );
        }
      } else {
        let i;
        for (i = topY; i <= botY; i += 10) {
          _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(
            this.context,
            x + this.x_shift - 4,
            i,
            this.render_options.font_scale,
            'va3'
          );
        }
        if (this.type === Stroke.Type.RASQUEDO_DOWN) {
          text_y = i + 0.25 * line_space;
        }
      }
    }

    if (this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {
      return; // skip drawing arrow heads or text
    }

    // Draw the arrow head
    _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph.renderGlyph(
      this.context,
      x + this.x_shift + arrow_shift_x,
      arrow_y,
      this.render_options.font_scale,
      arrow
    );

    // Draw the rasquedo "R"
    if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {
      this.context.save();
      this.context.setFont(this.font.family, this.font.size, this.font.weight);
      this.context.fillText('R', x + text_shift_x, text_y);
      this.context.restore();
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/svgcontext.js":
/*!************************************************!*\
  !*** ./node_modules/vexflow/src/svgcontext.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SVGContext: () => (/* binding */ SVGContext)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// @author Gregory Ristow (2015)



const attrNamesToIgnoreMap = {
  path: {
    x: true,
    y: true,
    width: true,
    height: true,
  },
  rect: {
  },
  text: {
    width: true,
    height: true,
  },
};

{
  const fontAttrNamesToIgnore = {
    'font-family': true,
    'font-weight': true,
    'font-style': true,
    'font-size': true,
  };

  _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attrNamesToIgnoreMap.rect, fontAttrNamesToIgnore);
  _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attrNamesToIgnoreMap.path, fontAttrNamesToIgnore);
}

class SVGContext {
  constructor(element) {
    // element is the parent DOM object
    this.element = element;
    // Create the SVG in the SVG namespace:
    this.svgNS = 'http://www.w3.org/2000/svg';
    const svg = this.create('svg');
    // Add it to the canvas:
    this.element.appendChild(svg);

    // Point to it:
    this.svg = svg;
    this.groups = [this.svg]; // Create the group stack
    this.parent = this.svg;

    this.path = '';
    this.pen = { x: NaN, y: NaN };
    this.lineWidth = 1.0;
    this.state = {
      scale: { x: 1, y: 1 },
      'font-family': 'Arial',
      'font-size': '8pt',
      'font-weight': 'normal',
    };

    this.attributes = {
      'stroke-width': 0.3,
      'fill': 'black',
      'stroke': 'black',
      'stroke-dasharray': 'none',
      'font-family': 'Arial',
      'font-size': '10pt',
      'font-weight': 'normal',
      'font-style': 'normal',
    };

    this.background_attributes = {
      'stroke-width': 0,
      'fill': 'white',
      'stroke': 'white',
      'stroke-dasharray': 'none',
      'font-family': 'Arial',
      'font-size': '10pt',
      'font-weight': 'normal',
      'font-style': 'normal',
    };

    this.shadow_attributes = {
      width: 0,
      color: 'black',
    };

    this.state_stack = [];

    // Test for Internet Explorer
    this.iePolyfill();
  }

  create(svgElementType) {
    return document.createElementNS(this.svgNS, svgElementType);
  }

  // Allow grouping elements in containers for interactivity.
  openGroup(cls, id, attrs) {
    const group = this.create('g');
    this.groups.push(group);
    this.parent.appendChild(group);
    this.parent = group;
    if (cls) group.setAttribute('class', _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Prefix(cls));
    if (id) group.setAttribute('id', _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Prefix(id));

    if (attrs && attrs.pointerBBox) {
      group.setAttribute('pointer-events', 'bounding-box');
    }
    return group;
  }

  closeGroup() {
    this.groups.pop();
    this.parent = this.groups[this.groups.length - 1];
  }

  add(elem) {
    this.parent.appendChild(elem);
  }

  // Tests if the browser is Internet Explorer; if it is,
  // we do some tricks to improve text layout.  See the
  // note at ieMeasureTextFix() for details.
  iePolyfill() {
    if (typeof (navigator) !== 'undefined') {
      this.ie = (
        /MSIE 9/i.test(navigator.userAgent) ||
        /MSIE 10/i.test(navigator.userAgent) ||
        /rv:11\.0/i.test(navigator.userAgent) ||
        /Trident/i.test(navigator.userAgent)
      );
    }
  }

  // ### Styling & State Methods:

  setFont(family, size, weight) {
    // Unlike canvas, in SVG italic is handled by font-style,
    // not weight. So: we search the weight argument and
    // apply bold and italic to weight and style respectively.
    let bold = false;
    let italic = false;
    let style = 'normal';
    // Weight might also be a number (200, 400, etc...) so we
    // test its type to be sure we have access to String methods.
    if (typeof weight === 'string') {
      // look for "italic" in the weight:
      if (weight.indexOf('italic') !== -1) {
        weight = weight.replace(/italic/g, '');
        italic = true;
      }
      // look for "bold" in weight
      if (weight.indexOf('bold') !== -1) {
        weight = weight.replace(/bold/g, '');
        bold = true;
      }
      // remove any remaining spaces
      weight = weight.replace(/ /g, '');
    }
    weight = bold ? 'bold' : weight;
    weight = (typeof weight === 'undefined' || weight === '') ? 'normal' : weight;

    style = italic ? 'italic' : style;

    const fontAttributes = {
      'font-family': family,
      'font-size': size + 'pt',
      'font-weight': weight,
      'font-style': style,
    };

    // Store the font size so that if the browser is Internet
    // Explorer we can fix its calculations of text width.
    this.fontSize = Number(size);

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.attributes, fontAttributes);
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.state, fontAttributes);

    return this;
  }

  setRawFont(font) {
    font = font.trim();
    // Assumes size first, splits on space -- which is presently
    // how all existing modules are calling this.
    const fontArray = font.split(' ');

    this.attributes['font-family'] = fontArray[1];
    this.state['font-family'] = fontArray[1];

    this.attributes['font-size'] = fontArray[0];
    this.state['font-size'] = fontArray[0];

    // Saves fontSize for IE polyfill
    this.fontSize = Number(fontArray[0].match(/\d+/));
    return this;
  }

  setFillStyle(style) {
    this.attributes.fill = style;
    return this;
  }

  setBackgroundFillStyle(style) {
    this.background_attributes.fill = style;
    this.background_attributes.stroke = style;
    return this;
  }

  setStrokeStyle(style) {
    this.attributes.stroke = style;
    return this;
  }

  setShadowColor(style) {
    this.shadow_attributes.color = style;
    return this;
  }

  setShadowBlur(blur) {
    this.shadow_attributes.width = blur;
    return this;
  }

  setLineWidth(width) {
    this.attributes['stroke-width'] = width;
    this.lineWidth = width;
  }

  // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]
  setLineDash(lineDash) {
    if (Object.prototype.toString.call(lineDash) === '[object Array]') {
      lineDash = lineDash.join(', ');
      this.attributes['stroke-dasharray'] = lineDash;
      return this;
    } else {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');
    }
  }

  setLineCap(lineCap) {
    this.attributes['stroke-linecap'] = lineCap;
    return this;
  }

  // ### Sizing & Scaling Methods:

  // TODO (GCR): See note at scale() -- seperate our internal
  // conception of pixel-based width/height from the style.width
  // and style.height properties eventually to allow users to
  // apply responsive sizing attributes to the SVG.
  resize(width, height) {
    this.width = width;
    this.height = height;
    this.element.style.width = width;
    const attributes = {
      width,
      height,
    };
    this.applyAttributes(this.svg, attributes);
    this.scale(this.state.scale.x, this.state.scale.y);
    return this;
  }

  scale(x, y) {
    // uses viewBox to scale
    // TODO (GCR): we may at some point want to distinguish the
    // style.width / style.height properties that are applied to
    // the SVG object from our internal conception of the SVG
    // width/height.  This would allow us to create automatically
    // scaling SVG's that filled their containers, for instance.
    //
    // As this isn't implemented in Canvas or Raphael contexts,
    // I've left as is for now, but in using the viewBox to
    // handle internal scaling, am trying to make it possible
    // for us to eventually move in that direction.

    this.state.scale = { x, y };
    const visibleWidth = this.width / x;
    const visibleHeight = this.height / y;
    this.setViewBox(0, 0, visibleWidth, visibleHeight);

    return this;
  }

  setViewBox(...args) {
    // Override for "x y w h" style:
    if (args.length === 1) {
      const [viewBox] = args;
      this.svg.setAttribute('viewBox', viewBox);
    } else {
      const [xMin, yMin, width, height] = args;
      const viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;
      this.svg.setAttribute('viewBox', viewBoxString);
    }
  }

  // ### Drawing helper methods:

  applyAttributes(element, attributes) {
    const attrNamesToIgnore = attrNamesToIgnoreMap[element.nodeName];
    Object
      .keys(attributes)
      .forEach(propertyName => {
        if (attrNamesToIgnore && attrNamesToIgnore[propertyName]) {
          return;
        }
        element.setAttributeNS(null, propertyName, attributes[propertyName]);
      });

    return element;
  }

  // ### Shape & Path Methods:

  clear() {
    // Clear the SVG by removing all inner children.

    // (This approach is usually slightly more efficient
    // than removing the old SVG & adding a new one to
    // the container element, since it does not cause the
    // container to resize twice.  Also, the resize
    // triggered by removing the entire SVG can trigger
    // a touchcancel event when the element resizes away
    // from a touch point.)

    while (this.svg.lastChild) {
      this.svg.removeChild(this.svg.lastChild);
    }

    // Replace the viewbox attribute we just removed:
    this.scale(this.state.scale.x, this.state.scale.y);
  }

  // ## Rectangles:

  rect(x, y, width, height, attributes) {
    // Avoid invalid negative height attribs by
    // flipping the rectangle on its head:
    if (height < 0) {
      y += height;
      height *= -1;
    }

    // Create the rect & style it:
    const rectangle = this.create('rect');
    if (typeof attributes === 'undefined') {
      attributes = {
        fill: 'none',
        'stroke-width': this.lineWidth,
        stroke: this.attributes.stroke, // VexFlowPatch: fix hardcoded 'black' instead of attributes.stroke (ctx strokeStyle)
      };
    }

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attributes, {
      x,
      y,
      width,
      height,
    });

    this.applyAttributes(rectangle, attributes);

    this.add(rectangle);
    return this;
  }

  fillRect(x, y, width, height) {
    if (height < 0) {
      y += height;
      height *= -1;
    }

    this.rect(x, y, width, height, this.attributes);
    return this;
  }

  clearRect(x, y, width, height) {
    // TODO(GCR): Improve implementation of this...
    // Currently it draws a box of the background color, rather
    // than creating alpha through lower z-levels.
    //
    // See the implementation of this in SVGKit:
    // http://sourceforge.net/projects/svgkit/
    // as a starting point.
    //
    // Adding a large number of transform paths (as we would
    // have to do) could be a real performance hit.  Since
    // tabNote seems to be the only module that makes use of this
    // it may be worth creating a seperate tabStave that would
    // draw lines around locations of tablature fingering.
    //

    this.rect(x, y, width, height, this.background_attributes);
    return this;
  }

  // ## Paths:

  beginPath() {
    this.path = '';
    this.pen.x = NaN;
    this.pen.y = NaN;

    return this;
  }

  moveTo(x, y) {
    this.path += 'M' + x + ' ' + y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  lineTo(x, y) {
    this.path += 'L' + x + ' ' + y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  bezierCurveTo(x1, y1, x2, y2, x, y) {
    this.path += 'C' +
      x1 + ' ' +
      y1 + ',' +
      x2 + ' ' +
      y2 + ',' +
      x + ' ' +
      y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  quadraticCurveTo(x1, y1, x, y) {
    this.path += 'Q' +
      x1 + ' ' +
      y1 + ',' +
      x + ' ' +
      y;
    this.pen.x = x;
    this.pen.y = y;
    return this;
  }

  // This is an attempt (hack) to simulate the HTML5 canvas
  // arc method.
  arc(x, y, radius, startAngle, endAngle, antiClockwise) {
    function normalizeAngle(angle) {
      while (angle < 0) {
        angle += Math.PI * 2;
      }

      while (angle > Math.PI * 2) {
        angle -= Math.PI * 2;
      }
      return angle;
    }

    startAngle = normalizeAngle(startAngle);
    endAngle = normalizeAngle(endAngle);

    if (startAngle > endAngle) {
      const tmp = startAngle;
      startAngle = endAngle;
      endAngle = tmp;
      antiClockwise = !antiClockwise;
    }

    const delta = endAngle - startAngle;

    if (delta > Math.PI) {
      this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);
      this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);
    } else {
      this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);
    }
    return this;
  }

  arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {
    const x1 = x + radius * Math.cos(startAngle);
    const y1 = y + radius * Math.sin(startAngle);

    const x2 = x + radius * Math.cos(endAngle);
    const y2 = y + radius * Math.sin(endAngle);

    let largeArcFlag = 0;
    let sweepFlag = 0;
    if (antiClockwise) {
      sweepFlag = 1;
      if (endAngle - startAngle < Math.PI) {
        largeArcFlag = 1;
      }
    } else if (endAngle - startAngle > Math.PI) {
      largeArcFlag = 1;
    }

    this.path += 'M' + x1 + ' ' + y1 + ' A' +
      radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' +
      x2 + ' ' + y2;
    if (!isNaN(this.pen.x) && !isNaN(this.pen.y)) {
      this.peth += 'M' + this.pen.x + ' ' + this.pen.y;
    }
  }

  closePath() {
    this.path += 'Z';

    return this;
  }

  // Adapted from the source for Raphael's Element.glow
  glow() {
    // Calculate the width & paths of the glow:
    if (this.shadow_attributes.width > 0) {
      const sa = this.shadow_attributes;
      const num_paths = sa.width / 2;
      // Stroke at varying widths to create effect of gaussian blur:
      for (let i = 1; i <= num_paths; i++) {
        const attributes = {
          stroke: sa.color,
          'stroke-linejoin': 'round',
          'stroke-linecap': 'round',
          'stroke-width': +((sa.width * 0.4) / num_paths * i).toFixed(3),
          opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),
        };

        const path = this.create('path');
        attributes.d = this.path;
        this.applyAttributes(path, attributes);
        this.add(path);
      }
    }
    return this;
  }

  fill(attributes) {
    // If our current path is set to glow, make it glow
    this.glow();

    const path = this.create('path');
    let newAttributes = attributes;
    if (typeof attributes === 'undefined') {
        attributes = {};
        _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attributes, this.attributes);
        attributes.stroke = 'none';
        newAttributes = attributes;
    } else {
      newAttributes = attributes;
      _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(newAttributes, this.attributes); // this overrides attributes either way
      if (attributes.class) {
        newAttributes.class = attributes.class;
      }
      if (attributes.id) {
        newAttributes.id = attributes.id;
      }
    }
    
    attributes.d = this.path;
    //attributes.class = "testbeam";
    
    this.applyAttributes(path, attributes);
    this.add(path);
    return this;
  }

  stroke(extraAttributes = undefined) {
    // If our current path is set to glow, make it glow.
    this.glow();

    const path = this.create('path');
    const attributes = {};
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attributes, this.attributes);
    if (extraAttributes) {
        _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attributes, extraAttributes);
    }
    attributes.fill = 'none';
    attributes['stroke-width'] = this.lineWidth;
    attributes.d = this.path;

    this.applyAttributes(path, attributes);
    this.add(path);
    return this;
  }

  // ## Text Methods:
  measureText(text) {
    const txt = this.create('text');
    if (typeof (txt.getBBox) !== 'function') {
      return { x: 0, y: 0, width: 0, height: 0 };
    }

    txt.textContent = text;
    this.applyAttributes(txt, this.attributes);

    // Temporarily add it to the document for measurement.
    this.svg.appendChild(txt);

    let bbox = txt.getBBox();
    if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {
      bbox = this.ieMeasureTextFix(bbox, text);
    }

    this.svg.removeChild(txt);
    return bbox;
  }

  ieMeasureTextFix(bbox) {
    // Internet Explorer over-pads text in italics,
    // resulting in giant width estimates for measureText.
    // To fix this, we use this formula, tested against
    // ie 11:
    // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96
    // And then subtract the overestimate from calculated width.

    const fontSize = Number(this.fontSize);
    const m = 1.196;
    const b = 1.9598;
    const widthCorrection = (m * fontSize) + b;
    const width = bbox.width - widthCorrection;
    const height = bbox.height - 1.5;

    // Get non-protected copy:
    const box = {
      x: bbox.x,
      y: bbox.y,
      width,
      height,
    };

    return box;
  }

  fillText(text, x, y) {
    if (!text || text.length <= 0) {
      return;
    }
    const attributes = {};
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(attributes, this.attributes);
    attributes.stroke = 'none';
    attributes.x = x;
    attributes.y = y;

    const txt = this.create('text');
    txt.textContent = text;
    this.applyAttributes(txt, attributes);
    this.add(txt);
  }

  save() {
    // TODO(mmuthanna): State needs to be deep-copied.
    this.state_stack.push({
      state: {
        'font-family': this.state['font-family'],
        'font-weight': this.state['font-weight'],
        'font-style': this.state['font-style'],
        'font-size': this.state['font-size'],
        scale: this.state.scale,
      },
      attributes: {
        'font-family': this.attributes['font-family'],
        'font-weight': this.attributes['font-weight'],
        'font-style': this.attributes['font-style'],
        'font-size': this.attributes['font-size'],
        fill: this.attributes.fill,
        stroke: this.attributes.stroke,
        'stroke-width': this.attributes['stroke-width'],
        'stroke-dasharray': this.attributes['stroke-dasharray'],
      },
      shadow_attributes: {
        width: this.shadow_attributes.width,
        color: this.shadow_attributes.color,
      },
      lineWidth: this.lineWidth,
    });
    return this;
  }

  restore() {
    // TODO(0xfe): State needs to be deep-restored.
    const state = this.state_stack.pop();
    this.state['font-family'] = state.state['font-family'];
    this.state['font-weight'] = state.state['font-weight'];
    this.state['font-style'] = state.state['font-style'];
    this.state['font-size'] = state.state['font-size'];
    this.state.scale = state.state.scale;

    this.attributes['font-family'] = state.attributes['font-family'];
    this.attributes['font-weight'] = state.attributes['font-weight'];
    this.attributes['font-style'] = state.attributes['font-style'];
    this.attributes['font-size'] = state.attributes['font-size'];

    this.attributes.fill = state.attributes.fill;
    this.attributes.stroke = state.attributes.stroke;
    this.attributes['stroke-width'] = state.attributes['stroke-width'];
    this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];

    this.shadow_attributes.width = state.shadow_attributes.width;
    this.shadow_attributes.color = state.shadow_attributes.color;

    this.lineWidth = state.lineWidth;
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/system.js":
/*!********************************************!*\
  !*** ./node_modules/vexflow/src/system.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   System: () => (/* binding */ System)
/* harmony export */ });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./factory */ "./node_modules/vexflow/src/factory.js");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatter */ "./node_modules/vexflow/src/formatter.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// This class implements a musical system, which is a collection of staves,
// each which can have one or more voices. All voices across all staves in
// the system are formatted together.






function setDefaults(params, defaults) {
  const default_options = defaults.options;
  params = Object.assign(defaults, params);
  params.options = Object.assign(default_options, params.options);
  return params;
}

class System extends _element__WEBPACK_IMPORTED_MODULE_0__.Element {
  constructor(params = {}) {
    super();
    this.setAttribute('type', 'System');
    this.setOptions(params);
    this.parts = [];
  }

  setOptions(options = {}) {
    this.options = setDefaults(options, {
      x: 10,
      y: 10,
      width: 500,
      connector: null,
      spaceBetweenStaves: 12, // stave spaces
      factory: null,
      debugFormatter: false,
      formatIterations: 0,   // number of formatter tuning steps
      options: {},
    });

    this.factory = this.options.factory || new _factory__WEBPACK_IMPORTED_MODULE_1__.Factory({ renderer: { el: null } });
  }

  setContext(context) {
    super.setContext(context);
    this.factory.setContext(context);
    return this;
  }

  addConnector(type = 'double') {
    this.connector = this.factory.StaveConnector({
      top_stave: this.parts[0].stave,
      bottom_stave: this.parts[this.parts.length - 1].stave,
      type,
    });
    return this.connector;
  }

  addStave(params) {
    params = setDefaults(params, {
      stave: null,
      voices: [],
      spaceAbove: 0, // stave spaces
      spaceBelow: 0, // stave spaces
      debugNoteMetrics: false,
      options: { left_bar: false },
    });

    if (!params.stave) {
      params.stave = this.factory.Stave({
        x: this.options.x,
        y: this.options.y,
        width: this.options.width,
        options: params.options,
      });
    }

    params.voices.forEach(voice =>
      voice
        .setContext(this.context)
        .setStave(params.stave)
        .getTickables()
        .forEach(tickable => tickable.setStave(params.stave))
    );

    this.parts.push(params);
    return params.stave;
  }

  format() {
    const formatter = new _formatter__WEBPACK_IMPORTED_MODULE_2__.Formatter();
    this.formatter = formatter;

    let y = this.options.y;
    let startX = 0;
    let allVoices = [];
    const debugNoteMetricsYs = [];

    // Join the voices for each stave.
    this.parts.forEach(part => {
      y = y + part.stave.space(part.spaceAbove);
      part.stave.setY(y);
      formatter.joinVoices(part.voices);
      y = y + part.stave.space(part.spaceBelow);
      y = y + part.stave.space(this.options.spaceBetweenStaves);
      if (part.debugNoteMetrics) {
        debugNoteMetricsYs.push({ y, voice: part.voices[0] });
        y += 15;
      }
      allVoices = allVoices.concat(part.voices);

      startX = Math.max(startX, part.stave.getNoteStartX());
    });

    // Update the start position of all staves.
    this.parts.forEach(part => part.stave.setNoteStartX(startX));
    const justifyWidth = this.options.width - (startX - this.options.x) - _note__WEBPACK_IMPORTED_MODULE_3__.Note.STAVEPADDING;
    formatter.format(allVoices, justifyWidth);

    for (let i = 0; i < this.options.formatIterations; i++) {
      formatter.tune();
    }

    this.startX = startX;
    this.debugNoteMetricsYs = debugNoteMetricsYs;
    this.lastY = y;
  }

  draw() {
    // Render debugging information, if requested.
    const ctx = this.checkContext();
    this.setRendered();

    if (this.options.debugFormatter) {
      _formatter__WEBPACK_IMPORTED_MODULE_2__.Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);
    }

    this.debugNoteMetricsYs.forEach(d => {
      d.voice.getTickables().forEach(note => _note__WEBPACK_IMPORTED_MODULE_3__.Note.plotMetrics(ctx, note, d.y));
    });
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tables.js":
/*!********************************************!*\
  !*** ./node_modules/vexflow/src/tables.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Flow: () => (/* binding */ Flow)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.

/* eslint-disable key-spacing */





const Flow = {
  STEM_WIDTH: 1.5,
  STEM_HEIGHT: 35,
  STAVE_LINE_THICKNESS: 1,
  RESOLUTION: 16384,
  DEFAULT_NOTATION_FONT_SCALE: 39,
  DEFAULT_TABLATURE_FONT_SCALE: 39,
  SLASH_NOTEHEAD_WIDTH: 15,

  // HACK:
  // Since text origins are positioned at the baseline, we must
  // compensate for the ascender of the text. Of course, 1 staff space is
  // a very poor approximation.
  //
  // This will be deprecated in the future. This is a temporary solution until
  // we have more robust text metrics.
  TEXT_HEIGHT_OFFSET_HACK: 1,

  /* Kerning (DEPRECATED) */
  IsKerned: true,
};


Flow.clefProperties = clef => {
  if (!clef) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);

  const props = Flow.clefProperties.values[clef];
  if (!props) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);

  return props;
};

Flow.clefProperties.values = {
  'treble': { line_shift: 0 },
  'bass': { line_shift: 6 },
  'tenor': { line_shift: 4 },
  'alto': { line_shift: 3 },
  'soprano': { line_shift: 1 },
  'percussion': { line_shift: 0 },
  'mezzo-soprano': { line_shift: 2 },
  'baritone-c': { line_shift: 5 },
  'baritone-f': { line_shift: 5 },
  'subbass': { line_shift: 7 },
  'french': { line_shift: -1 },
};

/*
  Take a note in the format "Key/Octave" (e.g., "C/5") and return properties.

  The last argument, params, is a struct the currently can contain one option,
  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).
*/
Flow.keyProperties = (key, clef, params) => {
  if (clef === undefined) {
    clef = 'treble';
  }

  const options = { octave_shift: 0 };

  if (typeof params === 'object') {
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(options, params);
  }

  const pieces = key.split('/');

  if (pieces.length < 2) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Key must have note + octave and an optional glyph: ${key}`);
  }

  const k = pieces[0].toUpperCase();
  const value = Flow.keyProperties.note_values[k];
  if (!value) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Invalid key name: ' + k);
  if (value.octave) pieces[1] = value.octave;

  let octave = parseInt(pieces[1], 10);

  // Octave_shift is the shift to compensate for clef 8va/8vb.
  octave += -1 * options.octave_shift;

  const base_index = (octave * 7) - (4 * 7);
  let line = (base_index + value.index) / 2;
  line += Flow.clefProperties(clef).line_shift;

  let stroke = 0;

  if (line <= 0 && (((line * 2) % 2) === 0)) stroke = 1;  // stroke up
  if (line >= 6 && (((line * 2) % 2) === 0)) stroke = -1; // stroke down

  // Integer value for note arithmetic.
  const int_value = typeof (value.int_val) !== 'undefined'
    ? (octave * 12) + value.int_val
    : null;

  /* Check if the user specified a glyph. */
  const code = value.code;
  const shift_right = value.shift_right;
  let extraProps = {};
  if (pieces.length > 2 && pieces[2]) {
    const glyph_name = pieces[2].toUpperCase();
    extraProps = Flow.keyProperties.customNoteHeads[glyph_name] || {};
  }

  return {
    key: k,
    octave,
    line,
    int_value,
    accidental: value.accidental,
    code,
    stroke,
    shift_right,
    displaced: false,
    ...extraProps,
  };
};

Flow.keyProperties.note_values = {
  'C': { index: 0, int_val: 0, accidental: null },
  'CN': { index: 0, int_val: 0, accidental: 'n' },
  'C#': { index: 0, int_val: 1, accidental: '#' },
  'C##': { index: 0, int_val: 2, accidental: '##' },
  'CB': { index: 0, int_val: -1, accidental: 'b' },
  'CBB': { index: 0, int_val: -2, accidental: 'bb' },
  'D': { index: 1, int_val: 2, accidental: null },
  'DN': { index: 1, int_val: 2, accidental: 'n' },
  'D#': { index: 1, int_val: 3, accidental: '#' },
  'D##': { index: 1, int_val: 4, accidental: '##' },
  'DB': { index: 1, int_val: 1, accidental: 'b' },
  'DBB': { index: 1, int_val: 0, accidental: 'bb' },
  'E': { index: 2, int_val: 4, accidental: null },
  'EN': { index: 2, int_val: 4, accidental: 'n' },
  'E#': { index: 2, int_val: 5, accidental: '#' },
  'E##': { index: 2, int_val: 6, accidental: '##' },
  'EB': { index: 2, int_val: 3, accidental: 'b' },
  'EBB': { index: 2, int_val: 2, accidental: 'bb' },
  'F': { index: 3, int_val: 5, accidental: null },
  'FN': { index: 3, int_val: 5, accidental: 'n' },
  'F#': { index: 3, int_val: 6, accidental: '#' },
  'F##': { index: 3, int_val: 7, accidental: '##' },
  'FB': { index: 3, int_val: 4, accidental: 'b' },
  'FBB': { index: 3, int_val: 3, accidental: 'bb' },
  'G': { index: 4, int_val: 7, accidental: null },
  'GN': { index: 4, int_val: 7, accidental: 'n' },
  'G#': { index: 4, int_val: 8, accidental: '#' },
  'G##': { index: 4, int_val: 9, accidental: '##' },
  'GB': { index: 4, int_val: 6, accidental: 'b' },
  'GBB': { index: 4, int_val: 5, accidental: 'bb' },
  'A': { index: 5, int_val: 9, accidental: null },
  'AN': { index: 5, int_val: 9, accidental: 'n' },
  'A#': { index: 5, int_val: 10, accidental: '#' },
  'A##': { index: 5, int_val: 11, accidental: '##' },
  'AB': { index: 5, int_val: 8, accidental: 'b' },
  'ABB': { index: 5, int_val: 7, accidental: 'bb' },
  'B': { index: 6, int_val: 11, accidental: null },
  'BN': { index: 6, int_val: 11, accidental: 'n' },
  'B#': { index: 6, int_val: 12, accidental: '#' },
  'B##': { index: 6, int_val: 13, accidental: '##' },
  'BB': { index: 6, int_val: 10, accidental: 'b' },
  'BBB': { index: 6, int_val: 9, accidental: 'bb' },
  'R': { index: 6, int_val: 9, rest: true }, // Rest
  'X': {
    index: 6,
    accidental: '',
    octave: 4,
    code: 'v3e',
    shift_right: 5.5,
  },
};

// Custom note heads
Flow.keyProperties.customNoteHeads = {
  /* Diamond */
  'D0': {
    code: 'v27',
    shift_right: 0, // deprecated for stem_{up,down}_x_offset
    stem_up_x_offset: 0,
    stem_down_x_offset: 0,
    stem_up_y_offset: -1,
    stem_down_y_offset: 0
  },
  'D1': { code: 'v2d', shift_right: -0.5 },
  'D2': { code: 'v22', shift_right: -0.5 },
  'D3': { code: 'v70', shift_right: -0.5 },

  /* Triangle */
  'T0': { code: 'v49', shift_right: -2, stem_up_y_offset: -4, stem_down_y_offset: 4 },
  'T1': { code: 'v93', shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 },
  'T2': { code: 'v40', shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 },
  'T3': { code: 'v7d', shift_right: 0.5, stem_up_y_offset: -4, stem_down_y_offset: 4 },

  /* Triangle inverted */
  'TI': { code: 'v11', shift_right: 0, stem_up_y_shift: 5, stem_down_y_shift: 5,
    stem_up_x_offset: 6, stem_down_x_offset: 4 },
  // VexFlowPatch: inverted triangle notehead added as custom glyph

  /* Cross */
  'X0': {
    code: 'v92',
    stem_up_x_offset: -2,
    stem_down_x_offset: 0,
    stem_up_y_offset: 4,
    stem_down_y_offset: 4
  },
  'X1': { code: 'v95', shift_right: -0.5, stem_up_y_offset: 4, stem_down_y_offset: 4 },
  'X2': { code: 'v3e', shift_right: 0.5, stem_up_y_offset: 4, stem_down_y_offset: 4 },
  'X3': {
    code: 'v3b',
    shift_right: 0,
    stem_up_x_offset: -1.2,
    stem_down_x_offset: 0,
    stem_up_y_offset: -1,
    stem_down_y_offset: 2
  },

  /* Square */
  'S1': { code: 'vd3', shift_right: 0 },
  'S2': { code: 'vd2', shift_right: 0 },

  /* Rectangle */
  'R1': { code: 'vd5', shift_right: 0 },
  'R2': { code: 'vd4', shift_right: 0 },
};

Flow.integerToNote = integer => {
  if (typeof (integer) === 'undefined') {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Undefined integer for integerToNote');
  }

  if (integer < -2) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `integerToNote requires integer > -2: ${integer}`);
  }

  const noteValue = Flow.integerToNote.table[integer];
  if (!noteValue) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `Unknown note value for integer: ${integer}`);
  }

  return noteValue;
};

Flow.integerToNote.table = {
  0: 'C',
  1: 'C#',
  2: 'D',
  3: 'D#',
  4: 'E',
  5: 'F',
  6: 'F#',
  7: 'G',
  8: 'G#',
  9: 'A',
  10: 'A#',
  11: 'B',
};

Flow.tabToGlyph = (fret, scale = 1.0) => {
  let glyph = null;
  let width = 0;
  let shift_y = 0;

  if (fret.toString().toUpperCase() === 'X') {
    const glyphMetrics = new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph('v7f', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();
    glyph = 'v7f';
    width = glyphMetrics.width;
    shift_y = -glyphMetrics.height / 2;
  } else {
    width = Flow.textWidth(fret.toString());
  }

  return {
    text: fret,
    code: glyph,
    getWidth: () => width * scale,
    shift_y,
  };
};

Flow.textWidth = text => 7 * text.toString().length;

Flow.articulationCodes = artic => Flow.articulationCodes.articulations[artic];

Flow.articulationCodes.articulations = {
  'a.': { code: 'v23', between_lines: true }, // Staccato
  'av': { code: 'v28', between_lines: true }, // Staccatissimo
  'a>': { code: 'v42', between_lines: true }, // Accent
  'a-': { code: 'v25', between_lines: true }, // Tenuto
  'a^': { code: 'va', between_lines: false }, // Marcato
  'a+': { code: 'v8b', between_lines: false }, // Left hand pizzicato
  'ao': { code: 'v94', between_lines: false }, // Snap pizzicato
  'ah': { code: 'vb9', between_lines: false }, // Natural harmonic or open note
  'a@a': { code: 'v43', between_lines: false }, // Fermata above staff
  'a@u': { code: 'v5b', between_lines: false }, // Fermata below staff
  'a|': { code: 'v75', between_lines: false }, // Bow up - up stroke
  'am': { code: 'v97', between_lines: false }, // Bow down - down stroke
  'a,': { code: 'vb3', between_lines: false }, // Choked
};

Flow.accidentalCodes = acc => Flow.accidentalCodes.accidentals[acc];

Flow.accidentalCodes.accidentals = {
  '#': { code: 'v18', parenRightPaddingAdjustment: -1 },
  '##': { code: 'v7f', parenRightPaddingAdjustment: -1 },
  'b': { code: 'v44', parenRightPaddingAdjustment: -2 },
  'bb': { code: 'v26', parenRightPaddingAdjustment: -2 },
  'n': { code: 'v4e', parenRightPaddingAdjustment: -1 },
  '{': { code: 'v9c', parenRightPaddingAdjustment: -1 },
  '}': { code: 'v84', parenRightPaddingAdjustment: -1 },
  'db': { code: 'v9e', parenRightPaddingAdjustment: -1 },
  'd': { code: 'vab', parenRightPaddingAdjustment: 0 },
  'bbs': { code: 'v90', parenRightPaddingAdjustment: -1 },
  '++': { code: 'v51', parenRightPaddingAdjustment: -1 },
  '+': { code: 'v78', parenRightPaddingAdjustment: -1 },
  '+-': { code: 'v8d', parenRightPaddingAdjustment: -1 },
  '++-': { code: 'v7a', parenRightPaddingAdjustment: -1 },
  'bs': { code: 'vb7', parenRightPaddingAdjustment: -1 },
  'bss': { code: 'v39', parenRightPaddingAdjustment: -1 },
  'o': { code: 'vd0', parenRightPaddingAdjustment: -1 },
  'k': { code: 'vd1', parenRightPaddingAdjustment: -1 },
  'ashs': { code: 'vd6', parenRightPaddingAdjustment: -1 },  // arabic sharp half sharp
  'afhf': { code: 'vd7', parenRightPaddingAdjustment: -1 },  // arabic flat half flat
};

Flow.accidentalColumnsTable = {
  1: {
    a: [1],
    b: [1],
  },
  2: {
    a: [1, 2],
  },
  3: {
    a: [1, 3, 2],
    b: [1, 2, 1],
    second_on_bottom: [1, 2, 3],
  },
  4: {
    a: [1, 3, 4, 2],
    b: [1, 2, 3, 1],
    spaced_out_tetrachord: [1, 2, 1, 2],
  },
  5: {
    a: [1, 3, 5, 4, 2],
    b: [1, 2, 4, 3, 1],
    spaced_out_pentachord: [1, 2, 3, 2, 1],
    very_spaced_out_pentachord: [1, 2, 1, 2, 1],
  },
  6: {
    a: [1, 3, 5, 6, 4, 2],
    b: [1, 2, 4, 5, 3, 1],
    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],
    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2],
  },
};

Flow.ornamentCodes = acc => Flow.ornamentCodes.ornaments[acc];

Flow.ornamentCodes.ornaments = {
  'mordent': { code: 'v1e' },
  'mordent_inverted': { code: 'v45' },
  'turn': { code: 'v72' },
  'turn_inverted': { code: 'v33' },
  'tr': { code: 'v1f' },
  'upprall': { code: 'v60' },
  'downprall': { code: 'vb4' },
  'prallup': { code: 'v6d' },
  'pralldown': { code: 'v2c' },
  'upmordent': { code: 'v29' },
  'downmordent': { code: 'v68' },
  'lineprall': { code: 'v20' },
  'prallprall': { code: 'v86' },
};

Flow.keySignature = spec => {
  const keySpec = Flow.keySignature.keySpecs[spec];

  if (!keySpec) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadKeySignature', `Bad key signature spec: '${spec}'`);
  }

  if (!keySpec.acc) {
    return [];
  }

  const notes = Flow.keySignature.accidentalList(keySpec.acc);

  const acc_list = [];
  for (let i = 0; i < keySpec.num; ++i) {
    const line = notes[i];
    acc_list.push({ type: keySpec.acc, line });
  }

  return acc_list;
};

Flow.keySignature.keySpecs = {
  'C': { acc: null, num: 0 },
  'Am': { acc: null, num: 0 },
  'F': { acc: 'b', num: 1 },
  'Dm': { acc: 'b', num: 1 },
  'Bb': { acc: 'b', num: 2 },
  'Gm': { acc: 'b', num: 2 },
  'Eb': { acc: 'b', num: 3 },
  'Cm': { acc: 'b', num: 3 },
  'Ab': { acc: 'b', num: 4 },
  'Fm': { acc: 'b', num: 4 },
  'Db': { acc: 'b', num: 5 },
  'Bbm': { acc: 'b', num: 5 },
  'Gb': { acc: 'b', num: 6 },
  'Ebm': { acc: 'b', num: 6 },
  'Cb': { acc: 'b', num: 7 },
  'Abm': { acc: 'b', num: 7 },
  'G': { acc: '#', num: 1 },
  'Em': { acc: '#', num: 1 },
  'D': { acc: '#', num: 2 },
  'Bm': { acc: '#', num: 2 },
  'A': { acc: '#', num: 3 },
  'F#m': { acc: '#', num: 3 },
  'E': { acc: '#', num: 4 },
  'C#m': { acc: '#', num: 4 },
  'B': { acc: '#', num: 5 },
  'G#m': { acc: '#', num: 5 },
  'F#': { acc: '#', num: 6 },
  'D#m': { acc: '#', num: 6 },
  'C#': { acc: '#', num: 7 },
  'A#m': { acc: '#', num: 7 },
};

Flow.unicode = {
  // Unicode accidentals
  'sharp': String.fromCharCode(parseInt('266F', 16)),
  'flat': String.fromCharCode(parseInt('266D', 16)),
  'natural': String.fromCharCode(parseInt('266E', 16)),
  // Major Chord
  'triangle': String.fromCharCode(parseInt('25B3', 16)),
  // half-diminished
  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),
  // Diminished
  'degrees': String.fromCharCode(parseInt('00B0', 16)),
  'circle': String.fromCharCode(parseInt('25CB', 16)),
};

Flow.keySignature.accidentalList = (acc) => {
  const patterns = {
    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],
    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],
  };

  return patterns[acc];
};

Flow.parseNoteDurationString = durationString => {
  if (typeof (durationString) !== 'string') {
    return null;
  }

  const regexp = /(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/;

  const result = regexp.exec(durationString);
  if (!result) {
    return null;
  }

  const duration = result[1];
  const dots = result[2].length;
  let type = result[3];

  if (type.length === 0) {
    type = 'n';
  }

  return {
    duration,
    dots,
    type,
  };
};

Flow.parseNoteStruct = noteStruct => {
  const duration = noteStruct.duration;

  // Preserve backwards-compatibility
  const durationStringData = Flow.parseNoteDurationString(duration);
  if (!durationStringData) {
    return null;
  }

  let ticks = Flow.durationToTicks(durationStringData.duration);
  if (ticks == null) {
    return null;
  }

  let type = noteStruct.type;
  const customTypes = [];

  if (type) {
    if (!Flow.getGlyphProps.validTypes[type]) {
      return null;
    }
  } else {
    type = durationStringData.type || 'n';

    // If we have keys, try and check if we've got a custom glyph
    if (noteStruct.keys !== undefined) {
      noteStruct.keys.forEach((k, i) => {
        const result = k.split('/');
        // We have a custom glyph specified after the note eg. /X2
        if (result && result.length === 3) {
          customTypes[i] = result[2];
        }
      });
    }
  }

  const dots = noteStruct.dots ? noteStruct.dots : durationStringData.dots;

  if (typeof (dots) !== 'number') {
    return null;
  }

  let currentTicks = ticks;

  for (let i = 0; i < dots; i++) {
    if (currentTicks <= 1) return null;

    currentTicks = currentTicks / 2;
    ticks += currentTicks;
  }

  return {
    duration: durationStringData.duration,
    type,
    customTypes,
    dots,
    ticks,
  };
};

// Used to convert duration aliases to the number based duration.
// If the input isn't an alias, simply return the input.
//
// example: 'q' -> '4', '8' -> '8'
Flow.sanitizeDuration = duration => {
  const alias = Flow.durationAliases[duration];
  if (alias !== undefined) {
    duration = alias;
  }

  if (Flow.durationToTicks.durations[duration] === undefined) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', `The provided duration is not valid: ${duration}`);
  }

  return duration;
};

// Convert the `duration` to an fraction
Flow.durationToFraction = duration => new _fraction__WEBPACK_IMPORTED_MODULE_1__.Fraction().parse(Flow.sanitizeDuration(duration));

// Convert the `duration` to an number
Flow.durationToNumber = duration => Flow.durationToFraction(duration).value();

// Convert the `duration` to total ticks
Flow.durationToTicks = duration => {
  duration = Flow.sanitizeDuration(duration);

  const ticks = Flow.durationToTicks.durations[duration];
  if (ticks === undefined) {
    return null;
  }

  return ticks;
};

Flow.durationToTicks.durations = {
  '1/2': Flow.RESOLUTION * 2,
  '1': Flow.RESOLUTION / 1,
  '2': Flow.RESOLUTION / 2,
  '4': Flow.RESOLUTION / 4,
  '8': Flow.RESOLUTION / 8,
  '16': Flow.RESOLUTION / 16,
  '32': Flow.RESOLUTION / 32,
  '64': Flow.RESOLUTION / 64,
  '128': Flow.RESOLUTION / 128,
  '256': Flow.RESOLUTION / 256,
};

Flow.durationAliases = {
  'w': '1',
  'h': '2',
  'q': '4',

  // This is the default duration used to render bars (BarNote). Bars no longer
  // consume ticks, so this should be a no-op.
  //
  // TODO(0xfe): This needs to be cleaned up.
  'b': '256',
};

// Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.
Flow.getGlyphProps = (duration, type) => {
  duration = Flow.sanitizeDuration(duration);

  const code = Flow.getGlyphProps.duration_codes[duration];
  if (code === undefined) {
    return null;
  }

  if (!type) {
    type = 'n';
  }

  let glyphTypeProperties = code.type[type];

  if (glyphTypeProperties === undefined) {
    // Try and get it from the custom list of note heads
    const customGlyphTypeProperties = Flow.keyProperties.customNoteHeads[type.toUpperCase()];

    // If not, then return with nothing
    if (customGlyphTypeProperties === undefined) {
      return null;
    }

    // Otherwise set it as the code_head value
    glyphTypeProperties = {
      code_head: customGlyphTypeProperties.code,
      ...customGlyphTypeProperties,
    };
  }

  return { ...code.common, ...glyphTypeProperties };
};

Flow.getGlyphProps.validTypes = {
  'n': { name: 'note' },
  'r': { name: 'rest' },
  'h': { name: 'harmonic' },
  'm': { name: 'muted' },
  's': { name: 'slash' },
};

Flow.getGlyphProps.duration_codes = {
  '1/2': {
    common: {
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'v53', scale).getMetrics().width;
      },
      stem: false,
      stem_offset: 0,
      flag: false,
      stem_up_extension: -Flow.STEM_HEIGHT,
      stem_down_extension: -Flow.STEM_HEIGHT,
      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,
      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Breve note
        code_head: 'v53',
      },
      'h': { // Breve note harmonic
        code_head: 'v59',
      },
      'm': { // Breve note muted -
        code_head: 'vf',
        stem_offset: 0,
      },
      'r': { // Breve rest
        code_head: 'v31',
        rest: true,
        position: 'B/5',
        dot_shiftY: 0.5,
      },
      's': { // Breve note slash -
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '1': {
    common: {
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'v1d', scale).getMetrics().width;
      },
      stem: false,
      stem_offset: 0,
      flag: false,
      stem_up_extension: -Flow.STEM_HEIGHT,
      stem_down_extension: -Flow.STEM_HEIGHT,
      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,
      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Whole note
        code_head: 'v1d',
      },
      'h': { // Whole note harmonic
        code_head: 'v46',
      },
      'm': { // Whole note muted
        code_head: 'v92',
        stem_offset: -3,
      },
      'r': { // Whole rest
        code_head: 'v5c',
        rest: true,
        position: 'D/5',
        dot_shiftY: 0.5,
      },
      's': { // Whole note slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '2': {
    common: {
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'v81', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: false,
      stem_up_extension: 0,
      stem_down_extension: 0,
      tabnote_stem_up_extension: 0,
      tabnote_stem_down_extension: 0,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Half note
        code_head: 'v81',
      },
      'h': { // Half note harmonic
        code_head: 'v2d',
      },
      'm': { // Half note muted
        code_head: 'v95',
        stem_offset: -3,
      },
      'r': { // Half rest
        code_head: 'vc',
        stem: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: -0.5,
      },
      's': { // Half note slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '4': {
    common: {
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'vb', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: false,
      stem_up_extension: 0,
      stem_down_extension: 0,
      tabnote_stem_up_extension: 0,
      tabnote_stem_down_extension: 0,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Quarter note
        code_head: 'vb',
      },
      'h': { // Quarter harmonic
        code_head: 'v22',
      },
      'm': { // Quarter muted
        code_head: 'v3e',
        stem_offset: -3,
      },
      'r': { // Quarter rest
        code_head: 'v7c',
        stem: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: -0.5,
        line_above: 1.5,
        line_below: 1.5,
      },
      's': { // Quarter slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '8': {
    common: {
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'vb', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: true,
      beam_count: 1,
      code_flag_upstem: 'v54',
      code_flag_downstem: 'v9a',
      stem_up_extension: 0,
      stem_down_extension: 0,
      tabnote_stem_up_extension: 0,
      tabnote_stem_down_extension: 0,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Eighth note
        code_head: 'vb',
      },
      'h': { // Eighth note harmonic
        code_head: 'v22',
      },
      'm': { // Eighth note muted
        code_head: 'v3e',
      },
      'r': { // Eighth rest
        code_head: 'va5',
        stem: false,
        flag: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: -0.5,
        line_above: 1.0,
        line_below: 1.0,
      },
      's': { // Eight slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '16': {
    common: {
      beam_count: 2,
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'vb', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: true,
      code_flag_upstem: 'v3f',
      code_flag_downstem: 'v8f',
      stem_up_extension: 0,
      stem_down_extension: 0,
      tabnote_stem_up_extension: 0,
      tabnote_stem_down_extension: 0,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Sixteenth note
        code_head: 'vb',
      },
      'h': { // Sixteenth note harmonic
        code_head: 'v22',
      },
      'm': { // Sixteenth note muted
        code_head: 'v3e',
      },
      'r': { // Sixteenth rest
        code_head: 'v3c',
        stem: false,
        flag: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: -0.5,
        line_above: 1.0,
        line_below: 2.0,
      },
      's': { // Sixteenth slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '32': {
    common: {
      beam_count: 3,
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'vb', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: true,
      code_flag_upstem: 'v47',
      code_flag_downstem: 'v2a',
      stem_up_extension: 9,
      stem_down_extension: 9,
      tabnote_stem_up_extension: 8,
      tabnote_stem_down_extension: 5,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Thirty-second note
        code_head: 'vb',
      },
      'h': { // Thirty-second harmonic
        code_head: 'v22',
      },
      'm': { // Thirty-second muted
        code_head: 'v3e',
      },
      'r': { // Thirty-second rest
        code_head: 'v55',
        stem: false,
        flag: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: -1.5,
        line_above: 2.0,
        line_below: 2.0,
      },
      's': { // Thirty-second slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '64': {
    common: {
      beam_count: 4,
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'vb', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: true,
      code_flag_upstem: 'va9',
      code_flag_downstem: 'v58',
      stem_up_extension: 13,
      stem_down_extension: 13,
      tabnote_stem_up_extension: 12,
      tabnote_stem_down_extension: 9,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': { // Sixty-fourth note
        code_head: 'vb',
      },
      'h': { // Sixty-fourth harmonic
        code_head: 'v22',
      },
      'm': { // Sixty-fourth muted
        code_head: 'v3e',
      },
      'r': { // Sixty-fourth rest
        code_head: 'v38',
        stem: false,
        flag: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: -1.5,
        line_above: 2.0,
        line_below: 3.0,
      },
      's': { // Sixty-fourth slash
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
  '128': {
    common: {
      beam_count: 5,
      getWidth(scale = Flow.DEFAULT_NOTATION_FONT_SCALE) {
        return new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(this.code_head || 'vb', scale).getMetrics().width;
      },
      stem: true,
      stem_offset: 0,
      flag: true,
      code_flag_upstem: 'v9b',
      code_flag_downstem: 'v30',
      stem_up_extension: 22,
      stem_down_extension: 22,
      tabnote_stem_up_extension: 21,
      tabnote_stem_down_extension: 18,
      dot_shiftY: 0,
      line_above: 0,
      line_below: 0,
    },
    type: {
      'n': {  // Hundred-twenty-eight note
        code_head: 'vb',
      },
      'h': { // Hundred-twenty-eight harmonic
        code_head: 'v22',
      },
      'm': { // Hundred-twenty-eight muted
        code_head: 'v3e',
      },
      'r': {  // Hundred-twenty-eight rest
        code_head: 'vaa',
        stem: false,
        flag: false,
        rest: true,
        position: 'B/4',
        dot_shiftY: 1.5,
        line_above: 3.0,
        line_below: 3.0,
      },
      's': { // Hundred-twenty-eight rest
        // Drawn with canvas primitives
        getWidth: () => Flow.SLASH_NOTEHEAD_WIDTH,
        position: 'B/4',
      },
    },
  },
};

// For future collaboration with the SMuFL Standard Music Font Layout

Flow.smufl = {};

// add references between smufl glyph names and code points.
Flow.smufl.to_code_points = {
  // staff brackets and dividers (e000-e00f)
  bracketTop: 'v1b',
  bracketBottom: 'v10',

  // barlines (e030-e03f)
  barlineTick: 'v6f',

  // repeats (e040-e04f)
  segno: 'v8c',
  coda: 'v4d',

  // clefs (e050-e07f)
  gClef: 'v83',
  cClef: 'vad',
  fClef: 'v79',
  unpitchedPercussionClef1: 'v59', // same as breveNoteheadHarmonic
  '6stringTabClef': 'v2f',

  // time signatures (e080-e09f)
  timeSig0: 'v0',
  timeSig1: 'v1',
  timeSig2: 'v2',
  timeSig3: 'v3',
  timeSig4: 'v4',
  timeSig5: 'v5',
  timeSig6: 'v6',
  timeSig7: 'v7',
  timeSig8: 'v8',
  timeSig9: 'v9',
  timeSigCommon: 'v41',
  timeSigCutCommon: 'vb6',

  // notehead (e0a0-e0ff)
  noteheadDoubleWhole: 'v53',
  noteheadWhole: 'v1d',
  noteheadHalf: 'v81',
  noteheadBlack: 'vb',
  noteheadXWhole: 'v92',
  noteheadXHalf: 'v95',
  noteheadXBlack: 'v3e',
  noteheadCircleX: 'v3b',
  noteheadTriangleUpWhole: 'v49',
  noteheadTriangleUpHalf: 'v93',
  noteheadTriangleUpBlack: 'v40',
  noteheadDiamondWhole: 'v46',
  noteheadDiamondHalf: 'v2d',
  noteheadDiamondBlack: 'v22',

  // individual notes (e1d0-e1ef)
  augmentationDot: 'v23',

  // temolos (e220-e23f)
  tremolo1: 'v74',

  // flags (e240-e25f)
  flag8thUp: 'v54',
  flag8thDown: 'v9a',
  flag16thUp: 'v3f',
  flag16thDown: 'v8f',
  flag32ndUp: 'v47',
  flag32ndDown: 'v2a',
  flag64thUp: 'va9',
  flag64thDown: 'v58',
  flag128thUp: 'v9b',
  flag128thDown: 'v30',

  // standard accidentals (e260-e26f)
  accidentalFlat: 'v44',
  accidentalNatural: 'v4e',
  accidentalSharp: 'v18',
  accidentalDoubleSharp: 'v7f',
  accidentalDoubleFlat: 'v26',
  accidentalParensLeft: 'v9c',
  accidentalParensRight: 'v84',

  // stein-zimmermann accidentals (24-edo) (e280-e28f)
  accidentalQuarterToneFlatStein: 'vab',
  accidentalThreeQuarterTonesFlatZimmermann: 'v9e',
  accidentalQuarterToneSharpStein: 'v78',
  accidentalThreeQuarterTonesSharpStein: 'v51',

  // arel-ezgi-uzdilek accidentals (e440-e44f)
  accidentalBuyukMucennebFlat: 'v39',
  accidentalBakiyeFlat: 'vb7',
  accidentalKomaSharp: 'v51', // same as accidentalQuarterToneSharpStein
  accidentalKucukMucennebSharp: 'v8d',

  // persian accidentals (e460-e46f)
  accidentalKoron: 'vd1',
  accidentalSori: 'vd0',

  // articulation (e4a0-e4bf)
  articAccentAbove: 'v42',
  articAccentBelow: 'v42', // same as above
  articTenutoAbove: 'v25',
  articTenutoBelow: 'v25', // same as above
  articStaccatoAbove: 'v23', // = dot
  articStaccatoBelow: 'v23', // = dot
  articStaccatissimoAbove: 'v28',
  articMarcatoAbove: 'va',

  // holds and pauses (e4c0-e4df)
  fermataAbove: 'v43',
  fermataBelow: 'v5b',
  breathMarkComma: 'v6c',
  breathMarkUpbow: 'v8a', // looks better than current upbow
  caesura: 'v34',
  caesuraCurved: 'v4b',

  // rests (e4e0-e4ff)
  restMaxima: 'v59', // not designed for this, but should do the trick
  // need restLonga -- used in multimeasure rests, like above
  restDoubleWhole: 'v31',
  restWhole: 'v5c',
  restHalf: 'vc',
  restQuarter: 'v7c',
  rest8th: 'va5',
  rest16th: 'v3c',
  rest32nd: 'v55',
  rest64th: 'v38',
  rest128th: 'vaa',

  // dynamics (e520-e54f)
  dynamicPiano: 'vbf',
  dynamicMezzo: 'v62',
  dynamicForte: 'vba',
  dynamicRinforzando: 'vba',
  dynamicSforzando: 'v4a',
  dynamicZ: 'v80',

  // common ornaments (e560-e56f)
  ornamentTrill: 'v1f',
  ornamentTurn: 'v72',
  ornamentTurnSlash: 'v33',
  ornamentMordent: 'v45',
  ornamentMordentInverted: 'v1e',
  ornamentTremblement: 'v86',

  // precomposed trills and mordents (e5b0-e5cf)
  ornamentPrecompAppoggTrill: 'v20',
  ornamentPrecompSlideTrillDAnglebert: 'v60',
  ornamentPrecompSlideTrillBach: 'v29',
  ornamentPrecompTrillSuffixDandrieu: 'v6d',
  ornamentPrecompDoubleCadenceUpperPrefix: 'vb4',
  ornamentPrecompDoubleCadenceUpperPrefixTurn: 'v68',
  ornamentPrecompTrillLowerSuffix: 'v2c',

  // string techniques (e610-e62f)
  stringsDownBow: 'v94',
  stringsUpBow: 'v75',
  stringsHarmonic: 'vb9',

  // plucked techniques (e630-e63f)
  pluckedSnapPizzicatoAbove: 'v94',
  pluckedLeftHandPizzicato: 'v8b', // plus sign

  // keyboard techniques (e650-e67f)
  keyboardPedalPed: 'v36',
  keyboardPedalUp: 'v5d',

  // percussion playing technique pictograms (e7f0-e80f)
  pictChokeCymbal: 'vb3',

  // multi-segment lines (eaa0-eb0f)
  wiggleArpeggiatoUp: 'va3', // rotated 90deg from reference implementation

  // arrows and arrowheads (eb60-eb8f)
  arrowheadBlackUp: 'vc3',
  arrowheadBlackDown: 'v52',

  // not found:
  // noteheadDiamondWhole: 'v27', stylistic alternate to v46?
  // noteheadDiamondBlack: 'v70', stylistic alternate to v22?
  // noteheadTriangleUpBlack: 'v7d', stylistic alternate to v40?
  // accidentalSlashedDoubleFlat: 'v90',
  // accidentalOneAndAHalfSharpTurned: 'v7a',
  // unused marcato alternative?  'v5a',
  // arpeggioBrushDown: 'v11',
};

// Some defaults
Flow.TIME4_4 = {
  num_beats: 4,
  beat_value: 4,
  resolution: Flow.RESOLUTION,
};



/***/ }),

/***/ "./node_modules/vexflow/src/tabnote.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/tabnote.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabNote: () => (/* binding */ TabNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
/* harmony import */ var _stemmablenote__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stemmablenote */ "./node_modules/vexflow/src/stemmablenote.js");
/* harmony import */ var _dot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dot */ "./node_modules/vexflow/src/dot.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// The file implements notes for Tablature notation. This consists of one or
// more fret positions, and can either be drawn with or without stems.
//
// See `tests/tabnote_tests.js` for usage examples









// Gets the unused strings grouped together if consecutive.
//
// Parameters:
// * num_lines - The number of lines
// * strings_used - An array of numbers representing which strings have fret positions
function getUnusedStringGroups(num_lines, strings_used) {
  const stem_through = [];
  let group = [];
  for (let string = 1; string <= num_lines; string++) {
    const is_used = strings_used.indexOf(string) > -1;

    if (!is_used) {
      group.push(string);
    } else {
      stem_through.push(group);
      group = [];
    }
  }
  if (group.length > 0) stem_through.push(group);

  return stem_through;
}

// Gets groups of points that outline the partial stem lines
// between fret positions
//
// Parameters:
// * stem_Y - The `y` coordinate the stem is located on
// * unused_strings - An array of groups of unused strings
// * stave - The stave to use for reference
// * stem_direction - The direction of the stem
function getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {
  const up_stem = stem_direction !== 1;
  const down_stem = stem_direction !== -1;

  const line_spacing = stave.getSpacingBetweenLines();
  const total_lines = stave.getNumLines();

  const stem_lines = [];

  unused_strings.forEach(strings => {
    const containsLastString = strings.indexOf(total_lines) > -1;
    const containsFirstString =  strings.indexOf(1) > -1;

    if ((up_stem && containsFirstString) ||
       (down_stem && containsLastString)) {
      return;
    }

    // If there's only one string in the group, push a duplicate value.
    // We do this because we need 2 strings to convert into upper/lower y
    // values.
    if (strings.length === 1) {
      strings.push(strings[0]);
    }

    const line_ys = [];
    // Iterate through each group string and store it's y position
    strings.forEach((string, index, strings) => {
      const isTopBound = string === 1;
      const isBottomBound = string === total_lines;

      // Get the y value for the appropriate staff line,
      // we adjust for a 0 index array, since string numbers are index 1
      let y = stave.getYForLine(string - 1);

      // Unless the string is the first or last, add padding to each side
      // of the line
      if (index === 0 && !isTopBound) {
        y -= line_spacing / 2 - 1;
      } else if (index === strings.length - 1 && !isBottomBound) {
        y += line_spacing / 2 - 1;
      }

      // Store the y value
      line_ys.push(y);

      // Store a subsequent y value connecting this group to the main
      // stem above/below the stave if it's the top/bottom string
      if (stem_direction === 1 && isTopBound) {
        line_ys.push(stem_y - 2);
      } else if (stem_direction === -1 && isBottomBound) {
        line_ys.push(stem_y + 2);
      }
    });

    // Add the sorted y values to the
    stem_lines.push(line_ys.sort((a, b) => a - b));
  });

  return stem_lines;
}

class TabNote extends _stemmablenote__WEBPACK_IMPORTED_MODULE_4__.StemmableNote {
  static get CATEGORY() { return 'tabnotes'; }

  // Initialize the TabNote with a `tab_struct` full of properties
  // and whether to `draw_stem` when rendering the note
  constructor(tab_struct, draw_stem) {
    super(tab_struct);
    this.setAttribute('type', 'TabNote');

    this.ghost = false; // Renders parenthesis around notes
    // Note properties
    //
    // The fret positions in the note. An array of `{ str: X, fret: X }`
    this.positions = tab_struct.positions;

    // Render Options
    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, {
      // font size for note heads and rests
      glyph_font_scale: _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.DEFAULT_TABLATURE_FONT_SCALE,
      // Flag to draw a stem
      draw_stem,
      // Flag to draw dot modifiers
      draw_dots: draw_stem,
      // Flag to extend the main stem through the stave and fret positions
      draw_stem_through_stave: false,
      // vertical shift from stave line
      y_shift: 0,
      // normal glyph scale
      scale: 1.0,
      // default tablature font
      font: '10pt Arial',
    });

    this.glyph = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.getGlyphProps(this.duration, this.noteType);

    if (!this.glyph) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
        'BadArguments',
        `Invalid note initialization data (No glyph found): ${JSON.stringify(tab_struct)}`
      );
    }

    this.buildStem();

    if (tab_struct.stem_direction) {
      this.setStemDirection(tab_struct.stem_direction);
    } else {
      this.setStemDirection(_stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP);
    }

    // Renders parenthesis around notes
    this.ghost = false;
    this.updateWidth();
  }

  reset() {
    if (this.stave) this.setStave(this.stave);
  }

  // The ModifierContext category
  getCategory() { return TabNote.CATEGORY; }

  // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.
  // Often used for indicating frets that are being bent to
  setGhost(ghost) {
    this.ghost = ghost;
    this.updateWidth();
    return this;
  }

  // Determine if the note has a stem
  hasStem() { return this.render_options.draw_stem; }

  // Get the default stem extension for the note
  getStemExtension() {
    const glyph = this.getGlyph();

    if (this.stem_extension_override != null) {
      return this.stem_extension_override;
    }

    if (glyph) {
      return this.getStemDirection() === 1
        ? glyph.tabnote_stem_up_extension
        : glyph.tabnote_stem_down_extension;
    }

    return 0;
  }

  // Add a dot to the note
  addDot() {
    const dot = new _dot__WEBPACK_IMPORTED_MODULE_5__.Dot();
    this.dots += 1;
    return this.addModifier(dot, 0);
  }

  // Calculate and store the width of the note
  updateWidth() {
    this.glyphs = [];
    this.width = 0;
    for (let i = 0; i < this.positions.length; ++i) {
      let fret = this.positions[i].fret;
      if (this.ghost) fret = '(' + fret + ')';
      const glyph = _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.tabToGlyph(fret, this.render_options.scale);
      this.glyphs.push(glyph);
      this.width = Math.max(glyph.getWidth(), this.width);
    }
    // For some reason we associate a notehead glyph with a TabNote, and this
    // glyph is used for certain width calculations. Of course, this is totally
    // incorrect since a notehead is a poor approximation for the dimensions of
    // a fret number which can have multiple digits. As a result, we must
    // overwrite getWidth() to return the correct width
    this.glyph.getWidth = () => this.width;
  }

  // Set the `stave` to the note
  setStave(stave) {
    super.setStave(stave);
    this.context = stave.context;

    // Calculate the fret number width based on font used
    let i;
    if (this.context) {
      const ctx = this.context;
      this.width = 0;
      for (i = 0; i < this.glyphs.length; ++i) {
        const glyph = this.glyphs[i];
        const text = '' + glyph.text;
        if (text.toUpperCase() !== 'X') {
          ctx.save();
          ctx.setRawFont(this.render_options.font);
          glyph.width = ctx.measureText(text).width;
          ctx.restore();
          glyph.getWidth = () => glyph.width;
        }
        this.width = Math.max(glyph.getWidth(), this.width);
      }
      this.glyph.getWidth = () => this.width;
    }

    // we subtract 1 from `line` because getYForLine expects a 0-based index,
    // while the position.str is a 1-based index
    const ys = this.positions.map(({ str: line }) => stave.getYForLine(line - 1));

    this.setYs(ys);

    if (this.stem) {
      this.stem.setYBounds(this.getStemY(), this.getStemY());
    }

    return this;
  }

  // Get the fret positions for the note
  getPositions() { return this.positions; }

  // Add self to the provided modifier context `mc`
  addToModifierContext(mc) {
    this.setModifierContext(mc);
    for (let i = 0; i < this.modifiers.length; ++i) {
      this.modifierContext.addModifier(this.modifiers[i]);
    }
    this.modifierContext.addModifier(this);
    this.preFormatted = false;
    return this;
  }

  // Get the `x` coordinate to the right of the note
  getTieRightX() {
    let tieStartX = this.getAbsoluteX();
    const note_glyph_width = this.glyph.getWidth();
    tieStartX += note_glyph_width / 2;
    tieStartX += (-this.width / 2) + this.width + 2;

    return tieStartX;
  }

  // Get the `x` coordinate to the left of the note
  getTieLeftX() {
    let tieEndX = this.getAbsoluteX();
    const note_glyph_width = this.glyph.getWidth();
    tieEndX += note_glyph_width / 2;
    tieEndX -= (this.width / 2) + 2;

    return tieEndX;
  }

  // Get the default `x` and `y` coordinates for a modifier at a specific
  // `position` at a fret position `index`
  getModifierStartXY(position, index) {
    if (!this.preFormatted) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
    }

    if (this.ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');
    }

    let x = 0;
    if (position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.LEFT) {
      x = -1 * 2;  // extra_left_px
    } else if (position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.RIGHT) {
      x = this.width + 2; // extra_right_px
    } else if (position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.BELOW || position === _modifier__WEBPACK_IMPORTED_MODULE_2__.Modifier.Position.ABOVE) {
      const note_glyph_width = this.glyph.getWidth();
      x = note_glyph_width / 2;
    }

    return {
      x: this.getAbsoluteX() + x,
      y: this.ys[index],
    };
  }

  // Get the default line for rest
  getLineForRest() { return this.positions[0].str; }

  // Pre-render formatting
  preFormat() {
    if (this.preFormatted) return;
    if (this.modifierContext) this.modifierContext.preFormat();
    // width is already set during init()
    this.setPreFormatted(true);
  }

  // Get the x position for the stem
  getStemX() { return this.getCenterGlyphX(); }

  // Get the y position for the stem
  getStemY() {
    const num_lines = this.stave.getNumLines();

    // The decimal staff line amounts provide optimal spacing between the
    // fret number and the stem
    const stemUpLine = -0.5;
    const stemDownLine = num_lines - 0.5;
    const stemStartLine = _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;

    return this.stave.getYForLine(stemStartLine);
  }

  // Get the stem extents for the tabnote
  getStemExtents() {
    return this.stem.getExtents();
  }

  // Draw the fal onto the context
  drawFlag() {
    const {
      beam, glyph, context, stem, stem_direction,
      render_options: { draw_stem, glyph_font_scale },
    } = this;

    const shouldDrawFlag = beam == null && draw_stem;

    // Now it's the flag's turn.
    if (glyph.flag && shouldDrawFlag) {
      const flag_x = this.getStemX() + 1;
      const flag_y = this.getStemY() - stem.getHeight();

      const flag_code = stem_direction === _stem__WEBPACK_IMPORTED_MODULE_3__.Stem.DOWN
        ? glyph.code_flag_downstem // Down stems have flags on the left.
        : glyph.code_flag_upstem;

      // Draw the Flag
      _glyph__WEBPACK_IMPORTED_MODULE_6__.Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code);
    }
  }

  // Render the modifiers onto the context
  drawModifiers() {
    // Draw the modifiers
    this.modifiers.forEach((modifier) => {
      // Only draw the dots if enabled
      if (modifier.getCategory() === 'dots' && !this.render_options.draw_dots) return;

      modifier.setContext(this.context);
      modifier.drawWithStyle();
    });
  }

  // Render the stem extension through the fret positions
  drawStemThrough() {
    const stem_x = this.getStemX();
    const stem_y = this.getStemY();
    const ctx = this.context;

    const stem_through = this.render_options.draw_stem_through_stave;
    const draw_stem = this.render_options.draw_stem;
    if (draw_stem && stem_through) {
      const total_lines = this.stave.getNumLines();
      const strings_used = this.positions.map(position => position.str);

      const unused_strings = getUnusedStringGroups(total_lines, strings_used);
      const stem_lines = getPartialStemLines(
        stem_y,
        unused_strings,
        this.getStave(),
        this.getStemDirection()
      );

      ctx.save();
      ctx.setLineWidth(_stem__WEBPACK_IMPORTED_MODULE_3__.Stem.WIDTH);
      stem_lines.forEach(bounds => {
        if (bounds.length === 0) return;

        ctx.beginPath();
        ctx.moveTo(stem_x, bounds[0]);
        ctx.lineTo(stem_x, bounds[bounds.length - 1]);
        ctx.stroke();
        ctx.closePath();
      });
      ctx.restore();
    }
  }

  // Render the fret positions onto the context
  drawPositions() {
    const ctx = this.context;
    const x = this.getAbsoluteX();
    const ys = this.ys;
    for (let i = 0; i < this.positions.length; ++i) {
      const y = ys[i] + this.render_options.y_shift;
      const glyph = this.glyphs[i];

      let currentGlyphWidth = glyph.getWidth();
      if (currentGlyphWidth === 0 && glyph.text && glyph.text.toString() && glyph.text.toString().length) {
        // above: glyph.text?.toString()?.length would be shorter, but fails appveyor build
        // VexflowPatch: workaround for generateImages script -> SVG export
        currentGlyphWidth = glyph.text.toString().length * 7;
      }
      // Center the fret text beneath the notation note head
      let note_glyph_width = this.glyph.getWidth();
      if (note_glyph_width === 0) {
        // VexflowPatch: correct positioning after VexflowPatch change above
        note_glyph_width = currentGlyphWidth;
      }
      const tab_x = x + (note_glyph_width / 2) - (currentGlyphWidth / 2);

      // FIXME: Magic numbers.
      ctx.clearRect(tab_x - 2, y - 3, currentGlyphWidth + 4, 6);

      if (glyph.code) {
        _glyph__WEBPACK_IMPORTED_MODULE_6__.Glyph.renderGlyph(ctx, tab_x, y,
          this.render_options.glyph_font_scale * this.render_options.scale,
          glyph.code);
      } else {
        ctx.save();
        ctx.setRawFont(this.render_options.font);
        const text = glyph.text.toString();
        ctx.fillText(text, tab_x, y + 5 * this.render_options.scale);
        ctx.restore();
      }
    }
  }

  // The main rendering function for the entire note
  draw() {
    this.checkContext();

    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't draw without a stave.");
    }

    if (this.ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoYValues', "Can't draw note without Y values.");
    }

    this.setRendered();
    const render_stem = this.beam == null && this.render_options.draw_stem;

    // VexFlowPatch: open group for tabnote (with id), so that the SVG DOM has a named element for tabnote, like stavenote
    this.context.openGroup('tabnote', this.getAttribute('id'), { pointerBBox: true });
    this.drawPositions();
    this.drawStemThrough();

    const stem_x = this.getStemX();

    this.stem.setNoteHeadXBounds(stem_x, stem_x);

    if (render_stem) {
      this.context.openGroup('stem', null, { pointerBBox: true });
      this.stem.setContext(this.context).draw();
      this.context.closeGroup();
    }

    this.drawFlag();
    this.drawModifiers();
    this.context.closeGroup();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tabslide.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/tabslide.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabSlide: () => (/* binding */ TabSlide)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tabtie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabtie */ "./node_modules/vexflow/src/tabtie.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class implements varies types of ties between contiguous notes. The
// ties include: regular ties, hammer ons, pull offs, and slides.




class TabSlide extends _tabtie__WEBPACK_IMPORTED_MODULE_1__.TabTie {
  static get SLIDE_UP() {
    return 1;
  }
  static get SLIDE_DOWN() {
    return -1;
  }

  static createSlideUp(notes) {
    return new TabSlide(notes, TabSlide.SLIDE_UP);
  }

  static createSlideDown(notes) {
    return new TabSlide(notes, TabSlide.SLIDE_DOWN);
  }

  constructor(notes, direction) {
    /**
     * Notes is a struct that has:
     *
     *  {
     *    first_note: Note,
     *    last_note: Note,
     *    first_indices: [n1, n2, n3],
     *    last_indices: [n1, n2, n3]
     *  }
     *
     **/
    super(notes, 'sl.');
    this.setAttribute('type', 'TabSlide');

    if (!direction) {
      const first_fret = notes.first_note.getPositions()[0].fret;
      const last_fret = notes.last_note.getPositions()[0].fret;

      direction = ((parseInt(first_fret, 10) > parseInt(last_fret, 10)) ?
        TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP);
    }

    this.slide_direction = direction;
    this.render_options.cp1 = 11;
    this.render_options.cp2 = 14;
    this.render_options.y_shift = 0.5;

    this.setFont({ font: 'Times', size: 10, style: 'bold italic' });
    this.setNotes(notes);
  }

  renderTie(params) {
    if (params.first_ys.length === 0 || params.last_ys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'No Y-values to render');
    }

    const ctx = this.context;
    const first_x_px = params.first_x_px;
    const first_ys = params.first_ys;
    const last_x_px = params.last_x_px;

    const direction = this.slide_direction;
    if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadSlide', 'Invalid slide direction');
    }

    for (let i = 0; i < this.first_indices.length; ++i) {
      const slide_y = first_ys[this.first_indices[i]] +
        this.render_options.y_shift;

      if (isNaN(slide_y)) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Bad indices for slide rendering.');
      }

      ctx.beginPath();
      ctx.moveTo(first_x_px, slide_y + (3 * direction));
      ctx.lineTo(last_x_px, slide_y - (3 * direction));
      ctx.closePath();
      ctx.stroke();
    }

    this.setRendered();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tabstave.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/tabstave.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabStave: () => (/* binding */ TabStave)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _stave__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stave */ "./node_modules/vexflow/src/stave.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.




class TabStave extends _stave__WEBPACK_IMPORTED_MODULE_1__.Stave {
  constructor(x, y, width, options) {
    const tab_options = {
      spacing_between_lines_px: 13,
      num_lines: 6,
      top_text_position: 1,
    };

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(tab_options, options);
    super(x, y, width, tab_options);
    this.setAttribute('type', 'TabStave');
  }

  getYForGlyphs() {
    return this.getYForLine(2.5);
  }

  // Deprecated
  addTabGlyph() {
    this.addClef('tab');
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tabtie.js":
/*!********************************************!*\
  !*** ./node_modules/vexflow/src/tabtie.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TabTie: () => (/* binding */ TabTie)
/* harmony export */ });
/* harmony import */ var _stavetie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stavetie */ "./node_modules/vexflow/src/stavetie.js");
// / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class implements varies types of ties between contiguous notes. The
// ties include: regular ties, hammer ons, pull offs, and slides.



class TabTie extends _stavetie__WEBPACK_IMPORTED_MODULE_0__.StaveTie {
  static createHammeron(notes) {
    return new TabTie(notes, 'H');
  }

  static createPulloff(notes) {
    return new TabTie(notes, 'P');
  }

  constructor(notes, text) {
    /**
     * Notes is a struct that has:
     *
     *  {
     *    first_note: Note,
     *    last_note: Note,
     *    first_indices: [n1, n2, n3],
     *    last_indices: [n1, n2, n3]
     *  }
     *
     **/
    super(notes, text);
    this.setAttribute('type', 'TabTie');

    this.render_options.cp1 = 9;
    this.render_options.cp2 = 11;
    this.render_options.y_shift = 3;

    this.setNotes(notes);
  }

  draw() {
    this.checkContext();
    this.setRendered();

    const first_note = this.first_note;
    const last_note = this.last_note;
    let first_x_px;
    let last_x_px;
    let first_ys;
    let last_ys;

    if (first_note) {
      first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
      first_ys = first_note.getYs();
    } else {
      first_x_px = last_note.getStave().getTieStartX();
      first_ys = last_note.getYs();
      this.first_indices = this.last_indices;
    }

    if (last_note) {
      last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
      last_ys = last_note.getYs();
    } else {
      last_x_px = first_note.getStave().getTieEndX();
      last_ys = first_note.getYs();
      this.last_indices = this.first_indices;
    }

    this.renderTie({
      first_x_px,
      last_x_px,
      first_ys,
      last_ys,
      direction: -1, // Tab tie's are always face up.
    });

    this.renderText(first_x_px, last_x_px);
    return true;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/textbracket.js":
/*!*************************************************!*\
  !*** ./node_modules/vexflow/src/textbracket.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextBracket: () => (/* binding */ TextBracket)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./renderer */ "./node_modules/vexflow/src/renderer.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Cyril Silverman
//
// ## Description
//
// This file implement `TextBrackets` which extend between two notes.
// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created
// using this class.






// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.
function L(...args) { if (TextBracket.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.TextBracket', args); }

class TextBracket extends _element__WEBPACK_IMPORTED_MODULE_2__.Element {
  // FIXME: Modifier.Position is singular while this is plural, make consistent
  static get Positions() {
    return {
      TOP: 1,
      BOTTOM: -1,
    };
  }

  static get PositionString() {
    return {
      top: TextBracket.Positions.TOP,
      bottom: TextBracket.Positions.BOTTOM,
    };
  }

  constructor({
    start,
    stop,
    text = '',
    superscript = '',
    position = TextBracket.Positions.TOP,
  }) {
    super();
    this.setAttribute('type', 'TextBracket');

    this.start = start;
    this.stop = stop;

    this.text = text;
    this.superscript = superscript;

    this.position = typeof position === 'string'
      ? TextBracket.PositionString[position]
      : position;

    this.line = 1;

    this.font = {
      family: 'Serif',
      size: 15,
      weight: 'italic',
    };

    this.render_options = {
      dashed: true,
      dash: [5],
      color: 'black',
      line_width: 1,
      show_bracket: true,
      bracket_height: 8,

      // In the BOTTOM position, the bracket line can extend
      // under the superscript.
      underline_superscript: true,
    };
  }

  // Apply the text backet styling to the provided `context`
  applyStyle(context) {
    // Apply style for the octave bracket
    context.setFont(this.font.family, this.font.size, this.font.weight);
    context.setStrokeStyle(this.render_options.color);
    context.setFillStyle(this.render_options.color);
    context.setLineWidth(this.render_options.line_width);

    return this;
  }

  // Set whether the bracket line should be `dashed`. You can also
  // optionally set the `dash` pattern by passing in an array of numbers
  setDashed(dashed, dash) {
    this.render_options.dashed = dashed;
    if (dash) this.render_options.dash = dash;
    return this;
  }

  // Set the font for the text
  setFont(font) {
    // We use Object.assign to support partial updates to the font object
    this.font = { ...this.font, ...font };
    return this;
  }
  // Set the rendering `context` for the octave bracket
  setLine(line) { this.line = line; return this; }

  // Draw the octave bracket on the rendering context
  draw() {
    const ctx = this.context;
    this.setRendered();

    let y = 0;
    switch (this.position) {
      case TextBracket.Positions.TOP:
        y = this.start.getStave().getYForTopText(this.line);
        break;
      case TextBracket.Positions.BOTTOM:
        y = this.start.getStave().getYForBottomText(this.line + _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.TEXT_HEIGHT_OFFSET_HACK);
        break;
      default:
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('InvalidPosition', `The position ${this.position} is invalid`);
    }

    // Get the preliminary start and stop coordintates for the bracket
    const start = { x: this.start.getAbsoluteX(), y };
    const stop = { x: this.stop.getAbsoluteX(), y };

    L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);

    const bracket_height = this.render_options.bracket_height * this.position;

    ctx.save();
    this.applyStyle(ctx);

    // Draw text
    ctx.fillText(this.text, start.x, start.y);

    // Get the width and height for the octave number
    const main_width = ctx.measureText(this.text).width;
    const main_height = ctx.measureText('M').width;

    // Calculate the y position for the super script
    const super_y = start.y - (main_height / 2.5);

    // Draw the superscript
    ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);
    ctx.fillText(this.superscript, start.x + main_width + 1, super_y);

    // Determine width and height of the superscript
    const superscript_width = ctx.measureText(this.superscript).width;
    const super_height = ctx.measureText('M').width;

    // Setup initial coordinates for the bracket line
    let start_x = start.x;
    let line_y = super_y;
    const end_x = stop.x + this.stop.getGlyph().getWidth();

    // Adjust x and y coordinates based on position
    if (this.position === TextBracket.Positions.TOP) {
      start_x += main_width + superscript_width + 5;
      line_y -= super_height / 2.7;
    } else if (this.position === TextBracket.Positions.BOTTOM) {
      line_y += super_height / 2.7;
      start_x += main_width + 2;

      if (!this.render_options.underline_superscript) {
        start_x += superscript_width;
      }
    }

    if (this.render_options.dashed) {
      // Main line
      _renderer__WEBPACK_IMPORTED_MODULE_3__.Renderer.drawDashedLine(
        ctx,
        start_x,
        line_y,
        end_x,
        line_y,
        this.render_options.dash
      );
      // Ending Bracket
      if (this.render_options.show_bracket) {
        _renderer__WEBPACK_IMPORTED_MODULE_3__.Renderer.drawDashedLine(
          ctx,
          end_x,
          line_y + (1 * this.position),
          end_x,
          line_y + bracket_height,
          this.render_options.dash
        );
      }
    } else {
      ctx.beginPath();
      ctx.moveTo(start_x, line_y);
      // Main line
      ctx.lineTo(end_x, line_y);
      if (this.render_options.show_bracket) {
        // Ending bracket
        ctx.lineTo(end_x, line_y + bracket_height);
      }
      ctx.stroke();
      ctx.closePath();
    }

    ctx.restore();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/textdynamics.js":
/*!**************************************************!*\
  !*** ./node_modules/vexflow/src/textdynamics.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextDynamics: () => (/* binding */ TextDynamics)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This file implements the `TextDynamics` which renders traditional
// text dynamics markings, **ie: p, f, sfz, rfz, ppp**
//
// You can render any dynamics string that contains a combination of
// the following letters:  P, M, F, Z, R, S





// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.
function L(...args) { if (TextDynamics.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.TextDynamics', args); }

class TextDynamics extends _note__WEBPACK_IMPORTED_MODULE_1__.Note {
  // The glyph data for each dynamics letter
  static get GLYPHS() {
    return {
      'f': {
        code: 'vba',
        width: 12,
      },
      'p': {
        code: 'vbf',
        width: 14,
      },
      'm': {
        code: 'v62',
        width: 17,
      },
      's': {
        code: 'v4a',
        width: 10,
      },
      'z': {
        code: 'v80',
        width: 12,
      },
      'r': {
        code: 'vb1',
        width: 12,
      },
    };
  }

  // A `TextDynamics` object inherits from `Note` so that it can be formatted
  // within a `Voice`.
  // Create the dynamics marking. `text_struct` is an object
  // that contains a `duration` property and a `sequence` of
  // letters that represents the letters to render
  constructor(text_struct) {
    super(text_struct);
    this.setAttribute('type', 'TextDynamics');

    this.sequence = text_struct.text.toLowerCase();
    this.line = text_struct.line || 0;
    this.glyphs = [];

    _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge(this.render_options, {
      glyph_font_size: 40,
    });

    L('New Dynamics Text: ', this.sequence);
  }

  // Set the Stave line on which the note should be placed
  setLine(line) {
    this.line = line;
    return this;
  }

  // Preformat the dynamics text
  preFormat() {
    let total_width = 0;
    // Iterate through each letter
    this.sequence.split('').forEach(letter => {
      // Get the glyph data for the letter
      const glyph_data = TextDynamics.GLYPHS[letter];
      if (!glyph_data) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('Invalid dynamics character: ' + letter);

      const size =  this.render_options.glyph_font_size;
      const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph(glyph_data.code, size);

      // Add the glyph
      this.glyphs.push(glyph);

      total_width += glyph_data.width;
    });

    // Store the width of the text
    this.setWidth(total_width);
    this.preFormatted = true;
    return this;
  }

  // Draw the dynamics text on the rendering context
  draw() {
    this.setRendered();
    const x = this.getAbsoluteX();
    const y = this.stave.getYForLine(this.line + (-3));

    L('Rendering Dynamics: ', this.sequence);

    let letter_x = x;
    this.glyphs.forEach((glyph, index) => {
      const current_letter = this.sequence[index];
      glyph.render(this.context, letter_x, y);
      letter_x += TextDynamics.GLYPHS[current_letter].width;
    });
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/textnote.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/textnote.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextNote: () => (/* binding */ TextNote)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// `TextNote` is a notation element that is positioned in time. Generally
// meant for objects that sit above/below the staff and inline with each other.
// Examples of this would be such as dynamics, lyrics, chord changes, etc.






class TextNote extends _note__WEBPACK_IMPORTED_MODULE_2__.Note {
  static get Justification() {
    return {
      LEFT: 1,
      CENTER: 2,
      RIGHT: 3,
    };
  }

  // Glyph data
  static get GLYPHS() {
    return {
      'segno': {
        code: 'v8c',
        point: 40,
        x_shift: 0,
        y_shift: -10,
        // width: 10 // optional
      },
      'tr': {
        code: 'v1f',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'mordent_upper': {
        code: 'v1e',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'mordent_lower': {
        code: 'v45',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'f': {
        code: 'vba',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'p': {
        code: 'vbf',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'm': {
        code: 'v62',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      's': {
        code: 'v4a',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'z': {
        code: 'v80',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
      'coda': {
        code: 'v4d',
        point: 40,
        x_shift: 0,
        y_shift: -8,
        // width: 10 // optional
      },
      'pedal_open': {
        code: 'v36',
        point: 40,
        x_shift: 0,
        y_shift: 0,
      },
      'pedal_close': {
        code: 'v5d',
        point: 40,
        x_shift: 0,
        y_shift: 3,
      },
      'caesura_straight': {
        code: 'v34',
        point: 40,
        x_shift: 0,
        y_shift: 2,
      },
      'caesura_curved': {
        code: 'v4b',
        point: 40,
        x_shift: 0,
        y_shift: 2,
      },
      'breath': {
        code: 'v6c',
        point: 40,
        x_shift: 0,
        y_shift: 0,
      },
      'tick': {
        code: 'v6f',
        point: 50,
        x_shift: 0,
        y_shift: 0,
      },
      'turn': {
        code: 'v72',
        point: 40,
        x_shift: 0,
        y_shift: 0,
      },
      'turn_inverted': {
        code: 'v33',
        point: 40,
        x_shift: 0,
        y_shift: 0,
      },

      // DEPRECATED - please use "mordent_upper" or "mordent_lower"
      'mordent': {
        code: 'v1e',
        point: 40,
        x_shift: 0,
        y_shift: 0,
        // width: 10 // optional
      },
    };
  }

  constructor(text_struct) {
    super(text_struct);
    this.setAttribute('type', 'TextNote');

    // Note properties
    this.text = text_struct.text;
    this.superscript = text_struct.superscript;
    this.subscript = text_struct.subscript;
    this.glyph_type = text_struct.glyph;
    this.glyph = null;
    this.font = {
      family: 'Arial',
      size: 12,
      weight: '',
    };

    // Set font
    if (text_struct.font) this.font = text_struct.font;

    // Determine and set initial note width. Note that the text width is
    // an approximation and isn't very accurate. The only way to accurately
    // measure the length of text is with `canvasmeasureText()`
    if (this.glyph_type) {
      const struct = TextNote.GLYPHS[this.glyph_type];
      if (!struct) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('Invalid glyph type: ' + this.glyph_type);

      this.glyph = new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph(struct.code, struct.point, { cache: false });

      if (struct.width) {
        this.setWidth(struct.width);
      } else {
        this.setWidth(this.glyph.getMetrics().width);
      }

      this.glyph_struct = struct;
    } else {
      this.setWidth(_tables__WEBPACK_IMPORTED_MODULE_1__.Flow.textWidth(this.text));
    }
    this.line = text_struct.line || 0;
    this.smooth = text_struct.smooth || false;
    this.ignore_ticks = text_struct.ignore_ticks || false;
    this.justification = TextNote.Justification.LEFT;
  }

  // Set the horizontal justification of the TextNote
  setJustification(just) {
    this.justification = just;
    return this;
  }

  // Set the Stave line on which the note should be placed
  setLine(line) {
    this.line = line;
    return this;
  }

  // Pre-render formatting
  preFormat() {
    this.checkContext();

    if (this.preFormatted) return;

    if (this.smooth) {
      this.setWidth(0);
    } else {
      if (this.glyph) {
        // Width already set.
      } else {
        this.setWidth(this.context.measureText(this.text).width);
      }
    }

    if (this.justification === TextNote.Justification.CENTER) {
      this.extraLeftPx = this.width / 2;
    } else if (this.justification === TextNote.Justification.RIGHT) {
      this.extraLeftPx = this.width;
    }

    this.setPreFormatted(true);
  }

  // Renders the TextNote
  draw() {
    this.checkContext();

    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't draw without a stave.");
    }

    this.setRendered();
    const ctx = this.context;
    let x = this.getAbsoluteX();
    if (this.justification === TextNote.Justification.CENTER) {
      x -= this.getWidth() / 2;
    } else if (this.justification === TextNote.Justification.RIGHT) {
      x -= this.getWidth();
    }

    let y;
    if (this.glyph) {
      y = this.stave.getYForLine(this.line + -3);
      this.glyph.render(
        this.context,
        x + this.glyph_struct.x_shift,
        y + this.glyph_struct.y_shift
      );
    } else {
      y = this.stave.getYForLine(this.line + -3);
      this.applyStyle(ctx);
      ctx.setFont(this.font.family, this.font.size, this.font.weight);
      ctx.fillText(this.text, x, y);

      // Width of the letter M gives us the approximate height of the text
      const height = ctx.measureText('M').width;
      // Get accurate width of text
      const width = ctx.measureText(this.text).width;

      // Write superscript
      if (this.superscript) {
        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);
        ctx.fillText(this.superscript, x + width + 2, y - (height / 2.2));
      }

      // Write subscript
      if (this.subscript) {
        ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);
        ctx.fillText(this.subscript, x + width + 2, y + (height / 2.2) - 1);
      }

      this.restoreStyle(ctx);
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tickable.js":
/*!**********************************************!*\
  !*** ./node_modules/vexflow/src/tickable.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tickable: () => (/* binding */ Tickable)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// The tickable interface. Tickables are things that sit on a score and
// have a duration, i.e., they occupy space in the musical rendering dimension.






class Tickable extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  constructor() {
    super();
    this.setAttribute('type', 'Tickable');

    // These properties represent the duration of
    // this tickable element.
    this.ticks = new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(0, 1);
    this.intrinsicTicks = 0;
    this.tickMultiplier = new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(1, 1);

    this.width = 0;
    this.x_shift = 0; // Shift from tick context
    this.voice = null;
    this.tickContext = null;
    this.modifierContext = null;
    this.modifiers = [];
    this.preFormatted = false;
    this.postFormatted = false;
    this.tuplet = null;
    this.tupletStack = [];

    this.align_center = false;
    this.center_x_shift = 0; // Shift from tick context if center aligned

    // This flag tells the formatter to ignore this tickable during
    // formatting and justification. It is set by tickables such as BarNote.
    this.ignore_ticks = false;

    // This is a space for an external formatting class or function to maintain
    // metrics.
    this.formatterMetrics = {
      // The freedom of a tickable is the distance it can move without colliding
      // with neighboring elements. A formatter can set these values during its
      // formatting pass, which a different formatter can then use to fine tune.
      freedom: { left: 0, right: 0 },

      // The simplified rational duration of this tick as a string. It can be
      // used as an index to a map or hashtable.
      duration: '',

      // The number of formatting iterations undergone.
      iterations: 0,

      // The space in pixels allocated by this formatter, along with the mean space
      // for tickables of this duration, and the deviation from the mean.
      space: {
        used: 0,
        mean: 0,
        deviation: 0,
      },
    };
  }

  reset() { return this; }
  getTicks() { return this.ticks; }
  shouldIgnoreTicks() { return this.ignore_ticks; }
  getWidth() { return this.width; }

  getFormatterMetrics() { return this.formatterMetrics; }

  setXShift(x) { this.x_shift = x; }
  getCenterXShift() {
    if (this.isCenterAligned()) {
      return this.center_x_shift;
    }

    return 0;
  }
  isCenterAligned() { return this.align_center; }
  setCenterAlignment(align_center) {
    this.align_center = align_center;
    return this;
  }

  // Every tickable must be associated with a voice. This allows formatters
  // and preFormatter to associate them with the right modifierContexts.
  getVoice() {
    if (!this.voice) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoVoice', 'Tickable has no voice.');
    return this.voice;
  }
  setVoice(voice) { this.voice = voice; }
  getTuplet() { return this.tuplet; }

  /*
   * resetTuplet
   * @param tuplet -- the specific tuplet to reset
   *   if this is not provided, all tuplets are reset.
   * @returns this
   *
   * Removes any prior tuplets from the tick calculation and
   * resets the intrinsic tick value to
   */
  resetTuplet(tuplet) {
    let noteCount;
    let notesOccupied;
    if (tuplet) {
      const i = this.tupletStack.indexOf(tuplet);
      if (i !== -1) {
        this.tupletStack.splice(i, 1);
        noteCount = tuplet.getNoteCount();
        notesOccupied = tuplet.getNotesOccupied();

        // Revert old multiplier by inverting numerator & denom.:
        this.applyTickMultiplier(noteCount, notesOccupied);
      }
      return this;
    }

    while (this.tupletStack.length) {
      tuplet = this.tupletStack.pop();
      noteCount = tuplet.getNoteCount();
      notesOccupied = tuplet.getNotesOccupied();

      // Revert old multiplier by inverting numerator & denom.:
      this.applyTickMultiplier(noteCount, notesOccupied);
    }
    return this;
  }

  setTuplet(tuplet) {
    // Attach to new tuplet

    if (tuplet) {
      this.tupletStack.push(tuplet);

      const noteCount = tuplet.getNoteCount();
      const notesOccupied = tuplet.getNotesOccupied();

      this.applyTickMultiplier(notesOccupied, noteCount);
    }

    this.tuplet = tuplet;

    return this;
  }

  /** optional, if tickable has modifiers **/
  addToModifierContext(mc) {
    this.modifierContext = mc;
    // Add modifiers to modifier context (if any)
    this.preFormatted = false;
  }

  /** optional, if tickable has modifiers **/
  addModifier(mod) {
    this.modifiers.push(mod);
    this.preFormatted = false;
    return this;
  }
  getModifiers() {
    return this.modifiers;
  }
  setTickContext(tc) {
    this.tickContext = tc;
    this.preFormatted = false;
  }
  preFormat() {
    if (this.preFormatted) return;

    this.width = 0;
    if (this.modifierContext) {
      this.modifierContext.preFormat();
      this.width += this.modifierContext.getWidth();
    }
  }
  postFormat() {
    if (this.postFormatted) return this;
    this.postFormatted = true;
    return this;
  }
  getIntrinsicTicks() {
    return this.intrinsicTicks;
  }
  setIntrinsicTicks(intrinsicTicks) {
    this.intrinsicTicks = intrinsicTicks;
    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
  }
  getTickMultiplier() {
    return this.tickMultiplier;
  }
  applyTickMultiplier(numerator, denominator) {
    this.tickMultiplier.multiply(numerator, denominator);
    this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
  }
  setDuration(duration) {
    const ticks = duration.numerator * (_tables__WEBPACK_IMPORTED_MODULE_2__.Flow.RESOLUTION / duration.denominator);
    this.ticks = this.tickMultiplier.clone().multiply(ticks);
    this.intrinsicTicks = this.ticks.value();
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tickcontext.js":
/*!*************************************************!*\
  !*** ./node_modules/vexflow/src/tickcontext.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TickContext: () => (/* binding */ TickContext)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tickable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tickable */ "./node_modules/vexflow/src/tickable.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// A formatter for abstract tickable objects, such as notes, chords,
// tabs, etc.





class TickContext extends _tickable__WEBPACK_IMPORTED_MODULE_1__.Tickable {
  static getNextContext(tContext) {
    const contexts = tContext.tContexts;
    const index = contexts.indexOf(tContext);

    return contexts[index + 1];
  }

  constructor() {
    super();
    this.setAttribute('type', 'TickContext');
    this.currentTick = new _fraction__WEBPACK_IMPORTED_MODULE_2__.Fraction(0, 1);
    this.maxTicks = new _fraction__WEBPACK_IMPORTED_MODULE_2__.Fraction(0, 1);
    this.minTicks = null;
    this.padding = 3;     // padding on each side (width += padding * 2)
    this.x = 0;
    this.xBase = 0;        // base x position without xOffset
    this.xOffset = 0;      // xBase and xOffset are an alternative way to describe x (x = xB + xO)
    this.tickables = [];   // Notes, tabs, chords, lyrics.
    this.notePx = 0;       // width of widest note in this context
    this.extraLeftPx = 0;  // Extra left pixels for modifers & displace notes
    this.extraRightPx = 0; // Extra right pixels for modifers & displace notes
    this.tContexts = [];   // Parent array of tick contexts
  }

  getX() { return this.x; }
  setX(x) { this.x = x; this.xBase = x; this.xOffset = 0; return this; }
  getXBase() { return this.xBase; } // use of xBase and xOffset is optional, avoids offset creep
  setXBase(xBase) { this.xBase = xBase; this.x = xBase + this.xOffset; }
  getXOffset() { return this.xOffset; }
  setXOffset(xOffset) { this.xOffset = xOffset; this.x = this.xBase + xOffset; }
  getWidth() { return this.width + (this.padding * 2); }
  setPadding(padding) { this.padding = padding; return this; }
  getMaxTicks() { return this.maxTicks; }
  getMinTicks() { return this.minTicks; }
  getTickables() { return this.tickables; }

  getCenterAlignedTickables() {
    return this.tickables.filter(tickable => tickable.isCenterAligned());
  }

  // Get widths context, note and left/right modifiers for formatting
  getMetrics() {
    const { width, notePx, extraLeftPx, extraRightPx } = this;
    return { width, notePx, extraLeftPx, extraRightPx };
  }

  getCurrentTick() { return this.currentTick; }
  setCurrentTick(tick) {
    this.currentTick = tick;
    this.preFormatted = false;
  }

  // ### DEPRECATED ###
  // Get left & right pixels used for modifiers. THIS METHOD IS DEPRECATED. Use
  // the getMetrics() method instead!
  getExtraPx() {
    let left_shift = 0;
    let right_shift = 0;
    let extraLeftPx = 0;
    let extraRightPx = 0;
    for (let i = 0; i < this.tickables.length; i++) {
      extraLeftPx = Math.max(this.tickables[i].extraLeftPx || 0, extraLeftPx);
      extraRightPx = Math.max(this.tickables[i].extraRightPx || 0, extraRightPx);
      const mContext = this.tickables[i].modifierContext;
      if (mContext && mContext != null) {
        left_shift = Math.max(left_shift, mContext.state.left_shift);
        right_shift = Math.max(right_shift, mContext.state.right_shift);
      }
    }
    return {
      left: left_shift,
      right: right_shift,
      extraLeft: extraLeftPx,
      extraRight: extraRightPx,
    };
  }

  addTickable(tickable) {
    if (!tickable) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'Invalid tickable added.');
    }

    if (!tickable.shouldIgnoreTicks()) {
      this.ignore_ticks = false;

      const ticks = tickable.getTicks();

      if (ticks.greaterThan(this.maxTicks)) {
        this.maxTicks = ticks.clone();
      }

      if (this.minTicks == null) {
        this.minTicks = ticks.clone();
      } else if (ticks.lessThan(this.minTicks)) {
        this.minTicks = ticks.clone();
      }
    }

    tickable.setTickContext(this);
    this.tickables.push(tickable);
    this.preFormatted = false;
    return this;
  }

  preFormat() {
    if (this.preFormatted) return this;

    for (let i = 0; i < this.tickables.length; ++i) {
      const tickable = this.tickables[i];
      tickable.preFormat();
      const metrics = tickable.getMetrics();

      // Maintain max extra pixels from all tickables in the context
      this.extraLeftPx = Math.max(this.extraLeftPx, metrics.extraLeftPx + metrics.modLeftPx);
      this.extraRightPx = Math.max(this.extraRightPx, metrics.extraRightPx + metrics.modRightPx);

      // Maintain the widest note for all tickables in the context
      this.notePx = Math.max(this.notePx, metrics.noteWidth);

      // Recalculate the tick context total width
      this.width = this.notePx + this.extraLeftPx + this.extraRightPx;
    }

    return this;
  }

  postFormat() {
    if (this.postFormatted) return this;
    this.postFormatted = true;
    return this;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/timesignature.js":
/*!***************************************************!*\
  !*** ./node_modules/vexflow/src/timesignature.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimeSignature: () => (/* binding */ TimeSignature)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _stavemodifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stavemodifier */ "./node_modules/vexflow/src/stavemodifier.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// Implements time signatures glyphs for staffs
// See tables.js for the internal time signatures
// representation





const assertIsValidFraction = (timeSpec) => {
  const numbers = timeSpec.split('/').filter(number => number !== '');

  if (numbers.length !== 2) {
    throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
      'BadTimeSignature',
      `Invalid time spec: ${timeSpec}. Must be in the form "<numerator>/<denominator>"`
    );
  }

  numbers.forEach(number => {
    if (isNaN(Number(number))) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain two valid numbers.`
      );
    }
  });
};

class TimeSignature extends _stavemodifier__WEBPACK_IMPORTED_MODULE_2__.StaveModifier {
  static get CATEGORY() { return 'timesignatures'; }

  static get glyphs() {
    return {
      'C': {
        code: 'v41',
        point: 40,
        line: 2,
      },
      'C|': {
        code: 'vb6',
        point: 40,
        line: 2,
      },
    };
  }

  constructor(timeSpec = null, customPadding = 15, validate_args = true) {
    super();
    this.setAttribute('type', 'TimeSignature');
    this.validate_args = validate_args;

    if (timeSpec === null) return;

    const padding = customPadding;

    this.point = 40;
    this.topLine = 2;
    this.bottomLine = 4;
    this.setPosition(_stavemodifier__WEBPACK_IMPORTED_MODULE_2__.StaveModifier.Position.BEGIN);
    this.setTimeSig(timeSpec);
    this.setWidth(this.timeSig.glyph.getMetrics().width);
    this.setPadding(padding);
  }

  getCategory() { return TimeSignature.CATEGORY; }

  parseTimeSpec(timeSpec) {
    if (timeSpec === 'C' || timeSpec === 'C|') {
      const { line, code, point } = TimeSignature.glyphs[timeSpec];
      return {
        line,
        num: false,
        glyph: new _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph(code, point),
      };
    }

    if (this.validate_args) {
      assertIsValidFraction(timeSpec);
    }

    const [topDigits, botDigits] = timeSpec
      .split('/')
      .map(number => number.split(''));

    return {
      num: true,
      glyph: this.makeTimeSignatureGlyph(topDigits, botDigits),
    };
  }

  makeTimeSignatureGlyph(topDigits, botDigits) {
    const glyph = new _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph('v0', this.point);
    glyph.topGlyphs = [];
    glyph.botGlyphs = [];

    let topWidth = 0;
    for (let i = 0; i < topDigits.length; ++i) {
      const num = topDigits[i];
      const topGlyph = new _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph('v' + num, this.point);

      glyph.topGlyphs.push(topGlyph);
      topWidth += topGlyph.getMetrics().width;
    }

    let botWidth = 0;
    for (let i = 0; i < botDigits.length; ++i) {
      const num = botDigits[i];
      const botGlyph = new _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph('v' + num, this.point);

      glyph.botGlyphs.push(botGlyph);
      botWidth += botGlyph.getMetrics().width;
    }

    const width = topWidth > botWidth ? topWidth : botWidth;
    const xMin = glyph.getMetrics().x_min;

    glyph.getMetrics = () => ({
      x_min: xMin,
      x_max: xMin + width,
      width,
    });

    const topStartX = (width - topWidth) / 2.0;
    const botStartX = (width - botWidth) / 2.0;

    const that = this;
    glyph.renderToStave = function renderToStave(x) {
      let start_x = x + topStartX;
      for (let i = 0; i < this.topGlyphs.length; ++i) {
        const glyph = this.topGlyphs[i];
        _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderOutline(
          this.context,
          glyph.metrics.outline,
          glyph.scale,
          start_x + glyph.x_shift,
          this.stave.getYForLine(that.topLine)
        );
        start_x += glyph.getMetrics().width;
      }

      start_x = x + botStartX;
      for (let i = 0; i < this.botGlyphs.length; ++i) {
        const glyph = this.botGlyphs[i];
        that.placeGlyphOnLine(glyph, this.stave, glyph.line);
        _glyph__WEBPACK_IMPORTED_MODULE_1__.Glyph.renderOutline(
          this.context,
          glyph.metrics.outline,
          glyph.scale,
          start_x + glyph.x_shift,
          this.stave.getYForLine(that.bottomLine)
        );
        start_x += glyph.getMetrics().width;
      }
    };

    return glyph;
  }

  getTimeSig() {
    return this.timeSig;
  }

  setTimeSig(timeSpec) {
    this.timeSig = this.parseTimeSpec(timeSpec);
    return this;
  }

  draw() {
    if (!this.x) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('TimeSignatureError', "Can't draw time signature without x.");
    }

    if (!this.stave) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('TimeSignatureError', "Can't draw time signature without stave.");
    }

    this.setRendered();
    this.timeSig.glyph.setStave(this.stave);
    this.timeSig.glyph.setContext(this.stave.context);
    this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);
    this.timeSig.glyph.renderToStave(this.x);
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/timesignote.js":
/*!*************************************************!*\
  !*** ./node_modules/vexflow/src/timesignote.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimeSigNote: () => (/* binding */ TimeSigNote)
/* harmony export */ });
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note */ "./node_modules/vexflow/src/note.js");
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timesignature */ "./node_modules/vexflow/src/timesignature.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author Taehoon Moon 2014




class TimeSigNote extends _note__WEBPACK_IMPORTED_MODULE_0__.Note {
  constructor(timeSpec, customPadding) {
    super({ duration: 'b' });
    this.setAttribute('type', 'TimeSigNote');

    const timeSignature = new _timesignature__WEBPACK_IMPORTED_MODULE_1__.TimeSignature(timeSpec, customPadding);
    this.timeSig = timeSignature.getTimeSig();
    this.setWidth(this.timeSig.glyph.getMetrics().width);

    // Note properties
    this.ignore_ticks = true;
  }

  getBoundingBox() {
    return super.getBoundingBox();
  }

  addToModifierContext() {
    /* overridden to ignore */
    return this;
  }

  preFormat() {
    this.setPreFormatted(true);
    return this;
  }

  draw() {
    this.stave.checkContext();
    this.setRendered();

    if (!this.timeSig.glyph.getContext()) {
      this.timeSig.glyph.setContext(this.context);
    }

    this.timeSig.glyph.setStave(this.stave);
    this.timeSig.glyph.setYShift(
      this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());
    this.timeSig.glyph.renderToStave(this.getAbsoluteX());
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tremolo.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/tremolo.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tremolo: () => (/* binding */ Tremolo)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _gracenote__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gracenote */ "./node_modules/vexflow/src/gracenote.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Mike Corrigan <corrigan@gmail.com>
//
// This class implements tremolo notation.






class Tremolo extends _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier {
  static get CATEGORY() { return 'tremolo'; }
  static get YOFFSETSTEMUP() { return -9; }
  static get YOFFSETSTEMDOWN() { return -21; }
  static get XOFFSETSTEMUP() { return 6; }
  static get XOFFSETSTEMDOWN() { return -2; }
  constructor(num) {
    super();
    this.setAttribute('type', 'Tremolo');

    this.num = num;
    this.note = null;
    this.index = null;
    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.CENTER;
    this.code = 'v74';

    this.y_spacing_scale = 1;
    this.extra_stroke_scale = 1;
    this.y_offset_for_beam = 5;
  }

  getCategory() { return Tremolo.CATEGORY; }

  draw() {
    this.checkContext();

    if (!(this.note && this.index != null)) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoAttachedNote', "Can't draw Tremolo without a note and index.");
    }

    this.setRendered();
    const stemDirection = this.note.getStemDirection();
    // VexFlowPatch: add y_spacing_scale
    this.y_spacing = 4 * stemDirection * this.y_spacing_scale;
    const start = this.note.getModifierStartXY(this.position, this.index);
    let x = start.x;
    let y = this.note.stem.getExtents().topY;
    let scale = this.note.getCategory() === 'gracenotes' ? _gracenote__WEBPACK_IMPORTED_MODULE_3__.GraceNote.SCALE : 1;
    // VexFlowPatch: add extra stroke scale
    scale *= this.extra_stroke_scale;
    if (stemDirection < 0) {
      y += Tremolo.YOFFSETSTEMDOWN * scale;
    } else {
      y += Tremolo.YOFFSETSTEMUP * scale;
    }
    if (this.note.beam) {
      y += this.y_offset_for_beam * stemDirection;
    }

    this.font = {
      family: 'Arial',
      size: 16 * scale,
      weight: '',
    };

    this.render_options = {
      font_scale: 35 * scale,
      stroke_px: 3,
      stroke_spacing: 10 * scale,
    };

    x += stemDirection < 0 ? Tremolo.XOFFSETSTEMDOWN : Tremolo.XOFFSETSTEMUP;
    for (let i = 0; i < this.num; ++i) {
      _glyph__WEBPACK_IMPORTED_MODULE_2__.Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code);
      y += this.y_spacing;
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tuning.js":
/*!********************************************!*\
  !*** ./node_modules/vexflow/src/tuning.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tuning: () => (/* binding */ Tuning)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class implements varies types of tunings for tablature.




class Tuning {
  static get names() {
    return {
      'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',
      'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',
      'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',
      'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',
      'standardBanjo': 'D/5,B/4,G/4,D/4,G/5',
    };
  }

  constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {
    // Default to standard tuning.
    this.setTuning(tuningString);
  }

  noteToInteger(noteString) {
    return _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.keyProperties(noteString).int_value;
  }

  setTuning(noteString) {
    if (Tuning.names[noteString]) {
      noteString = Tuning.names[noteString];
    }

    this.tuningString = noteString;
    this.tuningValues = [];
    this.numStrings = 0;

    const keys = noteString.split(/\s*,\s*/);
    if (keys.length === 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);
    }

    this.numStrings = keys.length;
    for (let i = 0; i < this.numStrings; ++i) {
      this.tuningValues[i] = this.noteToInteger(keys[i]);
    }
  }

  getValueForString(stringNum) {
    const s = parseInt(stringNum, 10);
    if (s < 1 || s > this.numStrings) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR(
        'BadArguments', `String number must be between 1 and ${this.numStrings}:${stringNum}`
      );
    }

    return this.tuningValues[s - 1];
  }

  getValueForFret(fretNum, stringNum) {
    const stringValue = this.getValueForString(stringNum);
    const f = parseInt(fretNum, 10);

    if (f < 0) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' +
          fretNum);
    }

    return stringValue + f;
  }

  getNoteForFret(fretNum, stringNum) {
    const noteValue = this.getValueForFret(fretNum, stringNum);

    const octave = Math.floor(noteValue / 12);
    const value = noteValue % 12;

    return _tables__WEBPACK_IMPORTED_MODULE_1__.Flow.integerToNote(value) + '/' + octave;
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/tuplet.js":
/*!********************************************!*\
  !*** ./node_modules/vexflow/src/tuplet.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tuplet: () => (/* binding */ Tuplet)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./formatter */ "./node_modules/vexflow/src/formatter.js");
/* harmony import */ var _glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph */ "./node_modules/vexflow/src/glyph.js");
/* harmony import */ var _stem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stem */ "./node_modules/vexflow/src/stem.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.

/**
 * ## Description
 *
 * Create a new tuplet from the specified notes. The notes must
 * be part of the same voice. If they are of different rhythmic
 * values, then options.num_notes must be set.
 *
 * @constructor
 * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,
 *   notes, etc... any class that inherits stemmableNote at some
 *   point in its prototype chain.
 * @param options: object {
 *
 *   num_notes: fit this many notes into...
 *   notes_occupied: ...the space of this many notes
 *
 *       Together, these two properties make up the tuplet ratio
 *     in the form of num_notes : notes_occupied.
 *       num_notes defaults to the number of notes passed in, so
 *     it is important that if you omit this property, all of
 *     the notes passed should be of the same note value.
 *       notes_occupied defaults to 2 -- so you should almost
 *     certainly pass this parameter for anything other than
 *     a basic triplet.
 *
 *   location:
 *     default 1, which is above the notes: ┌─── 3 ───┐
 *      -1 is below the notes └─── 3 ───┘
 *
 *   bracketed: boolean, draw a bracket around the tuplet number
 *     when true: ┌─── 3 ───┐   when false: 3
 *     defaults to true if notes are not beamed, false otherwise
 *
 *   ratioed: boolean
 *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐
 *     defaults to true if the difference between num_notes and
 *     notes_occupied is greater than 1.
 *
 *   y_offset: int, default 0
 *     manually offset a tuplet, for instance to avoid collisions
 *     with articulations, etc...
 * }
 */

 
 
 
 
 
 
 class Tuplet extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
   static get LOCATION_TOP() {
     return 1;
   }
   static get LOCATION_BOTTOM() {
     return -1;
   }
   static get NESTING_OFFSET() {
     return 15;
   }
 
   constructor(notes, options) {
     super();
     this.setAttribute('type', 'Tuplet');
     if (!notes || !notes.length) {
       throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError('BadArguments', 'No notes provided for tuplet.');
     }
 
     this.options = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge({}, options);
     this.notes = notes;
     this.num_notes = 'num_notes' in this.options ?
       this.options.num_notes : notes.length;
 
     // We accept beats_occupied, but warn that it's deprecated:
     // the preferred property name is now notes_occupied.
     if (this.options.beats_occupied) {
       this.beatsOccupiedDeprecationWarning();
     }
     this.notes_occupied = this.options.notes_occupied ||
       this.options.beats_occupied ||
       2;
     if ('bracketed' in this.options) {
       this.bracketed = this.options.bracketed;
     } else {
       this.bracketed =
         notes.some(note => note.beam === null);
     }
 
     this.ratioed = 'ratioed' in this.options ?
       this.options.ratioed :
       (Math.abs(this.notes_occupied - this.num_notes) > 1);
     this.point = 28;
     this.y_pos = 16;
     this.x_pos = 100;
     this.width = 200;
     this.location = this.options.location || Tuplet.LOCATION_TOP;
 
     _formatter__WEBPACK_IMPORTED_MODULE_2__.Formatter.AlignRestsToNotes(notes, true, true);
     this.resolveGlyphs();
     this.attach();
   }
 
   attach() {
     for (let i = 0; i < this.notes.length; i++) {
       const note = this.notes[i];
       note.setTuplet(this);
     }
   }
 
   detach() {
     for (let i = 0; i < this.notes.length; i++) {
       const note = this.notes[i];
       note.resetTuplet(this);
     }
   }
 
   /**
    * Set whether or not the bracket is drawn.
    */
   setBracketed(bracketed) {
     this.bracketed = !!bracketed;
     return this;
   }
 
   /**
    * Set whether or not the ratio is shown.
    */
   setRatioed(ratioed) {
     this.ratioed = !!ratioed;
     return this;
   }
 
   /**
    * Set the tuplet to be displayed either on the top or bottom of the stave
    */
   setTupletLocation(location) {
     if (!location) {
       location = Tuplet.LOCATION_TOP;
     } else if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {
       throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);
     }
 
     this.location = location;
     return this;
   }
 
   getNotes() {
     return this.notes;
   }
 
   getNoteCount() {
     return this.num_notes;
   }
 
   beatsOccupiedDeprecationWarning() {
     const msg = [
       'beats_occupied has been deprecated as an ',
       'option for tuplets. Please use notes_occupied ',
       'instead. Calls to getBeatsOccupied and ',
       'setBeatsOccupied should now be routed to ',
       'getNotesOccupied and setNotesOccupied instead',
     ].join('');
 
     if (console && console.warn) { // eslint-disable-line no-console
       console.warn(msg); // eslint-disable-line no-console
     } else if (console) {
       console.log(msg); // eslint-disable-line no-console
     }
   }
 
   getBeatsOccupied() {
     this.beatsOccupiedDeprecationWarning();
     return this.getNotesOccupied();
   }
 
   setBeatsOccupied(beats) {
     this.beatsOccupiedDeprecationWarning();
     return this.setNotesOccupied(beats);
   }
 
   getNotesOccupied() {
     return this.notes_occupied;
   }
 
   setNotesOccupied(notes) {
     this.detach();
     this.notes_occupied = notes;
     this.resolveGlyphs();
     this.attach();
   }
 
   resolveGlyphs() {
     this.numerator_glyphs = [];
     let n = this.num_notes;
     while (n >= 1) {
       this.numerator_glyphs.unshift(new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph('v' + (n % 10), this.point));
       n = parseInt(n / 10, 10);
     }
 
     this.denom_glyphs = [];
     n = this.notes_occupied;
     while (n >= 1) {
       this.denom_glyphs.unshift(new _glyph__WEBPACK_IMPORTED_MODULE_3__.Glyph('v' + (n % 10), this.point));
       n = parseInt(n / 10, 10);
     }
   }
 
   // determine how many tuplets are nested within this tuplet
   // on the same side (above/below), to calculate a y
   // offset for this tuplet:
   getNestedTupletCount() {
     const location = this.location;
     const first_note = this.notes[0];
     let maxTupletCount = countTuplets(first_note, location);
     let minTupletCount = countTuplets(first_note, location);
 
     // Count the tuplets that are on the same side (above/below)
     // as this tuplet:
     function countTuplets(note, location) {
       return note.tupletStack.filter(tuplet => tuplet.location === location).length;
     }
 
     this.notes.forEach(note => {
       const tupletCount = countTuplets(note, location);
       maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;
       minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;
     });
 
     return maxTupletCount - minTupletCount;
   }
 
   // determine the y position of the tuplet:
   getYPosition() {
     // offset the tuplet for any nested tuplets between
     // it and the notes:
     const nested_tuplet_y_offset =
       this.getNestedTupletCount() *
       Tuplet.NESTING_OFFSET *
       -this.location;
 
     // offset the tuplet for any manual y_offset:
     const y_offset = this.options.y_offset || 0;
 
     // now iterate through the notes and find our highest
     // or lowest locations, to form a base y_pos
     const first_note = this.notes[0];
     let y_pos;
     if (this.location === Tuplet.LOCATION_TOP) {
       y_pos = first_note.getStave().getYForLine(0) - 15;
       // y_pos = first_note.getStemExtents().topY - 10;
 
       for (let i = 0; i < this.notes.length; ++i) {
         const top_y = this.notes[i].getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP
           ? this.notes[i].getStemExtents().topY - 10
           : this.notes[i].getStemExtents().baseY - 20;
 
         if (top_y < y_pos) {
           y_pos = top_y;
         }
       }
     } else {
       y_pos = first_note.getStave().getYForLine(4) + 20;
 
       for (let i = 0; i < this.notes.length; ++i) {
         const bottom_y = this.notes[i].getStemDirection() === _stem__WEBPACK_IMPORTED_MODULE_4__.Stem.UP
           ? this.notes[i].getStemExtents().baseY + 20
           : this.notes[i].getStemExtents().topY + 10;
         if (bottom_y > y_pos) {
           y_pos = bottom_y;
         }
       }
     }
 
     return y_pos + nested_tuplet_y_offset + y_offset;
   }
 
   draw() {
     this.checkContext();
     this.setRendered();
 
     // determine x value of left bound of tuplet
     const first_note = this.notes[0];
     const last_note = this.notes[this.notes.length - 1];
 
     if (!this.bracketed) {
       this.x_pos = first_note.getStemX();
       this.width = last_note.getStemX() - this.x_pos;
     } else {
       this.x_pos = first_note.getTieLeftX() - 5;
       this.width = last_note.getTieRightX() - this.x_pos + 5;
     }
 
     // determine y value for tuplet
     this.y_pos = this.getYPosition();
 
     const addGlyphWidth = (width, glyph) => width + glyph.getMetrics().width;
 
     // calculate total width of tuplet notation
     let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);
     if (this.ratioed) {
       width = this.denom_glyphs.reduce(addGlyphWidth, width);
       width += this.point * 0.32;
     }
 
     const notation_center_x = this.x_pos + (this.width / 2);
     const notation_start_x = notation_center_x - (width / 2);
 
     // draw bracket if the tuplet is not beamed
     if (this.bracketed) {
       const line_width = this.width / 2 - width / 2 - 5;
 
       // only draw the bracket if it has positive length
       if (line_width > 0) {
         this.context.fillRect(this.x_pos, this.y_pos, line_width, 1);
         this.context.fillRect(
           this.x_pos + this.width / 2 + width / 2 + 5,
           this.y_pos,
           line_width,
           1
         );
         this.context.fillRect(
           this.x_pos,
           this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM),
           1,
           this.location * 10
         );
         this.context.fillRect(
           this.x_pos + this.width,
           this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM),
           1,
           this.location * 10
         );
       }
     }
 
     // VexFlowPatch: add option to not render tuplet numbers
     if (this.RenderTupletNumber !== false) {
         // draw numerator glyphs
         let x_offset = 0;
         this.numerator_glyphs.forEach(glyph => {
           glyph.render(this.context, notation_start_x + x_offset, this.y_pos + (this.point / 3) - 2);
           x_offset += glyph.getMetrics().width;
         });
     }
 
     // display colon and denominator if the ratio is to be shown
     if (this.ratioed) {
       const colon_x = notation_start_x + x_offset + this.point * 0.16;
       const colon_radius = this.point * 0.06;
       this.context.beginPath();
       this.context.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);
       this.context.closePath();
       this.context.fill();
       this.context.beginPath();
       this.context.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);
       this.context.closePath();
       this.context.fill();
       x_offset += this.point * 0.32;
       this.denom_glyphs.forEach(glyph => {
         glyph.render(this.context, notation_start_x + x_offset, this.y_pos + (this.point / 3) - 2);
         x_offset += glyph.getMetrics().width;
       });
     }
   }
 }
 

/***/ }),

/***/ "./node_modules/vexflow/src/vex.js":
/*!*****************************************!*\
  !*** ./node_modules/vexflow/src/vex.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vex: () => (/* binding */ Vex)
/* harmony export */ });
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This file implements utility methods used by the rest of the VexFlow
// codebase.
//

/* eslint max-classes-per-file: "off" */

const Vex = () => { };

// Default log function sends all arguments to console.
Vex.L = (block, args) => {
  if (!args) return;
  const line = Array.prototype.slice.call(args).join(' ');
  window.console.log(block + ': ' + line);
};

Vex.MakeException = (name) => {
  const exception = class extends Error {
    constructor(message, data) {
      super(message);
      this.name = name;
      this.message = message;
      this.data = data;
    }
  };

  return exception;
};

// Default runtime exception.
class RuntimeError {
  constructor(code, message) {
    this.code = code;
    this.message = message;
  }

  toString() {
    return '[RuntimeError] ' + this.code + ':' + this.message;
  }
}

// Shortcut method for `RuntimeError`.
Vex.RuntimeError = RuntimeError;
Vex.RERR = Vex.RuntimeError;

// Merge `destination` hash with `source` hash, overwriting like keys
// in `source` if necessary.
Vex.Merge = (destination, source) => {
  for (const property in source) { // eslint-disable-line guard-for-in
    destination[property] = source[property];
  }
  return destination;
};

// DEPRECATED. Use `Math.*`.
Vex.Min = Math.min;
Vex.Max = Math.max;
Vex.forEach = (a, fn) => {
  for (let i = 0; i < a.length; i++) {
    fn(a[i], i);
  }
};

// Round number to nearest fractional value (`.5`, `.25`, etc.)
Vex.RoundN = (x, n) =>
  (x % n) >= (n / 2)
    ? parseInt(x / n, 10) * n + n
    : parseInt(x / n, 10) * n;

// Locate the mid point between stave lines. Returns a fractional line if a space.
Vex.MidLine = (a, b) => {
  let mid_line = b + (a - b) / 2;
  if (mid_line % 2 > 0) {
    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;
  }
  return mid_line;
};

// Take `arr` and return a new list consisting of the sorted, unique,
// contents of arr. Does not modify `arr`.
Vex.SortAndUnique = (arr, cmp, eq) => {
  if (arr.length > 1) {
    const newArr = [];
    let last;
    arr.sort(cmp);

    for (let i = 0; i < arr.length; ++i) {
      if (i === 0 || !eq(arr[i], last)) {
        newArr.push(arr[i]);
      }
      last = arr[i];
    }

    return newArr;
  } else {
    return arr;
  }
};

// Check if array `a` contains `obj`.
Vex.Contains = (a, obj) => {
  let i = a.length;
  while (i--) {
    if (a[i] === obj) {
      return true;
    }
  }
  return false;
};

// Get the 2D Canvas context from DOM element `canvas_sel`.
Vex.getCanvasContext = canvas_sel => {
  if (!canvas_sel) {
    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);
  }

  const canvas = document.getElementById(canvas_sel);
  if (!(canvas && canvas.getContext)) {
    throw new Vex.RERR(
      'UnsupportedBrowserError', 'This browser does not support HTML5 Canvas'
    );
  }

  return canvas.getContext('2d');
};

// Draw a tiny dot marker on the specified canvas. A great debugging aid.
//
// `ctx`: Canvas context.
// `x`, `y`: Dot coordinates.
Vex.drawDot = (ctx, x, y, color = '#55') => {
  ctx.save();
  ctx.setFillStyle(color);

  // draw a circle
  ctx.beginPath();
  ctx.arc(x, y, 3, 0, Math.PI * 2, true);
  ctx.closePath();
  ctx.fill();
  ctx.restore();
};

// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.
Vex.BM = (s, f) => {
  const start_time = new Date().getTime();
  f();
  const elapsed = new Date().getTime() - start_time;
  Vex.L(s + elapsed + 'ms');
};

// Get stack trace.
Vex.StackTrace = () => {
  const err = new Error();
  return err.stack;
};

// Dump warning to console.
Vex.W = (...args) => {
  const line = args.join(' ');
  window.console.log('Warning: ', line, Vex.StackTrace());
};

// Used by various classes (e.g., SVGContext) to provide a
// unique prefix to element names (or other keys in shared namespaces).
Vex.Prefix = text => Vex.Prefix.prefix + text;
Vex.Prefix.prefix = 'vf-';




/***/ }),

/***/ "./node_modules/vexflow/src/vibrato.js":
/*!*********************************************!*\
  !*** ./node_modules/vexflow/src/vibrato.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vibrato: () => (/* binding */ Vibrato)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _modifier__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modifier */ "./node_modules/vexflow/src/modifier.js");
/* harmony import */ var _bend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bend */ "./node_modules/vexflow/src/bend.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
// This class implements vibratos.





class Vibrato extends _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier {
  static get CATEGORY() { return 'vibratos'; }

  // ## Static Methods
  // Arrange vibratos inside a `ModifierContext`.
  static format(vibratos, state, context) {
    if (!vibratos || vibratos.length === 0) return false;

    // Vibratos are always on top.
    let text_line = state.top_text_line;
    let width = 0;
    let shift = state.right_shift - 7;

    // If there's a bend, drop the text line
    const bends = context.getModifiers(_bend__WEBPACK_IMPORTED_MODULE_2__.Bend.CATEGORY);
    if (bends && bends.length > 0) {
      text_line--;
    }

    // Format Vibratos
    for (let i = 0; i < vibratos.length; ++i) {
      const vibrato = vibratos[i];
      vibrato.setXShift(shift);
      vibrato.setTextLine(text_line);
      width += vibrato.getWidth();
      shift += width;
    }

    state.right_shift += width;
    state.top_text_line += 1;
    return true;
  }

  // ## Prototype Methods
  constructor() {
    super();
    this.setAttribute('type', 'Vibrato');

    this.position = _modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT;
    this.render_options = {
      harsh: false,
      vibrato_width: 20,
      wave_height: 6,
      wave_width: 4,
      wave_girth: 2,
    };

    this.setVibratoWidth(this.render_options.vibrato_width);
  }
  getCategory() { return Vibrato.CATEGORY; }
  setHarsh(harsh) { this.render_options.harsh = harsh; return this; }
  setVibratoWidth(width) {
    this.render_options.vibrato_width = width;
    this.setWidth(width);
    return this;
  }

  draw() {
    const ctx = this.checkContext();

    if (!this.note) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoNoteForVibrato', "Can't draw vibrato without an attached note.");
    }

    this.setRendered();
    const start = this.note.getModifierStartXY(_modifier__WEBPACK_IMPORTED_MODULE_1__.Modifier.Position.RIGHT, this.index);

    const vx = start.x + this.x_shift;
    const vy = this.note.getYForTopText(this.text_line) + 2;

    Vibrato.renderVibrato(ctx, vx, vy, this.render_options);
  }

  // Static rendering method that can be called from
  // other classes (e.g. VibratoBracket)
  static renderVibrato(ctx, x, y, opts) {
    const { harsh, vibrato_width, wave_width, wave_girth, wave_height } = opts;
    const num_waves = vibrato_width / wave_width;

    ctx.beginPath();

    let i;
    if (harsh) {
      ctx.moveTo(x, y + wave_girth + 1);
      for (i = 0; i < num_waves / 2; ++i) {
        ctx.lineTo(x + wave_width, y - (wave_height / 2));
        x += wave_width;
        ctx.lineTo(x + wave_width, y + (wave_height / 2));
        x += wave_width;
      }
      for (i = 0; i < num_waves / 2; ++i) {
        ctx.lineTo(x - wave_width, (y - (wave_height / 2)) + wave_girth + 1);
        x -= wave_width;
        ctx.lineTo(x - wave_width, (y + (wave_height / 2)) + wave_girth + 1);
        x -= wave_width;
      }
      ctx.fill();
    } else {
      ctx.moveTo(x, y + wave_girth);
      for (i = 0; i < num_waves / 2; ++i) {
        ctx.quadraticCurveTo(x + (wave_width / 2), y - (wave_height / 2), x + wave_width, y);
        x += wave_width;
        ctx.quadraticCurveTo(x + (wave_width / 2), y + (wave_height / 2), x + wave_width, y);
        x += wave_width;
      }

      for (i = 0; i < num_waves / 2; ++i) {
        ctx.quadraticCurveTo(
          x - (wave_width / 2),
          (y + (wave_height / 2)) + wave_girth,
          x - wave_width, y + wave_girth);
        x -= wave_width;
        ctx.quadraticCurveTo(
          x - (wave_width / 2),
          (y - (wave_height / 2)) + wave_girth,
          x - wave_width, y + wave_girth);
        x -= wave_width;
      }
      ctx.fill();
    }
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/vibratobracket.js":
/*!****************************************************!*\
  !*** ./node_modules/vexflow/src/vibratobracket.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VibratoBracket: () => (/* binding */ VibratoBracket)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _vibrato__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vibrato */ "./node_modules/vexflow/src/vibrato.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
// Author: Balazs Forian-Szabo
//
// ## Description
//
// This file implements `VibratoBrackets`
// that renders vibrato effect between two notes.





// To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`.
function L(...args) { if (VibratoBracket.DEBUG) _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.L('Vex.Flow.VibratoBracket', args); }

class VibratoBracket extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  // bracket_data = {
  //   start: Vex.Flow.Note (optional)
  //   stop: Vex.Flow.Note (optional)
  // };
  // Either the stop or start note must be set, or both of them.
  // A null value for the start or stop note indicates that the vibrato
  // is drawn from the beginning or until the end of the stave accordingly.
  constructor(bracket_data) {
    super();
    this.setAttribute('type', 'VibratoBracket');

    this.start = bracket_data.start;
    this.stop = bracket_data.stop;

    this.line = 1;

    this.render_options = {
      harsh: false,
      wave_height: 6,
      wave_width: 4,
      wave_girth: 2,
    };
  }

  // Set line position of the vibrato bracket
  setLine(line) { this.line = line; return this; }
  setHarsh(harsh) { this.render_options.harsh = harsh; return this; }

  // Draw the vibrato bracket on the rendering context
  draw() {
    const ctx = this.context;
    this.setRendered();

    const y = (this.start)
      ? this.start.getStave().getYForTopText(this.line)
      : this.stop.getStave().getYForTopText(this.line);

    // If start note is not set then vibrato will be drawn
    // from the beginning of the stave
    const start_x = (this.start)
      ? this.start.getAbsoluteX()
      : this.stop.getStave().getTieStartX();

    // If stop note is not set then vibrato will be drawn
    // until the end of the stave
    const stop_x = (this.stop)
      ? this.stop.getAbsoluteX() - this.stop.getWidth() - 5
      : this.start.getStave().getTieEndX() - 10;

    this.render_options.vibrato_width = stop_x - start_x;

    L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);

    _vibrato__WEBPACK_IMPORTED_MODULE_2__.Vibrato.renderVibrato(ctx, start_x, y, this.render_options);
  }
}


/***/ }),

/***/ "./node_modules/vexflow/src/voice.js":
/*!*******************************************!*\
  !*** ./node_modules/vexflow/src/voice.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Voice: () => (/* binding */ Voice)
/* harmony export */ });
/* harmony import */ var _vex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vex */ "./node_modules/vexflow/src/vex.js");
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./element */ "./node_modules/vexflow/src/element.js");
/* harmony import */ var _tables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tables */ "./node_modules/vexflow/src/tables.js");
/* harmony import */ var _fraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fraction */ "./node_modules/vexflow/src/fraction.js");
// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
//
// ## Description
//
// This file implements the main Voice class. It's mainly a container
// object to group `Tickables` for formatting.






class Voice extends _element__WEBPACK_IMPORTED_MODULE_1__.Element {
  // Modes allow the addition of ticks in three different ways:
  //
  // STRICT: This is the default. Ticks must fill the voice.
  // SOFT:   Ticks can be added without restrictions.
  // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum
  //         tick length.
  static get Mode() {
    return {
      STRICT: 1,
      SOFT: 2,
      FULL: 3,
    };
  }

  constructor(time) {
    super();
    this.setAttribute('type', 'Voice');

    // Time signature shortcut: "4/4", "3/8", etc.
    if (typeof(time) === 'string') {
      const match = time.match(/(\d+)\/(\d+)/);
      if (match) {
        time = {
          num_beats: match[1],
          beat_value: match[2],
          resolution: _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.RESOLUTION,
        };
      }
    }

    // Default time sig is 4/4
    this.time = _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.Merge({
      num_beats: 4,
      beat_value: 4,
      resolution: _tables__WEBPACK_IMPORTED_MODULE_2__.Flow.RESOLUTION,
    }, time);

    // Recalculate total ticks.
    this.totalTicks = new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(
      this.time.num_beats * (this.time.resolution / this.time.beat_value), 1);

    this.resolutionMultiplier = 1;

    // Set defaults
    this.tickables = [];
    this.ticksUsed = new _fraction__WEBPACK_IMPORTED_MODULE_3__.Fraction(0, 1);
    this.smallestTickCount = this.totalTicks.clone();
    this.largestTickWidth = 0;
    this.stave = null;
    // Do we care about strictly timed notes
    this.mode = Voice.Mode.STRICT;

    // This must belong to a VoiceGroup
    this.voiceGroup = null;
  }

  // Get the total ticks in the voice
  getTotalTicks() { return this.totalTicks; }

  // Get the total ticks used in the voice by all the tickables
  getTicksUsed() { return this.ticksUsed; }

  // Get the largest width of all the tickables
  getLargestTickWidth() { return this.largestTickWidth; }

  // Get the tick count for the shortest tickable
  getSmallestTickCount() { return this.smallestTickCount; }

  // Get the tickables in the voice
  getTickables() { return this.tickables; }

  // Get/set the voice mode, use a value from `Voice.Mode`
  getMode() { return this.mode; }
  setMode(mode) { this.mode = mode; return this; }

  // Get the resolution multiplier for the voice
  getResolutionMultiplier() { return this.resolutionMultiplier; }

  // Get the actual tick resolution for the voice
  getActualResolution() { return this.resolutionMultiplier * this.time.resolution; }

  // Set the voice's stave
  setStave(stave) {
    this.stave = stave;
    this.boundingBox = null; // Reset bounding box so we can reformat
    return this;
  }

  // Get the bounding box for the voice
  getBoundingBox() {
    let stave;
    let boundingBox;
    let bb;
    let i;

    if (!this.boundingBox) {
      if (!this.stave) throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoStave', "Can't get bounding box without stave.");
      stave = this.stave;
      boundingBox = null;

      for (i = 0; i < this.tickables.length; ++i) {
        this.tickables[i].setStave(stave);

        bb = this.tickables[i].getBoundingBox();
        if (!bb) continue;

        boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;
      }

      this.boundingBox = boundingBox;
    }
    return this.boundingBox;
  }

  // Every tickable must be associated with a voiceGroup. This allows formatters
  // and preformatters to associate them with the right modifierContexts.
  getVoiceGroup() {
    if (!this.voiceGroup) {
      throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('NoVoiceGroup', 'No voice group for voice.');
    }

    return this.voiceGroup;
  }

  // Set the voice group
  setVoiceGroup(g) { this.voiceGroup = g; return this; }

  // Set the voice mode to strict or soft
  setStrict(strict) {
    this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;
    return this;
  }

  // Determine if the voice is complete according to the voice mode
  isComplete() {
    if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {
      return this.ticksUsed.equals(this.totalTicks);
    } else {
      return true;
    }
  }

  // Add a tickable to the voice
  addTickable(tickable) {
    if (!tickable.shouldIgnoreTicks()) {
      const ticks = tickable.getTicks();

      // Update the total ticks for this line.
      this.ticksUsed.add(ticks);

      if (
        (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) &&
        this.ticksUsed.greaterThan(this.totalTicks)
      ) {
        this.ticksUsed.subtract(ticks);
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RERR('BadArgument', 'Too many ticks.');
      }

      // Track the smallest tickable for formatting.
      if (ticks.lessThan(this.smallestTickCount)) {
        this.smallestTickCount = ticks.clone();
      }

      this.resolutionMultiplier = this.ticksUsed.denominator;

      // Expand total ticks using denominator from ticks used.
      this.totalTicks.add(0, this.ticksUsed.denominator);
    }

    // Add the tickable to the line.
    this.tickables.push(tickable);
    tickable.setVoice(this);
    return this;
  }

  // Add an array of tickables to the voice.
  addTickables(tickables) {
    for (let i = 0; i < tickables.length; ++i) {
      this.addTickable(tickables[i]);
    }

    return this;
  }

  // Preformats the voice by applying the voice's stave to each note.
  preFormat() {
    if (this.preFormatted) return this;

    this.tickables.forEach((tickable) => {
      if (!tickable.getStave()) {
        tickable.setStave(this.stave);
      }
    });

    this.preFormatted = true;
    return this;
  }

  // Render the voice onto the canvas `context` and an optional `stave`.
  // If `stave` is omitted, it is expected that the notes have staves
  // already set.
  draw(context = this.context, stave = this.stave) {
    this.setRendered();
    let boundingBox = null;
    for (let i = 0; i < this.tickables.length; ++i) {
      const tickable = this.tickables[i];

      // Set the stave if provided
      if (stave) tickable.setStave(stave);

      if (!tickable.getStave()) {
        throw new _vex__WEBPACK_IMPORTED_MODULE_0__.Vex.RuntimeError(
          'MissingStave', 'The voice cannot draw tickables without staves.'
        );
      }

      if (i === 0) boundingBox = tickable.getBoundingBox();

      if (i > 0 && boundingBox) {
        const tickable_bb = tickable.getBoundingBox();
        if (tickable_bb) boundingBox.mergeWith(tickable_bb);
      }

      tickable.setContext(context);
      tickable.drawWithStyle();
    }

    this.boundingBox = boundingBox;
  }
}


/***/ }),

/***/ "./src/MusicalScore/Graphical/Shaders/FragmentShader.glsl":
/*!****************************************************************!*\
  !*** ./src/MusicalScore/Graphical/Shaders/FragmentShader.glsl ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "precision mediump float;\nuniform sampler2D u_image;\nvarying vec4 v_position;\n\n#define NUM_ROWS 5\n#define ELEMENT_HEIGHT 300\n\nvoid main() {\n    const float halfPixel = 1.0 / float(ELEMENT_HEIGHT * 2);\n\n    vec2 absolutePosition = (v_position.xy + vec2(1.0)) / vec2(2.0);\n    float absX = absolutePosition.x;\n    float absY = absolutePosition.y;\n\n    int skyLine = 0;\n    for (int i = 0; i < ELEMENT_HEIGHT; ++i) {\n        float ratioY = float(i) / float(ELEMENT_HEIGHT);\n        float relY = (ratioY - 0.5 + halfPixel) / float(NUM_ROWS);\n        float x = absX;\n        float y = absY + relY;\n\n        float currentAlpha = texture2D(u_image, vec2(x, y)).a;\n        if (currentAlpha > 0.0) {\n            skyLine = i;\n            break;\n        }\n    }\n\n    int bottomLine = ELEMENT_HEIGHT;\n    for (int i = ELEMENT_HEIGHT - 1; i >= 0; --i) {\n        float ratioY = float(i) / float(ELEMENT_HEIGHT);\n        float relY = (ratioY - 0.5 + halfPixel) / float(NUM_ROWS);\n        float x = absX;\n        float y = absY + relY;\n\n        float currentAlpha = texture2D(u_image, vec2(x, y)).a;\n        if (currentAlpha > 0.0) {\n            bottomLine = i;\n            break;\n        }\n    }\n\n    int r = skyLine;\n    if (r > 256) {\n        r -= 256;\n    }\n    int g = bottomLine;\n    if (g > 256) {\n        g -= 256;\n    }\n    int b = (skyLine / 256 * 16) + (bottomLine / 256);\n\n    gl_FragColor = vec4(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0, 1.0);\n}\n";

/***/ }),

/***/ "./src/MusicalScore/Graphical/Shaders/VertexShader.glsl":
/*!**************************************************************!*\
  !*** ./src/MusicalScore/Graphical/Shaders/VertexShader.glsl ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "attribute vec4 a_position;\nvarying vec4 v_position;\n\nvoid main() {\n    gl_Position = a_position;\n    v_position = a_position;\n}\n";

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "opensheetmusicdisplay:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"demo": 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 		
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = this["webpackChunkopensheetmusicdisplay"] = this["webpackChunkopensheetmusicdisplay"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!***********************!*\
  !*** ./demo/index.js ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_OpenSheetMusicDisplay_OpenSheetMusicDisplay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/OpenSheetMusicDisplay/OpenSheetMusicDisplay */ "./src/OpenSheetMusicDisplay/OpenSheetMusicDisplay.ts");
/* harmony import */ var _src_OpenSheetMusicDisplay_OpenSheetMusicDisplay__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_src_OpenSheetMusicDisplay_OpenSheetMusicDisplay__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_OpenSheetMusicDisplay_OSMDOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/OpenSheetMusicDisplay/OSMDOptions */ "./src/OpenSheetMusicDisplay/OSMDOptions.ts");
/* harmony import */ var _node_modules_jspdf_dist_jspdf_es_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/jspdf/dist/jspdf.es.min */ "./node_modules/jspdf/dist/jspdf.es.min.js");
/* harmony import */ var _node_modules_svg2pdf_js_dist_svg2pdf_umd_min__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../node_modules/svg2pdf.js/dist/svg2pdf.umd.min */ "./node_modules/svg2pdf.js/dist/svg2pdf.umd.min.js");
/* harmony import */ var _node_modules_svg2pdf_js_dist_svg2pdf_umd_min__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_svg2pdf_js_dist_svg2pdf_umd_min__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _src_Plugins_Transpose_TransposeCalculator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../src/Plugins/Transpose/TransposeCalculator */ "./src/Plugins/Transpose/TransposeCalculator.ts");






/*jslint browser:true */
(function () {
    "use strict";
    var openSheetMusicDisplay;
    var sampleFolder = "self/",
        samples = {
            'Sonata No. 11, 3rd Movement K. 331 "Alla Turca"': 'Piano_Sonata_No._11_K._331_3rd_Movement_Rondo_alla_Turca.mxl',
            'Für Elise': 'Fr_Elise.mxl',
            'Waltz in A Minor(Chopin)': 'Waltz_in_A_MinorChopin.mxl',
            'Canon in D': 'Canon_in_D.mxl',
            'Canon in D (easy)': 'Canon_in_D_easy.mxl',
            'Minuet BWV Anhang 114 in G Major': 'Minuet_in_G_Major_Bach.mxl',
            'The Blue Danube(easy)': 'The_Blue_Danube.mxl',
            'The Blue Danube(intermediate)': 'Danubio_azulBlue_Danube.mxl',
            'Sonate No. 14, “Moonlight” 1st Movement': 'Sonate_No._14_Moonlight_1st_Movement.mxl',
            'Sonate No. 14 (2nd mvt) Moonlight': 'Sonata_No._14.mxl',
            'Sonate No. 14, “Moonlight” 3rd Movement': 'Sonate_No._14_Moonlight_3rd_Movement.mxl',
            'Sonata No. 16, 1st Movement K. 545': 'Sonata_No._16_1st_Movement_K._545.mxl',
            'Sonate No. 8,“Pathétique” 1st Movement': 'Sonate_No._8Pathetique_1st_Movement.mxl',
            'Sonate No. 8, “Pathétique” 2nd Movement': 'Sonate_No._8_Pathetique_2nd_Movement.mxl',
            'Sonate No. 8, “Pathétique” 3rd Movement': 'Sonate_No._8_Pathetique_3rd_Movement.mxl',
            'Chopin - Nocturne Op 9 No 2(E Flat Major)': 'Chopin_-_Nocturne_Op_9_No_2_E_Flat_Major.mxl',
            'Chopin - Nocturne Op. 9 No. 1': 'Chopin_-_Nocturne_Op._9_No._1.mxl',
            // "Beethoven, L.v. - An die ferne Geliebte": "Beethoven_AnDieFerneGeliebte.xml",
            // "Clementi, M. - Sonatina Op.36 No.1 Pt.1": "MuzioClementi_SonatinaOpus36No1_Part1.xml",
            // "Clementi, M. - Sonatina Op.36 No.1 Pt.2": "MuzioClementi_SonatinaOpus36No1_Part2.xml",
            // "Clementi, M. - Sonatina Op.36 No.3 Pt.1": "MuzioClementi_SonatinaOpus36No3_Part1.xml",
            // "Clementi, M. - Sonatina Op.36 No.3 Pt.2": "MuzioClementi_SonatinaOpus36No3_Part2.xml",
            // "Bach, J.S. - Praeludium in C-Dur BWV846 1": "JohannSebastianBach_PraeludiumInCDur_BWV846_1.xml",
            // "Bach, J.S. - Air": "JohannSebastianBach_Air.xml",
            // "Gounod, C. - Méditation": "CharlesGounod_Meditation.xml",
            // "Haydn, J. - Concertante Cello": "JosephHaydn_ConcertanteCello.xml",
            // "Joplin, S. - Elite Syncopations": "ScottJoplin_EliteSyncopations.xml",
            // "Joplin, S. - The Entertainer": "ScottJoplin_The_Entertainer.xml",
            // "Mozart, W.A. - An Chloe": "Mozart_AnChloe.xml",
            // "Mozart, W.A. - Das Veilchen": "Mozart_DasVeilchen.xml",
            // "Mozart, W.A. - Clarinet Quintet (Excerpt)": "Mozart_Clarinet_Quintet_Excerpt.mxl",
            // "Mozart, W.A. - String Quartet in G, K. 387, 1st Mvmt Excerpt": "Mozart_String_Quartet_in_G_K._387_1st_Mvmnt_excerpt.musicxml",
            // "Mozart/Holzer - Land der Berge (national anthem of Austria)": "Land_der_Berge.musicxml",
            // "OSMD Function Test - All": "OSMD_function_test_all.xml",
            // "OSMD Function Test - Accidentals": "OSMD_function_test_accidentals.musicxml",
            // "OSMD Function Test - Autobeam": "OSMD_function_test_autobeam.musicxml",
            // "OSMD Function Test - Auto-/Custom-Coloring": "OSMD_function_test_auto-custom-coloring-entchen.musicxml",
            // "OSMD Function Test - Bar lines": "OSMD_function_test_bar_lines.musicxml",
            // "OSMD Function Test - Chord Symbols": "OSMD_function_test_chord_symbols.musicxml",
            // "OSMD Function Test - Chord Spacing": "OSMD_function_test_chord_spacing.mxl",
            // "OSMD Function Test - Chord Symbols - Various Chords": "OSMD_function_test_chord_tests_various.musicxml",
            // "OSMD Function Test - Chord Symbols - BrookeWestSample": "BrookeWestSample.mxl",
            // "OSMD Function Test - Color (from XML)": "OSMD_function_test_color.musicxml",
            // "OSMD Function Test - Container height (compacttight mode)": "OSMD_Function_Test_Container_height.musicxml",
            // "OSMD Function Test - Drumset": "OSMD_function_test_drumset.musicxml",
            // "OSMD Function Test - Drums on one Line": "OSMD_Function_Test_Drums_one_line_snare_plus_piano.musicxml", 
            // "OSMD Function Test - Expressions": "OSMD_function_test_expressions.musicxml",
            // "OSMD Function Test - Expressions Overlap": "OSMD_function_test_expressions_overlap.musicxml",
            // "OSMD Function Test - Grace Notes": "OSMD_function_test_GraceNotes.xml",
            // "OSMD Function Test - Metronome Marks": "OSMD_function_test_metronome_marks.mxl",
            // "OSMD Function Test - Multiple Rest Measures": "OSMD_function_test_multiple_rest_measures.musicxml",
            // "OSMD Function Test - Invisible Notes": "OSMD_function_test_invisible_notes.musicxml",
            // "OSMD Function Test - Notehead Shapes": "OSMD_function_test_noteheadShapes.musicxml",
            // "OSMD Function Test - Ornaments": "OSMD_function_test_Ornaments.xml",
            // "OSMD Function Test - Pedals": "OSMD_Function_Test_Pedals.musicxml",
            // "OSMD Function Test - Selecting Measures To Draw": "OSMD_function_test_measuresToDraw_Beethoven_AnDieFerneGeliebte.xml",
            // "OSMD Function Test - System and Page Breaks": "OSMD_Function_Test_System_and_Page_Breaks_4_pages.mxl",
            // "OSMD Function Test - Tabulature": "OSMD_Function_Test_Tabulature_hayden_study_1.mxl",
            // "OSMD Function Test - Tabulature MultiBends": "OSMD_Function_Test_Tablature_Multibends.musicxml",
            // "OSMD Function Test - Tabulature All Effects": "OSMD_Function_Test_Tablature_Alleffects.musicxml",
            // "OSMD Function Test - Tremolo": "OSMD_Function_Test_Tremolo_2bars.musicxml",
            // "OSMD Function Test - Labels": "OSMD_Function_Test_Labels.musicxml",
            // "OSMD Function Test - High Slur Test": "test_slurs_highNotes.musicxml",
            // "OSMD Function Test - Auto Multirest Measures Single Staff": "Test_Auto_Multirest_1.musicxml",
            // "OSMD Function Test - Auto Multirest Measures Multiple Staves": "Test_Auto_Multirest_2.musicxml",
            // "OSMD Function Test - String number collisions": "test_string_number_collisions.musicxml",
            // "OSMD Function Test - Repeat Stave Connectors": "OSMD_function_Test_Repeat.musicxml",
            // "OSMD Function Test - Voice Alignment": "OSMD_Function_Test_Voice_Alignment.musicxml",
            // "Schubert, F. - An Die Musik": "Schubert_An_die_Musik.xml",
            // "Actor, L. - Prelude (Large Sample, loading time)": "ActorPreludeSample.xml",
            // "Actor, L. - Prelude (Large, No Print Part Names)": "ActorPreludeSample_PartName.xml",
            // "Anonymous - Saltarello": "Saltarello.mxl",
            // "Debussy, C. - Mandoline": "Debussy_Mandoline.xml",
            // "Levasseur, F. - Parlez Mois": "Parlez-moi.mxl",
            // "Schumann, R. - Dichterliebe": "Dichterliebe01.xml",
            // "Telemann, G.P. - Sonate-Nr.1.1-Dolce": "TelemannWV40.102_Sonate-Nr.1.1-Dolce.xml",
            // "Telemann, G.P. - Sonate-Nr.1.2-Allegro": "TelemannWV40.102_Sonate-Nr.1.2-Allegro-F-Dur.xml",
        },

        zoom = 1.0,
        // HTML Elements in the page
        divControls,
        zoomControls,
        header,
        err,
        error_tr,
        canvas,
        selectSample,
        selectBounding,
        skylineDebug,
        bottomlineDebug,
        zoomIns,
        zoomOuts,
        zoomDivs,
        custom,
        previousCursorBtn,
        nextCursorBtn,
        resetCursorBtn,
        followCursorCheckbox,
        showCursorBtn,
        hideCursorBtn,
        backendSelect,
        backendSelectDiv,
        debugReRenderBtn,
        debugClearBtn,
        selectPageSizes,
        printPdfBtns,
        transpose,
        transposeBtn;
    
    // manage option setting and resetting for specific samples, e.g. in the autobeam sample autobeam is set to true, otherwise reset to previous state
    // TODO design a more elegant option state saving & restoring system, though that requires saving the options state in OSMD
    var minMeasureToDrawStashed = 1;
    var maxMeasureToDrawStashed = Number.MAX_SAFE_INTEGER;
    var measureToDrawRangeNeedsReset = false;
    var drawingParametersStashed = "default";
    var drawingParametersNeedsReset = false;
    var autobeamOptionNeedsReset = false;
    var autobeamOptionStashedValue = false;
    var autoCustomColoringOptionNeedsReset = false;
    var autoCustomColoringOptionStashedValue = false;
    var drawPartNamesOptionStashedValue = true;
    var drawPartAbbreviationsStashedValue = true;
    var drawPartNamesOptionNeedsReset = false;
    var pageBreaksOptionStashedValue = false;
    var pageBreaksOptionNeedsReset = false;
    var systemBreaksOptionStashedValue = false; // reset handled by pageBreaksOptionNeedsReset

    var showControls = true;
    var showExportPdfControl = false;
    var showPageFormatControl = false;
    var showZoomControl = true;
    var showHeader = true;
    var showDebugControls = false;

    document.title = "OpenSheetMusicDisplay Demo";

    // Initialization code
    function init() {
        var name, option;

        // Handle window parameter
        var paramEmbedded = findGetParameter('embedded');
        var paramShowControls = findGetParameter('showControls');
        var paramShowPageFormatControl = findGetParameter('showPageFormatControl');
        var paramShowExportPdfControl = findGetParameter('showExportPdfControl');
        var paramShowZoomControl = findGetParameter('showZoomControl');
        var paramShowHeader = findGetParameter('showHeader');
        var paramZoom = findGetParameter('zoom');
        var paramOverflow = findGetParameter('overflow');
        var paramOpenUrl = findGetParameter('openUrl');
        var paramDebugControls = findGetParameter('debugControls');

        var paramCompactMode = findGetParameter('compactMode');
        var paramMeasureRangeStart = findGetParameter('measureRangeStart');
        var paramMeasureRangeEnd = findGetParameter('measureRangeEnd');
        var paramPageFormat = findGetParameter('pageFormat');
        var paramPageBackgroundColor = findGetParameter('pageBackgroundColor');
        var paramBackendType = findGetParameter('backendType');
        var paramPageWidth = findGetParameter('pageWidth');
        var paramPageHeight = findGetParameter('pageHeight');

        var paramHorizontalScrolling = findGetParameter('horizontalScrolling');
        var paramSingleHorizontalStaffline = findGetParameter('singleHorizontalStaffline');

        showHeader = (paramShowHeader !== '0');
        showControls = false;
        if (paramEmbedded) {
            showControls = paramShowControls !== '0';
            showZoomControl = paramShowZoomControl !== '0';
            showPageFormatControl = paramShowPageFormatControl !== '0';
            showExportPdfControl = paramShowExportPdfControl !== '0';
        }

        if (paramZoom) {
            if (paramZoom > 0.1 && paramZoom < 5.0) {
                zoom = paramZoom;
            }
        }
        if (paramOverflow && typeof paramOverflow === 'string') {
            if (paramOverflow === 'hidden' || paramOverflow === 'auto' || paramOverflow === 'scroll' || paramOverflow === 'visible') {
                document.body.style.overflow = paramOverflow;
            }
        }
        
        var compactMode = paramCompactMode && paramCompactMode !== '0';
        var measureRangeStart = paramMeasureRangeStart ? Number.parseInt(paramMeasureRangeStart) : 0;
        var measureRangeEnd = paramMeasureRangeEnd ? Number.parseInt(paramMeasureRangeEnd) : Number.MAX_SAFE_INTEGER;
        if (measureRangeStart && measureRangeEnd && measureRangeEnd < measureRangeStart) {
            console.log("[OSMD] warning: measure range end parameter should not be smaller than measure range start. We've set start measure = end measure now.")
            measureRangeStart = measureRangeEnd;
        }
        let pageFormat = paramPageFormat ? paramPageFormat : "Endless";
        if (paramPageHeight && paramPageWidth) {
            pageFormat = `${paramPageWidth}x${paramPageHeight}`
        }
        var pageBackgroundColor = paramPageBackgroundColor ? "#" + paramPageBackgroundColor : undefined; // vexflow format, see OSMDOptions. can't use # in parameters.
        //console.log("demo: osmd pagebgcolor: " + pageBackgroundColor);
        var backendType = (paramBackendType && paramBackendType.toLowerCase) ? paramBackendType : "svg";

        var horizontalScrolling = paramHorizontalScrolling === '1';
        var singleHorizontalStaffline = paramSingleHorizontalStaffline === '1';
        
        // set the backendSelect debug controls dropdown menu selected item
        //console.log("true: " + backendSelect && backendType.toLowerCase && backendType.toLowerCase() === "canvas");
        // TODO somehow backendSelect becomes undefined here:
        /*if (backendSelect && backendType.toLowerCase && backendType.toLowerCase() === "canvas") {
            console.log("here1");
            for (var i=0; i<backendSelect.options.length; i++) {
                if (backendSelect.options[i].value.toLowerCase() === "canvas") {
                    backendSelect.selectedIndex = i;
                }
            }
            backendSelect.value = "Canvas";
        }*/

        divControls = document.getElementById('divControls');
        zoomControls = document.getElementById('zoomControls');
        header = document.getElementById('header');
        err = document.getElementById("error-td");
        error_tr = document.getElementById("error-tr");
        zoomDivs = [];
        zoomDivs.push(document.getElementById("zoom-str"));
        zoomDivs.push(document.getElementById("zoom-str-optional"));
        custom = document.createElement("option");
        selectSample = document.getElementById("selectSample");
        selectBounding = document.getElementById("selectBounding");
        skylineDebug = document.getElementById("skylineDebug");
        bottomlineDebug = document.getElementById("bottomlineDebug");
        zoomIns = [];
        zoomIns.push(document.getElementById("zoom-in-btn"));
        zoomIns.push(document.getElementById("zoom-in-btn-optional"));
        zoomOuts = [];
        zoomOuts.push(document.getElementById("zoom-out-btn"));
        zoomOuts.push(document.getElementById("zoom-out-btn-optional"));
        canvas = document.createElement("div");
        if (horizontalScrolling) {
            canvas.style.overflowX = 'auto'; // enable horizontal scrolling
        }
        //canvas.id = 'osmdCanvasDiv';
        //canvas.style.overflowX = 'auto'; // enable horizontal scrolling
        previousCursorBtn = document.getElementById("previous-cursor-btn");
        nextCursorBtn = document.getElementById("next-cursor-btn");
        resetCursorBtn = document.getElementById("reset-cursor-btn");
        followCursorCheckbox = document.getElementById("follow-cursor-checkbox");
        showCursorBtn = document.getElementById("show-cursor-btn");
        hideCursorBtn = document.getElementById("hide-cursor-btn");
        backendSelect = document.getElementById("backend-select");
        backendSelectDiv = document.getElementById("backend-select-div");
        debugReRenderBtn = document.getElementById("debug-re-render-btn");
        debugClearBtn = document.getElementById("debug-clear-btn");
        selectPageSizes = [];
        selectPageSizes.push(document.getElementById("selectPageSize"));
        selectPageSizes.push(document.getElementById("selectPageSize-optional"));
        printPdfBtns = [];
        printPdfBtns.push(document.getElementById("print-pdf-btn"));
        printPdfBtns.push(document.getElementById("print-pdf-btn-optional"));
        transpose = document.getElementById('transpose');
        transposeBtn = document.getElementById('transpose-btn');

        //var defaultDisplayVisibleValue = "block"; // TODO in some browsers flow could be the better/default value
        var defaultVisibilityValue = "visible";
        showDebugControls = paramDebugControls !== '0';
        if (showDebugControls) {
            var elementsToEnable = [
                selectSample, selectBounding, selectPageSizes[0], backendSelect, backendSelectDiv, divControls
            ];
            for (var i=0; i<elementsToEnable.length; i++) {
                if (elementsToEnable[i]) { // make sure this element is not null/exists in the index.html, e.g. github.io demo has different index.html
                    if (elementsToEnable[i].style) {
                        elementsToEnable[i].style.visibility = defaultVisibilityValue;
                        elementsToEnable[i].style.opacity = 1.0;
                    }
                }
            }
        } else {
            if (divControls) {
                divControls.style.display = "none";
            }
        }

        const optionalControls = document.getElementById('optionalControls');
        if (optionalControls) {
            if (showControls) {
                optionalControls.style.visibility = defaultVisibilityValue;
                optionalControls.style.opacity = 0.8;
            } else {
                optionalControls.style.display = 'none';
            }
        }

        if (!showHeader) {
            if (header) {
                header.style.display = 'none';
            }
        } else {
            if (header) {
                header.style.opacity = 1.0;
            }
        }
        // Hide error
        error();

        if (showControls) {
            const optionalControls = document.getElementById('optionalControls');
            if (optionalControls) {
                optionalControls.style.opacity = 1.0;
                // optionalControls.appendChild(zoomControlsButtons);
                // optionalControls.appendChild(zoomControlsString);
                optionalControls.style.position = 'absolute';
                optionalControls.style.zIndex = '10';
                optionalControls.style.right = '10px';
                // optionalControls.style.padding = '10px';
            }

            if (showZoomControl) {
                const zoomControlsButtonsColumn = document.getElementById('zoomControlsButtons-optional-column');
                zoomControlsButtonsColumn.style.opacity = 1.0;
                // const zoomControlsButtons = document.getElementById('zoomControlsButtons-optional');
                // zoomControlsButtons.style.opacity = 1.0;
                const zoomControlsString = document.getElementById('zoom-str-optional'); // actually === zoomDivs[1] above

                if (zoomControlsString) {
                    zoomControlsString.innerHTML = Math.floor(zoom * 100.0) + "%";
                    zoomControlsString.style.display = 'inline';
                    // zoomControlsString.style.padding = '10px';
                }
            }

            if (showExportPdfControl) {
                const exportPdfButtonColumn = document.getElementById('print-pdf-btn-optional-column');
                if (exportPdfButtonColumn) {
                    exportPdfButtonColumn.style.opacity = 1.0;
                }
            }

            const pageFormatControlColumn = document.getElementById("selectPageSize-optional-column");
            if (pageFormatControlColumn) {
                if (showPageFormatControl) {
                    pageFormatControlColumn.style.opacity = 1.0;
                } else {
                    // showPageFormatControlColumn.innerHTML = "";
                    // pageFormatControlColumn.style.minWidth = 0;
                    // pageFormatControlColumn.style.width = 0;
                    pageFormatControlColumn.style.display = 'none'; // squeezes buttons/columns
                    // pageFormatControlColumn.style.visibility = 'hidden';

                    // const optionalControlsColumnContainer = document.getElementById("optionalControlsColumnContainer");
                    // optionalControlsColumnContainer.removeChild(pageFormatControlColumn);
                    // optionalControlsColumnContainer.width *= 0.66;
                    // optionalControls.witdh *= 0.66;
                    // optionalControls.focus();
                }
            }
        }

        // Create select
        for (name in samples) {
            if (samples.hasOwnProperty(name)) {
                option = document.createElement("option");
                option.value = samples[name];
                option.textContent = name;
            }
            if (selectSample) {
                selectSample.appendChild(option);
            }
        }
        if (selectSample) {
            selectSample.onchange = selectSampleOnChange;
        }
        if (selectBounding) {
            selectBounding.onchange = selectBoundingOnChange;
        }

        for (const selectPageSize of selectPageSizes) {
            if (selectPageSize) {
                selectPageSize.onchange = function (evt) {
                    var value = evt.target.value;
                    openSheetMusicDisplay.setPageFormat(value);
                    openSheetMusicDisplay.render();
                };
            }
        }

        for (const printPdfBtn of printPdfBtns) {
            if (printPdfBtn) {
                printPdfBtn.onclick = function () {
                    createPdf();
                }
            }
        }

        // Pre-select default music piece

        custom.appendChild(document.createTextNode("Custom"));

        // Create zoom controls
        for (const zoomIn of zoomIns) {
            if (zoomIn) {
                zoomIn.onclick = function () {
                    zoom *= 1.2;
                    scale();
                };
            }
        }
        for (const zoomOut of zoomOuts) {
            if (zoomOut) {
                zoomOut.onclick = function () {
                    zoom /= 1.2;
                    scale();
                };
            }
        }

        if (skylineDebug) {
            skylineDebug.onclick = function () {
                openSheetMusicDisplay.DrawSkyLine = !openSheetMusicDisplay.DrawSkyLine;
                openSheetMusicDisplay.render();
            }
        }

        if (bottomlineDebug) {
            bottomlineDebug.onclick = function () {
                openSheetMusicDisplay.DrawBottomLine = !openSheetMusicDisplay.DrawBottomLine;
                openSheetMusicDisplay.render();
            }
        }

        if (debugReRenderBtn) {
            debugReRenderBtn.onclick = function () {
                rerender();
            }
        }

        if (debugClearBtn) {
            debugClearBtn.onclick = function () {
                openSheetMusicDisplay.clear();
            }
        }

        // Create OSMD object and canvas
        openSheetMusicDisplay = new _src_OpenSheetMusicDisplay_OpenSheetMusicDisplay__WEBPACK_IMPORTED_MODULE_0__.OpenSheetMusicDisplay(canvas, {
            autoResize: true,
            backend: backendType,
            //backend: "canvas",
            //cursorsOptions: [{type: 3, color: "#2bb8cd", alpha: 0.6, follow: true}], // highlight current measure instead of just a small vertical bar over approximate notes
            disableCursor: false,
            drawingParameters: compactMode ? "compact" : "default", // try compact (instead of default)
            drawPartNames: true, // try false
            // drawTitle: false,
            // drawSubtitle: false,
            drawFingerings: true,
            //fingeringPosition: "left", // Above/Below is default. try left or right. experimental: above, below.
            //fingeringPositionFromXML: false, // do this if you want them always left, for example.
            // fingeringInsideStafflines: "true", // default: false. true draws fingerings directly above/below notes
            setWantedStemDirectionByXml: true, // try false, which was previously the default behavior
            // drawUpToMeasureNumber: 3, // draws only up to measure 3, meaning it draws measure 1 to 3 of the piece.
            drawFromMeasureNumber : measureRangeStart,
            drawUpToMeasureNumber : measureRangeEnd,

            //drawMeasureNumbers: false, // disable drawing measure numbers
            //measureNumberInterval: 4, // draw measure numbers only every 4 bars (and at the beginning of a new system)
            useXMLMeasureNumbers: true, // read measure numbers from xml

            // coloring options
            coloringEnabled: true,
            // defaultColorNotehead: "#CC0055", // try setting a default color. default is black (undefined)
            // defaultColorStem: "#BB0099",

            autoBeam: false, // try true, OSMD Function Test AutoBeam sample
            autoBeamOptions: {
                beam_rests: false,
                beam_middle_rests_only: false,
                //groups: [[3,4], [1,1]],
                maintain_stem_directions: false
            },
            pageFormat: pageFormat,
            pageBackgroundColor: pageBackgroundColor,
            renderSingleHorizontalStaffline: singleHorizontalStaffline

            // tupletsBracketed: true, // creates brackets for all tuplets except triplets, even when not set by xml
            // tripletsBracketed: true,
            // tupletsRatioed: true, // unconventional; renders ratios for tuplets (3:2 instead of 3 for triplets)
        });
        openSheetMusicDisplay.TransposeCalculator = new _src_Plugins_Transpose_TransposeCalculator__WEBPACK_IMPORTED_MODULE_4__.TransposeCalculator(); // necessary for using osmd.Sheet.Transpose and osmd.Sheet.Instruments[i].Transpose
        //openSheetMusicDisplay.DrawSkyLine = true;
        //openSheetMusicDisplay.DrawBottomLine = true;
        //openSheetMusicDisplay.setDrawBoundingBox("GraphicalLabel", false);
        openSheetMusicDisplay.setLogLevel('info'); // set this to 'debug' if you want to see more detailed control flow information in console
        document.body.appendChild(canvas);

        window.addEventListener("keydown", function (e) {
            var event = window.event ? window.event : e;
            // left arrow key
            if (event.keyCode === 37) {
                openSheetMusicDisplay.cursor.previous();
            }
            // right arrow key
            if (event.keyCode === 39) {
                openSheetMusicDisplay.cursor.next();
            }
        });
        previousCursorBtn?.addEventListener("click", function () {
            openSheetMusicDisplay.cursor.previous();
        });
        nextCursorBtn.addEventListener("click", function () {
            openSheetMusicDisplay.cursor.next();
        });
        resetCursorBtn.addEventListener("click", function () {
            openSheetMusicDisplay.cursor.reset();
        });
        if (followCursorCheckbox) {
            followCursorCheckbox.onclick = function () {
                openSheetMusicDisplay.FollowCursor = !openSheetMusicDisplay.FollowCursor;
            }
        }
        hideCursorBtn.addEventListener("click", function () {
            if (openSheetMusicDisplay.cursor) {
                openSheetMusicDisplay.cursor.hide();
            } else {
                console.info("Can't hide cursor, as it was disabled (e.g. by drawingParameters).");
            }
        });
        showCursorBtn.addEventListener("click", function () {
            if (openSheetMusicDisplay.cursor) {
                openSheetMusicDisplay.cursor.show();
            } else {
                console.info("Can't show cursor, as it was disabled (e.g. by drawingParameters).");
            }
        });

        backendSelect.addEventListener("change", function (e) {
            var value = e.target.value;
            var createNewOsmd = true;

            if (createNewOsmd) {
                // clears the canvas element
                canvas.innerHTML = "";
                //openSheetMusicDisplay = new OpenSheetMusicDisplay(canvas, { backend: value }); // resets EngravingRules
                openSheetMusicDisplay.setOptions({backend: value});
                openSheetMusicDisplay.setLogLevel('info'); // set this to 'debug' if you want to get more detailed control flow information
            } else {
                // alternative, doesn't work yet, see setOptions():
                openSheetMusicDisplay.setOptions({ backend: value });
            }
            console.log("[OSMD] selectSampleOnChange addEventListener change");
            // selectSampleOnChange();
        });
        if(transposeBtn && transpose){
            transposeBtn.onclick = function(){
                var transposeValue = parseInt(transpose.value);
                openSheetMusicDisplay.Sheet.Transpose = transposeValue;
                openSheetMusicDisplay.updateGraphic();
                rerender();
            }
        }

        // TODO after selectSampleOnChange, the resize handler triggers immediately,
        //   so we render twice at the start of the demo.
        //   maybe delay the first osmd render, e.g. when window ready?
        if (paramOpenUrl) {
            if (openSheetMusicDisplay.getLogLevel() < 2) { // debug or trace
                console.log("[OSMD] selectSampleOnChange with " + paramOpenUrl);
            }
            // DEBUG: cause an error for a certain sample, for testing
            // if (paramOpenUrl.startsWith("Beethoven")) {
            //     paramOpenUrl.causeError();
            // }
            selectSampleOnChange(paramOpenUrl);
        } else {
            if (openSheetMusicDisplay.getLogLevel() < 2) { // debug or trace
                console.log("[OSMD] selectSampleOnChange without param");
            }
            selectSampleOnChange();
        }
    }

    function findGetParameter(parameterName) {
        // special treatment for the openUrl parameter, because different systems attach different arguments to an URL.
        // because of CORS (cross-origin safety restrictions), you can only load an xml file from the same origin (server).

        // test parameter: ?openUrl=https://opensheetmusiceducation.org/index.php?gf-download=2020%2F01%2FJohannSebastianBach_PraeludiumInCDur_BWV846_1.xml&endUrl&form-id=1&field-id=4&hash=c4ba271ef08204a26cbd4cd2d751c53b78f238c25ddbb1f343e1172f2ce2aa53
        //   (enable the console.log at the end of this method for testing)
        // working test parameter in local demo: ?openUrl=OSMD_function_test_all.xml&endUrl
    
        if (parameterName === 'openUrl') {
            let startParameterName = 'openUrl=';
            let endParameterName = '&endUrl';
            let openUrlIndex = location.search.indexOf(startParameterName);
            if (openUrlIndex < 0) {
                return undefined;
            }
            let endIndex = location.search.indexOf(endParameterName) + endParameterName.length;
            if (endIndex < 0) {
                console.log("[OSMD] If using openUrl as a parameter, you have to end it with '&endUrl'. openUrl parameter omitted.");
                return undefined;
            }
            let urlString = location.search.substring(openUrlIndex + startParameterName.length, endIndex - endParameterName.length);
            //console.log("openUrl: " + urlString);
            return urlString;
        }

        let result = undefined;
        let tmp = [];
        location.search
            .substr(1)
            .split('&')
            .forEach(function (item) {
                tmp = item.split('=');
                if (tmp[0] === parameterName) {
                    result = decodeURIComponent(tmp[1]);
                    //console.log('Found param:' + parameterName + ' = ' + result);
                }
            });
        return result;
    }

    function selectBoundingOnChange(evt) {
        var value = evt.target.value;
        openSheetMusicDisplay.DrawBoundingBox = value;
    }

    function selectSampleOnChange(str) {
        error();
        disable();
        var isCustom = typeof str === "string";
        if (!isCustom) {
            if (selectSample) {
                str = sampleFolder + selectSample.value;
            } else {
                if (samples && samples.length > 0) {
                    str = sampleFolder + samples[0];
                } else {
                    return; // no sample to load right now
                }
            }
        }
        // zoom = 1.0;

        setSampleSpecificOptions(str, isCustom);

        openSheetMusicDisplay.load(str).then(
            function () {
                // This gives you access to the osmd object in the console. Do not use in production code
                window.osmd = openSheetMusicDisplay;
                openSheetMusicDisplay.zoom = zoom;
                //openSheetMusicDisplay.Sheet.Transpose = 3; // try transposing between load and first render if you have transpose issues with F# etc
                return openSheetMusicDisplay.render();
            },
            function (e) {
                errorLoadingOrRenderingSheet(e, "rendering");
            }
        ).then(
            function () {
                return onLoadingEnd(isCustom);
            }, function (e) {
                errorLoadingOrRenderingSheet(e, "loading");
                onLoadingEnd(isCustom);
            }
        );
    }

    function setSampleSpecificOptions(str, isCustom) {
        if (!isCustom && str.includes("measuresToDraw")) { // set options for measuresToDraw sample
            // stash previously set range of measures to draw
            if (!measureToDrawRangeNeedsReset) { // only stash once, when measuresToDraw called multiple times in a row
                minMeasureToDrawStashed = openSheetMusicDisplay.EngravingRules.MinMeasureToDrawIndex + 1;
                maxMeasureToDrawStashed = openSheetMusicDisplay.EngravingRules.MaxMeasureToDrawIndex + 1;
            }
            measureToDrawRangeNeedsReset = true;

            // for debugging: draw from a random range of measures
            let minMeasureToDraw = Math.ceil(Math.random() * 15); // measures start at 1 (measureIndex = measure number - 1 elsewhere)
            let maxMeasureToDraw = Math.ceil(Math.random() * 15);
            if (minMeasureToDraw > maxMeasureToDraw) {
                minMeasureToDraw = maxMeasureToDraw;
                let a = minMeasureToDraw;
                maxMeasureToDraw = a;
            }
            //minMeasureToDraw = 1; // set your custom indexes here. Drawing only one measure can be a special case
            //maxMeasureToDraw = 1;
            console.log("drawing measures in the range: [" + minMeasureToDraw + "," + maxMeasureToDraw + "]");
            openSheetMusicDisplay.setOptions({
                drawFromMeasureNumber: minMeasureToDraw,
                drawUpToMeasureNumber: maxMeasureToDraw
            });
        } else if (measureToDrawRangeNeedsReset) { // reset for other samples
            openSheetMusicDisplay.setOptions({
                drawFromMeasureNumber: minMeasureToDrawStashed,
                drawUpToMeasureNumber: maxMeasureToDrawStashed
            });
            measureToDrawRangeNeedsReset = false;
        }

        if (!isCustom && str.includes("Test_Container_height")) {
            drawingParametersStashed = openSheetMusicDisplay.drawingParameters.drawingParametersEnum;
            openSheetMusicDisplay.setOptions({
                drawingParameters: "compacttight"
            });
            drawingParametersNeedsReset = true;
        } else if (drawingParametersNeedsReset) {
            openSheetMusicDisplay.setOptions({
                drawingParameters: drawingParametersStashed
            });
            drawingParametersNeedsReset = false;
        }

        // Enable Boomwhacker-like coloring for OSMD Function Test - Auto-Coloring (Boomwhacker-like, custom color set)
        if (!isCustom && str.includes("auto-custom-coloring")) { // set options for auto coloring sample
            autoCustomColoringOptionNeedsReset = true;
            //openSheetMusicDisplay.setOptions({coloringMode: 1}); // Auto-Coloring with pre-defined colors
            openSheetMusicDisplay.setOptions({
                coloringMode: 2, // custom coloring set. 0 would be XML, 1 autocoloring
                coloringSetCustom: ["#d82c6b", "#F89D15", "#FFE21A", "#4dbd5c", "#009D96", "#43469d", "#76429c", "#ff0000"],
                // last color value of coloringSetCustom is for rest notes
                colorStemsLikeNoteheads: true
            });
        } else if (autoCustomColoringOptionNeedsReset) {
            openSheetMusicDisplay.setOptions({ // set default values. better would be to restore to stashed values, but unnecessarily complex for demo
                coloringMode: 0,
                colorStemsLikeNoteheads: false,
                coloringSetCustom: null
            });
            autoCustomColoringOptionNeedsReset = false;
        }
        if (!isCustom && str.includes("autobeam")) {
            autobeamOptionStashedValue = openSheetMusicDisplay.EngravingRules.AutoBeamNotes; // stash previously set value, to restore later
            autobeamOptionNeedsReset = true;
            openSheetMusicDisplay.setOptions({ autoBeam: true });
        } else if (autobeamOptionNeedsReset) {
            openSheetMusicDisplay.setOptions({ autoBeam: autobeamOptionStashedValue });
            autobeamOptionNeedsReset = false;
        }
        if (!isCustom && str.includes("OSMD_Function_Test_System_and_Page_Breaks")) {
            pageBreaksOptionStashedValue = openSheetMusicDisplay.EngravingRules.NewPageAtXMLNewPageAttribute;
            systemBreaksOptionStashedValue = openSheetMusicDisplay.EngravingRules.NewSystemAtXMLNewSystemAttribute;
            pageBreaksOptionNeedsReset = true;
            openSheetMusicDisplay.setOptions({ newPageFromXML: true, newSystemFromXML: true });
        }
        else if (pageBreaksOptionNeedsReset) {
            openSheetMusicDisplay.setOptions({ newPageFromXML: pageBreaksOptionStashedValue, newSystemFromXML: systemBreaksOptionStashedValue });
            pageBreaksOptionNeedsReset = false;
        }
        if (!isCustom && str.includes("Schubert_An_die_Musik")) { // TODO weird layout bug here with part names. but shouldn't be in score anyways
            drawPartNamesOptionStashedValue = openSheetMusicDisplay.EngravingRules.RenderPartNames;
            drawPartAbbreviationsStashedValue = openSheetMusicDisplay.EngravingRules.RenderPartAbbreviations;
            openSheetMusicDisplay.setOptions({ drawPartNames: false, drawPartAbbreviations: false }); // TODO sets osmd.drawingParameters.DrawPartNames! also check EngravingRules.RenderPartAbbreviations, was false
            drawPartNamesOptionNeedsReset = true;
        } else if (drawPartNamesOptionNeedsReset) {
            openSheetMusicDisplay.setOptions({ drawPartNames: drawPartNamesOptionStashedValue, drawPartAbbreviations: drawPartAbbreviationsStashedValue });
            drawPartNamesOptionNeedsReset = false;
        }
    }

    function errorLoadingOrRenderingSheet(e, loadingOrRenderingString) {
        var errorString = "Error " + loadingOrRenderingString + " sheet: " + e;
        // Always giving a StackTrace might give us more and better error reports.
        // TODO for a release, StackTrace control could be reenabled
        errorString += "\n" + "StackTrace: \n" + e.stack;
        // }
        console.warn(errorString);
    }

    function onLoadingEnd(isCustom) {
        // Remove option from select
        if (!isCustom && custom.parentElement === selectSample) {
            selectSample.removeChild(custom);
        }
        // Enable controls again
        enable();
    }

    function logCanvasSize() {
        for (const zoomDiv of zoomDivs) {
            if (zoomDiv) {
                zoomDiv.innerHTML = Math.floor(zoom * 100.0) + "%";
            }
        }
    }

    function scale() {
        disable();
        window.setTimeout(function () {
            openSheetMusicDisplay.Zoom = zoom;
            openSheetMusicDisplay.render();
            enable();
        }, 0);
    }

    function rerender() {
        disable();
        window.setTimeout(function () {
            if (openSheetMusicDisplay.IsReadyToRender()) {
                openSheetMusicDisplay.render();
            } else {
                console.log("[OSMD demo] Loses context!"); // TODO not sure that this message is reasonable, renders fine anyways. maybe vexflow context lost?
                selectSampleOnChange(); // reload sample e.g. after osmd.clear()
            }
            enable();
        }, 0);
    }

    function error(errString) {
        if (!errString) {
            error_tr.style.display = "none";
        } else {
            console.log("[OSMD demo] error: " + errString)
            err.textContent = errString;
            error_tr.style.display = "";
            canvas.width = canvas.height = 0;
            enable();
        }
    }

    // Enable/Disable Controls
    function disable() {
        document.body.style.opacity = 0.3;
        setDisabledForControls("disabled");
    }

    function enable() {
        document.body.style.opacity = 1;
        setDisabledForControls("");
        logCanvasSize();
    }

    function setDisabledForControls(disabledValue) {
        if (selectSample) {
            selectSample.disabled = disabledValue;
        }
        for (const zoomIn of zoomIns) {
            if (zoomIn) {
                zoomIn.disabled = disabledValue;
            }
        }
        for (const zoomOut of zoomOuts) {
            if (zoomOut) {
                zoomOut.disabled = disabledValue;
            }
        }
    }

    /**
     * Creates a Pdf of the currently rendered MusicXML
     * @param pdfName if no name is given, the composer and title of the piece will be used
     */
    async function createPdf(pdfName) {
        if (openSheetMusicDisplay.backendType !== _src_OpenSheetMusicDisplay_OSMDOptions__WEBPACK_IMPORTED_MODULE_1__.BackendType.SVG) {
            console.log("[OSMD] createPdf(): Warning: createPDF is only supported for SVG background for now, not for Canvas." +
                " Please use osmd.setOptions({backendType: SVG}).");
            return;
        }

        if (pdfName === undefined) {
            pdfName = openSheetMusicDisplay.sheet.FullNameString + ".pdf";
        }

        const backends = openSheetMusicDisplay.drawer.Backends;
        let svgElement = backends[0].getSvgElement();

        let pageWidth = 210;
        let pageHeight = 297;
        const engravingRulesPageFormat = openSheetMusicDisplay.rules.PageFormat;
        if (engravingRulesPageFormat && !engravingRulesPageFormat.IsUndefined) {
            pageWidth = engravingRulesPageFormat.width;
            pageHeight = engravingRulesPageFormat.height;
        } else {
            pageHeight = pageWidth * svgElement.clientHeight / svgElement.clientWidth;
        }

        const orientation = pageHeight > pageWidth ? "p" : "l";
        // create a new jsPDF instance
        const pdf = new _node_modules_jspdf_dist_jspdf_es_min__WEBPACK_IMPORTED_MODULE_2__.jsPDF({
            orientation: orientation,
            unit: "mm",
            format: [pageWidth, pageHeight]
        });
        //const scale = pageWidth / svgElement.clientWidth;
        for (let idx = 0, len = backends.length; idx < len; ++idx) {
            if (idx > 0) {
                pdf.addPage();
            }
            svgElement = backends[idx].getSvgElement();
            
            if (!pdf.svg && !_node_modules_svg2pdf_js_dist_svg2pdf_umd_min__WEBPACK_IMPORTED_MODULE_3__) { // this line also serves to make the svg2pdf not unused, though it's still necessary
                // we need svg2pdf to have pdf.svg defined
                console.log("svg2pdf missing, necessary for jspdf.svg().");
                return;
            }
            await pdf.svg(svgElement, {
                x: 0,
                y: 0,
                width: pageWidth,
                height: pageHeight,
            })
        }

        pdf.save(pdfName); // save/download the created pdf
        //pdf.output("pdfobjectnewwindow", {filename: "osmd_createPDF.pdf"}); // open PDF in new tab/window

        // note that using jspdf with svg2pdf creates unnecessary console warnings "AcroForm-Classes are not populated into global-namespace..."
        // this will hopefully be fixed with a new jspdf release, see https://github.com/yWorks/jsPDF/pull/32
    }

    // Register events: load, drag&drop
    window.addEventListener("load", function () {
        init();
    });
    window.addEventListener("dragenter", function (event) {
        event.preventDefault();
        disable();
    });
    window.addEventListener("dragover", function (event) {
        event.preventDefault();
    });
    window.addEventListener("dragleave", function (event) {
        enable();
    });
    window.addEventListener("drop", function (event) {
        event.preventDefault();
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length === 0) {
            return;
        }
        // Add "Custom..." score
        selectSample.appendChild(custom);
        custom.selected = "selected";
        // Read dragged file
        var reader = new FileReader();
        reader.onload = function (res) {
            selectSampleOnChange(res.target.result);
        };
        var filename = event.dataTransfer.files[0].name;
        if (filename.toLowerCase().indexOf(".xml") > 0
            || filename.toLowerCase().indexOf(".musicxml") > 0) {
            reader.readAsText(event.dataTransfer.files[0]);
        } else if (event.dataTransfer.files[0].name.toLowerCase().indexOf(".mxl") > 0) {
            reader.readAsBinaryString(event.dataTransfer.files[0]);
        }
        else {
            alert("No vaild .xml/.mxl/.musicxml file!");
        }
    });
}());

})();

/******/ })()
;